{"contracts": {"contracts/BattlePick.sol": {"BattlePick": {"abi": [{"constant": true, "inputs": [], "name": "playersTurn", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_winningPlayer", "type": "address"}], "name": "endGame", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayersCurrentCardNumber", "outputs": [{"name": "", "type": "uint8"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "move", "type": "uint8"}], "name": "turn", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "desiredCards", "type": "uint256[5]"}], "name": "pickPayerCards", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "playerCards", "type": "tuple[]"}], "name": "calcMaxSpeed", "outputs": [{"name": "", "type": "uint16"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "player2", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "winningPlayer", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayerDeck", "outputs": [{"components": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "playerCards", "type": "tuple[]"}, {"name": "currentCard", "type": "uint8"}], "name": "", "type": "tuple"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "player1", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "cardsPicked", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "address"}], "name": "playerDecks", "outputs": [{"name": "currentCard", "type": "uint8"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayerCurrentCard", "outputs": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "", "type": "tuple"}], "payable": false, "stateMutability": "view", "type": "function"}, {"inputs": [{"name": "_player1", "type": "address"}, {"name": "_player2", "type": "address"}, {"name": "cardsAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "move", "type": "uint8"}, {"indexed": false, "name": "attachCardId", "type": "uint256"}, {"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "indexed": false, "name": "playerDefenceCard", "type": "tuple"}, {"indexed": false, "name": "nextPlayer", "type": "address"}], "name": "Turn", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "winningPlayer", "type": "address"}], "name": "EndGame", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "desiredCards", "type": "uint256[5]"}, {"indexed": false, "name": "pickedCards", "type": "uint256[3]"}], "name": "PickPayerCards", "type": "event"}], "evm": {"assembly": "    /* \"contracts/BattlePick.sol\":193:6353  contract BattlePick is PlayerCardsPick {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/BattlePick.sol\":542:683  constructor(address _player1, address _player2, address cardsAddress) public... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/BattlePick.sol\":542:683  constructor(address _player1, address _player2, address cardsAddress) public... */\n  pop\n  mload(0x40)\n  0x60\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  dup1\n  0x40\n  mstore\n  tag_2\n  swap2\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_3)\ntag_2:\n    /* \"contracts/PlayerCardsPick.sol\":760:767  player1 */\n  0x01\n    /* \"contracts/PlayerCardsPick.sol\":760:778  player1 = _player1 */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap5\n  dup6\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/PlayerCardsPick.sol\":788:795  player2 */\n  0x02\n    /* \"contracts/PlayerCardsPick.sol\":788:806  player2 = _player2 */\n  dup1\n  sload\n  swap4\n  dup6\n  and\n  swap4\n  dup3\n  and\n  swap4\n  swap1\n  swap4\n  or\n  swap1\n  swap3\n  sstore\n  0x00\n    /* \"contracts/PlayerCardsPick.sol\":817:852  cardsContract = Cards(cardsAddress) */\n  dup1\n  sload\n  swap2\n  swap1\n  swap4\n  and\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/BattlePick.sol\":193:6353  contract BattlePick is PlayerCardsPick {... */\n  jump(tag_21)\n    /* \"--CODEGEN--\":5:127   */\ntag_10:\n  0x00\n    /* \"--CODEGEN--\":83:122   */\n  tag_11\n    /* \"--CODEGEN--\":114:120   */\n  dup3\n    /* \"--CODEGEN--\":108:121   */\n  mload\n    /* \"--CODEGEN--\":83:122   */\n  jump(tag_12)\ntag_11:\n    /* \"--CODEGEN--\":74:122   */\n  swap4\n    /* \"--CODEGEN--\":68:127   */\n  swap3\n  pop\n  pop\n  pop\n  jump\n    /* \"--CODEGEN--\":134:669   */\ntag_3:\n  0x00\n  dup1\n  0x00\n    /* \"--CODEGEN--\":283:285   */\n  0x60\n    /* \"--CODEGEN--\":271:280   */\n  dup5\n    /* \"--CODEGEN--\":262:269   */\n  dup7\n    /* \"--CODEGEN--\":258:281   */\n  sub\n    /* \"--CODEGEN--\":254:286   */\n  slt\n    /* \"--CODEGEN--\":251:253   */\n  iszero\n  tag_14\n  jumpi\n    /* \"--CODEGEN--\":299:300   */\n  0x00\n    /* \"--CODEGEN--\":296:297   */\n  dup1\n    /* \"--CODEGEN--\":289:301   */\n  revert\n    /* \"--CODEGEN--\":251:253   */\ntag_14:\n    /* \"--CODEGEN--\":334:335   */\n  0x00\n    /* \"--CODEGEN--\":351:415   */\n  tag_15\n    /* \"--CODEGEN--\":407:414   */\n  dup7\n    /* \"--CODEGEN--\":387:396   */\n  dup7\n    /* \"--CODEGEN--\":351:415   */\n  jump(tag_10)\ntag_15:\n    /* \"--CODEGEN--\":341:415   */\n  swap4\n  pop\n    /* \"--CODEGEN--\":313:421   */\n  pop\n    /* \"--CODEGEN--\":452:454   */\n  0x20\n    /* \"--CODEGEN--\":470:534   */\n  tag_16\n    /* \"--CODEGEN--\":526:533   */\n  dup7\n    /* \"--CODEGEN--\":517:523   */\n  dup3\n    /* \"--CODEGEN--\":506:515   */\n  dup8\n    /* \"--CODEGEN--\":502:524   */\n  add\n    /* \"--CODEGEN--\":470:534   */\n  jump(tag_10)\ntag_16:\n    /* \"--CODEGEN--\":460:534   */\n  swap3\n  pop\n    /* \"--CODEGEN--\":431:540   */\n  pop\n    /* \"--CODEGEN--\":571:573   */\n  0x40\n    /* \"--CODEGEN--\":589:653   */\n  tag_17\n    /* \"--CODEGEN--\":645:652   */\n  dup7\n    /* \"--CODEGEN--\":636:642   */\n  dup3\n    /* \"--CODEGEN--\":625:634   */\n  dup8\n    /* \"--CODEGEN--\":621:643   */\n  add\n    /* \"--CODEGEN--\":589:653   */\n  jump(tag_10)\ntag_17:\n    /* \"--CODEGEN--\":579:653   */\n  swap2\n  pop\n    /* \"--CODEGEN--\":550:659   */\n  pop\n    /* \"--CODEGEN--\":245:669   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\n    /* \"--CODEGEN--\":676:781   */\ntag_12:\n  0x00\n    /* \"--CODEGEN--\":745:776   */\n  tag_19\n    /* \"--CODEGEN--\":770:775   */\n  dup3\n    /* \"--CODEGEN--\":745:776   */\n  jump(tag_20)\ntag_19:\n    /* \"--CODEGEN--\":734:776   */\n  swap3\n    /* \"--CODEGEN--\":728:781   */\n  swap2\n  pop\n  pop\n  jump\n    /* \"--CODEGEN--\":788:916   */\ntag_20:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"--CODEGEN--\":857:911   */\n  and\n  swap1\n    /* \"--CODEGEN--\":840:916   */\n  jump\ntag_21:\n    /* \"contracts/BattlePick.sol\":193:6353  contract BattlePick is PlayerCardsPick {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/BattlePick.sol\":193:6353  contract BattlePick is PlayerCardsPick {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/BattlePick.sol\":193:6353  contract BattlePick is PlayerCardsPick {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x59a5f12d\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xd30895e4\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xd30895e4\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xd7eb798c\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xe4b6c992\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xfe145fbd\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x59a5f12d\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x5ad39846\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xc0d35449\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_16:\n      dup1\n      0x06880689\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2a035b6c\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2af1e2f8\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x2e535940\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x48373963\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x4ed61446\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/PlayerCardsPick.sol\":640:666  address public playersTurn */\n    tag_3:\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_21)\n    tag_20:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BattlePick.sol\":6184:6351  function endGame(address _winningPlayer) public {... */\n    tag_4:\n      tag_22\n      tag_23\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_23:\n      tag_25\n      jump\t// in\n    tag_22:\n      stop\n        /* \"contracts/PlayerCardsPick.sol\":1507:1643  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n    tag_5:\n      tag_26\n      tag_27\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_27:\n      tag_28\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_30)\n        /* \"contracts/BattlePick.sol\":689:4695  function turn(Move move) public {... */\n    tag_6:\n      tag_22\n      tag_32\n      calldatasize\n      0x04\n      jump(tag_33)\n    tag_32:\n      tag_34\n      jump\t// in\n        /* \"contracts/PlayerCardsPick.sol\":1777:2840  function pickPayerCards(uint[5] memory desiredCards) public {... */\n    tag_7:\n      tag_22\n      tag_36\n      calldatasize\n      0x04\n      jump(tag_37)\n    tag_36:\n      tag_38\n      jump\t// in\n        /* \"contracts/PlayerCardsPick.sol\":3358:3740  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n    tag_8:\n      tag_39\n      tag_40\n      calldatasize\n      0x04\n      jump(tag_41)\n    tag_40:\n      tag_42\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_44)\n        /* \"contracts/PlayerCardsPick.sol\":527:549  address public player2 */\n    tag_9:\n      tag_18\n      tag_46\n      jump\t// in\n        /* \"contracts/BattlePick.sol\":364:392  address public winningPlayer */\n    tag_10:\n      tag_18\n      tag_49\n      jump\t// in\n        /* \"contracts/PlayerCardsPick.sol\":1649:1771  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n    tag_11:\n      tag_51\n      tag_52\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_52:\n      tag_53\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_55)\n        /* \"contracts/PlayerCardsPick.sol\":499:521  address public player1 */\n    tag_12:\n      tag_18\n      tag_57\n      jump\t// in\n        /* \"contracts/PlayerCardsPick.sol\":611:634  bool public cardsPicked */\n    tag_13:\n      tag_59\n      tag_60\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_62)\n        /* \"contracts/PlayerCardsPick.sol\":555:605  mapping (address => PlayerDeck) public playerDecks */\n    tag_14:\n      tag_26\n      tag_64\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_64:\n      tag_65\n      jump\t// in\n        /* \"contracts/PlayerCardsPick.sol\":1286:1501  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n    tag_15:\n      tag_67\n      tag_68\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_68:\n      tag_69\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_71)\n        /* \"contracts/PlayerCardsPick.sol\":640:666  address public playersTurn */\n    tag_19:\n      sload(0x04)\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/BattlePick.sol\":6184:6351  function endGame(address _winningPlayer) public {... */\n    tag_25:\n        /* \"contracts/BattlePick.sol\":6242:6255  winningPlayer */\n      0x05\n        /* \"contracts/BattlePick.sol\":6242:6272  winningPlayer = _winningPlayer */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      dup2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap2\n      dup3\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":6282:6293  playersTurn */\n      0x04\n        /* \"contracts/BattlePick.sol\":6282:6306  playersTurn = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      and\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":6322:6344  EndGame(winningPlayer) */\n      mload(0x40)\n      0xc50f4648fa14be3ee68f160a224cc5d77eeeac58ea500c6fb63fac6788afb0be\n      swap3\n      tag_73\n      swap3\n        /* \"contracts/BattlePick.sol\":6330:6343  winningPlayer */\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":6322:6344  EndGame(winningPlayer) */\n      jump(tag_21)\n    tag_73:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/BattlePick.sol\":6184:6351  function endGame(address _winningPlayer) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":1507:1643  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n    tag_28:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":1605:1624  playerDecks[player] */\n      and\n        /* \"contracts/PlayerCardsPick.sol\":1581:1586  uint8 */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":1605:1624  playerDecks[player] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1605:1616  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":1605:1624  playerDecks[player] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1605:1636  playerDecks[player].currentCard */\n      0x01\n      add\n      sload\n      0xff\n      and\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":1507:1643  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n      jump\t// out\n        /* \"contracts/BattlePick.sol\":689:4695  function turn(Move move) public {... */\n    tag_34:\n        /* \"contracts/BattlePick.sol\":739:750  playersTurn */\n      sload(0x04)\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/BattlePick.sol\":754:764  msg.sender */\n      caller\n        /* \"contracts/BattlePick.sol\":739:764  playersTurn == msg.sender */\n      eq\n        /* \"contracts/BattlePick.sol\":731:782  require(playersTurn == msg.sender, \"Not your turn\") */\n      tag_76\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_78)\n    tag_77:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_76:\n        /* \"contracts/BattlePick.sol\":942:949  player1 */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/BattlePick.sol\":892:927  PlayerCard storage playerAttackCard */\n      0x00\n        /* \"contracts/BattlePick.sol\":930:950  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/BattlePick.sol\":930:941  playerDecks */\n      0x03\n        /* \"contracts/BattlePick.sol\":930:950  playerDecks[player1] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/BattlePick.sol\":963:995  playerDecks[player1].currentCard */\n      swap2\n      dup3\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":930:996  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      dup3\n      sload\n        /* \"contracts/BattlePick.sol\":892:927  PlayerCard storage playerAttackCard */\n      swap2\n      swap3\n        /* \"contracts/BattlePick.sol\":930:950  playerDecks[player1] */\n      swap2\n        /* \"contracts/BattlePick.sol\":963:995  playerDecks[player1].currentCard */\n      0xff\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":930:996  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      dup2\n      lt\n      tag_79\n      jumpi\n      invalid\n    tag_79:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      0x02\n        /* \"contracts/BattlePick.sol\":1057:1064  player2 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/BattlePick.sol\":1045:1065  playerDecks[player2] */\n      dup6\n      mstore\n        /* \"contracts/BattlePick.sol\":1045:1056  playerDecks */\n      0x03\n        /* \"contracts/BattlePick.sol\":1045:1065  playerDecks[player2] */\n      swap1\n      swap3\n      mstore\n      0x40\n      dup5\n      keccak256\n        /* \"contracts/BattlePick.sol\":1057:1064  player2 */\n      0x01\n        /* \"contracts/BattlePick.sol\":1078:1110  playerDecks[player2].currentCard */\n      dup2\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":1045:1111  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      dup2\n      sload\n        /* \"contracts/BattlePick.sol\":930:996  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      swap4\n      swap1\n      swap5\n      mul\n      swap1\n      swap2\n      add\n      swap5\n      pop\n        /* \"contracts/BattlePick.sol\":1045:1065  playerDecks[player2] */\n      swap2\n        /* \"contracts/BattlePick.sol\":1078:1110  playerDecks[player2].currentCard */\n      0xff\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":1045:1111  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      dup2\n      lt\n      tag_81\n      jumpi\n      invalid\n    tag_81:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      0x02\n        /* \"contracts/BattlePick.sol\":1166:1173  player2 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"contracts/BattlePick.sol\":1154:1174  playerDecks[player2] */\n      dup1\n      dup8\n      mstore\n        /* \"contracts/BattlePick.sol\":1154:1165  playerDecks */\n      0x03\n        /* \"contracts/BattlePick.sol\":1154:1174  playerDecks[player2] */\n      swap1\n      swap5\n      mstore\n      0x40\n      swap1\n      swap6\n      keccak256\n        /* \"contracts/BattlePick.sol\":1460:1471  playersTurn */\n      sload(0x04)\n        /* \"contracts/BattlePick.sol\":1045:1111  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      swap5\n      swap1\n      swap2\n      mul\n      swap1\n      swap2\n      add\n      swap5\n      pop\n        /* \"contracts/BattlePick.sol\":1154:1174  playerDecks[player2] */\n      swap3\n        /* \"contracts/BattlePick.sol\":1166:1173  player2 */\n      swap1\n      swap2\n      0x0100\n        /* \"contracts/BattlePick.sol\":1460:1471  playersTurn */\n      swap1\n      div\n      and\n        /* \"contracts/BattlePick.sol\":1460:1482  playersTurn == player2 */\n      dup2\n      eq\n        /* \"contracts/BattlePick.sol\":1456:1886  if (playersTurn == player2) {... */\n      iszero\n      tag_83\n      jumpi\n        /* \"contracts/BattlePick.sol\":1529:1536  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/BattlePick.sol\":1517:1537  playerDecks[player2] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/BattlePick.sol\":1517:1528  playerDecks */\n      0x03\n        /* \"contracts/BattlePick.sol\":1517:1537  playerDecks[player2] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/BattlePick.sol\":1529:1536  player2 */\n      0x01\n        /* \"contracts/BattlePick.sol\":1550:1582  playerDecks[player2].currentCard */\n      dup2\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":1517:1583  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      dup2\n      sload\n        /* \"contracts/BattlePick.sol\":1550:1582  playerDecks[player2].currentCard */\n      0xff\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":1517:1583  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      dup2\n      lt\n      tag_84\n      jumpi\n      invalid\n    tag_84:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/BattlePick.sol\":1629:1636  player1 */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/BattlePick.sol\":1617:1637  playerDecks[player1] */\n      dup6\n      mstore\n        /* \"contracts/BattlePick.sol\":1617:1628  playerDecks */\n      0x03\n        /* \"contracts/BattlePick.sol\":1617:1637  playerDecks[player1] */\n      swap1\n      swap3\n      mstore\n      0x40\n      swap1\n      swap4\n      keccak256\n        /* \"contracts/BattlePick.sol\":1650:1682  playerDecks[player1].currentCard */\n      swap1\n      dup2\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":1617:1683  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      dup2\n      sload\n        /* \"contracts/BattlePick.sol\":1517:1583  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      0x02\n      swap1\n      swap4\n      mul\n      swap1\n      swap4\n      add\n      swap7\n      pop\n        /* \"contracts/BattlePick.sol\":1617:1637  playerDecks[player1] */\n      swap2\n        /* \"contracts/BattlePick.sol\":1650:1682  playerDecks[player1].currentCard */\n      0xff\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":1617:1683  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      dup2\n      lt\n      tag_86\n      jumpi\n      invalid\n    tag_86:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/BattlePick.sol\":1723:1730  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/BattlePick.sol\":1711:1731  playerDecks[player1] */\n      dup1\n      dup6\n      mstore\n        /* \"contracts/BattlePick.sol\":1711:1722  playerDecks */\n      0x03\n        /* \"contracts/BattlePick.sol\":1711:1731  playerDecks[player1] */\n      swap1\n      swap3\n      mstore\n      0x40\n      swap1\n      swap4\n      keccak256\n        /* \"contracts/BattlePick.sol\":1617:1683  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      0x02\n      swap1\n      swap3\n      mul\n      swap1\n      swap3\n      add\n      swap5\n      pop\n        /* \"contracts/BattlePick.sol\":1711:1731  playerDecks[player1] */\n      swap3\n      pop\n        /* \"contracts/BattlePick.sol\":1723:1730  player1 */\n      swap1\n      pop\n        /* \"contracts/BattlePick.sol\":1456:1886  if (playersTurn == player2) {... */\n      jump(tag_89)\n    tag_83:\n        /* \"contracts/BattlePick.sol\":1801:1808  player1 */\n      sload(0x01)\n        /* \"contracts/BattlePick.sol\":1786:1797  playersTurn */\n      sload(0x04)\n        /* \"contracts/BattlePick.sol\":1801:1808  player1 */\n      0x0100\n        /* \"contracts/BattlePick.sol\":1786:1797  playersTurn */\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"contracts/BattlePick.sol\":1801:1808  player1 */\n      swap2\n      and\n        /* \"contracts/BattlePick.sol\":1786:1808  playersTurn != player1 */\n      eq\n        /* \"contracts/BattlePick.sol\":1782:1886  if (playersTurn != player1) {... */\n      tag_89\n      jumpi\n        /* \"contracts/BattlePick.sol\":1824:1875  revert('players turn does not equal either player') */\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_91)\n        /* \"contracts/BattlePick.sol\":1782:1886  if (playersTurn != player1) {... */\n    tag_89:\n        /* \"contracts/BattlePick.sol\":1918:1946  uint16 remainingAttackAmount */\n      0x00\n      dup1\n        /* \"contracts/BattlePick.sol\":1960:1964  move */\n      dup7\n        /* \"contracts/BattlePick.sol\":1960:1979  move == Move.Attack */\n      0x02\n      dup2\n      gt\n      iszero\n      tag_93\n      jumpi\n      invalid\n    tag_93:\n      eq\n        /* \"contracts/BattlePick.sol\":1956:4564  if (move == Move.Attack) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/BattlePick.sol\":2019:2040  playerAttackCard.mana */\n      0x01\n      dup1\n      dup7\n      add\n      dup1\n      sload\n      0xffff\n      shl(0x20, 0x01)\n      dup1\n      dup4\n      div\n      dup3\n      and\n        /* \"contracts/BattlePick.sol\":2019:2044  playerAttackCard.mana + 1 */\n      swap1\n      swap5\n      add\n        /* \"contracts/BattlePick.sol\":1995:2044  playerAttackCard.mana = playerAttackCard.mana + 1 */\n      dup2\n      and\n      swap1\n      swap4\n      mul\n      not(0xffff00000000)\n      swap1\n      swap2\n      and\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":2125:2188  attack(playerAttackCard.attack, playerDefenceCard, defenceDeck) */\n      tag_95\n      swap2\n      shl(0x30, 0x01)\n        /* \"contracts/BattlePick.sol\":2132:2155  playerAttackCard.attack */\n      swap1\n      swap2\n      div\n      and\n        /* \"contracts/BattlePick.sol\":2157:2174  playerDefenceCard */\n      dup6\n        /* \"contracts/BattlePick.sol\":2176:2187  defenceDeck */\n      dup6\n        /* \"contracts/BattlePick.sol\":2125:2131  attack */\n      tag_96\n        /* \"contracts/BattlePick.sol\":2125:2188  attack(playerAttackCard.attack, playerDefenceCard, defenceDeck) */\n      jump\t// in\n    tag_95:\n        /* \"contracts/BattlePick.sol\":1956:4564  if (move == Move.Attack) {... */\n      jump(tag_131)\n    tag_94:\n        /* \"contracts/BattlePick.sol\":2217:2235  Move.SpecialAttack */\n      0x01\n        /* \"contracts/BattlePick.sol\":2209:2213  move */\n      dup7\n        /* \"contracts/BattlePick.sol\":2209:2235  move == Move.SpecialAttack */\n      0x02\n      dup2\n      gt\n      iszero\n      tag_99\n      jumpi\n      invalid\n    tag_99:\n      eq\n        /* \"contracts/BattlePick.sol\":2205:4564  if (move == Move.SpecialAttack) {... */\n      iszero\n      tag_100\n      jumpi\n        /* \"contracts/BattlePick.sol\":2325:2355  playerAttackCard.specialAttack */\n      0x01\n      dup6\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":2318:2388  attack(playerAttackCard.specialAttack, playerDefenceCard, defenceDeck) */\n      tag_95\n      swap1\n      shl(0x40, 0x01)\n        /* \"contracts/BattlePick.sol\":2325:2355  playerAttackCard.specialAttack */\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/BattlePick.sol\":2357:2374  playerDefenceCard */\n      dup6\n        /* \"contracts/BattlePick.sol\":2376:2387  defenceDeck */\n      dup6\n        /* \"contracts/BattlePick.sol\":2318:2324  attack */\n      tag_96\n        /* \"contracts/BattlePick.sol\":2318:2388  attack(playerAttackCard.specialAttack, playerDefenceCard, defenceDeck) */\n      jump\t// in\n        /* \"contracts/BattlePick.sol\":2205:4564  if (move == Move.SpecialAttack) {... */\n    tag_100:\n        /* \"contracts/BattlePick.sol\":2418:2430  Move.Ability */\n      0x02\n        /* \"contracts/BattlePick.sol\":2410:2414  move */\n      dup7\n        /* \"contracts/BattlePick.sol\":2410:2430  move == Move.Ability */\n      0x02\n      dup2\n      gt\n      iszero\n      tag_104\n      jumpi\n      invalid\n    tag_104:\n      eq\n        /* \"contracts/BattlePick.sol\":2406:4564  if (move == Move.Ability) {... */\n      iszero\n      tag_105\n      jumpi\n        /* \"contracts/BattlePick.sol\":2447:2469  Card memory attackCard */\n      tag_106\n      tag_107\n      jump\t// in\n    tag_106:\n        /* \"contracts/BattlePick.sol\":2472:2485  cardsContract */\n      sload(0x00)\n        /* \"contracts/BattlePick.sol\":2494:2517  playerAttackCard.cardId */\n      dup7\n      sload\n        /* \"contracts/BattlePick.sol\":2472:2518  cardsContract.getCard(playerAttackCard.cardId) */\n      mload(0x40)\n      mul(0x48c46989, shl(0xe1, 0x01))\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/BattlePick.sol\":2472:2485  cardsContract */\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/BattlePick.sol\":2472:2493  cardsContract.getCard */\n      0x9188d312\n      swap2\n        /* \"contracts/BattlePick.sol\":2472:2518  cardsContract.getCard(playerAttackCard.cardId) */\n      tag_108\n      swap2\n      0x04\n      add\n      jump(tag_109)\n    tag_108:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_110\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_110:\n        /* \"contracts/BattlePick.sol\":2472:2518  cardsContract.getCard(playerAttackCard.cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_111\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_111:\n        /* \"contracts/BattlePick.sol\":2472:2518  cardsContract.getCard(playerAttackCard.cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/BattlePick.sol\":2472:2518  cardsContract.getCard(playerAttackCard.cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/BattlePick.sol\":2472:2518  cardsContract.getCard(playerAttackCard.cardId) */\n      tag_112\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_113)\n    tag_112:\n        /* \"contracts/BattlePick.sol\":2570:2588  attackCard.ability */\n      0x20\n      dup2\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":2570:2597  attackCard.ability.manaCost */\n      0x60\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":2541:2562  playerAttackCard.mana */\n      0x01\n      dup1\n      dup10\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":2447:2518  Card memory attackCard = cardsContract.getCard(playerAttackCard.cardId) */\n      swap3\n      swap4\n      pop\n        /* \"contracts/BattlePick.sol\":2541:2597  playerAttackCard.mana + 1 >= attackCard.ability.manaCost */\n      0xffff\n      swap2\n      dup3\n      and\n      shl(0x20, 0x01)\n        /* \"contracts/BattlePick.sol\":2541:2562  playerAttackCard.mana */\n      swap1\n      swap4\n      div\n      dup3\n      and\n        /* \"contracts/BattlePick.sol\":2541:2566  playerAttackCard.mana + 1 */\n      add\n        /* \"contracts/BattlePick.sol\":2541:2597  playerAttackCard.mana + 1 >= attackCard.ability.manaCost */\n      and\n      lt\n      iszero\n        /* \"contracts/BattlePick.sol\":2533:2617  require(playerAttackCard.mana + 1 >= attackCard.ability.manaCost, 'Not enough mana') */\n      tag_114\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_116)\n    tag_114:\n        /* \"contracts/BattlePick.sol\":2723:2744  playerAttackCard.mana */\n      0x01\n      dup7\n      dup2\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":2750:2768  attackCard.ability */\n      0x20\n      dup4\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":2750:2777  attackCard.ability.manaCost */\n      0x60\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":2632:2648  uint16 remainder */\n      0x00\n      swap3\n        /* \"contracts/BattlePick.sol\":2703:2778  MathUtils.subToZero(playerAttackCard.mana + 1, attackCard.ability.manaCost) */\n      tag_117\n      swap3\n      shl(0x20, 0x01)\n        /* \"contracts/BattlePick.sol\":2723:2744  playerAttackCard.mana */\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/BattlePick.sol\":2723:2748  playerAttackCard.mana + 1 */\n      add\n      swap1\n        /* \"contracts/BattlePick.sol\":2703:2722  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattlePick.sol\":2703:2778  MathUtils.subToZero(playerAttackCard.mana + 1, attackCard.ability.manaCost) */\n      jump\t// in\n    tag_117:\n        /* \"contracts/BattlePick.sol\":2667:2688  playerAttackCard.mana */\n      0x01\n      dup10\n      add\n        /* \"contracts/BattlePick.sol\":2666:2778  (playerAttackCard.mana, remainder) = MathUtils.subToZero(playerAttackCard.mana + 1, attackCard.ability.manaCost) */\n      dup1\n      sload\n      0xffff\n      swap1\n      swap4\n      and\n      shl(0x20, 0x01)\n      mul\n      not(0xffff00000000)\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      sstore\n      swap1\n      pop\n        /* \"contracts/BattlePick.sol\":2793:2836  Cards.CardProperties memory opponentAbility */\n      tag_119\n      tag_120\n      jump\t// in\n    tag_119:\n      pop\n        /* \"contracts/BattlePick.sol\":2839:2857  attackCard.ability */\n      0x20\n      dup1\n      dup4\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":2839:2866  attackCard.ability.opponent */\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":2880:2921  Cards.CardProperties memory playerAbility */\n      tag_121\n      tag_120\n      jump\t// in\n    tag_121:\n      pop\n        /* \"contracts/BattlePick.sol\":2924:2942  attackCard.ability */\n      0x20\n      dup4\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":2924:2949  attackCard.ability.player */\n      0x40\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":3069:3093  playerDefenceCard.health */\n      0x01\n      dup9\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":3095:3117  opponentAbility.health */\n      dup3\n      mload\n        /* \"contracts/BattlePick.sol\":3049:3118  MathUtils.subToZero(playerDefenceCard.health, opponentAbility.health) */\n      tag_122\n      swap2\n        /* \"contracts/BattlePick.sol\":3069:3093  playerDefenceCard.health */\n      0xffff\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":3049:3068  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattlePick.sol\":3049:3118  MathUtils.subToZero(playerDefenceCard.health, opponentAbility.health) */\n      jump\t// in\n    tag_122:\n        /* \"contracts/BattlePick.sol\":3010:3034  playerDefenceCard.health */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattlePick.sol\":3009:3118  (playerDefenceCard.health, remainder) = MathUtils.subToZero(playerDefenceCard.health, opponentAbility.health) */\n      dup1\n      sload\n      not(0xffff)\n      and\n      0xffff\n      swap4\n      dup5\n      and\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":3220:3243  opponentAbility.defence */\n      0x20\n      dup6\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":3009:3118  (playerDefenceCard.health, remainder) = MathUtils.subToZero(playerDefenceCard.health, opponentAbility.health) */\n      swap2\n      swap6\n      pop\n        /* \"contracts/BattlePick.sol\":3173:3244  MathUtils.subToZero(playerDefenceCard.defence, opponentAbility.defence) */\n      tag_123\n      swap3\n        /* \"contracts/BattlePick.sol\":3193:3218  playerDefenceCard.defence */\n      0x010000\n      swap1\n      swap2\n      div\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":3173:3192  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattlePick.sol\":3173:3244  MathUtils.subToZero(playerDefenceCard.defence, opponentAbility.defence) */\n      jump\t// in\n    tag_123:\n        /* \"contracts/BattlePick.sol\":3133:3158  playerDefenceCard.defence */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattlePick.sol\":3132:3244  (playerDefenceCard.defence, remainder) = MathUtils.subToZero(playerDefenceCard.defence, opponentAbility.defence) */\n      dup1\n      sload\n      not(0xffff0000)\n      and\n      0x010000\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":3340:3360  opponentAbility.mana */\n      0x40\n      dup6\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":3132:3244  (playerDefenceCard.defence, remainder) = MathUtils.subToZero(playerDefenceCard.defence, opponentAbility.defence) */\n      swap2\n      swap6\n      pop\n        /* \"contracts/BattlePick.sol\":3296:3361  MathUtils.subToZero(playerDefenceCard.mana, opponentAbility.mana) */\n      tag_124\n      swap3\n      shl(0x20, 0x01)\n        /* \"contracts/BattlePick.sol\":3316:3338  playerDefenceCard.mana */\n      swap1\n      swap2\n      div\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":3296:3315  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattlePick.sol\":3296:3361  MathUtils.subToZero(playerDefenceCard.mana, opponentAbility.mana) */\n      jump\t// in\n    tag_124:\n        /* \"contracts/BattlePick.sol\":3259:3281  playerDefenceCard.mana */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattlePick.sol\":3258:3361  (playerDefenceCard.mana, remainder) = MathUtils.subToZero(playerDefenceCard.mana, opponentAbility.mana) */\n      dup1\n      sload\n      not(0xffff00000000)\n      and\n      shl(0x20, 0x01)\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":3461:3483  opponentAbility.attack */\n      0x60\n      dup6\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":3258:3361  (playerDefenceCard.mana, remainder) = MathUtils.subToZero(playerDefenceCard.mana, opponentAbility.mana) */\n      swap2\n      swap6\n      pop\n        /* \"contracts/BattlePick.sol\":3415:3484  MathUtils.subToZero(playerDefenceCard.attack, opponentAbility.attack) */\n      tag_125\n      swap3\n      shl(0x30, 0x01)\n        /* \"contracts/BattlePick.sol\":3435:3459  playerDefenceCard.attack */\n      swap1\n      swap2\n      div\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":3415:3434  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattlePick.sol\":3415:3484  MathUtils.subToZero(playerDefenceCard.attack, opponentAbility.attack) */\n      jump\t// in\n    tag_125:\n        /* \"contracts/BattlePick.sol\":3376:3400  playerDefenceCard.attack */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattlePick.sol\":3375:3484  (playerDefenceCard.attack, remainder) = MathUtils.subToZero(playerDefenceCard.attack, opponentAbility.attack) */\n      dup1\n      sload\n      not(0xffff000000000000)\n      and\n      shl(0x30, 0x01)\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":3598:3627  opponentAbility.specialAttack */\n      0x80\n      dup6\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":3375:3484  (playerDefenceCard.attack, remainder) = MathUtils.subToZero(playerDefenceCard.attack, opponentAbility.attack) */\n      swap2\n      swap6\n      pop\n        /* \"contracts/BattlePick.sol\":3545:3628  MathUtils.subToZero(playerDefenceCard.specialAttack, opponentAbility.specialAttack) */\n      tag_126\n      swap3\n      shl(0x40, 0x01)\n        /* \"contracts/BattlePick.sol\":3565:3596  playerDefenceCard.specialAttack */\n      swap1\n      swap2\n      div\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":3545:3564  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattlePick.sol\":3545:3628  MathUtils.subToZero(playerDefenceCard.specialAttack, opponentAbility.specialAttack) */\n      jump\t// in\n    tag_126:\n        /* \"contracts/BattlePick.sol\":3499:3530  playerDefenceCard.specialAttack */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattlePick.sol\":3498:3628  (playerDefenceCard.specialAttack, remainder) = MathUtils.subToZero(playerDefenceCard.specialAttack, opponentAbility.specialAttack) */\n      dup1\n      sload\n      not(0xffff0000000000000000)\n      and\n      shl(0x40, 0x01)\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n      swap1\n      swap5\n      pop\n        /* \"contracts/BattlePick.sol\":3694:3718  playerDefenceCard.health */\n      and\n        /* \"contracts/BattlePick.sol\":3690:4005  if (playerDefenceCard.health == 0) {... */\n      tag_130\n      jumpi\n        /* \"contracts/BattlePick.sol\":3823:3853  defenceDeck.playerCards.length */\n      dup7\n      sload\n        /* \"contracts/BattlePick.sol\":3856:3857  1 */\n      0x01\n        /* \"contracts/BattlePick.sol\":3796:3819  defenceDeck.currentCard */\n      dup9\n      add\n      sload\n      0xff\n      and\n      not(0x00)\n        /* \"contracts/BattlePick.sol\":3823:3857  defenceDeck.playerCards.length - 1 */\n      swap1\n      swap2\n      add\n        /* \"contracts/BattlePick.sol\":3796:3857  defenceDeck.currentCard == defenceDeck.playerCards.length - 1 */\n      eq\n        /* \"contracts/BattlePick.sol\":3791:3991  if  (defenceDeck.currentCard == defenceDeck.playerCards.length - 1) {... */\n      iszero\n      tag_128\n      jumpi\n        /* \"contracts/BattlePick.sol\":3881:3900  endGame(msg.sender) */\n      tag_129\n        /* \"contracts/BattlePick.sol\":3889:3899  msg.sender */\n      caller\n        /* \"contracts/BattlePick.sol\":3881:3888  endGame */\n      tag_25\n        /* \"contracts/BattlePick.sol\":3881:3900  endGame(msg.sender) */\n      jump\t// in\n    tag_129:\n        /* \"contracts/BattlePick.sol\":3791:3991  if  (defenceDeck.currentCard == defenceDeck.playerCards.length - 1) {... */\n      jump(tag_130)\n    tag_128:\n        /* \"contracts/BattlePick.sol\":3947:3970  defenceDeck.currentCard */\n      0x01\n      dup8\n      dup2\n      add\n        /* \"contracts/BattlePick.sol\":3947:3972  defenceDeck.currentCard++ */\n      dup1\n      sload\n      not(0xff)\n      dup2\n      and\n      0xff\n      swap2\n      dup3\n      and\n      swap1\n      swap4\n      add\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":3791:3991  if  (defenceDeck.currentCard == defenceDeck.playerCards.length - 1) {... */\n    tag_130:\n        /* \"contracts/BattlePick.sol\":4110:4130  playerAbility.health */\n      dup1\n      mload\n        /* \"contracts/BattlePick.sol\":4084:4107  playerAttackCard.health */\n      0x01\n      dup11\n      add\n      dup1\n      sload\n        /* \"contracts/BattlePick.sol\":4198:4219  playerAbility.defence */\n      0x20\n      dup5\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":4281:4299  playerAbility.mana */\n      0x40\n      dup6\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":4365:4385  playerAbility.attack */\n      0x60\n      dup7\n      add\n      mload\n        /* \"contracts/BattlePick.sol\":4465:4492  playerAbility.specialAttack */\n      0x80\n      swap1\n      swap7\n      add\n      mload\n      shl(0x40, 0x01)\n      shl(0x30, 0x01)\n      shl(0x20, 0x01)\n        /* \"contracts/BattlePick.sol\":4171:4195  playerAttackCard.defence */\n      0x010000\n        /* \"contracts/BattlePick.sol\":4084:4107  playerAttackCard.health */\n      0xffff\n      dup1\n      dup10\n      and\n        /* \"contracts/BattlePick.sol\":4084:4130  playerAttackCard.health + playerAbility.health */\n      swap1\n      swap11\n      add\n        /* \"contracts/BattlePick.sol\":4058:4130  playerAttackCard.health = playerAttackCard.health + playerAbility.health */\n      dup11\n      and\n      not(0xffff)\n      swap1\n      swap9\n      and\n      swap8\n      swap1\n      swap8\n      or\n        /* \"contracts/BattlePick.sol\":4171:4195  playerAttackCard.defence */\n      dup8\n      dup2\n      div\n      dup11\n      and\n        /* \"contracts/BattlePick.sol\":4171:4219  playerAttackCard.defence + playerAbility.defence */\n      swap1\n      swap7\n      add\n        /* \"contracts/BattlePick.sol\":4144:4219  playerAttackCard.defence = playerAttackCard.defence + playerAbility.defence */\n      dup10\n      and\n      swap1\n      swap7\n      mul\n      not(0xffff0000)\n      swap1\n      swap6\n      and\n      swap5\n      swap1\n      swap5\n      or\n        /* \"contracts/BattlePick.sol\":4257:4278  playerAttackCard.mana */\n      dup6\n      dup2\n      div\n      dup9\n      and\n        /* \"contracts/BattlePick.sol\":4257:4299  playerAttackCard.mana + playerAbility.mana */\n      swap1\n      swap4\n      add\n        /* \"contracts/BattlePick.sol\":4233:4299  playerAttackCard.mana = playerAttackCard.mana + playerAbility.mana */\n      dup8\n      and\n      swap1\n      swap5\n      mul\n      not(0xffff00000000)\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n        /* \"contracts/BattlePick.sol\":4339:4362  playerAttackCard.attack */\n      dup3\n      dup2\n      div\n      dup7\n      and\n        /* \"contracts/BattlePick.sol\":4339:4385  playerAttackCard.attack + playerAbility.attack */\n      swap1\n      swap7\n      add\n        /* \"contracts/BattlePick.sol\":4313:4385  playerAttackCard.attack = playerAttackCard.attack + playerAbility.attack */\n      dup6\n      and\n      swap1\n      swap2\n      mul\n      not(0xffff000000000000)\n      swap1\n      swap6\n      and\n      swap5\n      swap1\n      swap5\n      or\n        /* \"contracts/BattlePick.sol\":4432:4462  playerAttackCard.specialAttack */\n      dup2\n      dup2\n      div\n      dup5\n      and\n        /* \"contracts/BattlePick.sol\":4432:4492  playerAttackCard.specialAttack + playerAbility.specialAttack */\n      swap1\n      swap5\n      add\n        /* \"contracts/BattlePick.sol\":4399:4492  playerAttackCard.specialAttack = playerAttackCard.specialAttack + playerAbility.specialAttack */\n      swap1\n      swap3\n      and\n      swap1\n      swap2\n      mul\n      not(0xffff0000000000000000)\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/BattlePick.sol\":2406:4564  if (move == Move.Ability) {... */\n      tag_131\n      swap2\n      pop\n      pop\n      jump\n    tag_105:\n        /* \"contracts/BattlePick.sol\":4531:4553  revert('Invalid move') */\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_133)\n        /* \"contracts/BattlePick.sol\":2406:4564  if (move == Move.Ability) {... */\n    tag_131:\n        /* \"contracts/BattlePick.sol\":4582:4593  playersTurn */\n      0x04\n        /* \"contracts/BattlePick.sol\":4582:4606  playersTurn = nextPlayer */\n      dup1\n      sload\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      and\n      0x0100\n      sub(shl(0xa0, 0x01), 0x01)\n      dup6\n      and\n      mul\n      or\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":4633:4656  playerAttackCard.cardId */\n      dup5\n      sload\n        /* \"contracts/BattlePick.sol\":4622:4688  Turn(move, playerAttackCard.cardId, playerDefenceCard, nextPlayer) */\n      mload(0x40)\n      0x5f4bfc4bb3efc8381128908c65dba16d774750a4508f87b52ed63512630609f9\n      swap2\n      tag_134\n      swap2\n        /* \"contracts/BattlePick.sol\":4627:4631  move */\n      dup10\n      swap2\n        /* \"contracts/BattlePick.sol\":4633:4656  playerAttackCard.cardId */\n      swap1\n        /* \"contracts/BattlePick.sol\":4658:4675  playerDefenceCard */\n      dup9\n      swap1\n        /* \"contracts/BattlePick.sol\":4582:4606  playersTurn = nextPlayer */\n      dup8\n      swap1\n        /* \"contracts/BattlePick.sol\":4622:4688  Turn(move, playerAttackCard.cardId, playerDefenceCard, nextPlayer) */\n      jump(tag_135)\n    tag_134:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/BattlePick.sol\":689:4695  function turn(Move move) public {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":1777:2840  function pickPayerCards(uint[5] memory desiredCards) public {... */\n    tag_38:\n        /* \"contracts/PlayerCardsPick.sol\":1895:1905  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsPick.sol\":1848:1880  PlayerCard[] storage playerCards */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":1883:1906  playerDecks[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1883:1894  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":1883:1906  playerDecks[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1936:1954  playerCards.length */\n      dup1\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":1936:1959  playerCards.length == 0 */\n      iszero\n        /* \"contracts/PlayerCardsPick.sol\":1928:2001  require(playerCards.length == 0, 'Player has already picked their cards') */\n      tag_137\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_139)\n    tag_137:\n        /* \"contracts/PlayerCardsPick.sol\":2016:2023  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsPick.sol\":2027:2037  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsPick.sol\":2016:2037  player1 == msg.sender */\n      eq\n        /* \"contracts/PlayerCardsPick.sol\":2012:2409  if (player1 == msg.sender) {... */\n      iszero\n      tag_140\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2069:2076  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsPick.sol\":2099:2100  0 */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":2057:2077  playerDecks[player2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2057:2068  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":2057:2077  playerDecks[player2] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":2057:2096  playerDecks[player2].playerCards.length */\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":2057:2100  playerDecks[player2].playerCards.length > 0 */\n      iszero\n        /* \"contracts/PlayerCardsPick.sol\":2053:2153  if (playerDecks[player2].playerCards.length > 0) {... */\n      tag_141\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2120:2131  cardsPicked */\n      0x04\n        /* \"contracts/PlayerCardsPick.sol\":2120:2138  cardsPicked = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/PlayerCardsPick.sol\":2134:2138  true */\n      0x01\n        /* \"contracts/PlayerCardsPick.sol\":2120:2138  cardsPicked = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsPick.sol\":2053:2153  if (playerDecks[player2].playerCards.length > 0) {... */\n    tag_141:\n        /* \"contracts/PlayerCardsPick.sol\":2012:2409  if (player1 == msg.sender) {... */\n      jump(tag_145)\n    tag_140:\n        /* \"contracts/PlayerCardsPick.sol\":2181:2188  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsPick.sol\":2192:2202  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsPick.sol\":2181:2202  player2 == msg.sender */\n      eq\n        /* \"contracts/PlayerCardsPick.sol\":2177:2409  if (player2 == msg.sender) {... */\n      iszero\n      tag_143\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2234:2241  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsPick.sol\":2264:2265  0 */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":2222:2242  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2222:2233  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":2222:2242  playerDecks[player1] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":2222:2261  playerDecks[player1].playerCards.length */\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":2222:2265  playerDecks[player1].playerCards.length > 0 */\n      iszero\n        /* \"contracts/PlayerCardsPick.sol\":2218:2318  if (playerDecks[player1].playerCards.length > 0) {... */\n      tag_141\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2285:2296  cardsPicked */\n      0x04\n        /* \"contracts/PlayerCardsPick.sol\":2285:2303  cardsPicked = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/PlayerCardsPick.sol\":2299:2303  true */\n      0x01\n        /* \"contracts/PlayerCardsPick.sol\":2285:2303  cardsPicked = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsPick.sol\":2177:2409  if (player2 == msg.sender) {... */\n      jump(tag_145)\n    tag_143:\n        /* \"contracts/PlayerCardsPick.sol\":2348:2398  revert('Transaction sender must be player 1 or 2') */\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_147)\n        /* \"contracts/PlayerCardsPick.sol\":2177:2409  if (player2 == msg.sender) {... */\n    tag_145:\n        /* \"contracts/PlayerCardsPick.sol\":2419:2451  uint[3] memory pickedCardNumbers */\n      tag_148\n      tag_149\n      jump\t// in\n    tag_148:\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":2419:2542  uint[3] memory pickedCardNumbers = [... */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2468:2483  desiredCards[0] */\n      dup4\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":2419:2542  uint[3] memory pickedCardNumbers = [... */\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2468:2483  desiredCards[0] */\n      0x20\n        /* \"contracts/PlayerCardsPick.sol\":2497:2512  desiredCards[1] */\n      dup1\n      dup6\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":2419:2542  uint[3] memory pickedCardNumbers = [... */\n      swap1\n      dup3\n      add\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2526:2541  desiredCards[2] */\n      dup4\n      dup3\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":2419:2542  uint[3] memory pickedCardNumbers = [... */\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2553:2597  _setPlayerCard(playerCards, desiredCards[0]) */\n      tag_153\n        /* \"contracts/PlayerCardsPick.sol\":2568:2579  playerCards */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":2468:2483  desiredCards[0] */\n      dup5\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":2581:2596  desiredCards[0] */\n    tag_154:\n      0x20\n      mul\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":2553:2567  _setPlayerCard */\n      tag_155\n        /* \"contracts/PlayerCardsPick.sol\":2553:2597  _setPlayerCard(playerCards, desiredCards[0]) */\n      jump\t// in\n    tag_153:\n        /* \"contracts/PlayerCardsPick.sol\":2607:2651  _setPlayerCard(playerCards, desiredCards[1]) */\n      tag_156\n        /* \"contracts/PlayerCardsPick.sol\":2622:2633  playerCards */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":2635:2647  desiredCards */\n      dup5\n        /* \"contracts/PlayerCardsPick.sol\":2648:2649  1 */\n      0x01\n        /* \"contracts/PlayerCardsPick.sol\":2635:2650  desiredCards[1] */\n      jump(tag_154)\n        /* \"contracts/PlayerCardsPick.sol\":2607:2651  _setPlayerCard(playerCards, desiredCards[1]) */\n    tag_156:\n        /* \"contracts/PlayerCardsPick.sol\":2661:2705  _setPlayerCard(playerCards, desiredCards[2]) */\n      tag_158\n        /* \"contracts/PlayerCardsPick.sol\":2676:2687  playerCards */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":2689:2701  desiredCards */\n      dup5\n        /* \"contracts/PlayerCardsPick.sol\":2702:2703  2 */\n      0x02\n        /* \"contracts/PlayerCardsPick.sol\":2689:2704  desiredCards[2] */\n      jump(tag_154)\n        /* \"contracts/PlayerCardsPick.sol\":2661:2705  _setPlayerCard(playerCards, desiredCards[2]) */\n    tag_158:\n        /* \"contracts/PlayerCardsPick.sol\":2721:2768  PickPayerCards(desiredCards, pickedCardNumbers) */\n      0x48ca02657a8acb3a062f53bf24ca611bb25d8108f29f5e3c5e468080a44dca5d\n        /* \"contracts/PlayerCardsPick.sol\":2736:2748  desiredCards */\n      dup4\n        /* \"contracts/PlayerCardsPick.sol\":2750:2767  pickedCardNumbers */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":2721:2768  PickPayerCards(desiredCards, pickedCardNumbers) */\n      mload(0x40)\n      tag_160\n      swap3\n      swap2\n      swap1\n      jump(tag_161)\n    tag_160:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/PlayerCardsPick.sol\":2783:2794  cardsPicked */\n      and(0xff, sload(0x04))\n        /* \"contracts/PlayerCardsPick.sol\":2779:2834  if (cardsPicked) {... */\n      iszero\n      tag_163\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2810:2823  startBattle() */\n      tag_163\n        /* \"contracts/PlayerCardsPick.sol\":2810:2821  startBattle */\n      tag_164\n        /* \"contracts/PlayerCardsPick.sol\":2810:2823  startBattle() */\n      jump\t// in\n    tag_163:\n        /* \"contracts/PlayerCardsPick.sol\":1777:2840  function pickPayerCards(uint[5] memory desiredCards) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":3358:3740  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n    tag_42:\n        /* \"contracts/PlayerCardsPick.sol\":3429:3435  uint16 */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/PlayerCardsPick.sol\":3478:3708  for (uint i=0; i<playerCards.length; i++) {... */\n    tag_166:\n        /* \"contracts/PlayerCardsPick.sol\":3495:3506  playerCards */\n      dup4\n        /* \"contracts/PlayerCardsPick.sol\":3495:3513  playerCards.length */\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":3493:3494  i */\n      dup2\n        /* \"contracts/PlayerCardsPick.sol\":3493:3513  i<playerCards.length */\n      lt\n        /* \"contracts/PlayerCardsPick.sol\":3478:3708  for (uint i=0; i<playerCards.length; i++) {... */\n      iszero\n      tag_167\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":3535:3551  uint16 cardSpeed */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":3554:3567  cardsContract */\n      dup1\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":3576:3590  playerCards[i] */\n      dup6\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":3554:3567  cardsContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3554:3575  cardsContract.getCard */\n      0x9188d312\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3576:3587  playerCards */\n      dup8\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3588:3589  i */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3576:3590  playerCards[i] */\n      dup2\n      lt\n      tag_169\n      jumpi\n      invalid\n    tag_169:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":3576:3597  playerCards[i].cardId */\n      0x00\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_170\n      swap2\n      swap1\n      jump(tag_109)\n    tag_170:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_171\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_171:\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_172\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_172:\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      tag_173\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_113)\n    tag_173:\n        /* \"contracts/PlayerCardsPick.sol\":3554:3604  cardsContract.getCard(playerCards[i].cardId).speed */\n      0xa0\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":3535:3604  uint16 cardSpeed = cardsContract.getCard(playerCards[i].cardId).speed */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3635:3643  maxSpeed */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":3623:3643  cardSpeed > maxSpeed */\n      0xffff\n      and\n        /* \"contracts/PlayerCardsPick.sol\":3623:3632  cardSpeed */\n      dup2\n        /* \"contracts/PlayerCardsPick.sol\":3623:3643  cardSpeed > maxSpeed */\n      0xffff\n      and\n      gt\n        /* \"contracts/PlayerCardsPick.sol\":3619:3698  if (cardSpeed > maxSpeed) {... */\n      iszero\n      tag_174\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":3674:3683  cardSpeed */\n      dup1\n        /* \"contracts/PlayerCardsPick.sol\":3663:3683  maxSpeed = cardSpeed */\n      swap3\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3619:3698  if (cardSpeed > maxSpeed) {... */\n    tag_174:\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3515:3518  i++ */\n      0x01\n      add\n        /* \"contracts/PlayerCardsPick.sol\":3478:3708  for (uint i=0; i<playerCards.length; i++) {... */\n      jump(tag_166)\n    tag_167:\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3725:3733  maxSpeed */\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":3358:3740  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":527:549  address public player2 */\n    tag_46:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/BattlePick.sol\":364:392  address public winningPlayer */\n    tag_49:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":1649:1771  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n    tag_53:\n        /* \"contracts/PlayerCardsPick.sol\":1709:1726  PlayerDeck memory */\n      tag_175\n      tag_176\n      jump\t// in\n    tag_175:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":1745:1764  playerDecks[player] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1745:1756  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":1745:1764  playerDecks[player] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1738:1764  return playerDecks[player] */\n      dup2\n      mload\n      dup2\n      sload\n      0x60\n      swap5\n      dup2\n      mul\n      dup3\n      add\n      dup6\n      add\n      dup5\n      mstore\n      swap3\n      dup2\n      add\n      dup4\n      dup2\n      mstore\n      swap1\n      swap5\n        /* \"contracts/PlayerCardsPick.sol\":1745:1764  playerDecks[player] */\n      swap2\n      swap4\n        /* \"contracts/PlayerCardsPick.sol\":1738:1764  return playerDecks[player] */\n      dup6\n      swap4\n      swap2\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":1745:1764  playerDecks[player] */\n      dup6\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":1738:1764  return playerDecks[player] */\n      swap2\n      dup6\n      add\n    tag_178:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_179\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0x20, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_178)\n    tag_179:\n      pop\n      pop\n      pop\n      swap1\n      dup3\n      mstore\n      pop\n      0x01\n      swap2\n      swap1\n      swap2\n      add\n      sload\n      0xff\n      and\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":1649:1771  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":499:521  address public player1 */\n    tag_57:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":611:634  bool public cardsPicked */\n    tag_60:\n      and(0xff, sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":555:605  mapping (address => PlayerDeck) public playerDecks */\n    tag_65:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      0x01\n      add\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":1286:1501  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n    tag_69:\n        /* \"contracts/PlayerCardsPick.sol\":1353:1370  PlayerCard memory */\n      tag_181\n      tag_182\n      jump\t// in\n    tag_181:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":1402:1421  playerDecks[player] */\n      dup3\n      and\n        /* \"contracts/PlayerCardsPick.sol\":1383:1399  uint8 deckNumber */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":1402:1421  playerDecks[player] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1402:1413  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":1402:1421  playerDecks[player] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1402:1433  playerDecks[player].currentCard */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":1451:1494  playerDecks[player].playerCards[deckNumber] */\n      dup2\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":1402:1433  playerDecks[player].currentCard */\n      0xff\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/PlayerCardsPick.sol\":1402:1421  playerDecks[player] */\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":1402:1433  playerDecks[player].currentCard */\n      dup3\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":1451:1494  playerDecks[player].playerCards[deckNumber] */\n      dup2\n      lt\n      tag_184\n      jumpi\n      invalid\n    tag_184:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1444:1494  return playerDecks[player].playerCards[deckNumber] */\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1451:1494  playerDecks[player].playerCards[deckNumber] */\n      0x02\n      swap1\n      swap4\n      mul\n      swap1\n      swap2\n      add\n        /* \"contracts/PlayerCardsPick.sol\":1444:1494  return playerDecks[player].playerCards[deckNumber] */\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      swap5\n      dup5\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n      0x010000\n      dup2\n      div\n      dup5\n      and\n      swap2\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      shl(0x20, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup4\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup4\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup3\n      add\n      mstore\n      swap2\n      pop\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":1286:1501  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/BattlePick.sol\":4761:6178  function attack(uint16 attackAmount, PlayerCard storage playerDefenceCard, PlayerDeck storage defenceDeck) internal {... */\n    tag_96:\n        /* \"contracts/BattlePick.sol\":4930:4955  playerDefenceCard.defence */\n      0x01\n      dup3\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":4887:4915  uint16 remainingAttackAmount */\n      0x00\n      swap1\n        /* \"contracts/BattlePick.sol\":4930:4955  playerDefenceCard.defence */\n      0x010000\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/BattlePick.sol\":4930:4959  playerDefenceCard.defence > 0 */\n      iszero\n        /* \"contracts/BattlePick.sol\":4926:6172  if (playerDefenceCard.defence > 0) {... */\n      tag_187\n      jumpi\n        /* \"contracts/BattlePick.sol\":5048:5073  playerDefenceCard.defence */\n      0x01\n      dup4\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":5028:5088  MathUtils.subToZero(playerDefenceCard.defence, attackAmount) */\n      tag_188\n      swap1\n        /* \"contracts/BattlePick.sol\":5048:5073  playerDefenceCard.defence */\n      0x010000\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/BattlePick.sol\":5075:5087  attackAmount */\n      dup6\n        /* \"contracts/BattlePick.sol\":5028:5047  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattlePick.sol\":5028:5088  MathUtils.subToZero(playerDefenceCard.defence, attackAmount) */\n      jump\t// in\n    tag_188:\n        /* \"contracts/BattlePick.sol\":4976:5001  playerDefenceCard.defence */\n      0x01\n      dup6\n      add\n        /* \"contracts/BattlePick.sol\":4975:5088  (playerDefenceCard.defence, remainingAttackAmount) = MathUtils.subToZero(playerDefenceCard.defence, attackAmount) */\n      dup1\n      sload\n      not(0xffff0000)\n      and\n      0x010000\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      sstore\n      swap2\n      pop\n        /* \"contracts/BattlePick.sol\":5107:5132  remainingAttackAmount > 0 */\n      dup2\n      and\n      iszero\n        /* \"contracts/BattlePick.sol\":5103:5667  if (remainingAttackAmount > 0) {... */\n      tag_194\n      jumpi\n        /* \"contracts/BattlePick.sol\":5224:5248  playerDefenceCard.health */\n      0x01\n      dup4\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":5204:5272  MathUtils.subToZero(playerDefenceCard.health, remainingAttackAmount) */\n      tag_190\n      swap1\n        /* \"contracts/BattlePick.sol\":5224:5248  playerDefenceCard.health */\n      0xffff\n      and\n        /* \"contracts/BattlePick.sol\":5250:5271  remainingAttackAmount */\n      dup3\n        /* \"contracts/BattlePick.sol\":5204:5223  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattlePick.sol\":5204:5272  MathUtils.subToZero(playerDefenceCard.health, remainingAttackAmount) */\n      jump\t// in\n    tag_190:\n        /* \"contracts/BattlePick.sol\":5153:5177  playerDefenceCard.health */\n      0x01\n      dup6\n      add\n        /* \"contracts/BattlePick.sol\":5152:5272  (playerDefenceCard.health, remainingAttackAmount) = MathUtils.subToZero(playerDefenceCard.health, remainingAttackAmount) */\n      dup1\n      sload\n      not(0xffff)\n      and\n      0xffff\n      swap4\n      dup5\n      and\n      or\n      swap1\n      sstore\n      swap2\n      pop\n        /* \"contracts/BattlePick.sol\":5295:5320  remainingAttackAmount > 0 */\n      dup2\n      and\n      iszero\n        /* \"contracts/BattlePick.sol\":5291:5653  if (remainingAttackAmount > 0) {... */\n      tag_194\n      jumpi\n        /* \"contracts/BattlePick.sol\":5344:5367  defenceDeck.currentCard */\n      0x01\n      dup1\n      dup4\n      add\n        /* \"contracts/BattlePick.sol\":5344:5369  defenceDeck.currentCard++ */\n      dup1\n      sload\n      0xff\n      dup1\n      dup3\n      and\n      swap1\n      swap4\n      add\n      dup4\n      and\n      not(0xff)\n      swap1\n      swap2\n      and\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":5421:5451  defenceDeck.playerCards.length */\n      dup4\n      sload\n        /* \"contracts/BattlePick.sol\":5395:5418  defenceDeck.currentCard */\n      swap2\n      and\n        /* \"contracts/BattlePick.sol\":5395:5451  defenceDeck.currentCard > defenceDeck.playerCards.length */\n      gt\n        /* \"contracts/BattlePick.sol\":5391:5521  if (defenceDeck.currentCard > defenceDeck.playerCards.length) {... */\n      iszero\n      tag_193\n      jumpi\n        /* \"contracts/BattlePick.sol\":5479:5498  endGame(msg.sender) */\n      tag_193\n        /* \"contracts/BattlePick.sol\":5487:5497  msg.sender */\n      caller\n        /* \"contracts/BattlePick.sol\":5479:5486  endGame */\n      tag_25\n        /* \"contracts/BattlePick.sol\":5479:5498  endGame(msg.sender) */\n      jump\t// in\n    tag_193:\n        /* \"contracts/BattlePick.sol\":5596:5619  defenceDeck.currentCard */\n      0x01\n      dup3\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":5572:5620  defenceDeck.playerCards[defenceDeck.currentCard] */\n      dup3\n      sload\n        /* \"contracts/BattlePick.sol\":5542:5634  attack(remainingAttackAmount, defenceDeck.playerCards[defenceDeck.currentCard], defenceDeck) */\n      tag_194\n      swap2\n        /* \"contracts/BattlePick.sol\":5549:5570  remainingAttackAmount */\n      dup4\n      swap2\n        /* \"contracts/BattlePick.sol\":5572:5583  defenceDeck */\n      dup6\n      swap2\n        /* \"contracts/BattlePick.sol\":5596:5619  defenceDeck.currentCard */\n      0xff\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":5572:5620  defenceDeck.playerCards[defenceDeck.currentCard] */\n      dup2\n      lt\n      tag_195\n      jumpi\n      invalid\n    tag_195:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x02\n      mul\n      add\n        /* \"contracts/BattlePick.sol\":5622:5633  defenceDeck */\n      dup5\n        /* \"contracts/BattlePick.sol\":5542:5548  attack */\n      tag_96\n        /* \"contracts/BattlePick.sol\":5542:5634  attack(remainingAttackAmount, defenceDeck.playerCards[defenceDeck.currentCard], defenceDeck) */\n      jump\t// in\n    tag_194:\n        /* \"contracts/BattlePick.sol\":4926:6172  if (playerDefenceCard.defence > 0) {... */\n      jump(tag_202)\n    tag_187:\n        /* \"contracts/BattlePick.sol\":5770:5794  playerDefenceCard.health */\n      0x01\n      dup4\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":5750:5809  MathUtils.subToZero(playerDefenceCard.health, attackAmount) */\n      tag_198\n      swap1\n        /* \"contracts/BattlePick.sol\":5770:5794  playerDefenceCard.health */\n      0xffff\n      and\n        /* \"contracts/BattlePick.sol\":5796:5808  attackAmount */\n      dup6\n        /* \"contracts/BattlePick.sol\":5750:5769  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattlePick.sol\":5750:5809  MathUtils.subToZero(playerDefenceCard.health, attackAmount) */\n      jump\t// in\n    tag_198:\n        /* \"contracts/BattlePick.sol\":5699:5723  playerDefenceCard.health */\n      0x01\n      dup6\n      add\n        /* \"contracts/BattlePick.sol\":5698:5809  (playerDefenceCard.health, remainingAttackAmount) = MathUtils.subToZero(playerDefenceCard.health, attackAmount) */\n      dup1\n      sload\n      not(0xffff)\n      and\n      0xffff\n      swap4\n      dup5\n      and\n      or\n      swap1\n      sstore\n      swap2\n      pop\n        /* \"contracts/BattlePick.sol\":5828:5853  remainingAttackAmount > 0 */\n      dup2\n      and\n      iszero\n        /* \"contracts/BattlePick.sol\":5824:6162  if (remainingAttackAmount > 0) {... */\n      tag_202\n      jumpi\n        /* \"contracts/BattlePick.sol\":5873:5896  defenceDeck.currentCard */\n      0x01\n      dup1\n      dup4\n      add\n        /* \"contracts/BattlePick.sol\":5873:5898  defenceDeck.currentCard++ */\n      dup1\n      sload\n      0xff\n      dup1\n      dup3\n      and\n      swap1\n      swap4\n      add\n      dup4\n      and\n      not(0xff)\n      swap1\n      swap2\n      and\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattlePick.sol\":5946:5976  defenceDeck.playerCards.length */\n      dup4\n      sload\n        /* \"contracts/BattlePick.sol\":5920:5943  defenceDeck.currentCard */\n      swap2\n      and\n        /* \"contracts/BattlePick.sol\":5920:5976  defenceDeck.currentCard > defenceDeck.playerCards.length */\n      gt\n        /* \"contracts/BattlePick.sol\":5916:6038  if (defenceDeck.currentCard > defenceDeck.playerCards.length) {... */\n      iszero\n      tag_201\n      jumpi\n        /* \"contracts/BattlePick.sol\":6000:6019  endGame(msg.sender) */\n      tag_201\n        /* \"contracts/BattlePick.sol\":6008:6018  msg.sender */\n      caller\n        /* \"contracts/BattlePick.sol\":6000:6007  endGame */\n      tag_25\n        /* \"contracts/BattlePick.sol\":6000:6019  endGame(msg.sender) */\n      jump\t// in\n    tag_201:\n        /* \"contracts/BattlePick.sol\":6109:6132  defenceDeck.currentCard */\n      0x01\n      dup3\n      add\n      sload\n        /* \"contracts/BattlePick.sol\":6085:6133  defenceDeck.playerCards[defenceDeck.currentCard] */\n      dup3\n      sload\n        /* \"contracts/BattlePick.sol\":6055:6147  attack(remainingAttackAmount, defenceDeck.playerCards[defenceDeck.currentCard], defenceDeck) */\n      tag_202\n      swap2\n        /* \"contracts/BattlePick.sol\":6062:6083  remainingAttackAmount */\n      dup4\n      swap2\n        /* \"contracts/BattlePick.sol\":6085:6096  defenceDeck */\n      dup6\n      swap2\n        /* \"contracts/BattlePick.sol\":6109:6132  defenceDeck.currentCard */\n      0xff\n      and\n      swap1\n        /* \"contracts/BattlePick.sol\":6085:6133  defenceDeck.playerCards[defenceDeck.currentCard] */\n      dup2\n      lt\n      tag_195\n      jumpi\n      invalid\n        /* \"contracts/BattlePick.sol\":6055:6147  attack(remainingAttackAmount, defenceDeck.playerCards[defenceDeck.currentCard], defenceDeck) */\n    tag_202:\n        /* \"contracts/BattlePick.sol\":4761:6178  function attack(uint16 attackAmount, PlayerCard storage playerDefenceCard, PlayerDeck storage defenceDeck) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/MathUtils.sol\":164:337  function subToZero(uint16 a, uint16 b) internal pure returns (uint16, uint16) {... */\n    tag_118:\n        /* \"contracts/MathUtils.sol\":226:232  uint16 */\n      0x00\n        /* \"contracts/MathUtils.sol\":234:240  uint16 */\n      dup1\n        /* \"contracts/MathUtils.sol\":259:260  a */\n      dup4\n        /* \"contracts/MathUtils.sol\":255:260  b > a */\n      0xffff\n      and\n        /* \"contracts/MathUtils.sol\":255:256  b */\n      dup4\n        /* \"contracts/MathUtils.sol\":255:260  b > a */\n      0xffff\n      and\n      gt\n        /* \"contracts/MathUtils.sol\":252:304  if(b > a) {... */\n      iszero\n      tag_206\n      jumpi\n      pop\n        /* \"contracts/MathUtils.sol\":284:285  0 */\n      0x00\n      swap1\n      pop\n        /* \"contracts/MathUtils.sol\":287:292  b - a */\n      dup3\n      dup3\n      sub\n        /* \"contracts/MathUtils.sol\":276:293  return (0, b - a) */\n      jump(tag_205)\n        /* \"contracts/MathUtils.sol\":252:304  if(b > a) {... */\n    tag_206:\n      pop\n      pop\n        /* \"contracts/MathUtils.sol\":321:326  a - b */\n      dup1\n      dup3\n      sub\n        /* \"contracts/MathUtils.sol\":328:329  0 */\n      0x00\n        /* \"contracts/MathUtils.sol\":164:337  function subToZero(uint16 a, uint16 b) internal pure returns (uint16, uint16) {... */\n    tag_205:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":865:1280  function _setPlayerCard(PlayerCard[] storage playerCards, uint cardId) internal {... */\n    tag_155:\n        /* \"contracts/PlayerCardsPick.sol\":956:972  Card memory card */\n      tag_208\n      tag_107\n      jump\t// in\n    tag_208:\n        /* \"contracts/PlayerCardsPick.sol\":975:988  cardsContract */\n      sload(0x00)\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      mload(0x40)\n      mul(0x48c46989, shl(0xe1, 0x01))\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":975:988  cardsContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":975:996  cardsContract.getCard */\n      0x9188d312\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      tag_209\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":997:1003  cardId */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      0x04\n      add\n      jump(tag_109)\n    tag_209:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_210\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_210:\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_211\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_211:\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      tag_212\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_113)\n    tag_212:\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      0x40\n      dup1\n      mload\n      0xc0\n      dup1\n      dup3\n      add\n      dup4\n      mstore\n      swap5\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1094:1109  card.initHealth */\n      dup2\n      dup4\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      0xffff\n      swap1\n      dup2\n      and\n      0x20\n      dup1\n      dup5\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1132:1148  card.initDefence */\n      0x60\n      dup1\n      dup8\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      dup5\n      and\n      swap6\n      dup6\n      add\n      swap6\n      dup7\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1168:1181  card.initMana */\n      0x80\n      dup1\n      dup9\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      dup6\n      and\n      swap2\n      dup7\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1203:1214  card.attack */\n      swap9\n      dup8\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      dup5\n      and\n      swap9\n      dup6\n      add\n      swap9\n      dup10\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1243:1261  card.specialAttack */\n      0xe0\n      swap1\n      swap7\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      dup4\n      and\n      0xa0\n      dup6\n      add\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":27:37   */\n      dup10\n      sload\n        /* \"--CODEGEN--\":39:40   */\n      0x01\n        /* \"--CODEGEN--\":23:41   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":45:68   */\n      dup13\n      sstore\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":1015:1273  playerCards.push( PlayerCard({... */\n      swap12\n      dup13\n      mstore\n      swap3\n      swap1\n      swap11\n      keccak256\n      swap5\n      mload\n      0x02\n      swap1\n      swap11\n      mul\n      swap1\n      swap5\n      add\n      swap9\n      dup10\n      sstore\n      swap1\n      mload\n      swap8\n      add\n      dup1\n      sload\n      swap4\n      mload\n      swap5\n      mload\n      swap7\n      mload\n      swap3\n      mload\n      dup3\n      and\n      shl(0x40, 0x01)\n      mul\n      not(0xffff0000000000000000)\n      swap4\n      dup4\n      and\n      shl(0x30, 0x01)\n      mul\n      not(0xffff000000000000)\n      swap9\n      dup5\n      and\n      shl(0x20, 0x01)\n      mul\n      not(0xffff00000000)\n      swap8\n      dup6\n      and\n      0x010000\n      mul\n      not(0xffff0000)\n      swap12\n      swap1\n      swap6\n      and\n      not(0xffff)\n      swap1\n      swap8\n      and\n      swap7\n      swap1\n      swap7\n      or\n      swap10\n      swap1\n      swap10\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap5\n      swap1\n      swap5\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap5\n      swap1\n      swap5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap3\n      swap1\n      swap3\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":865:1280  function _setPlayerCard(PlayerCard[] storage playerCards, uint cardId) internal {... */\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":2916:3352  function startBattle() internal {... */\n    tag_164:\n        /* \"contracts/PlayerCardsPick.sol\":2966:2977  cardsPicked */\n      and(0xff, sload(0x04))\n        /* \"contracts/PlayerCardsPick.sol\":2958:3026  require(cardsPicked, 'Both players have to have picked their cards') */\n      tag_215\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_217)\n    tag_215:\n        /* \"contracts/PlayerCardsPick.sol\":3087:3094  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsPick.sol\":3037:3059  uint16 player1MaxSpeed */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":3075:3095  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":3075:3086  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":3075:3095  playerDecks[player1] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":3062:3108  calcMaxSpeed(playerDecks[player1].playerCards) */\n      dup1\n      sload\n      dup3\n      mload\n      dup2\n      dup6\n      mul\n      dup2\n      add\n      dup6\n      add\n      swap1\n      swap4\n      mstore\n      dup1\n      dup4\n      mstore\n      tag_218\n      swap4\n        /* \"contracts/PlayerCardsPick.sol\":3037:3059  uint16 player1MaxSpeed */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3062:3108  calcMaxSpeed(playerDecks[player1].playerCards) */\n      dup5\n      add\n    tag_219:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_220\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0x20, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_219)\n    tag_220:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3062:3074  calcMaxSpeed */\n      tag_42\n        /* \"contracts/PlayerCardsPick.sol\":3062:3108  calcMaxSpeed(playerDecks[player1].playerCards) */\n      jump\t// in\n    tag_218:\n        /* \"contracts/PlayerCardsPick.sol\":3168:3175  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsPick.sol\":3118:3140  uint16 player2MaxSpeed */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":3156:3176  playerDecks[player2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":3156:3167  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":3156:3176  playerDecks[player2] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":3143:3189  calcMaxSpeed(playerDecks[player2].playerCards) */\n      dup1\n      sload\n      dup3\n      mload\n      dup2\n      dup6\n      mul\n      dup2\n      add\n      dup6\n      add\n      swap1\n      swap4\n      mstore\n      dup1\n      dup4\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":3037:3108  uint16 player1MaxSpeed = calcMaxSpeed(playerDecks[player1].playerCards) */\n      swap5\n      swap6\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3118:3140  uint16 player2MaxSpeed */\n      swap3\n      swap4\n        /* \"contracts/PlayerCardsPick.sol\":3143:3189  calcMaxSpeed(playerDecks[player2].playerCards) */\n      tag_222\n      swap4\n      swap2\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":3118:3140  uint16 player2MaxSpeed */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3143:3189  calcMaxSpeed(playerDecks[player2].playerCards) */\n      dup5\n      add\n      dup3\n      iszero\n      tag_220\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0x20, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_219)\n    tag_222:\n        /* \"contracts/PlayerCardsPick.sol\":3118:3189  uint16 player2MaxSpeed = calcMaxSpeed(playerDecks[player2].playerCards) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3223:3238  player2MaxSpeed */\n      dup1\n        /* \"contracts/PlayerCardsPick.sol\":3204:3238  player1MaxSpeed >= player2MaxSpeed */\n      0xffff\n      and\n        /* \"contracts/PlayerCardsPick.sol\":3204:3219  player1MaxSpeed */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":3204:3238  player1MaxSpeed >= player2MaxSpeed */\n      0xffff\n      and\n      lt\n        /* \"contracts/PlayerCardsPick.sol\":3200:3346  if (player1MaxSpeed >= player2MaxSpeed) {... */\n      tag_226\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":3268:3275  player1 */\n      sload(0x01)\n        /* \"contracts/PlayerCardsPick.sol\":3254:3265  playersTurn */\n      0x04\n        /* \"contracts/PlayerCardsPick.sol\":3254:3275  playersTurn = player1 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":3268:3275  player1 */\n      swap1\n      swap3\n      and\n      0x0100\n        /* \"contracts/PlayerCardsPick.sol\":3254:3275  playersTurn = player1 */\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsPick.sol\":3200:3346  if (player1MaxSpeed >= player2MaxSpeed) {... */\n      jump(tag_227)\n    tag_226:\n        /* \"contracts/PlayerCardsPick.sol\":3328:3335  player2 */\n      sload(0x02)\n        /* \"contracts/PlayerCardsPick.sol\":3314:3325  playersTurn */\n      0x04\n        /* \"contracts/PlayerCardsPick.sol\":3314:3335  playersTurn = player2 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":3328:3335  player2 */\n      swap1\n      swap3\n      and\n      0x0100\n        /* \"contracts/PlayerCardsPick.sol\":3314:3335  playersTurn = player2 */\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsPick.sol\":3200:3346  if (player1MaxSpeed >= player2MaxSpeed) {... */\n    tag_227:\n        /* \"contracts/PlayerCardsPick.sol\":2916:3352  function startBattle() internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/BattlePick.sol\":193:6353  contract BattlePick is PlayerCardsPick {... */\n    tag_107:\n      mload(0x40)\n      dup1\n      0x0260\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_228\n      tag_229\n      jump\t// in\n    tag_228:\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x40\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x60\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x80\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xa0\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xc0\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_120:\n      0x40\n      dup1\n      mload\n      0xa0\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n    tag_149:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x03\n      swap1\n        /* \"--CODEGEN--\":29:31   */\n      0x20\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:32   */\n      mul\n        /* \"--CODEGEN--\":117:121   */\n      dup1\n        /* \"--CODEGEN--\":105:115   */\n      codesize\n        /* \"--CODEGEN--\":97:103   */\n      dup4\n        /* \"--CODEGEN--\":88:122   */\n      codecopy\n      pop\n        /* \"contracts/BattlePick.sol\":193:6353  contract BattlePick is PlayerCardsPick {... */\n      swap2\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_176:\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x60\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_182:\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0xa0\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n    tag_229:\n      mload(0x40)\n      dup1\n      0x0180\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_230\n      tag_120\n      jump\t// in\n    tag_230:\n      dup2\n      mstore\n      0x20\n      add\n      tag_232\n      tag_120\n      jump\t// in\n    tag_232:\n      dup2\n      mstore\n      0x00\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n        /* \"--CODEGEN--\":5:123   */\n    tag_234:\n      0x00\n        /* \"--CODEGEN--\":72:118   */\n      tag_235\n        /* \"--CODEGEN--\":110:116   */\n      dup3\n        /* \"--CODEGEN--\":97:117   */\n      calldataload\n        /* \"--CODEGEN--\":72:118   */\n      jump(tag_354)\n    tag_235:\n        /* \"--CODEGEN--\":63:118   */\n      swap4\n        /* \"--CODEGEN--\":57:123   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":174:953   */\n    tag_238:\n      0x00\n        /* \"--CODEGEN--\":315:318   */\n      dup3\n        /* \"--CODEGEN--\":308:312   */\n      0x1f\n        /* \"--CODEGEN--\":300:306   */\n      dup4\n        /* \"--CODEGEN--\":296:313   */\n      add\n        /* \"--CODEGEN--\":292:319   */\n      slt\n        /* \"--CODEGEN--\":282:284   */\n      tag_239\n      jumpi\n        /* \"--CODEGEN--\":333:334   */\n      0x00\n        /* \"--CODEGEN--\":330:331   */\n      dup1\n        /* \"--CODEGEN--\":323:335   */\n      revert\n        /* \"--CODEGEN--\":282:284   */\n    tag_239:\n        /* \"--CODEGEN--\":370:376   */\n      dup2\n        /* \"--CODEGEN--\":357:377   */\n      calldataload\n        /* \"--CODEGEN--\":392:496   */\n      tag_240\n        /* \"--CODEGEN--\":407:495   */\n      tag_241\n        /* \"--CODEGEN--\":488:494   */\n      dup3\n        /* \"--CODEGEN--\":407:495   */\n      jump(tag_242)\n    tag_241:\n        /* \"--CODEGEN--\":392:496   */\n      jump(tag_243)\n    tag_240:\n        /* \"--CODEGEN--\":383:496   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":513:518   */\n      dup2\n        /* \"--CODEGEN--\":538:544   */\n      dup2\n        /* \"--CODEGEN--\":531:536   */\n      dup4\n        /* \"--CODEGEN--\":524:545   */\n      mstore\n        /* \"--CODEGEN--\":568:572   */\n      0x20\n        /* \"--CODEGEN--\":560:566   */\n      dup5\n        /* \"--CODEGEN--\":556:573   */\n      add\n        /* \"--CODEGEN--\":546:573   */\n      swap4\n      pop\n        /* \"--CODEGEN--\":590:594   */\n      0x20\n        /* \"--CODEGEN--\":585:588   */\n      dup2\n        /* \"--CODEGEN--\":581:595   */\n      add\n        /* \"--CODEGEN--\":574:595   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":643:649   */\n      dup4\n        /* \"--CODEGEN--\":690:693   */\n      dup6\n        /* \"--CODEGEN--\":682:686   */\n      0xc0\n        /* \"--CODEGEN--\":674:680   */\n      dup5\n        /* \"--CODEGEN--\":670:687   */\n      mul\n        /* \"--CODEGEN--\":665:668   */\n      dup3\n        /* \"--CODEGEN--\":661:688   */\n      add\n        /* \"--CODEGEN--\":658:694   */\n      gt\n        /* \"--CODEGEN--\":655:657   */\n      iszero\n      tag_244\n      jumpi\n        /* \"--CODEGEN--\":707:708   */\n      0x00\n        /* \"--CODEGEN--\":704:705   */\n      dup1\n        /* \"--CODEGEN--\":697:709   */\n      revert\n        /* \"--CODEGEN--\":655:657   */\n    tag_244:\n        /* \"--CODEGEN--\":732:733   */\n      0x00\n        /* \"--CODEGEN--\":717:947   */\n    tag_245:\n        /* \"--CODEGEN--\":742:748   */\n      dup4\n        /* \"--CODEGEN--\":739:740   */\n      dup2\n        /* \"--CODEGEN--\":736:749   */\n      lt\n        /* \"--CODEGEN--\":717:947   */\n      iszero\n      tag_247\n      jumpi\n        /* \"--CODEGEN--\":800:803   */\n      dup2\n        /* \"--CODEGEN--\":822:883   */\n      tag_248\n        /* \"--CODEGEN--\":879:882   */\n      dup9\n        /* \"--CODEGEN--\":867:877   */\n      dup3\n        /* \"--CODEGEN--\":822:883   */\n      jump(tag_249)\n    tag_248:\n        /* \"--CODEGEN--\":810:884   */\n      dup5\n      mstore\n      pop\n        /* \"--CODEGEN--\":907:911   */\n      0x20\n        /* \"--CODEGEN--\":898:912   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"--CODEGEN--\":935:939   */\n      0xc0\n        /* \"--CODEGEN--\":926:940   */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n        /* \"--CODEGEN--\":764:765   */\n      0x01\n        /* \"--CODEGEN--\":757:766   */\n      add\n        /* \"--CODEGEN--\":717:947   */\n      jump(tag_245)\n    tag_247:\n        /* \"--CODEGEN--\":721:735   */\n      pop\n        /* \"--CODEGEN--\":275:953   */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":980:1595   */\n    tag_251:\n      0x00\n        /* \"--CODEGEN--\":1095:1098   */\n      dup3\n        /* \"--CODEGEN--\":1088:1092   */\n      0x1f\n        /* \"--CODEGEN--\":1080:1086   */\n      dup4\n        /* \"--CODEGEN--\":1076:1093   */\n      add\n        /* \"--CODEGEN--\":1072:1099   */\n      slt\n        /* \"--CODEGEN--\":1062:1064   */\n      tag_252\n      jumpi\n        /* \"--CODEGEN--\":1113:1114   */\n      0x00\n        /* \"--CODEGEN--\":1110:1111   */\n      dup1\n        /* \"--CODEGEN--\":1103:1115   */\n      revert\n        /* \"--CODEGEN--\":1062:1064   */\n    tag_252:\n        /* \"--CODEGEN--\":1137:1140   */\n      0x05\n        /* \"--CODEGEN--\":1155:1233   */\n      tag_253\n        /* \"--CODEGEN--\":1170:1232   */\n      tag_241\n        /* \"--CODEGEN--\":1225:1231   */\n      dup3\n        /* \"--CODEGEN--\":1170:1232   */\n      jump(tag_255)\n        /* \"--CODEGEN--\":1155:1233   */\n    tag_253:\n        /* \"--CODEGEN--\":1146:1233   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":1250:1255   */\n      dup2\n        /* \"--CODEGEN--\":1309:1315   */\n      dup4\n        /* \"--CODEGEN--\":1356:1359   */\n      dup6\n        /* \"--CODEGEN--\":1348:1352   */\n      0x20\n        /* \"--CODEGEN--\":1340:1346   */\n      dup5\n        /* \"--CODEGEN--\":1336:1353   */\n      mul\n        /* \"--CODEGEN--\":1331:1334   */\n      dup3\n        /* \"--CODEGEN--\":1327:1354   */\n      add\n        /* \"--CODEGEN--\":1324:1360   */\n      gt\n        /* \"--CODEGEN--\":1321:1323   */\n      iszero\n      tag_256\n      jumpi\n        /* \"--CODEGEN--\":1373:1374   */\n      0x00\n        /* \"--CODEGEN--\":1370:1371   */\n      dup1\n        /* \"--CODEGEN--\":1363:1375   */\n      revert\n        /* \"--CODEGEN--\":1321:1323   */\n    tag_256:\n        /* \"--CODEGEN--\":1398:1399   */\n      0x00\n        /* \"--CODEGEN--\":1383:1589   */\n    tag_257:\n        /* \"--CODEGEN--\":1408:1414   */\n      dup4\n        /* \"--CODEGEN--\":1405:1406   */\n      dup2\n        /* \"--CODEGEN--\":1402:1415   */\n      lt\n        /* \"--CODEGEN--\":1383:1589   */\n      iszero\n      tag_247\n      jumpi\n        /* \"--CODEGEN--\":1466:1469   */\n      dup2\n        /* \"--CODEGEN--\":1488:1525   */\n      tag_260\n        /* \"--CODEGEN--\":1521:1524   */\n      dup9\n        /* \"--CODEGEN--\":1509:1519   */\n      dup3\n        /* \"--CODEGEN--\":1488:1525   */\n      jump(tag_261)\n    tag_260:\n        /* \"--CODEGEN--\":1476:1526   */\n      dup5\n      mstore\n      pop\n        /* \"--CODEGEN--\":1549:1553   */\n      0x20\n        /* \"--CODEGEN--\":1540:1554   */\n      swap3\n      dup4\n      add\n      swap3\n        /* \"--CODEGEN--\":1568:1582   */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n        /* \"--CODEGEN--\":1430:1431   */\n      0x01\n        /* \"--CODEGEN--\":1423:1432   */\n      add\n        /* \"--CODEGEN--\":1383:1589   */\n      jump(tag_257)\n        /* \"--CODEGEN--\":1603:1735   */\n    tag_263:\n      0x00\n        /* \"--CODEGEN--\":1677:1730   */\n      tag_235\n        /* \"--CODEGEN--\":1722:1728   */\n      dup3\n        /* \"--CODEGEN--\":1709:1729   */\n      calldataload\n        /* \"--CODEGEN--\":1677:1730   */\n      jump(tag_265)\n        /* \"--CODEGEN--\":1743:2179   */\n    tag_267:\n      0x00\n        /* \"--CODEGEN--\":1852:1855   */\n      dup3\n        /* \"--CODEGEN--\":1845:1849   */\n      0x1f\n        /* \"--CODEGEN--\":1837:1843   */\n      dup4\n        /* \"--CODEGEN--\":1833:1850   */\n      add\n        /* \"--CODEGEN--\":1829:1856   */\n      slt\n        /* \"--CODEGEN--\":1819:1821   */\n      tag_268\n      jumpi\n        /* \"--CODEGEN--\":1870:1871   */\n      0x00\n        /* \"--CODEGEN--\":1867:1868   */\n      dup1\n        /* \"--CODEGEN--\":1860:1872   */\n      revert\n        /* \"--CODEGEN--\":1819:1821   */\n    tag_268:\n        /* \"--CODEGEN--\":1900:1906   */\n      dup2\n        /* \"--CODEGEN--\":1894:1907   */\n      mload\n        /* \"--CODEGEN--\":1922:1983   */\n      tag_269\n        /* \"--CODEGEN--\":1937:1982   */\n      tag_241\n        /* \"--CODEGEN--\":1975:1981   */\n      dup3\n        /* \"--CODEGEN--\":1937:1982   */\n      jump(tag_271)\n        /* \"--CODEGEN--\":1922:1983   */\n    tag_269:\n        /* \"--CODEGEN--\":1913:1983   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":2003:2009   */\n      dup1\n        /* \"--CODEGEN--\":1996:2001   */\n      dup3\n        /* \"--CODEGEN--\":1989:2010   */\n      mstore\n        /* \"--CODEGEN--\":2039:2043   */\n      0x20\n        /* \"--CODEGEN--\":2031:2037   */\n      dup4\n        /* \"--CODEGEN--\":2027:2044   */\n      add\n        /* \"--CODEGEN--\":2072:2076   */\n      0x20\n        /* \"--CODEGEN--\":2065:2070   */\n      dup4\n        /* \"--CODEGEN--\":2061:2077   */\n      add\n        /* \"--CODEGEN--\":2107:2110   */\n      dup6\n        /* \"--CODEGEN--\":2098:2104   */\n      dup4\n        /* \"--CODEGEN--\":2093:2096   */\n      dup4\n        /* \"--CODEGEN--\":2089:2105   */\n      add\n        /* \"--CODEGEN--\":2086:2111   */\n      gt\n        /* \"--CODEGEN--\":2083:2085   */\n      iszero\n      tag_272\n      jumpi\n        /* \"--CODEGEN--\":2124:2125   */\n      0x00\n        /* \"--CODEGEN--\":2121:2122   */\n      dup1\n        /* \"--CODEGEN--\":2114:2126   */\n      revert\n        /* \"--CODEGEN--\":2083:2085   */\n    tag_272:\n        /* \"--CODEGEN--\":2134:2173   */\n      tag_273\n        /* \"--CODEGEN--\":2166:2172   */\n      dup4\n        /* \"--CODEGEN--\":2161:2164   */\n      dup3\n        /* \"--CODEGEN--\":2156:2159   */\n      dup5\n        /* \"--CODEGEN--\":2134:2173   */\n      jump(tag_274)\n    tag_273:\n        /* \"--CODEGEN--\":1812:2179   */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":2226:3184   */\n    tag_276:\n      0x00\n        /* \"--CODEGEN--\":2347:2352   */\n      0x0180\n        /* \"--CODEGEN--\":2335:2344   */\n      dup3\n        /* \"--CODEGEN--\":2330:2333   */\n      dup5\n        /* \"--CODEGEN--\":2326:2345   */\n      sub\n        /* \"--CODEGEN--\":2322:2353   */\n      slt\n        /* \"--CODEGEN--\":2319:2321   */\n      iszero\n      tag_277\n      jumpi\n        /* \"--CODEGEN--\":2366:2367   */\n      0x00\n        /* \"--CODEGEN--\":2363:2364   */\n      dup1\n        /* \"--CODEGEN--\":2356:2368   */\n      revert\n        /* \"--CODEGEN--\":2319:2321   */\n    tag_277:\n        /* \"--CODEGEN--\":2384:2404   */\n      tag_278\n        /* \"--CODEGEN--\":2399:2403   */\n      0x80\n        /* \"--CODEGEN--\":2384:2404   */\n      jump(tag_243)\n    tag_278:\n        /* \"--CODEGEN--\":2454:2478   */\n      dup3\n      mload\n        /* \"--CODEGEN--\":2375:2404   */\n      swap1\n      swap2\n      pop\n        /* \"--CODEGEN--\":2498:2516   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":2487:2517   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":2484:2486   */\n      iszero\n      tag_279\n      jumpi\n        /* \"--CODEGEN--\":2530:2531   */\n      0x00\n        /* \"--CODEGEN--\":2527:2528   */\n      dup1\n        /* \"--CODEGEN--\":2520:2532   */\n      revert\n        /* \"--CODEGEN--\":2484:2486   */\n    tag_279:\n        /* \"--CODEGEN--\":2564:2630   */\n      tag_280\n        /* \"--CODEGEN--\":2626:2629   */\n      dup5\n        /* \"--CODEGEN--\":2617:2623   */\n      dup3\n        /* \"--CODEGEN--\":2606:2615   */\n      dup6\n        /* \"--CODEGEN--\":2602:2624   */\n      add\n        /* \"--CODEGEN--\":2564:2630   */\n      jump(tag_267)\n    tag_280:\n        /* \"--CODEGEN--\":2540:2631   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":2696:2698   */\n      0x20\n        /* \"--CODEGEN--\":2729:2817   */\n      tag_281\n        /* \"--CODEGEN--\":2813:2816   */\n      dup5\n        /* \"--CODEGEN--\":2789:2811   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":2729:2817   */\n      jump(tag_282)\n    tag_281:\n        /* \"--CODEGEN--\":2722:2726   */\n      0x20\n        /* \"--CODEGEN--\":2715:2720   */\n      dup4\n        /* \"--CODEGEN--\":2711:2727   */\n      add\n        /* \"--CODEGEN--\":2704:2818   */\n      mstore\n        /* \"--CODEGEN--\":2652:2829   */\n      pop\n        /* \"--CODEGEN--\":2881:2884   */\n      0xc0\n        /* \"--CODEGEN--\":2915:3003   */\n      tag_283\n        /* \"--CODEGEN--\":2999:3002   */\n      dup5\n        /* \"--CODEGEN--\":2990:2996   */\n      dup3\n        /* \"--CODEGEN--\":2979:2988   */\n      dup6\n        /* \"--CODEGEN--\":2975:2997   */\n      add\n        /* \"--CODEGEN--\":2915:3003   */\n      jump(tag_282)\n    tag_283:\n        /* \"--CODEGEN--\":2908:2912   */\n      0x40\n        /* \"--CODEGEN--\":2901:2906   */\n      dup4\n        /* \"--CODEGEN--\":2897:2913   */\n      add\n        /* \"--CODEGEN--\":2890:3004   */\n      mstore\n        /* \"--CODEGEN--\":2839:3015   */\n      pop\n        /* \"--CODEGEN--\":3069:3072   */\n      0x0160\n        /* \"--CODEGEN--\":3103:3162   */\n      tag_284\n        /* \"--CODEGEN--\":3158:3161   */\n      dup5\n        /* \"--CODEGEN--\":3149:3155   */\n      dup3\n        /* \"--CODEGEN--\":3138:3147   */\n      dup6\n        /* \"--CODEGEN--\":3134:3156   */\n      add\n        /* \"--CODEGEN--\":3103:3162   */\n      jump(tag_285)\n    tag_284:\n        /* \"--CODEGEN--\":3096:3100   */\n      0x60\n        /* \"--CODEGEN--\":3089:3094   */\n      dup4\n        /* \"--CODEGEN--\":3085:3101   */\n      add\n        /* \"--CODEGEN--\":3078:3163   */\n      mstore\n        /* \"--CODEGEN--\":3025:3174   */\n      pop\n        /* \"--CODEGEN--\":2313:3184   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":3237:4216   */\n    tag_282:\n      0x00\n        /* \"--CODEGEN--\":3365:3369   */\n      0xa0\n        /* \"--CODEGEN--\":3353:3362   */\n      dup3\n        /* \"--CODEGEN--\":3348:3351   */\n      dup5\n        /* \"--CODEGEN--\":3344:3363   */\n      sub\n        /* \"--CODEGEN--\":3340:3370   */\n      slt\n        /* \"--CODEGEN--\":3337:3339   */\n      iszero\n      tag_287\n      jumpi\n        /* \"--CODEGEN--\":3383:3384   */\n      0x00\n        /* \"--CODEGEN--\":3380:3381   */\n      dup1\n        /* \"--CODEGEN--\":3373:3385   */\n      revert\n        /* \"--CODEGEN--\":3337:3339   */\n    tag_287:\n        /* \"--CODEGEN--\":3401:3421   */\n      tag_288\n        /* \"--CODEGEN--\":3416:3420   */\n      0xa0\n        /* \"--CODEGEN--\":3401:3421   */\n      jump(tag_243)\n    tag_288:\n        /* \"--CODEGEN--\":3392:3421   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":3473:3474   */\n      0x00\n        /* \"--CODEGEN--\":3504:3563   */\n      tag_289\n        /* \"--CODEGEN--\":3559:3562   */\n      dup5\n        /* \"--CODEGEN--\":3539:3548   */\n      dup5\n        /* \"--CODEGEN--\":3504:3563   */\n      jump(tag_285)\n    tag_289:\n        /* \"--CODEGEN--\":3480:3564   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":3628:3630   */\n      0x20\n        /* \"--CODEGEN--\":3661:3720   */\n      tag_290\n        /* \"--CODEGEN--\":3716:3719   */\n      dup5\n        /* \"--CODEGEN--\":3692:3714   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":3661:3720   */\n      jump(tag_285)\n    tag_290:\n        /* \"--CODEGEN--\":3654:3658   */\n      0x20\n        /* \"--CODEGEN--\":3647:3652   */\n      dup4\n        /* \"--CODEGEN--\":3643:3659   */\n      add\n        /* \"--CODEGEN--\":3636:3721   */\n      mstore\n        /* \"--CODEGEN--\":3585:3732   */\n      pop\n        /* \"--CODEGEN--\":3782:3784   */\n      0x40\n        /* \"--CODEGEN--\":3815:3874   */\n      tag_291\n        /* \"--CODEGEN--\":3870:3873   */\n      dup5\n        /* \"--CODEGEN--\":3861:3867   */\n      dup3\n        /* \"--CODEGEN--\":3850:3859   */\n      dup6\n        /* \"--CODEGEN--\":3846:3868   */\n      add\n        /* \"--CODEGEN--\":3815:3874   */\n      jump(tag_285)\n    tag_291:\n        /* \"--CODEGEN--\":3808:3812   */\n      0x40\n        /* \"--CODEGEN--\":3801:3806   */\n      dup4\n        /* \"--CODEGEN--\":3797:3813   */\n      add\n        /* \"--CODEGEN--\":3790:3875   */\n      mstore\n        /* \"--CODEGEN--\":3742:3886   */\n      pop\n        /* \"--CODEGEN--\":3938:3940   */\n      0x60\n        /* \"--CODEGEN--\":3971:4030   */\n      tag_292\n        /* \"--CODEGEN--\":4026:4029   */\n      dup5\n        /* \"--CODEGEN--\":4017:4023   */\n      dup3\n        /* \"--CODEGEN--\":4006:4015   */\n      dup6\n        /* \"--CODEGEN--\":4002:4024   */\n      add\n        /* \"--CODEGEN--\":3971:4030   */\n      jump(tag_285)\n    tag_292:\n        /* \"--CODEGEN--\":3964:3968   */\n      0x60\n        /* \"--CODEGEN--\":3957:3962   */\n      dup4\n        /* \"--CODEGEN--\":3953:3969   */\n      add\n        /* \"--CODEGEN--\":3946:4031   */\n      mstore\n        /* \"--CODEGEN--\":3896:4042   */\n      pop\n        /* \"--CODEGEN--\":4101:4104   */\n      0x80\n        /* \"--CODEGEN--\":4135:4194   */\n      tag_293\n        /* \"--CODEGEN--\":4190:4193   */\n      dup5\n        /* \"--CODEGEN--\":4181:4187   */\n      dup3\n        /* \"--CODEGEN--\":4170:4179   */\n      dup6\n        /* \"--CODEGEN--\":4166:4188   */\n      add\n        /* \"--CODEGEN--\":4135:4194   */\n      jump(tag_285)\n    tag_293:\n        /* \"--CODEGEN--\":4128:4132   */\n      0x80\n        /* \"--CODEGEN--\":4121:4126   */\n      dup4\n        /* \"--CODEGEN--\":4117:4133   */\n      add\n        /* \"--CODEGEN--\":4110:4195   */\n      mstore\n        /* \"--CODEGEN--\":4052:4206   */\n      pop\n        /* \"--CODEGEN--\":3331:4216   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":4259:5902   */\n    tag_295:\n      0x00\n        /* \"--CODEGEN--\":4381:4386   */\n      0x0100\n        /* \"--CODEGEN--\":4369:4378   */\n      dup3\n        /* \"--CODEGEN--\":4364:4367   */\n      dup5\n        /* \"--CODEGEN--\":4360:4379   */\n      sub\n        /* \"--CODEGEN--\":4356:4387   */\n      slt\n        /* \"--CODEGEN--\":4353:4355   */\n      iszero\n      tag_296\n      jumpi\n        /* \"--CODEGEN--\":4400:4401   */\n      0x00\n        /* \"--CODEGEN--\":4397:4398   */\n      dup1\n        /* \"--CODEGEN--\":4390:4402   */\n      revert\n        /* \"--CODEGEN--\":4353:4355   */\n    tag_296:\n        /* \"--CODEGEN--\":4418:4439   */\n      tag_297\n        /* \"--CODEGEN--\":4433:4438   */\n      0x0100\n        /* \"--CODEGEN--\":4418:4439   */\n      jump(tag_243)\n    tag_297:\n        /* \"--CODEGEN--\":4489:4513   */\n      dup3\n      mload\n        /* \"--CODEGEN--\":4409:4439   */\n      swap1\n      swap2\n      pop\n        /* \"--CODEGEN--\":4533:4551   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":4522:4552   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":4519:4521   */\n      iszero\n      tag_298\n      jumpi\n        /* \"--CODEGEN--\":4565:4566   */\n      0x00\n        /* \"--CODEGEN--\":4562:4563   */\n      dup1\n        /* \"--CODEGEN--\":4555:4567   */\n      revert\n        /* \"--CODEGEN--\":4519:4521   */\n    tag_298:\n        /* \"--CODEGEN--\":4599:4665   */\n      tag_299\n        /* \"--CODEGEN--\":4661:4664   */\n      dup5\n        /* \"--CODEGEN--\":4652:4658   */\n      dup3\n        /* \"--CODEGEN--\":4641:4650   */\n      dup6\n        /* \"--CODEGEN--\":4637:4659   */\n      add\n        /* \"--CODEGEN--\":4599:4665   */\n      jump(tag_267)\n    tag_299:\n        /* \"--CODEGEN--\":4575:4666   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":4751:4753   */\n      0x20\n        /* \"--CODEGEN--\":4736:4754   */\n      dup3\n      add\n        /* \"--CODEGEN--\":4730:4755   */\n      mload\n        /* \"--CODEGEN--\":4775:4793   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":4764:4794   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":4761:4763   */\n      iszero\n      tag_300\n      jumpi\n        /* \"--CODEGEN--\":4807:4808   */\n      0x00\n        /* \"--CODEGEN--\":4804:4805   */\n      dup1\n        /* \"--CODEGEN--\":4797:4809   */\n      revert\n        /* \"--CODEGEN--\":4761:4763   */\n    tag_300:\n        /* \"--CODEGEN--\":4842:4923   */\n      tag_301\n        /* \"--CODEGEN--\":4919:4922   */\n      dup5\n        /* \"--CODEGEN--\":4910:4916   */\n      dup3\n        /* \"--CODEGEN--\":4899:4908   */\n      dup6\n        /* \"--CODEGEN--\":4895:4917   */\n      add\n        /* \"--CODEGEN--\":4842:4923   */\n      jump(tag_276)\n    tag_301:\n        /* \"--CODEGEN--\":4835:4839   */\n      0x20\n        /* \"--CODEGEN--\":4828:4833   */\n      dup4\n        /* \"--CODEGEN--\":4824:4840   */\n      add\n        /* \"--CODEGEN--\":4817:4924   */\n      mstore\n        /* \"--CODEGEN--\":4687:4935   */\n      pop\n        /* \"--CODEGEN--\":4991:4993   */\n      0x40\n        /* \"--CODEGEN--\":5024:5083   */\n      tag_302\n        /* \"--CODEGEN--\":5079:5082   */\n      dup5\n        /* \"--CODEGEN--\":5070:5076   */\n      dup3\n        /* \"--CODEGEN--\":5059:5068   */\n      dup6\n        /* \"--CODEGEN--\":5055:5077   */\n      add\n        /* \"--CODEGEN--\":5024:5083   */\n      jump(tag_285)\n    tag_302:\n        /* \"--CODEGEN--\":5017:5021   */\n      0x40\n        /* \"--CODEGEN--\":5010:5015   */\n      dup4\n        /* \"--CODEGEN--\":5006:5022   */\n      add\n        /* \"--CODEGEN--\":4999:5084   */\n      mstore\n        /* \"--CODEGEN--\":4945:5095   */\n      pop\n        /* \"--CODEGEN--\":5152:5154   */\n      0x60\n        /* \"--CODEGEN--\":5185:5244   */\n      tag_303\n        /* \"--CODEGEN--\":5240:5243   */\n      dup5\n        /* \"--CODEGEN--\":5231:5237   */\n      dup3\n        /* \"--CODEGEN--\":5220:5229   */\n      dup6\n        /* \"--CODEGEN--\":5216:5238   */\n      add\n        /* \"--CODEGEN--\":5185:5244   */\n      jump(tag_285)\n    tag_303:\n        /* \"--CODEGEN--\":5178:5182   */\n      0x60\n        /* \"--CODEGEN--\":5171:5176   */\n      dup4\n        /* \"--CODEGEN--\":5167:5183   */\n      add\n        /* \"--CODEGEN--\":5160:5245   */\n      mstore\n        /* \"--CODEGEN--\":5105:5256   */\n      pop\n        /* \"--CODEGEN--\":5310:5313   */\n      0x80\n        /* \"--CODEGEN--\":5344:5403   */\n      tag_304\n        /* \"--CODEGEN--\":5399:5402   */\n      dup5\n        /* \"--CODEGEN--\":5390:5396   */\n      dup3\n        /* \"--CODEGEN--\":5379:5388   */\n      dup6\n        /* \"--CODEGEN--\":5375:5397   */\n      add\n        /* \"--CODEGEN--\":5344:5403   */\n      jump(tag_285)\n    tag_304:\n        /* \"--CODEGEN--\":5337:5341   */\n      0x80\n        /* \"--CODEGEN--\":5330:5335   */\n      dup4\n        /* \"--CODEGEN--\":5326:5342   */\n      add\n        /* \"--CODEGEN--\":5319:5404   */\n      mstore\n        /* \"--CODEGEN--\":5266:5415   */\n      pop\n        /* \"--CODEGEN--\":5466:5469   */\n      0xa0\n        /* \"--CODEGEN--\":5500:5559   */\n      tag_305\n        /* \"--CODEGEN--\":5555:5558   */\n      dup5\n        /* \"--CODEGEN--\":5546:5552   */\n      dup3\n        /* \"--CODEGEN--\":5535:5544   */\n      dup6\n        /* \"--CODEGEN--\":5531:5553   */\n      add\n        /* \"--CODEGEN--\":5500:5559   */\n      jump(tag_285)\n    tag_305:\n        /* \"--CODEGEN--\":5493:5497   */\n      0xa0\n        /* \"--CODEGEN--\":5486:5491   */\n      dup4\n        /* \"--CODEGEN--\":5482:5498   */\n      add\n        /* \"--CODEGEN--\":5475:5560   */\n      mstore\n        /* \"--CODEGEN--\":5425:5571   */\n      pop\n        /* \"--CODEGEN--\":5623:5626   */\n      0xc0\n        /* \"--CODEGEN--\":5657:5716   */\n      tag_306\n        /* \"--CODEGEN--\":5712:5715   */\n      dup5\n        /* \"--CODEGEN--\":5703:5709   */\n      dup3\n        /* \"--CODEGEN--\":5692:5701   */\n      dup6\n        /* \"--CODEGEN--\":5688:5710   */\n      add\n        /* \"--CODEGEN--\":5657:5716   */\n      jump(tag_285)\n    tag_306:\n        /* \"--CODEGEN--\":5650:5654   */\n      0xc0\n        /* \"--CODEGEN--\":5643:5648   */\n      dup4\n        /* \"--CODEGEN--\":5639:5655   */\n      add\n        /* \"--CODEGEN--\":5632:5717   */\n      mstore\n        /* \"--CODEGEN--\":5581:5728   */\n      pop\n        /* \"--CODEGEN--\":5787:5790   */\n      0xe0\n        /* \"--CODEGEN--\":5821:5880   */\n      tag_307\n        /* \"--CODEGEN--\":5876:5879   */\n      dup5\n        /* \"--CODEGEN--\":5867:5873   */\n      dup3\n        /* \"--CODEGEN--\":5856:5865   */\n      dup6\n        /* \"--CODEGEN--\":5852:5874   */\n      add\n        /* \"--CODEGEN--\":5821:5880   */\n      jump(tag_285)\n    tag_307:\n        /* \"--CODEGEN--\":5814:5818   */\n      0xe0\n        /* \"--CODEGEN--\":5807:5812   */\n      dup4\n        /* \"--CODEGEN--\":5803:5819   */\n      add\n        /* \"--CODEGEN--\":5796:5881   */\n      mstore\n        /* \"--CODEGEN--\":5738:5892   */\n      pop\n        /* \"--CODEGEN--\":4347:5902   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":5949:7005   */\n    tag_249:\n      0x00\n        /* \"--CODEGEN--\":6062:6066   */\n      0xc0\n        /* \"--CODEGEN--\":6050:6059   */\n      dup3\n        /* \"--CODEGEN--\":6045:6048   */\n      dup5\n        /* \"--CODEGEN--\":6041:6060   */\n      sub\n        /* \"--CODEGEN--\":6037:6067   */\n      slt\n        /* \"--CODEGEN--\":6034:6036   */\n      iszero\n      tag_309\n      jumpi\n        /* \"--CODEGEN--\":6080:6081   */\n      0x00\n        /* \"--CODEGEN--\":6077:6078   */\n      dup1\n        /* \"--CODEGEN--\":6070:6082   */\n      revert\n        /* \"--CODEGEN--\":6034:6036   */\n    tag_309:\n        /* \"--CODEGEN--\":6098:6118   */\n      tag_310\n        /* \"--CODEGEN--\":6113:6117   */\n      0xc0\n        /* \"--CODEGEN--\":6098:6118   */\n      jump(tag_243)\n    tag_310:\n        /* \"--CODEGEN--\":6089:6118   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":6170:6171   */\n      0x00\n        /* \"--CODEGEN--\":6201:6250   */\n      tag_311\n        /* \"--CODEGEN--\":6246:6249   */\n      dup5\n        /* \"--CODEGEN--\":6226:6235   */\n      dup5\n        /* \"--CODEGEN--\":6201:6250   */\n      jump(tag_261)\n    tag_311:\n        /* \"--CODEGEN--\":6177:6251   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":6314:6316   */\n      0x20\n        /* \"--CODEGEN--\":6347:6395   */\n      tag_312\n        /* \"--CODEGEN--\":6391:6394   */\n      dup5\n        /* \"--CODEGEN--\":6367:6389   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":6347:6395   */\n      jump(tag_313)\n    tag_312:\n        /* \"--CODEGEN--\":6340:6344   */\n      0x20\n        /* \"--CODEGEN--\":6333:6338   */\n      dup4\n        /* \"--CODEGEN--\":6329:6345   */\n      add\n        /* \"--CODEGEN--\":6322:6396   */\n      mstore\n        /* \"--CODEGEN--\":6272:6407   */\n      pop\n        /* \"--CODEGEN--\":6460:6462   */\n      0x40\n        /* \"--CODEGEN--\":6493:6541   */\n      tag_314\n        /* \"--CODEGEN--\":6537:6540   */\n      dup5\n        /* \"--CODEGEN--\":6528:6534   */\n      dup3\n        /* \"--CODEGEN--\":6517:6526   */\n      dup6\n        /* \"--CODEGEN--\":6513:6535   */\n      add\n        /* \"--CODEGEN--\":6493:6541   */\n      jump(tag_313)\n    tag_314:\n        /* \"--CODEGEN--\":6486:6490   */\n      0x40\n        /* \"--CODEGEN--\":6479:6484   */\n      dup4\n        /* \"--CODEGEN--\":6475:6491   */\n      add\n        /* \"--CODEGEN--\":6468:6542   */\n      mstore\n        /* \"--CODEGEN--\":6417:6553   */\n      pop\n        /* \"--CODEGEN--\":6603:6605   */\n      0x60\n        /* \"--CODEGEN--\":6636:6684   */\n      tag_315\n        /* \"--CODEGEN--\":6680:6683   */\n      dup5\n        /* \"--CODEGEN--\":6671:6677   */\n      dup3\n        /* \"--CODEGEN--\":6660:6669   */\n      dup6\n        /* \"--CODEGEN--\":6656:6678   */\n      add\n        /* \"--CODEGEN--\":6636:6684   */\n      jump(tag_313)\n    tag_315:\n        /* \"--CODEGEN--\":6629:6633   */\n      0x60\n        /* \"--CODEGEN--\":6622:6627   */\n      dup4\n        /* \"--CODEGEN--\":6618:6634   */\n      add\n        /* \"--CODEGEN--\":6611:6685   */\n      mstore\n        /* \"--CODEGEN--\":6563:6696   */\n      pop\n        /* \"--CODEGEN--\":6748:6751   */\n      0x80\n        /* \"--CODEGEN--\":6782:6830   */\n      tag_316\n        /* \"--CODEGEN--\":6826:6829   */\n      dup5\n        /* \"--CODEGEN--\":6817:6823   */\n      dup3\n        /* \"--CODEGEN--\":6806:6815   */\n      dup6\n        /* \"--CODEGEN--\":6802:6824   */\n      add\n        /* \"--CODEGEN--\":6782:6830   */\n      jump(tag_313)\n    tag_316:\n        /* \"--CODEGEN--\":6775:6779   */\n      0x80\n        /* \"--CODEGEN--\":6768:6773   */\n      dup4\n        /* \"--CODEGEN--\":6764:6780   */\n      add\n        /* \"--CODEGEN--\":6757:6831   */\n      mstore\n        /* \"--CODEGEN--\":6706:6842   */\n      pop\n        /* \"--CODEGEN--\":6901:6904   */\n      0xa0\n        /* \"--CODEGEN--\":6935:6983   */\n      tag_317\n        /* \"--CODEGEN--\":6979:6982   */\n      dup5\n        /* \"--CODEGEN--\":6970:6976   */\n      dup3\n        /* \"--CODEGEN--\":6959:6968   */\n      dup6\n        /* \"--CODEGEN--\":6955:6977   */\n      add\n        /* \"--CODEGEN--\":6935:6983   */\n      jump(tag_313)\n    tag_317:\n        /* \"--CODEGEN--\":6928:6932   */\n      0xa0\n        /* \"--CODEGEN--\":6921:6926   */\n      dup4\n        /* \"--CODEGEN--\":6917:6933   */\n      add\n        /* \"--CODEGEN--\":6910:6984   */\n      mstore\n        /* \"--CODEGEN--\":6852:6995   */\n      pop\n        /* \"--CODEGEN--\":6028:7005   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":7012:7128   */\n    tag_313:\n      0x00\n        /* \"--CODEGEN--\":7078:7123   */\n      tag_235\n        /* \"--CODEGEN--\":7115:7121   */\n      dup3\n        /* \"--CODEGEN--\":7102:7122   */\n      calldataload\n        /* \"--CODEGEN--\":7078:7123   */\n      jump(tag_470)\n        /* \"--CODEGEN--\":7135:7255   */\n    tag_285:\n      0x00\n        /* \"--CODEGEN--\":7212:7250   */\n      tag_235\n        /* \"--CODEGEN--\":7242:7248   */\n      dup3\n        /* \"--CODEGEN--\":7236:7249   */\n      mload\n        /* \"--CODEGEN--\":7212:7250   */\n      jump(tag_470)\n        /* \"--CODEGEN--\":7262:7380   */\n    tag_261:\n      0x00\n        /* \"--CODEGEN--\":7329:7375   */\n      tag_235\n        /* \"--CODEGEN--\":7367:7373   */\n      dup3\n        /* \"--CODEGEN--\":7354:7374   */\n      calldataload\n        /* \"--CODEGEN--\":7329:7375   */\n      jump(tag_376)\n        /* \"--CODEGEN--\":7387:7628   */\n    tag_24:\n      0x00\n        /* \"--CODEGEN--\":7491:7493   */\n      0x20\n        /* \"--CODEGEN--\":7479:7488   */\n      dup3\n        /* \"--CODEGEN--\":7470:7477   */\n      dup5\n        /* \"--CODEGEN--\":7466:7489   */\n      sub\n        /* \"--CODEGEN--\":7462:7494   */\n      slt\n        /* \"--CODEGEN--\":7459:7461   */\n      iszero\n      tag_327\n      jumpi\n        /* \"--CODEGEN--\":7507:7508   */\n      0x00\n        /* \"--CODEGEN--\":7504:7505   */\n      dup1\n        /* \"--CODEGEN--\":7497:7509   */\n      revert\n        /* \"--CODEGEN--\":7459:7461   */\n    tag_327:\n        /* \"--CODEGEN--\":7542:7543   */\n      0x00\n        /* \"--CODEGEN--\":7559:7612   */\n      tag_328\n        /* \"--CODEGEN--\":7604:7611   */\n      dup5\n        /* \"--CODEGEN--\":7584:7593   */\n      dup5\n        /* \"--CODEGEN--\":7559:7612   */\n      jump(tag_234)\n    tag_328:\n        /* \"--CODEGEN--\":7549:7612   */\n      swap5\n        /* \"--CODEGEN--\":7453:7628   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":7635:8060   */\n    tag_41:\n      0x00\n        /* \"--CODEGEN--\":7788:7790   */\n      0x20\n        /* \"--CODEGEN--\":7776:7785   */\n      dup3\n        /* \"--CODEGEN--\":7767:7774   */\n      dup5\n        /* \"--CODEGEN--\":7763:7786   */\n      sub\n        /* \"--CODEGEN--\":7759:7791   */\n      slt\n        /* \"--CODEGEN--\":7756:7758   */\n      iszero\n      tag_330\n      jumpi\n        /* \"--CODEGEN--\":7804:7805   */\n      0x00\n        /* \"--CODEGEN--\":7801:7802   */\n      dup1\n        /* \"--CODEGEN--\":7794:7806   */\n      revert\n        /* \"--CODEGEN--\":7756:7758   */\n    tag_330:\n        /* \"--CODEGEN--\":7839:7870   */\n      dup2\n      calldataload\n        /* \"--CODEGEN--\":7890:7908   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":7879:7909   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":7876:7878   */\n      iszero\n      tag_331\n      jumpi\n        /* \"--CODEGEN--\":7922:7923   */\n      0x00\n        /* \"--CODEGEN--\":7919:7920   */\n      dup1\n        /* \"--CODEGEN--\":7912:7924   */\n      revert\n        /* \"--CODEGEN--\":7876:7878   */\n    tag_331:\n        /* \"--CODEGEN--\":7942:8044   */\n      tag_328\n        /* \"--CODEGEN--\":8036:8043   */\n      dup5\n        /* \"--CODEGEN--\":8027:8033   */\n      dup3\n        /* \"--CODEGEN--\":8016:8025   */\n      dup6\n        /* \"--CODEGEN--\":8012:8034   */\n      add\n        /* \"--CODEGEN--\":7942:8044   */\n      jump(tag_238)\n        /* \"--CODEGEN--\":8067:8355   */\n    tag_37:\n      0x00\n        /* \"--CODEGEN--\":8194:8197   */\n      0xa0\n        /* \"--CODEGEN--\":8182:8191   */\n      dup3\n        /* \"--CODEGEN--\":8173:8180   */\n      dup5\n        /* \"--CODEGEN--\":8169:8192   */\n      sub\n        /* \"--CODEGEN--\":8165:8198   */\n      slt\n        /* \"--CODEGEN--\":8162:8164   */\n      iszero\n      tag_334\n      jumpi\n        /* \"--CODEGEN--\":8211:8212   */\n      0x00\n        /* \"--CODEGEN--\":8208:8209   */\n      dup1\n        /* \"--CODEGEN--\":8201:8213   */\n      revert\n        /* \"--CODEGEN--\":8162:8164   */\n    tag_334:\n        /* \"--CODEGEN--\":8246:8247   */\n      0x00\n        /* \"--CODEGEN--\":8263:8339   */\n      tag_328\n        /* \"--CODEGEN--\":8331:8338   */\n      dup5\n        /* \"--CODEGEN--\":8311:8320   */\n      dup5\n        /* \"--CODEGEN--\":8263:8339   */\n      jump(tag_251)\n        /* \"--CODEGEN--\":8362:8617   */\n    tag_33:\n      0x00\n        /* \"--CODEGEN--\":8473:8475   */\n      0x20\n        /* \"--CODEGEN--\":8461:8470   */\n      dup3\n        /* \"--CODEGEN--\":8452:8459   */\n      dup5\n        /* \"--CODEGEN--\":8448:8471   */\n      sub\n        /* \"--CODEGEN--\":8444:8476   */\n      slt\n        /* \"--CODEGEN--\":8441:8443   */\n      iszero\n      tag_337\n      jumpi\n        /* \"--CODEGEN--\":8489:8490   */\n      0x00\n        /* \"--CODEGEN--\":8486:8487   */\n      dup1\n        /* \"--CODEGEN--\":8479:8491   */\n      revert\n        /* \"--CODEGEN--\":8441:8443   */\n    tag_337:\n        /* \"--CODEGEN--\":8524:8525   */\n      0x00\n        /* \"--CODEGEN--\":8541:8601   */\n      tag_328\n        /* \"--CODEGEN--\":8593:8600   */\n      dup5\n        /* \"--CODEGEN--\":8573:8582   */\n      dup5\n        /* \"--CODEGEN--\":8541:8601   */\n      jump(tag_263)\n        /* \"--CODEGEN--\":8624:9010   */\n    tag_113:\n      0x00\n        /* \"--CODEGEN--\":8761:8763   */\n      0x20\n        /* \"--CODEGEN--\":8749:8758   */\n      dup3\n        /* \"--CODEGEN--\":8740:8747   */\n      dup5\n        /* \"--CODEGEN--\":8736:8759   */\n      sub\n        /* \"--CODEGEN--\":8732:8764   */\n      slt\n        /* \"--CODEGEN--\":8729:8731   */\n      iszero\n      tag_340\n      jumpi\n        /* \"--CODEGEN--\":8777:8778   */\n      0x00\n        /* \"--CODEGEN--\":8774:8775   */\n      dup1\n        /* \"--CODEGEN--\":8767:8779   */\n      revert\n        /* \"--CODEGEN--\":8729:8731   */\n    tag_340:\n        /* \"--CODEGEN--\":8812:8836   */\n      dup2\n      mload\n        /* \"--CODEGEN--\":8856:8874   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":8845:8875   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":8842:8844   */\n      iszero\n      tag_341\n      jumpi\n        /* \"--CODEGEN--\":8888:8889   */\n      0x00\n        /* \"--CODEGEN--\":8885:8886   */\n      dup1\n        /* \"--CODEGEN--\":8878:8890   */\n      revert\n        /* \"--CODEGEN--\":8842:8844   */\n    tag_341:\n        /* \"--CODEGEN--\":8908:8994   */\n      tag_328\n        /* \"--CODEGEN--\":8986:8993   */\n      dup5\n        /* \"--CODEGEN--\":8977:8983   */\n      dup3\n        /* \"--CODEGEN--\":8966:8975   */\n      dup6\n        /* \"--CODEGEN--\":8962:8984   */\n      add\n        /* \"--CODEGEN--\":8908:8994   */\n      jump(tag_295)\n        /* \"--CODEGEN--\":9018:9291   */\n    tag_344:\n      0x00\n        /* \"--CODEGEN--\":9153:9251   */\n      tag_345\n        /* \"--CODEGEN--\":9247:9250   */\n      dup4\n        /* \"--CODEGEN--\":9239:9245   */\n      dup4\n        /* \"--CODEGEN--\":9153:9251   */\n      jump(tag_428)\n    tag_345:\n      pop\n      pop\n        /* \"--CODEGEN--\":9280:9284   */\n      0xc0\n        /* \"--CODEGEN--\":9271:9285   */\n      add\n      swap1\n        /* \"--CODEGEN--\":9146:9291   */\n      jump\n        /* \"--CODEGEN--\":9300:9473   */\n    tag_348:\n      0x00\n        /* \"--CODEGEN--\":9387:9433   */\n      tag_349\n        /* \"--CODEGEN--\":9429:9432   */\n      dup4\n        /* \"--CODEGEN--\":9421:9427   */\n      dup4\n        /* \"--CODEGEN--\":9387:9433   */\n      jump(tag_350)\n    tag_349:\n      pop\n      pop\n        /* \"--CODEGEN--\":9462:9466   */\n      0x20\n        /* \"--CODEGEN--\":9453:9467   */\n      add\n      swap1\n        /* \"--CODEGEN--\":9380:9473   */\n      jump\n        /* \"--CODEGEN--\":9481:9601   */\n    tag_352:\n        /* \"--CODEGEN--\":9564:9595   */\n      tag_353\n        /* \"--CODEGEN--\":9589:9594   */\n      dup2\n        /* \"--CODEGEN--\":9564:9595   */\n      jump(tag_354)\n    tag_353:\n        /* \"--CODEGEN--\":9559:9562   */\n      dup3\n        /* \"--CODEGEN--\":9552:9596   */\n      mstore\n        /* \"--CODEGEN--\":9546:9601   */\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":9691:10468   */\n    tag_356:\n      0x00\n        /* \"--CODEGEN--\":9870:9944   */\n      tag_357\n        /* \"--CODEGEN--\":9938:9943   */\n      dup3\n        /* \"--CODEGEN--\":9870:9944   */\n      jump(tag_358)\n    tag_357:\n        /* \"--CODEGEN--\":9957:10057   */\n      tag_359\n        /* \"--CODEGEN--\":10050:10056   */\n      dup2\n        /* \"--CODEGEN--\":10045:10048   */\n      dup6\n        /* \"--CODEGEN--\":9957:10057   */\n      jump(tag_360)\n    tag_359:\n        /* \"--CODEGEN--\":9950:10057   */\n      swap4\n      pop\n        /* \"--CODEGEN--\":10077:10153   */\n      tag_361\n        /* \"--CODEGEN--\":10147:10152   */\n      dup4\n        /* \"--CODEGEN--\":10077:10153   */\n      jump(tag_362)\n    tag_361:\n        /* \"--CODEGEN--\":10174:10175   */\n      0x00\n        /* \"--CODEGEN--\":10159:10446   */\n    tag_363:\n        /* \"--CODEGEN--\":10184:10190   */\n      dup3\n        /* \"--CODEGEN--\":10181:10182   */\n      dup2\n        /* \"--CODEGEN--\":10178:10191   */\n      lt\n        /* \"--CODEGEN--\":10159:10446   */\n      iszero\n      tag_365\n      jumpi\n        /* \"--CODEGEN--\":10231:10342   */\n      tag_366\n        /* \"--CODEGEN--\":10338:10341   */\n      dup7\n        /* \"--CODEGEN--\":10329:10335   */\n      dup4\n        /* \"--CODEGEN--\":10323:10336   */\n      mload\n        /* \"--CODEGEN--\":10231:10342   */\n      jump(tag_344)\n    tag_366:\n        /* \"--CODEGEN--\":10224:10342   */\n      swap6\n      pop\n        /* \"--CODEGEN--\":10359:10439   */\n      tag_367\n        /* \"--CODEGEN--\":10432:10438   */\n      dup3\n        /* \"--CODEGEN--\":10359:10439   */\n      jump(tag_362)\n    tag_367:\n        /* \"--CODEGEN--\":10349:10439   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":10206:10207   */\n      0x01\n        /* \"--CODEGEN--\":10199:10208   */\n      add\n        /* \"--CODEGEN--\":10159:10446   */\n      jump(tag_363)\n    tag_365:\n      pop\n        /* \"--CODEGEN--\":10459:10462   */\n      swap4\n      swap5\n        /* \"--CODEGEN--\":9849:10468   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":10509:11100   */\n    tag_370:\n        /* \"--CODEGEN--\":10642:10694   */\n      tag_371\n        /* \"--CODEGEN--\":10688:10693   */\n      dup2\n        /* \"--CODEGEN--\":10642:10694   */\n      jump(tag_372)\n    tag_371:\n        /* \"--CODEGEN--\":10707:10791   */\n      tag_373\n        /* \"--CODEGEN--\":10784:10790   */\n      dup2\n        /* \"--CODEGEN--\":10779:10782   */\n      dup5\n        /* \"--CODEGEN--\":10707:10791   */\n      jump(tag_374)\n    tag_373:\n        /* \"--CODEGEN--\":10700:10791   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":10811:10865   */\n      tag_375\n        /* \"--CODEGEN--\":10859:10864   */\n      dup3\n        /* \"--CODEGEN--\":10811:10865   */\n      jump(tag_376)\n    tag_375:\n        /* \"--CODEGEN--\":10886:10887   */\n      0x00\n        /* \"--CODEGEN--\":10871:11088   */\n    tag_377:\n        /* \"--CODEGEN--\":10896:10902   */\n      dup3\n        /* \"--CODEGEN--\":10893:10894   */\n      dup2\n        /* \"--CODEGEN--\":10890:10903   */\n      lt\n        /* \"--CODEGEN--\":10871:11088   */\n      iszero\n      tag_379\n      jumpi\n        /* \"--CODEGEN--\":10943:11006   */\n      tag_380\n        /* \"--CODEGEN--\":11002:11005   */\n      dup6\n        /* \"--CODEGEN--\":10993:10999   */\n      dup4\n        /* \"--CODEGEN--\":10987:11000   */\n      mload\n        /* \"--CODEGEN--\":10943:11006   */\n      jump(tag_348)\n    tag_380:\n        /* \"--CODEGEN--\":10936:11006   */\n      swap5\n      pop\n        /* \"--CODEGEN--\":11023:11081   */\n      tag_381\n        /* \"--CODEGEN--\":11074:11080   */\n      dup3\n        /* \"--CODEGEN--\":11023:11081   */\n      jump(tag_362)\n    tag_381:\n        /* \"--CODEGEN--\":11013:11081   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":10918:10919   */\n      0x01\n        /* \"--CODEGEN--\":10911:10920   */\n      add\n        /* \"--CODEGEN--\":10871:11088   */\n      jump(tag_377)\n    tag_379:\n        /* \"--CODEGEN--\":10875:10889   */\n      pop\n        /* \"--CODEGEN--\":10621:11100   */\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":11141:11732   */\n    tag_384:\n        /* \"--CODEGEN--\":11274:11326   */\n      tag_385\n        /* \"--CODEGEN--\":11320:11325   */\n      dup2\n        /* \"--CODEGEN--\":11274:11326   */\n      jump(tag_386)\n    tag_385:\n        /* \"--CODEGEN--\":11339:11423   */\n      tag_387\n        /* \"--CODEGEN--\":11416:11422   */\n      dup2\n        /* \"--CODEGEN--\":11411:11414   */\n      dup5\n        /* \"--CODEGEN--\":11339:11423   */\n      jump(tag_374)\n    tag_387:\n        /* \"--CODEGEN--\":11332:11423   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":11443:11497   */\n      tag_389\n        /* \"--CODEGEN--\":11491:11496   */\n      dup3\n        /* \"--CODEGEN--\":11443:11497   */\n      jump(tag_376)\n    tag_389:\n        /* \"--CODEGEN--\":11518:11519   */\n      0x00\n        /* \"--CODEGEN--\":11503:11720   */\n    tag_391:\n        /* \"--CODEGEN--\":11528:11534   */\n      dup3\n        /* \"--CODEGEN--\":11525:11526   */\n      dup2\n        /* \"--CODEGEN--\":11522:11535   */\n      lt\n        /* \"--CODEGEN--\":11503:11720   */\n      iszero\n      tag_379\n      jumpi\n        /* \"--CODEGEN--\":11575:11638   */\n      tag_394\n        /* \"--CODEGEN--\":11634:11637   */\n      dup6\n        /* \"--CODEGEN--\":11625:11631   */\n      dup4\n        /* \"--CODEGEN--\":11619:11632   */\n      mload\n        /* \"--CODEGEN--\":11575:11638   */\n      jump(tag_348)\n    tag_394:\n        /* \"--CODEGEN--\":11568:11638   */\n      swap5\n      pop\n        /* \"--CODEGEN--\":11655:11713   */\n      tag_395\n        /* \"--CODEGEN--\":11706:11712   */\n      dup3\n        /* \"--CODEGEN--\":11655:11713   */\n      jump(tag_362)\n    tag_395:\n        /* \"--CODEGEN--\":11645:11713   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":11550:11551   */\n      0x01\n        /* \"--CODEGEN--\":11543:11552   */\n      add\n        /* \"--CODEGEN--\":11503:11720   */\n      jump(tag_391)\n        /* \"--CODEGEN--\":11740:11851   */\n    tag_398:\n        /* \"--CODEGEN--\":11817:11845   */\n      tag_353\n        /* \"--CODEGEN--\":11839:11844   */\n      dup2\n        /* \"--CODEGEN--\":11817:11845   */\n      jump(tag_400)\n        /* \"--CODEGEN--\":11858:11994   */\n    tag_402:\n        /* \"--CODEGEN--\":11946:11988   */\n      tag_353\n        /* \"--CODEGEN--\":11982:11987   */\n      dup2\n        /* \"--CODEGEN--\":11946:11988   */\n      jump(tag_404)\n        /* \"--CODEGEN--\":12002:12467   */\n    tag_406:\n      0x00\n        /* \"--CODEGEN--\":12162:12229   */\n      tag_407\n        /* \"--CODEGEN--\":12226:12228   */\n      0x2c\n        /* \"--CODEGEN--\":12221:12224   */\n      dup4\n        /* \"--CODEGEN--\":12162:12229   */\n      jump(tag_360)\n    tag_407:\n        /* \"--CODEGEN--\":12262:12328   */\n      0x426f746820706c6179657273206861766520746f2068617665207069636b6564\n        /* \"--CODEGEN--\":12242:12329   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":12363:12429   */\n      0x2074686569722063617264730000000000000000000000000000000000000000\n        /* \"--CODEGEN--\":12358:12360   */\n      0x20\n        /* \"--CODEGEN--\":12349:12361   */\n      dup3\n      add\n        /* \"--CODEGEN--\":12342:12430   */\n      mstore\n        /* \"--CODEGEN--\":12458:12460   */\n      0x40\n        /* \"--CODEGEN--\":12449:12461   */\n      add\n      swap3\n        /* \"--CODEGEN--\":12148:12467   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":12476:12840   */\n    tag_410:\n      0x00\n        /* \"--CODEGEN--\":12636:12703   */\n      tag_411\n        /* \"--CODEGEN--\":12700:12702   */\n      0x0c\n        /* \"--CODEGEN--\":12695:12698   */\n      dup4\n        /* \"--CODEGEN--\":12636:12703   */\n      jump(tag_360)\n    tag_411:\n        /* \"--CODEGEN--\":12736:12802   */\n      0x496e76616c6964206d6f76650000000000000000000000000000000000000000\n        /* \"--CODEGEN--\":12716:12803   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":12831:12833   */\n      0x20\n        /* \"--CODEGEN--\":12822:12834   */\n      add\n      swap3\n        /* \"--CODEGEN--\":12622:12840   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":12849:13314   */\n    tag_413:\n      0x00\n        /* \"--CODEGEN--\":13009:13076   */\n      tag_414\n        /* \"--CODEGEN--\":13073:13075   */\n      0x29\n        /* \"--CODEGEN--\":13068:13071   */\n      dup4\n        /* \"--CODEGEN--\":13009:13076   */\n      jump(tag_360)\n    tag_414:\n        /* \"--CODEGEN--\":13109:13175   */\n      0x706c6179657273207475726e20646f6573206e6f7420657175616c2065697468\n        /* \"--CODEGEN--\":13089:13176   */\n      dup2\n      mstore\n      mul(0x32b910383630bcb2b9, shl(0xb9, 0x01))\n        /* \"--CODEGEN--\":13205:13207   */\n      0x20\n        /* \"--CODEGEN--\":13196:13208   */\n      dup3\n      add\n        /* \"--CODEGEN--\":13189:13277   */\n      mstore\n        /* \"--CODEGEN--\":13305:13307   */\n      0x40\n        /* \"--CODEGEN--\":13296:13308   */\n      add\n      swap3\n        /* \"--CODEGEN--\":12995:13314   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":13323:13687   */\n    tag_416:\n      0x00\n        /* \"--CODEGEN--\":13483:13550   */\n      tag_417\n        /* \"--CODEGEN--\":13547:13549   */\n      0x0d\n        /* \"--CODEGEN--\":13542:13545   */\n      dup4\n        /* \"--CODEGEN--\":13483:13550   */\n      jump(tag_360)\n    tag_417:\n        /* \"--CODEGEN--\":13583:13649   */\n      0x4e6f7420796f7572207475726e00000000000000000000000000000000000000\n        /* \"--CODEGEN--\":13563:13650   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":13678:13680   */\n      0x20\n        /* \"--CODEGEN--\":13669:13681   */\n      add\n      swap3\n        /* \"--CODEGEN--\":13469:13687   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":13696:14161   */\n    tag_419:\n      0x00\n        /* \"--CODEGEN--\":13856:13923   */\n      tag_420\n        /* \"--CODEGEN--\":13920:13922   */\n      0x25\n        /* \"--CODEGEN--\":13915:13918   */\n      dup4\n        /* \"--CODEGEN--\":13856:13923   */\n      jump(tag_360)\n    tag_420:\n        /* \"--CODEGEN--\":13956:14022   */\n      0x506c617965722068617320616c7265616479207069636b656420746865697220\n        /* \"--CODEGEN--\":13936:14023   */\n      dup2\n      mstore\n      mul(0x6361726473, shl(0xd8, 0x01))\n        /* \"--CODEGEN--\":14052:14054   */\n      0x20\n        /* \"--CODEGEN--\":14043:14055   */\n      dup3\n      add\n        /* \"--CODEGEN--\":14036:14124   */\n      mstore\n        /* \"--CODEGEN--\":14152:14154   */\n      0x40\n        /* \"--CODEGEN--\":14143:14155   */\n      add\n      swap3\n        /* \"--CODEGEN--\":13842:14161   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":14170:14635   */\n    tag_422:\n      0x00\n        /* \"--CODEGEN--\":14330:14397   */\n      tag_423\n        /* \"--CODEGEN--\":14394:14396   */\n      0x28\n        /* \"--CODEGEN--\":14389:14392   */\n      dup4\n        /* \"--CODEGEN--\":14330:14397   */\n      jump(tag_360)\n    tag_423:\n        /* \"--CODEGEN--\":14430:14496   */\n      0x5472616e73616374696f6e2073656e646572206d75737420626520706c617965\n        /* \"--CODEGEN--\":14410:14497   */\n      dup2\n      mstore\n      mul(0x3910189037b91019, shl(0xc1, 0x01))\n        /* \"--CODEGEN--\":14526:14528   */\n      0x20\n        /* \"--CODEGEN--\":14517:14529   */\n      dup3\n      add\n        /* \"--CODEGEN--\":14510:14598   */\n      mstore\n        /* \"--CODEGEN--\":14626:14628   */\n      0x40\n        /* \"--CODEGEN--\":14617:14629   */\n      add\n      swap3\n        /* \"--CODEGEN--\":14316:14635   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":14644:15008   */\n    tag_425:\n      0x00\n        /* \"--CODEGEN--\":14804:14871   */\n      tag_426\n        /* \"--CODEGEN--\":14868:14870   */\n      0x0f\n        /* \"--CODEGEN--\":14863:14866   */\n      dup4\n        /* \"--CODEGEN--\":14804:14871   */\n      jump(tag_360)\n    tag_426:\n        /* \"--CODEGEN--\":14904:14970   */\n      0x4e6f7420656e6f756768206d616e610000000000000000000000000000000000\n        /* \"--CODEGEN--\":14884:14971   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":14999:15001   */\n      0x20\n        /* \"--CODEGEN--\":14990:15002   */\n      add\n      swap3\n        /* \"--CODEGEN--\":14790:15008   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":15093:16185   */\n    tag_428:\n        /* \"--CODEGEN--\":15309:15331   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":15242:15246   */\n      0xc0\n        /* \"--CODEGEN--\":15233:15247   */\n      dup4\n      add\n      swap1\n        /* \"--CODEGEN--\":15337:15398   */\n      tag_429\n        /* \"--CODEGEN--\":15237:15240   */\n      dup5\n        /* \"--CODEGEN--\":15309:15331   */\n      dup3\n        /* \"--CODEGEN--\":15337:15398   */\n      jump(tag_350)\n    tag_429:\n        /* \"--CODEGEN--\":15262:15404   */\n      pop\n        /* \"--CODEGEN--\":15478:15482   */\n      0x20\n        /* \"--CODEGEN--\":15471:15476   */\n      dup3\n        /* \"--CODEGEN--\":15467:15483   */\n      add\n        /* \"--CODEGEN--\":15461:15484   */\n      mload\n        /* \"--CODEGEN--\":15490:15550   */\n      tag_430\n        /* \"--CODEGEN--\":15544:15548   */\n      0x20\n        /* \"--CODEGEN--\":15539:15542   */\n      dup6\n        /* \"--CODEGEN--\":15535:15549   */\n      add\n        /* \"--CODEGEN--\":15522:15533   */\n      dup3\n        /* \"--CODEGEN--\":15490:15550   */\n      jump(tag_431)\n    tag_430:\n        /* \"--CODEGEN--\":15414:15556   */\n      pop\n        /* \"--CODEGEN--\":15631:15635   */\n      0x40\n        /* \"--CODEGEN--\":15624:15629   */\n      dup3\n        /* \"--CODEGEN--\":15620:15636   */\n      add\n        /* \"--CODEGEN--\":15614:15637   */\n      mload\n        /* \"--CODEGEN--\":15643:15703   */\n      tag_432\n        /* \"--CODEGEN--\":15697:15701   */\n      0x40\n        /* \"--CODEGEN--\":15692:15695   */\n      dup6\n        /* \"--CODEGEN--\":15688:15702   */\n      add\n        /* \"--CODEGEN--\":15675:15686   */\n      dup3\n        /* \"--CODEGEN--\":15643:15703   */\n      jump(tag_431)\n    tag_432:\n        /* \"--CODEGEN--\":15566:15709   */\n      pop\n        /* \"--CODEGEN--\":15781:15785   */\n      0x60\n        /* \"--CODEGEN--\":15774:15779   */\n      dup3\n        /* \"--CODEGEN--\":15770:15786   */\n      add\n        /* \"--CODEGEN--\":15764:15787   */\n      mload\n        /* \"--CODEGEN--\":15793:15853   */\n      tag_433\n        /* \"--CODEGEN--\":15847:15851   */\n      0x60\n        /* \"--CODEGEN--\":15842:15845   */\n      dup6\n        /* \"--CODEGEN--\":15838:15852   */\n      add\n        /* \"--CODEGEN--\":15825:15836   */\n      dup3\n        /* \"--CODEGEN--\":15793:15853   */\n      jump(tag_431)\n    tag_433:\n        /* \"--CODEGEN--\":15719:15859   */\n      pop\n        /* \"--CODEGEN--\":15933:15937   */\n      0x80\n        /* \"--CODEGEN--\":15926:15931   */\n      dup3\n        /* \"--CODEGEN--\":15922:15938   */\n      add\n        /* \"--CODEGEN--\":15916:15939   */\n      mload\n        /* \"--CODEGEN--\":15945:16005   */\n      tag_434\n        /* \"--CODEGEN--\":15999:16003   */\n      0x80\n        /* \"--CODEGEN--\":15994:15997   */\n      dup6\n        /* \"--CODEGEN--\":15990:16004   */\n      add\n        /* \"--CODEGEN--\":15977:15988   */\n      dup3\n        /* \"--CODEGEN--\":15945:16005   */\n      jump(tag_431)\n    tag_434:\n        /* \"--CODEGEN--\":15869:16011   */\n      pop\n        /* \"--CODEGEN--\":16092:16096   */\n      0xa0\n        /* \"--CODEGEN--\":16085:16090   */\n      dup3\n        /* \"--CODEGEN--\":16081:16097   */\n      add\n        /* \"--CODEGEN--\":16075:16098   */\n      mload\n        /* \"--CODEGEN--\":16104:16164   */\n      tag_202\n        /* \"--CODEGEN--\":16158:16162   */\n      0xa0\n        /* \"--CODEGEN--\":16153:16156   */\n      dup6\n        /* \"--CODEGEN--\":16149:16163   */\n      add\n        /* \"--CODEGEN--\":16136:16147   */\n      dup3\n        /* \"--CODEGEN--\":16104:16164   */\n      jump(tag_431)\n        /* \"--CODEGEN--\":17431:18800   */\n    tag_444:\n        /* \"--CODEGEN--\":17654:17676   */\n      dup1\n      sload\n        /* \"--CODEGEN--\":17581:17585   */\n      0xc0\n        /* \"--CODEGEN--\":17572:17586   */\n      dup4\n      add\n      swap1\n        /* \"--CODEGEN--\":17701:17756   */\n      tag_445\n        /* \"--CODEGEN--\":17654:17676   */\n      dup2\n        /* \"--CODEGEN--\":17701:17756   */\n      jump(tag_446)\n    tag_445:\n        /* \"--CODEGEN--\":17762:17823   */\n      tag_447\n        /* \"--CODEGEN--\":17813:17816   */\n      dup6\n        /* \"--CODEGEN--\":17796:17807   */\n      dup3\n        /* \"--CODEGEN--\":17762:17823   */\n      jump(tag_350)\n    tag_447:\n      pop\n      pop\n        /* \"--CODEGEN--\":17891:17894   */\n      0x01\n        /* \"--CODEGEN--\":17880:17895   */\n      dup3\n      add\n        /* \"--CODEGEN--\":17874:17896   */\n      sload\n        /* \"--CODEGEN--\":17921:17975   */\n      tag_448\n        /* \"--CODEGEN--\":17874:17896   */\n      dup2\n        /* \"--CODEGEN--\":17921:17975   */\n      jump(tag_449)\n    tag_448:\n        /* \"--CODEGEN--\":17981:18041   */\n      tag_450\n        /* \"--CODEGEN--\":18035:18039   */\n      0x20\n        /* \"--CODEGEN--\":18030:18033   */\n      dup7\n        /* \"--CODEGEN--\":18026:18040   */\n      add\n        /* \"--CODEGEN--\":18013:18024   */\n      dup3\n        /* \"--CODEGEN--\":17981:18041   */\n      jump(tag_431)\n    tag_450:\n        /* \"--CODEGEN--\":17839:18047   */\n      pop\n        /* \"--CODEGEN--\":18105:18159   */\n      tag_451\n        /* \"--CODEGEN--\":18149:18158   */\n      dup2\n        /* \"--CODEGEN--\":18105:18159   */\n      jump(tag_452)\n    tag_451:\n        /* \"--CODEGEN--\":18165:18225   */\n      tag_453\n        /* \"--CODEGEN--\":18219:18223   */\n      0x40\n        /* \"--CODEGEN--\":18214:18217   */\n      dup7\n        /* \"--CODEGEN--\":18210:18224   */\n      add\n        /* \"--CODEGEN--\":18197:18208   */\n      dup3\n        /* \"--CODEGEN--\":18165:18225   */\n      jump(tag_431)\n    tag_453:\n        /* \"--CODEGEN--\":18057:18231   */\n      pop\n        /* \"--CODEGEN--\":18286:18340   */\n      tag_454\n        /* \"--CODEGEN--\":18330:18339   */\n      dup2\n        /* \"--CODEGEN--\":18286:18340   */\n      jump(tag_455)\n    tag_454:\n        /* \"--CODEGEN--\":18346:18406   */\n      tag_456\n        /* \"--CODEGEN--\":18400:18404   */\n      0x60\n        /* \"--CODEGEN--\":18395:18398   */\n      dup7\n        /* \"--CODEGEN--\":18391:18405   */\n      add\n        /* \"--CODEGEN--\":18378:18389   */\n      dup3\n        /* \"--CODEGEN--\":18346:18406   */\n      jump(tag_431)\n    tag_456:\n        /* \"--CODEGEN--\":18241:18412   */\n      pop\n        /* \"--CODEGEN--\":18469:18523   */\n      tag_457\n        /* \"--CODEGEN--\":18513:18522   */\n      dup2\n        /* \"--CODEGEN--\":18469:18523   */\n      jump(tag_458)\n    tag_457:\n        /* \"--CODEGEN--\":18529:18589   */\n      tag_459\n        /* \"--CODEGEN--\":18583:18587   */\n      0x80\n        /* \"--CODEGEN--\":18578:18581   */\n      dup7\n        /* \"--CODEGEN--\":18574:18588   */\n      add\n        /* \"--CODEGEN--\":18561:18572   */\n      dup3\n        /* \"--CODEGEN--\":18529:18589   */\n      jump(tag_431)\n    tag_459:\n        /* \"--CODEGEN--\":18422:18595   */\n      pop\n        /* \"--CODEGEN--\":18659:18713   */\n      tag_460\n        /* \"--CODEGEN--\":18703:18712   */\n      dup2\n        /* \"--CODEGEN--\":18659:18713   */\n      jump(tag_461)\n    tag_460:\n        /* \"--CODEGEN--\":18719:18779   */\n      tag_379\n        /* \"--CODEGEN--\":18773:18777   */\n      0xa0\n        /* \"--CODEGEN--\":18768:18771   */\n      dup7\n        /* \"--CODEGEN--\":18764:18778   */\n      add\n        /* \"--CODEGEN--\":18751:18762   */\n      dup3\n        /* \"--CODEGEN--\":18719:18779   */\n      jump(tag_431)\n        /* \"--CODEGEN--\":18884:19539   */\n    tag_464:\n        /* \"--CODEGEN--\":19113:19135   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":19041:19045   */\n      0x40\n        /* \"--CODEGEN--\":19148:19185   */\n      dup1\n      dup5\n      mstore\n        /* \"--CODEGEN--\":18884:19539   */\n      0x00\n      swap2\n        /* \"--CODEGEN--\":19032:19046   */\n      swap1\n      dup5\n      add\n      swap1\n        /* \"--CODEGEN--\":19200:19346   */\n      tag_465\n        /* \"--CODEGEN--\":19032:19046   */\n      dup3\n        /* \"--CODEGEN--\":19113:19135   */\n      dup3\n        /* \"--CODEGEN--\":19200:19346   */\n      jump(tag_356)\n    tag_465:\n        /* \"--CODEGEN--\":19192:19346   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":19061:19358   */\n      pop\n        /* \"--CODEGEN--\":19437:19441   */\n      0x20\n        /* \"--CODEGEN--\":19430:19435   */\n      dup4\n        /* \"--CODEGEN--\":19426:19442   */\n      add\n        /* \"--CODEGEN--\":19420:19443   */\n      mload\n        /* \"--CODEGEN--\":19449:19507   */\n      tag_466\n        /* \"--CODEGEN--\":19501:19505   */\n      0x20\n        /* \"--CODEGEN--\":19496:19499   */\n      dup7\n        /* \"--CODEGEN--\":19492:19506   */\n      add\n        /* \"--CODEGEN--\":19479:19490   */\n      dup3\n        /* \"--CODEGEN--\":19449:19507   */\n      jump(tag_467)\n    tag_466:\n      pop\n        /* \"--CODEGEN--\":19530:19534   */\n      swap4\n        /* \"--CODEGEN--\":19014:19539   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":19546:19653   */\n    tag_431:\n        /* \"--CODEGEN--\":19617:19647   */\n      tag_353\n        /* \"--CODEGEN--\":19641:19646   */\n      dup2\n        /* \"--CODEGEN--\":19617:19647   */\n      jump(tag_470)\n        /* \"--CODEGEN--\":19784:19894   */\n    tag_350:\n        /* \"--CODEGEN--\":19857:19888   */\n      tag_353\n        /* \"--CODEGEN--\":19882:19887   */\n      dup2\n        /* \"--CODEGEN--\":19857:19888   */\n      jump(tag_376)\n        /* \"--CODEGEN--\":20028:20132   */\n    tag_467:\n        /* \"--CODEGEN--\":20097:20126   */\n      tag_353\n        /* \"--CODEGEN--\":20120:20125   */\n      dup2\n        /* \"--CODEGEN--\":20097:20126   */\n      jump(tag_482)\n        /* \"--CODEGEN--\":20260:20473   */\n    tag_21:\n        /* \"--CODEGEN--\":20378:20380   */\n      0x20\n        /* \"--CODEGEN--\":20363:20381   */\n      dup2\n      add\n        /* \"--CODEGEN--\":20392:20463   */\n      tag_487\n        /* \"--CODEGEN--\":20367:20376   */\n      dup3\n        /* \"--CODEGEN--\":20436:20442   */\n      dup5\n        /* \"--CODEGEN--\":20392:20463   */\n      jump(tag_352)\n    tag_487:\n        /* \"--CODEGEN--\":20349:20473   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":20480:20990   */\n    tag_161:\n        /* \"--CODEGEN--\":20718:20721   */\n      0x0100\n        /* \"--CODEGEN--\":20703:20722   */\n      dup2\n      add\n        /* \"--CODEGEN--\":20733:20850   */\n      tag_489\n        /* \"--CODEGEN--\":20707:20716   */\n      dup3\n        /* \"--CODEGEN--\":20823:20829   */\n      dup6\n        /* \"--CODEGEN--\":20733:20850   */\n      jump(tag_384)\n    tag_489:\n        /* \"--CODEGEN--\":20861:20980   */\n      tag_235\n        /* \"--CODEGEN--\":20975:20978   */\n      0xa0\n        /* \"--CODEGEN--\":20964:20973   */\n      dup4\n        /* \"--CODEGEN--\":20960:20979   */\n      add\n        /* \"--CODEGEN--\":20951:20957   */\n      dup5\n        /* \"--CODEGEN--\":20861:20980   */\n      jump(tag_370)\n        /* \"--CODEGEN--\":20997:21198   */\n    tag_62:\n        /* \"--CODEGEN--\":21109:21111   */\n      0x20\n        /* \"--CODEGEN--\":21094:21112   */\n      dup2\n      add\n        /* \"--CODEGEN--\":21123:21188   */\n      tag_487\n        /* \"--CODEGEN--\":21098:21107   */\n      dup3\n        /* \"--CODEGEN--\":21161:21167   */\n      dup5\n        /* \"--CODEGEN--\":21123:21188   */\n      jump(tag_398)\n        /* \"--CODEGEN--\":21205:21877   */\n    tag_135:\n        /* \"--CODEGEN--\":21469:21472   */\n      0x0120\n        /* \"--CODEGEN--\":21454:21473   */\n      dup2\n      add\n        /* \"--CODEGEN--\":21484:21560   */\n      tag_494\n        /* \"--CODEGEN--\":21458:21467   */\n      dup3\n        /* \"--CODEGEN--\":21533:21539   */\n      dup8\n        /* \"--CODEGEN--\":21484:21560   */\n      jump(tag_402)\n    tag_494:\n        /* \"--CODEGEN--\":21571:21643   */\n      tag_495\n        /* \"--CODEGEN--\":21639:21641   */\n      0x20\n        /* \"--CODEGEN--\":21628:21637   */\n      dup4\n        /* \"--CODEGEN--\":21624:21642   */\n      add\n        /* \"--CODEGEN--\":21615:21621   */\n      dup7\n        /* \"--CODEGEN--\":21571:21643   */\n      jump(tag_350)\n    tag_495:\n        /* \"--CODEGEN--\":21654:21783   */\n      tag_496\n        /* \"--CODEGEN--\":21779:21781   */\n      0x40\n        /* \"--CODEGEN--\":21768:21777   */\n      dup4\n        /* \"--CODEGEN--\":21764:21782   */\n      add\n        /* \"--CODEGEN--\":21755:21761   */\n      dup6\n        /* \"--CODEGEN--\":21654:21783   */\n      jump(tag_444)\n    tag_496:\n        /* \"--CODEGEN--\":21794:21867   */\n      tag_497\n        /* \"--CODEGEN--\":21862:21865   */\n      0x0100\n        /* \"--CODEGEN--\":21851:21860   */\n      dup4\n        /* \"--CODEGEN--\":21847:21866   */\n      add\n        /* \"--CODEGEN--\":21838:21844   */\n      dup5\n        /* \"--CODEGEN--\":21794:21867   */\n      jump(tag_352)\n    tag_497:\n        /* \"--CODEGEN--\":21440:21877   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":21884:22291   */\n    tag_217:\n        /* \"--CODEGEN--\":22075:22077   */\n      0x20\n        /* \"--CODEGEN--\":22089:22136   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":22060:22078   */\n      dup2\n      add\n        /* \"--CODEGEN--\":22150:22281   */\n      tag_487\n        /* \"--CODEGEN--\":22060:22078   */\n      dup2\n        /* \"--CODEGEN--\":22150:22281   */\n      jump(tag_406)\n        /* \"--CODEGEN--\":22298:22705   */\n    tag_133:\n        /* \"--CODEGEN--\":22489:22491   */\n      0x20\n        /* \"--CODEGEN--\":22503:22550   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":22474:22492   */\n      dup2\n      add\n        /* \"--CODEGEN--\":22564:22695   */\n      tag_487\n        /* \"--CODEGEN--\":22474:22492   */\n      dup2\n        /* \"--CODEGEN--\":22564:22695   */\n      jump(tag_410)\n        /* \"--CODEGEN--\":22712:23119   */\n    tag_91:\n        /* \"--CODEGEN--\":22903:22905   */\n      0x20\n        /* \"--CODEGEN--\":22917:22964   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":22888:22906   */\n      dup2\n      add\n        /* \"--CODEGEN--\":22978:23109   */\n      tag_487\n        /* \"--CODEGEN--\":22888:22906   */\n      dup2\n        /* \"--CODEGEN--\":22978:23109   */\n      jump(tag_413)\n        /* \"--CODEGEN--\":23126:23533   */\n    tag_78:\n        /* \"--CODEGEN--\":23317:23319   */\n      0x20\n        /* \"--CODEGEN--\":23331:23378   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":23302:23320   */\n      dup2\n      add\n        /* \"--CODEGEN--\":23392:23523   */\n      tag_487\n        /* \"--CODEGEN--\":23302:23320   */\n      dup2\n        /* \"--CODEGEN--\":23392:23523   */\n      jump(tag_416)\n        /* \"--CODEGEN--\":23540:23947   */\n    tag_139:\n        /* \"--CODEGEN--\":23731:23733   */\n      0x20\n        /* \"--CODEGEN--\":23745:23792   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":23716:23734   */\n      dup2\n      add\n        /* \"--CODEGEN--\":23806:23937   */\n      tag_487\n        /* \"--CODEGEN--\":23716:23734   */\n      dup2\n        /* \"--CODEGEN--\":23806:23937   */\n      jump(tag_419)\n        /* \"--CODEGEN--\":23954:24361   */\n    tag_147:\n        /* \"--CODEGEN--\":24145:24147   */\n      0x20\n        /* \"--CODEGEN--\":24159:24206   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":24130:24148   */\n      dup2\n      add\n        /* \"--CODEGEN--\":24220:24351   */\n      tag_487\n        /* \"--CODEGEN--\":24130:24148   */\n      dup2\n        /* \"--CODEGEN--\":24220:24351   */\n      jump(tag_422)\n        /* \"--CODEGEN--\":24368:24775   */\n    tag_116:\n        /* \"--CODEGEN--\":24559:24561   */\n      0x20\n        /* \"--CODEGEN--\":24573:24620   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":24544:24562   */\n      dup2\n      add\n        /* \"--CODEGEN--\":24634:24765   */\n      tag_487\n        /* \"--CODEGEN--\":24544:24562   */\n      dup2\n        /* \"--CODEGEN--\":24634:24765   */\n      jump(tag_425)\n        /* \"--CODEGEN--\":24782:25108   */\n    tag_71:\n        /* \"--CODEGEN--\":24956:24959   */\n      0xc0\n        /* \"--CODEGEN--\":24941:24960   */\n      dup2\n      add\n        /* \"--CODEGEN--\":24971:25098   */\n      tag_487\n        /* \"--CODEGEN--\":24945:24954   */\n      dup3\n        /* \"--CODEGEN--\":25071:25077   */\n      dup5\n        /* \"--CODEGEN--\":24971:25098   */\n      jump(tag_428)\n        /* \"--CODEGEN--\":25115:25488   */\n    tag_55:\n        /* \"--CODEGEN--\":25289:25291   */\n      0x20\n        /* \"--CODEGEN--\":25303:25350   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":25274:25292   */\n      dup2\n      add\n        /* \"--CODEGEN--\":25364:25478   */\n      tag_235\n        /* \"--CODEGEN--\":25274:25292   */\n      dup2\n        /* \"--CODEGEN--\":25464:25470   */\n      dup5\n        /* \"--CODEGEN--\":25364:25478   */\n      jump(tag_464)\n        /* \"--CODEGEN--\":25495:25704   */\n    tag_44:\n        /* \"--CODEGEN--\":25611:25613   */\n      0x20\n        /* \"--CODEGEN--\":25596:25614   */\n      dup2\n      add\n        /* \"--CODEGEN--\":25625:25694   */\n      tag_487\n        /* \"--CODEGEN--\":25600:25609   */\n      dup3\n        /* \"--CODEGEN--\":25667:25673   */\n      dup5\n        /* \"--CODEGEN--\":25625:25694   */\n      jump(tag_431)\n        /* \"--CODEGEN--\":25711:25924   */\n    tag_109:\n        /* \"--CODEGEN--\":25829:25831   */\n      0x20\n        /* \"--CODEGEN--\":25814:25832   */\n      dup2\n      add\n        /* \"--CODEGEN--\":25843:25914   */\n      tag_487\n        /* \"--CODEGEN--\":25818:25827   */\n      dup3\n        /* \"--CODEGEN--\":25887:25893   */\n      dup5\n        /* \"--CODEGEN--\":25843:25914   */\n      jump(tag_350)\n        /* \"--CODEGEN--\":25931:26136   */\n    tag_30:\n        /* \"--CODEGEN--\":26045:26047   */\n      0x20\n        /* \"--CODEGEN--\":26030:26048   */\n      dup2\n      add\n        /* \"--CODEGEN--\":26059:26126   */\n      tag_487\n        /* \"--CODEGEN--\":26034:26043   */\n      dup3\n        /* \"--CODEGEN--\":26099:26105   */\n      dup5\n        /* \"--CODEGEN--\":26059:26126   */\n      jump(tag_467)\n        /* \"--CODEGEN--\":26143:26399   */\n    tag_243:\n        /* \"--CODEGEN--\":26205:26207   */\n      0x40\n        /* \"--CODEGEN--\":26199:26208   */\n      mload\n        /* \"--CODEGEN--\":26231:26248   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":26306:26324   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":26291:26325   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":26327:26349   */\n      dup3\n      dup3\n      lt\n        /* \"--CODEGEN--\":26288:26350   */\n      or\n        /* \"--CODEGEN--\":26285:26287   */\n      iszero\n      tag_523\n      jumpi\n        /* \"--CODEGEN--\":26363:26364   */\n      0x00\n        /* \"--CODEGEN--\":26360:26361   */\n      dup1\n        /* \"--CODEGEN--\":26353:26365   */\n      revert\n        /* \"--CODEGEN--\":26285:26287   */\n    tag_523:\n        /* \"--CODEGEN--\":26379:26381   */\n      0x40\n        /* \"--CODEGEN--\":26372:26394   */\n      mstore\n        /* \"--CODEGEN--\":26183:26399   */\n      swap2\n      swap1\n      pop\n      jump\n        /* \"--CODEGEN--\":26406:26688   */\n    tag_242:\n      0x00\n        /* \"--CODEGEN--\":26589:26607   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":26581:26587   */\n      dup3\n        /* \"--CODEGEN--\":26578:26608   */\n      gt\n        /* \"--CODEGEN--\":26575:26577   */\n      iszero\n      tag_525\n      jumpi\n        /* \"--CODEGEN--\":26621:26622   */\n      0x00\n        /* \"--CODEGEN--\":26618:26619   */\n      dup1\n        /* \"--CODEGEN--\":26611:26623   */\n      revert\n        /* \"--CODEGEN--\":26575:26577   */\n    tag_525:\n      pop\n        /* \"--CODEGEN--\":26650:26654   */\n      0x20\n        /* \"--CODEGEN--\":26638:26655   */\n      swap1\n      dup2\n      mul\n        /* \"--CODEGEN--\":26668:26683   */\n      add\n      swap1\n        /* \"--CODEGEN--\":26512:26688   */\n      jump\n        /* \"--CODEGEN--\":26695:26928   */\n    tag_255:\n      0x00\n        /* \"--CODEGEN--\":26852:26870   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":26844:26850   */\n      dup3\n        /* \"--CODEGEN--\":26841:26871   */\n      gt\n        /* \"--CODEGEN--\":26838:26840   */\n      iszero\n      tag_527\n      jumpi\n        /* \"--CODEGEN--\":26884:26885   */\n      0x00\n        /* \"--CODEGEN--\":26881:26882   */\n      dup1\n        /* \"--CODEGEN--\":26874:26886   */\n      revert\n        /* \"--CODEGEN--\":26838:26840   */\n    tag_527:\n      pop\n        /* \"--CODEGEN--\":26913:26917   */\n      0x20\n        /* \"--CODEGEN--\":26901:26918   */\n      mul\n      swap1\n        /* \"--CODEGEN--\":26775:26928   */\n      jump\n        /* \"--CODEGEN--\":26935:27190   */\n    tag_271:\n      0x00\n        /* \"--CODEGEN--\":27075:27093   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":27067:27073   */\n      dup3\n        /* \"--CODEGEN--\":27064:27094   */\n      gt\n        /* \"--CODEGEN--\":27061:27063   */\n      iszero\n      tag_529\n      jumpi\n        /* \"--CODEGEN--\":27107:27108   */\n      0x00\n        /* \"--CODEGEN--\":27104:27105   */\n      dup1\n        /* \"--CODEGEN--\":27097:27109   */\n      revert\n        /* \"--CODEGEN--\":27061:27063   */\n    tag_529:\n      pop\n        /* \"--CODEGEN--\":27180:27184   */\n      0x20\n        /* \"--CODEGEN--\":27151:27155   */\n      0x1f\n        /* \"--CODEGEN--\":27128:27145   */\n      swap2\n      swap1\n      swap2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":27124:27157   */\n      and\n        /* \"--CODEGEN--\":27170:27185   */\n      add\n      swap1\n        /* \"--CODEGEN--\":26998:27190   */\n      jump\n        /* \"--CODEGEN--\":27199:27340   */\n    tag_362:\n        /* \"--CODEGEN--\":27328:27332   */\n      0x20\n        /* \"--CODEGEN--\":27316:27333   */\n      add\n      swap1\n        /* \"--CODEGEN--\":27297:27340   */\n      jump\n        /* \"--CODEGEN--\":27351:27459   */\n    tag_376:\n        /* \"--CODEGEN--\":27446:27452   */\n      swap1\n        /* \"--CODEGEN--\":27427:27459   */\n      jump\n        /* \"--CODEGEN--\":27587:27714   */\n    tag_358:\n        /* \"--CODEGEN--\":27697:27709   */\n      mload\n      swap1\n        /* \"--CODEGEN--\":27681:27714   */\n      jump\n        /* \"--CODEGEN--\":27721:27817   */\n    tag_372:\n      pop\n        /* \"--CODEGEN--\":27809:27812   */\n      0x03\n      swap1\n        /* \"--CODEGEN--\":27793:27817   */\n      jump\n        /* \"--CODEGEN--\":27824:27920   */\n    tag_386:\n      pop\n        /* \"--CODEGEN--\":27912:27915   */\n      0x05\n      swap1\n        /* \"--CODEGEN--\":27896:27920   */\n      jump\n        /* \"--CODEGEN--\":28337:28529   */\n    tag_360:\n        /* \"--CODEGEN--\":28469:28488   */\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":28518:28522   */\n      0x20\n        /* \"--CODEGEN--\":28509:28523   */\n      add\n      swap1\n        /* \"--CODEGEN--\":28462:28529   */\n      jump\n        /* \"--CODEGEN--\":28538:28678   */\n    tag_374:\n        /* \"--CODEGEN--\":28669:28672   */\n      swap2\n        /* \"--CODEGEN--\":28647:28678   */\n      swap1\n      pop\n      jump\n        /* \"--CODEGEN--\":29007:29112   */\n    tag_354:\n      0x00\n        /* \"--CODEGEN--\":29076:29107   */\n      tag_487\n        /* \"--CODEGEN--\":29101:29106   */\n      dup3\n        /* \"--CODEGEN--\":29076:29107   */\n      jump(tag_545)\n        /* \"--CODEGEN--\":29119:29211   */\n    tag_400:\n        /* \"--CODEGEN--\":29192:29205   */\n      iszero\n        /* \"--CODEGEN--\":29185:29206   */\n      iszero\n      swap1\n        /* \"--CODEGEN--\":29168:29211   */\n      jump\n        /* \"--CODEGEN--\":29218:29342   */\n    tag_548:\n      0x00\n        /* \"--CODEGEN--\":29303:29304   */\n      0x03\n        /* \"--CODEGEN--\":29296:29301   */\n      dup3\n        /* \"--CODEGEN--\":29293:29305   */\n      lt\n        /* \"--CODEGEN--\":29283:29285   */\n      tag_549\n      jumpi\n        /* \"--CODEGEN--\":29309:29318   */\n      invalid\n        /* \"--CODEGEN--\":29283:29285   */\n    tag_549:\n      pop\n        /* \"--CODEGEN--\":29332:29337   */\n      swap1\n        /* \"--CODEGEN--\":29277:29342   */\n      jump\n        /* \"--CODEGEN--\":29349:29440   */\n    tag_470:\n        /* \"--CODEGEN--\":29428:29434   */\n      0xffff\n        /* \"--CODEGEN--\":29417:29435   */\n      and\n      swap1\n        /* \"--CODEGEN--\":29400:29440   */\n      jump\n        /* \"--CODEGEN--\":29447:29575   */\n    tag_545:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":29516:29570   */\n      and\n      swap1\n        /* \"--CODEGEN--\":29499:29575   */\n      jump\n        /* \"--CODEGEN--\":29668:29756   */\n    tag_482:\n        /* \"--CODEGEN--\":29746:29750   */\n      0xff\n        /* \"--CODEGEN--\":29735:29751   */\n      and\n      swap1\n        /* \"--CODEGEN--\":29718:29756   */\n      jump\n        /* \"--CODEGEN--\":30071:30198   */\n    tag_265:\n      0x00\n        /* \"--CODEGEN--\":30156:30157   */\n      0x03\n        /* \"--CODEGEN--\":30149:30154   */\n      dup3\n        /* \"--CODEGEN--\":30146:30158   */\n      lt\n        /* \"--CODEGEN--\":30136:30138   */\n      tag_549\n      jumpi\n        /* \"--CODEGEN--\":30172:30173   */\n      0x00\n        /* \"--CODEGEN--\":30169:30170   */\n      dup1\n        /* \"--CODEGEN--\":30162:30174   */\n      revert\n        /* \"--CODEGEN--\":30524:30651   */\n    tag_404:\n      0x00\n        /* \"--CODEGEN--\":30608:30646   */\n      tag_487\n        /* \"--CODEGEN--\":30640:30645   */\n      dup3\n        /* \"--CODEGEN--\":30608:30646   */\n      jump(tag_548)\n        /* \"--CODEGEN--\":30659:30927   */\n    tag_274:\n        /* \"--CODEGEN--\":30724:30725   */\n      0x00\n        /* \"--CODEGEN--\":30731:30832   */\n    tag_569:\n        /* \"--CODEGEN--\":30745:30751   */\n      dup4\n        /* \"--CODEGEN--\":30742:30743   */\n      dup2\n        /* \"--CODEGEN--\":30739:30752   */\n      lt\n        /* \"--CODEGEN--\":30731:30832   */\n      iszero\n      tag_571\n      jumpi\n        /* \"--CODEGEN--\":30812:30823   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":30806:30824   */\n      mload\n        /* \"--CODEGEN--\":30793:30804   */\n      dup4\n      dup3\n      add\n        /* \"--CODEGEN--\":30786:30825   */\n      mstore\n        /* \"--CODEGEN--\":30767:30769   */\n      0x20\n        /* \"--CODEGEN--\":30760:30770   */\n      add\n        /* \"--CODEGEN--\":30731:30832   */\n      jump(tag_569)\n    tag_571:\n        /* \"--CODEGEN--\":30847:30853   */\n      dup4\n        /* \"--CODEGEN--\":30844:30845   */\n      dup2\n        /* \"--CODEGEN--\":30841:30854   */\n      gt\n        /* \"--CODEGEN--\":30838:30840   */\n      iszero\n      tag_202\n      jumpi\n      pop\n      pop\n        /* \"--CODEGEN--\":30912:30913   */\n      0x00\n        /* \"--CODEGEN--\":30894:30910   */\n      swap2\n      add\n        /* \"--CODEGEN--\":30887:30914   */\n      mstore\n        /* \"--CODEGEN--\":30708:30927   */\n      jump\n        /* \"--CODEGEN--\":30935:31094   */\n    tag_449:\n      0x00\n        /* \"--CODEGEN--\":31024:31089   */\n      tag_487\n        /* \"--CODEGEN--\":31054:31088   */\n      tag_575\n        /* \"--CODEGEN--\":31077:31087   */\n      dup4\n        /* \"--CODEGEN--\":31054:31088   */\n      jump(tag_376)\n    tag_575:\n        /* \"--CODEGEN--\":31024:31089   */\n      jump(tag_470)\n        /* \"--CODEGEN--\":31101:31262   */\n    tag_446:\n      0x00\n        /* \"--CODEGEN--\":31191:31257   */\n      tag_487\n        /* \"--CODEGEN--\":31222:31256   */\n      tag_579\n        /* \"--CODEGEN--\":31245:31255   */\n      dup4\n        /* \"--CODEGEN--\":31222:31256   */\n      jump(tag_376)\n    tag_579:\n        /* \"--CODEGEN--\":31191:31257   */\n      jump(tag_376)\n        /* \"--CODEGEN--\":31269:31429   */\n    tag_452:\n      0x00\n        /* \"--CODEGEN--\":31358:31424   */\n      tag_487\n        /* \"--CODEGEN--\":31388:31423   */\n      tag_575\n        /* \"--CODEGEN--\":31412:31422   */\n      dup4\n        /* \"--CODEGEN--\":31388:31423   */\n      jump(tag_583)\n        /* \"--CODEGEN--\":31436:31596   */\n    tag_455:\n      0x00\n        /* \"--CODEGEN--\":31525:31591   */\n      tag_487\n        /* \"--CODEGEN--\":31555:31590   */\n      tag_575\n        /* \"--CODEGEN--\":31579:31589   */\n      dup4\n        /* \"--CODEGEN--\":31555:31590   */\n      jump(tag_587)\n        /* \"--CODEGEN--\":31603:31763   */\n    tag_458:\n      0x00\n        /* \"--CODEGEN--\":31692:31758   */\n      tag_487\n        /* \"--CODEGEN--\":31722:31757   */\n      tag_575\n        /* \"--CODEGEN--\":31746:31756   */\n      dup4\n        /* \"--CODEGEN--\":31722:31757   */\n      jump(tag_591)\n        /* \"--CODEGEN--\":31770:31930   */\n    tag_461:\n      0x00\n        /* \"--CODEGEN--\":31859:31925   */\n      tag_487\n        /* \"--CODEGEN--\":31889:31924   */\n      tag_575\n        /* \"--CODEGEN--\":31913:31923   */\n      dup4\n        /* \"--CODEGEN--\":31889:31924   */\n      jump(tag_595)\n        /* \"--CODEGEN--\":32037:32128   */\n    tag_583:\n        /* \"--CODEGEN--\":32112:32114   */\n      0x10\n        /* \"--CODEGEN--\":32108:32122   */\n      shr\n      swap1\n        /* \"--CODEGEN--\":32089:32128   */\n      jump\n        /* \"--CODEGEN--\":32138:32229   */\n    tag_587:\n        /* \"--CODEGEN--\":32213:32215   */\n      0x20\n        /* \"--CODEGEN--\":32209:32223   */\n      shr\n      swap1\n        /* \"--CODEGEN--\":32190:32229   */\n      jump\n        /* \"--CODEGEN--\":32239:32330   */\n    tag_591:\n        /* \"--CODEGEN--\":32314:32316   */\n      0x30\n        /* \"--CODEGEN--\":32310:32324   */\n      shr\n      swap1\n        /* \"--CODEGEN--\":32291:32330   */\n      jump\n        /* \"--CODEGEN--\":32340:32431   */\n    tag_595:\n        /* \"--CODEGEN--\":32415:32417   */\n      0x40\n        /* \"--CODEGEN--\":32411:32425   */\n      shr\n      swap1\n        /* \"--CODEGEN--\":32392:32431   */\n      jump\n\n    auxdata: 0xa265627a7a7230582020fe80fab98dacfc16d8550897d8755fe4c6b6425485d078f0441a7a114bf5f76c6578706572696d656e74616cf50037\n}\n", "bytecode": {"linkReferences": {}, "object": "", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x60 DUP1 PUSH3 0x20DA DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x33 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x8B JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP4 DUP6 AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH3 0xFE JUMP JUMPDEST PUSH1 0x0 PUSH3 0x84 DUP3 MLOAD PUSH3 0xDF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0xA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xAF DUP7 DUP7 PUSH3 0x76 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0xC2 DUP7 DUP3 DUP8 ADD PUSH3 0x76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0xD5 DUP7 DUP3 DUP8 ADD PUSH3 0x76 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xEC DUP3 PUSH3 0xF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1FCC DUP1 PUSH3 0x10E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x59A5F12D GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD30895E4 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD30895E4 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xD7EB798C EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xE4B6C992 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0xFE145FBD EQ PUSH2 0x1CD JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x59A5F12D EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x5AD39846 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xC0D35449 EQ PUSH2 0x17D JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6880689 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x2A035B6C EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x2AF1E2F8 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x2E535940 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x48373963 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x4ED61446 EQ PUSH2 0x14D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1CB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0x201 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11A PUSH2 0x115 CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1DDA JUMP JUMPDEST PUSH2 0x105 PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0x17E5 JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST PUSH2 0x105 PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0x17C7 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x1792 JUMP JUMPDEST PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0xDC PUSH2 0xB3F JUMP JUMPDEST PUSH2 0xDC PUSH2 0xB4E JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0xB5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST PUSH2 0xDC PUSH2 0xC3F JUMP JUMPDEST PUSH2 0x1AD PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1CE1 JUMP JUMPDEST PUSH2 0x11A PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0xC57 JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x1DB CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0xC6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1D9F JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xC50F4648FA14BE3EE68F160A224CC5D77EEEAC58EA500C6FB63FAC6788AFB0BE SWAP3 PUSH2 0x263 SWAP3 AND SWAP1 PUSH2 0x1CB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2CA JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 DUP3 ADD SLOAD DUP3 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP2 LT PUSH2 0x2FC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD SWAP4 SWAP1 SWAP5 MUL SWAP1 SWAP2 ADD SWAP5 POP SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0x33B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 DUP8 MSTORE PUSH1 0x3 SWAP1 SWAP5 MSTORE PUSH1 0x40 SWAP1 SWAP6 KECCAK256 PUSH1 0x4 SLOAD SWAP5 SWAP1 SWAP2 MUL SWAP1 SWAP2 ADD SWAP5 POP SWAP3 SWAP1 SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP2 EQ ISZERO PUSH2 0x422 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP2 LT PUSH2 0x3AC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 SWAP1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP4 ADD SWAP7 POP SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0x3EC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x45A JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D4F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x469 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x1 DUP1 DUP7 ADD DUP1 SLOAD PUSH2 0xFFFF PUSH1 0x1 PUSH1 0x20 SHL DUP1 DUP4 DIV DUP3 AND SWAP1 SWAP5 ADD DUP2 AND SWAP1 SWAP4 MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH2 0x4AF SWAP2 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP2 DIV AND DUP6 DUP6 PUSH2 0xD1B JUMP JUMPDEST PUSH2 0x880 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4C2 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x4AF SWAP1 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP6 DUP6 PUSH2 0xD1B JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4F1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x865 JUMPI PUSH2 0x4FF PUSH2 0x124B JUMP JUMPDEST PUSH1 0x0 SLOAD DUP7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x9188D312 SWAP2 PUSH2 0x532 SWAP2 PUSH1 0x4 ADD PUSH2 0x1DCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x560 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x588 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1803 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP1 DUP10 ADD SLOAD SWAP3 SWAP4 POP PUSH2 0xFFFF SWAP2 DUP3 AND PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP4 DIV DUP3 AND ADD AND LT ISZERO PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D8F JUMP JUMPDEST PUSH1 0x1 DUP7 DUP2 ADD SLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x0 SWAP3 PUSH2 0x5F5 SWAP3 PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH2 0xFFFF AND ADD SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP10 ADD DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP PUSH2 0x623 PUSH2 0x1296 JUMP JUMPDEST POP PUSH1 0x20 DUP1 DUP4 ADD MLOAD ADD MLOAD PUSH2 0x634 PUSH2 0x1296 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 DUP9 ADD SLOAD DUP3 MLOAD PUSH2 0x653 SWAP2 PUSH2 0xFFFF AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x20 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x683 SWAP3 PUSH3 0x10000 SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x6BB SWAP3 PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH6 0xFFFF00000000 NOT AND PUSH1 0x1 PUSH1 0x20 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x6F6 SWAP3 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH8 0xFFFF000000000000 NOT AND PUSH1 0x1 PUSH1 0x30 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x733 SWAP3 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH10 0xFFFF0000000000000000 NOT AND PUSH1 0x1 PUSH1 0x40 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE SWAP1 SWAP5 POP AND PUSH2 0x79F JUMPI DUP7 SLOAD PUSH1 0x1 DUP9 ADD SLOAD PUSH1 0xFF AND PUSH1 0x0 NOT SWAP1 SWAP2 ADD EQ ISZERO PUSH2 0x783 JUMPI PUSH2 0x77E CALLER PUSH2 0x201 JUMP JUMPDEST PUSH2 0x79F JUMP JUMPDEST PUSH1 0x1 DUP8 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP2 DUP3 AND SWAP1 SWAP4 ADD AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST DUP1 MLOAD PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x80 SWAP1 SWAP7 ADD MLOAD PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x30 SHL PUSH1 0x1 PUSH1 0x20 SHL PUSH3 0x10000 PUSH2 0xFFFF DUP1 DUP10 AND SWAP1 SWAP11 ADD DUP11 AND PUSH2 0xFFFF NOT SWAP1 SWAP9 AND SWAP8 SWAP1 SWAP8 OR DUP8 DUP2 DIV DUP11 AND SWAP1 SWAP7 ADD DUP10 AND SWAP1 SWAP7 MUL PUSH4 0xFFFF0000 NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP6 DUP2 DIV DUP9 AND SWAP1 SWAP4 ADD DUP8 AND SWAP1 SWAP5 MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP3 DUP2 DIV DUP7 AND SWAP1 SWAP7 ADD DUP6 AND SWAP1 SWAP2 MUL PUSH8 0xFFFF000000000000 NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP2 DUP2 DIV DUP5 AND SWAP1 SWAP5 ADD SWAP1 SWAP3 AND SWAP1 SWAP2 MUL PUSH10 0xFFFF0000000000000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH2 0x880 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D3F JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND MUL OR SWAP1 SSTORE DUP5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x5F4BFC4BB3EFC8381128908C65DBA16D774750A4508F87B52ED63512630609F9 SWAP2 PUSH2 0x8D7 SWAP2 DUP10 SWAP2 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D6F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x95E JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x959 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x959 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D7F JUMP JUMPDEST PUSH2 0x9C6 PUSH2 0x12C4 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP4 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD SWAP1 DUP3 ADD MSTORE DUP4 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x9FC DUP3 DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xEB1 JUMP JUMPDEST PUSH2 0xA08 DUP3 DUP5 PUSH1 0x1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0xA14 DUP3 DUP5 PUSH1 0x2 PUSH2 0x9F2 JUMP JUMPDEST PUSH32 0x48CA02657A8ACB3A062F53BF24CA611BB25D8108F29F5E3C5E468080A44DCA5D DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0xA45 SWAP3 SWAP2 SWAP1 PUSH2 0x1CC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA60 JUMPI PUSH2 0xA60 PUSH2 0x1040 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xB38 JUMPI PUSH1 0x0 DUP1 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xA97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xABF SWAP2 SWAP1 PUSH2 0x1DCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xB15 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1803 JUMP JUMPDEST PUSH1 0xA0 ADD MLOAD SWAP1 POP DUP3 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0xB2F JUMPI DUP1 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xA6A JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xB65 PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP2 SLOAD PUSH1 0x60 SWAP5 DUP2 MUL DUP3 ADD DUP6 ADD DUP5 MSTORE SWAP3 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP5 SWAP2 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 DUP6 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xC22 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xBA3 JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xC77 PUSH2 0x12FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0xCA7 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH3 0x10000 DUP2 DIV DUP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND ISZERO PUSH2 0xE02 JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xD4B SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND DUP6 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xDFD JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xD82 SWAP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xDFD JUMPI PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP1 SWAP4 ADD DUP4 AND PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE DUP4 SLOAD SWAP2 AND GT ISZERO PUSH2 0xDCE JUMPI PUSH2 0xDCE CALLER PUSH2 0x201 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH2 0xDFD SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0xDE9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD DUP5 PUSH2 0xD1B JUMP JUMPDEST PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xE15 SWAP1 PUSH2 0xFFFF AND DUP6 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xE7C JUMPI PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP1 SWAP4 ADD DUP4 AND PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE DUP4 SLOAD SWAP2 AND GT ISZERO PUSH2 0xE61 JUMPI PUSH2 0xE61 CALLER PUSH2 0x201 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH2 0xE7C SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0xDE9 JUMPI INVALID JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xFFFF AND DUP4 PUSH2 0xFFFF AND GT ISZERO PUSH2 0xEA2 JUMPI POP PUSH1 0x0 SWAP1 POP DUP3 DUP3 SUB PUSH2 0xEAA JUMP JUMPDEST POP POP DUP1 DUP3 SUB PUSH1 0x0 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xEB9 PUSH2 0x124B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 PUSH2 0xEEC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xF42 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1803 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE SWAP5 DUP2 MSTORE DUP2 DUP4 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP5 AND SWAP6 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP1 DUP9 ADD MLOAD DUP6 AND SWAP2 DUP7 ADD SWAP2 DUP3 MSTORE SWAP9 DUP8 ADD MLOAD DUP5 AND SWAP9 DUP6 ADD SWAP9 DUP10 MSTORE PUSH1 0xE0 SWAP1 SWAP7 ADD MLOAD DUP4 AND PUSH1 0xA0 DUP6 ADD SWAP1 DUP2 MSTORE DUP10 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP13 SSTORE PUSH1 0x0 SWAP12 DUP13 MSTORE SWAP3 SWAP1 SWAP11 KECCAK256 SWAP5 MLOAD PUSH1 0x2 SWAP1 SWAP11 MUL SWAP1 SWAP5 ADD SWAP9 DUP10 SSTORE SWAP1 MLOAD SWAP8 ADD DUP1 SLOAD SWAP4 MLOAD SWAP5 MLOAD SWAP7 MLOAD SWAP3 MLOAD DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH10 0xFFFF0000000000000000 NOT SWAP4 DUP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH8 0xFFFF000000000000 NOT SWAP9 DUP5 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH6 0xFFFF00000000 NOT SWAP8 DUP6 AND PUSH3 0x10000 MUL PUSH4 0xFFFF0000 NOT SWAP12 SWAP1 SWAP6 AND PUSH2 0xFFFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP10 SWAP1 SWAP10 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP5 SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0x1065 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH2 0x1124 SWAP4 DUP6 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x111B JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x109C JUMP JUMPDEST POP POP POP POP PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP5 SWAP6 POP SWAP3 SWAP4 PUSH2 0x11DE SWAP4 SWAP2 SWAP3 DUP6 SWAP1 DUP5 ADD DUP3 ISZERO PUSH2 0x111B JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x109C JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND LT PUSH2 0x121D JUMPI PUSH1 0x1 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1266 PUSH2 0x132F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x134A PUSH2 0x1296 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1357 PUSH2 0x1296 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 CALLDATALOAD PUSH2 0x1E9D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x139B PUSH2 0x1396 DUP3 PUSH2 0x1E0F JUMP JUMPDEST PUSH2 0x1DE8 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0xC0 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x13C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13EE JUMPI DUP2 PUSH2 0x13D6 DUP9 DUP3 PUSH2 0x16B1 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xC0 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x13C3 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0x1417 PUSH2 0x1396 DUP3 PUSH2 0x1E30 JUMP JUMPDEST SWAP2 POP DUP2 DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x142D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13EE JUMPI DUP2 PUSH2 0x1443 DUP9 DUP3 PUSH2 0x1760 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 CALLDATALOAD PUSH2 0x1ED6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1484 PUSH2 0x1396 DUP3 PUSH2 0x1E4E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x14A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14AB DUP4 DUP3 DUP5 PUSH2 0x1EF0 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D1 PUSH1 0x80 PUSH2 0x1DE8 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F7 DUP5 DUP3 DUP6 ADD PUSH2 0x1465 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1508 DUP5 DUP5 DUP4 ADD PUSH2 0x153D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x151C DUP5 DUP3 DUP6 ADD PUSH2 0x153D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0x1531 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x154F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1559 PUSH1 0xA0 PUSH2 0x1DE8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1567 DUP5 DUP5 PUSH2 0x1754 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1578 DUP5 DUP5 DUP4 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x158C DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x15A0 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x15B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15DE PUSH2 0x100 PUSH2 0x1DE8 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1604 DUP5 DUP3 DUP6 ADD PUSH2 0x1465 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x162D DUP5 DUP3 DUP6 ADD PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1641 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1655 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1669 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x167D DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x1691 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x16A5 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16CD PUSH1 0xC0 PUSH2 0x1DE8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16DB DUP5 DUP5 PUSH2 0x1760 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x16EC DUP5 DUP5 DUP4 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1700 DUP5 DUP3 DUP6 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1714 DUP5 DUP3 DUP6 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1728 DUP5 DUP3 DUP6 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x173C DUP5 DUP3 DUP6 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 CALLDATALOAD PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 MLOAD PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 CALLDATALOAD PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x177E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x178A DUP5 DUP5 PUSH2 0x1364 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x178A DUP5 DUP3 DUP6 ADD PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x178A DUP5 DUP5 PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x178A DUP5 DUP5 PUSH2 0x1459 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x182C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x178A DUP5 DUP3 DUP6 ADD PUSH2 0x15C0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1844 DUP4 DUP4 PUSH2 0x1B5E JUMP JUMPDEST POP POP PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1858 DUP4 DUP4 PUSH2 0x1C9F JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1E9D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x187A DUP3 PUSH2 0x1E7F JUMP JUMPDEST PUSH2 0x1884 DUP2 DUP6 PUSH2 0x1E8F JUMP JUMPDEST SWAP4 POP PUSH2 0x188F DUP4 PUSH2 0x1E76 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x18BA JUMPI PUSH2 0x18A5 DUP7 DUP4 MLOAD PUSH2 0x1838 JUMP JUMPDEST SWAP6 POP PUSH2 0x18B0 DUP3 PUSH2 0x1E76 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1892 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x18CD DUP2 PUSH2 0x1E83 JUMP JUMPDEST PUSH2 0x18D7 DUP2 DUP5 PUSH2 0x1E98 JUMP JUMPDEST SWAP3 POP PUSH2 0x18E2 DUP3 PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x190D JUMPI PUSH2 0x18F8 DUP6 DUP4 MLOAD PUSH2 0x184C JUMP JUMPDEST SWAP5 POP PUSH2 0x1903 DUP3 PUSH2 0x1E76 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x18E5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x191D DUP2 PUSH2 0x1E89 JUMP JUMPDEST PUSH2 0x1927 DUP2 DUP5 PUSH2 0x1E98 JUMP JUMPDEST SWAP3 POP PUSH2 0x1932 DUP3 PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x190D JUMPI PUSH2 0x1948 DUP6 DUP4 MLOAD PUSH2 0x184C JUMP JUMPDEST SWAP5 POP PUSH2 0x1953 DUP3 PUSH2 0x1E76 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1935 JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1EA8 JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1EE5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197C PUSH1 0x2C DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x426F746820706C6179657273206861766520746F2068617665207069636B6564 DUP2 MSTORE PUSH32 0x2074686569722063617264730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB PUSH1 0xC DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x496E76616C6964206D6F76650000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A14 PUSH1 0x29 DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x706C6179657273207475726E20646F6573206E6F7420657175616C2065697468 DUP2 MSTORE PUSH1 0x1 PUSH1 0xB9 SHL PUSH9 0x32B910383630BCB2B9 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A62 PUSH1 0xD DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x4E6F7420796F7572207475726E00000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A9B PUSH1 0x25 DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x506C617965722068617320616C7265616479207069636B656420746865697220 DUP2 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL PUSH5 0x6361726473 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AE5 PUSH1 0x28 DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x5472616E73616374696F6E2073656E646572206D75737420626520706C617965 DUP2 MSTORE PUSH1 0x1 PUSH1 0xC1 SHL PUSH8 0x3910189037B91019 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B32 PUSH1 0xF DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x4E6F7420656E6F756768206D616E610000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1B6F DUP5 DUP3 PUSH2 0x1C9F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1B82 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1B95 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1BA8 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1BBB PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0xE7C PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1BDE DUP2 PUSH2 0x1F2F JUMP JUMPDEST PUSH2 0x1BE8 DUP6 DUP3 PUSH2 0x1C9F JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x1BF8 DUP2 PUSH2 0x1F1C JUMP JUMPDEST PUSH2 0x1C05 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH2 0x1C0F DUP2 PUSH2 0x1F42 JUMP JUMPDEST PUSH2 0x1C1C PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH2 0x1C26 DUP2 PUSH2 0x1F50 JUMP JUMPDEST PUSH2 0x1C33 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH2 0x1C3D DUP2 PUSH2 0x1F5E JUMP JUMPDEST PUSH2 0x1C4A PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH2 0x1C54 DUP2 PUSH2 0x1F6C JUMP JUMPDEST PUSH2 0x190D PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1C79 DUP3 DUP3 PUSH2 0x186F JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1C8E PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1CA8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1EBD JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1E7C JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1ED0 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1860 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x1CD4 DUP3 DUP6 PUSH2 0x1914 JUMP JUMPDEST PUSH2 0x1370 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x18C4 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x195D JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x1CFE DUP3 DUP8 PUSH2 0x1966 JUMP JUMPDEST PUSH2 0x1D0B PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1C9F JUMP JUMPDEST PUSH2 0x1D18 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BCE JUMP JUMPDEST PUSH2 0x1D26 PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x1860 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x196F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x19CE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1A07 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1A55 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1A8E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1AD8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1B5E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1370 DUP2 DUP5 PUSH2 0x1C61 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1C96 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1C9F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1CA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1E07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x3 SWAP1 JUMP JUMPDEST POP PUSH1 0x5 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF DUP3 PUSH2 0x1EC4 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 LT PUSH2 0x1EB9 JUMPI INVALID JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 LT PUSH2 0x1EB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1CBF DUP3 PUSH2 0x1EAD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F0B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1EF3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE7C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1E7C JUMP JUMPDEST PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F3D DUP4 PUSH2 0x1E7C JUMP JUMPDEST PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1F7A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1F80 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1F86 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1F8C JUMP JUMPDEST PUSH1 0x10 SHR SWAP1 JUMP JUMPDEST PUSH1 0x20 SHR SWAP1 JUMP JUMPDEST PUSH1 0x30 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 SHR SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 KECCAK256 INVALID DUP1 STATICCALL 0xb9 DUP14 0xac 0xfc AND 0xd8 SSTORE ADDMOD SWAP8 0xd8 PUSH22 0x5FE4C6B6425485D078F0441A7A114BF5F76C65787065 PUSH19 0x696D656E74616CF50037000000000000000000 ", "sourceMap": "193:6160:0:-;;;542:141;8:9:-1;5:2;;;30:1;27;20:12;5:2;542:141:0;;;;;;;;;;;;;;;;;;;;;;760:7:7;:18;;-1:-1:-1;;;;;760:18:7;;;-1:-1:-1;;;;;;760:18:7;;;;;;;788:7;:18;;;;;;;;;;;;;;;-1:-1:-1;817:35:7;;;;;;;;;;;193:6160:0;;5:122:-1;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:535;;;;283:2;271:9;262:7;258:23;254:32;251:2;;;299:1;296;289:12;251:2;334:1;351:64;407:7;387:9;351:64;;;341:74;;313:108;452:2;470:64;526:7;517:6;506:9;502:22;470:64;;;460:74;;431:109;571:2;589:64;645:7;636:6;625:9;621:22;589:64;;;579:74;;550:109;245:424;;;;;;676:105;;745:31;770:5;745:31;;;734:42;728:53;-1:-1;;728:53;788:128;-1:-1;;;;;857:54;;840:76;;193:6160:0;;;;;;"}, "deployedBytecode": {"linkReferences": {}, "object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c806359a5f12d1161008c578063d30895e411610066578063d30895e41461019d578063d7eb798c146101a5578063e4b6c992146101ba578063fe145fbd146101cd576100cf565b806359a5f12d1461016d5780635ad3984614610175578063c0d354491461017d576100cf565b806306880689146100d45780632a035b6c146100f25780632af1e2f8146101075780632e53594014610127578063483739631461013a5780634ed614461461014d575b600080fd5b6100dc6101ed565b6040516100e99190611cb1565b60405180910390f35b61010561010036600461176c565b610201565b005b61011a61011536600461176c565b61026e565b6040516100e99190611dda565b6101056101353660046117e5565b61028f565b6101056101483660046117c7565b6108e7565b61016061015b366004611792565b610a65565b6040516100e99190611dbe565b6100dc610b3f565b6100dc610b4e565b61019061018b36600461176c565b610b5d565b6040516100e99190611dad565b6100dc610c3f565b6101ad610c4e565b6040516100e99190611ce1565b61011a6101c836600461176c565b610c57565b6101e06101db36600461176c565b610c6f565b6040516100e99190611d9f565b60045461010090046001600160a01b031681565b600580546001600160a01b0319166001600160a01b03838116919091179182905560048054610100600160a81b03191690556040517fc50f4648fa14be3ee68f160a224cc5d77eeeac58ea500c6fb63fac6788afb0be92610263921690611cb1565b60405180910390a150565b6001600160a01b031660009081526003602052604090206001015460ff1690565b60045461010090046001600160a01b031633146102ca57604051600160e51b62461bcd0281526004016102c190611d5f565b60405180910390fd5b600180546001600160a01b0316600090815260036020526040812091820154825491929160ff9091169081106102fc57fe5b60009182526020808320600280546001600160a01b03168552600390925260408420600181015481549390940290910194509160ff1690811061033b57fe5b60009182526020808320600280546001600160a01b0390811680875260039094526040909520600454949091029091019450929091610100900416811415610422576002546001600160a01b031660009081526003602052604090206001810154815460ff9091169081106103ac57fe5b60009182526020808320600180546001600160a01b0316855260039092526040909320908101548154600290930290930196509160ff169081106103ec57fe5b600091825260208083206001546001600160a01b031680855260039092526040909320600290920290920194509250905061045a565b60015460045461010090046001600160a01b0390811691161461045a57604051600160e51b62461bcd0281526004016102c190611d4f565b60008086600281111561046957fe5b14156104b4576001808601805461ffff600160201b8083048216909401811690930265ffff000000001990911617908190556104af91600160301b909104168585610d1b565b610880565b60018660028111156104c257fe5b14156104e35760018501546104af90600160401b900461ffff168585610d1b565b60028660028111156104f157fe5b1415610865576104ff61124b565b6000548654604051600160e11b6348c469890281526001600160a01b0390921691639188d3129161053291600401611dcc565b600060405180830381600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105889190810190611803565b60208101516060015160018089015492935061ffff918216600160201b9093048216011610156105cd57604051600160e51b62461bcd0281526004016102c190611d8f565b6001868101546020830151606001516000926105f592600160201b900461ffff160190610e82565b60018901805461ffff909316600160201b0265ffff0000000019909316929092179091559050610623611296565b506020808301510151610634611296565b50602083015160400151600188015482516106539161ffff1690610e82565b60018a01805461ffff191661ffff9384161790819055602085015191955061068392620100009091041690610e82565b60018a01805463ffff000019166201000061ffff94851602179081905560408501519195506106bb92600160201b9091041690610e82565b60018a01805465ffff000000001916600160201b61ffff94851602179081905560608501519195506106f692600160301b9091041690610e82565b60018a01805467ffff0000000000001916600160301b61ffff948516021790819055608085015191955061073392600160401b9091041690610e82565b60018a01805469ffff00000000000000001916600160401b61ffff9485160217908190559094501661079f578654600188015460ff1660001990910114156107835761077e33610201565b61079f565b6001878101805460ff19811660ff918216909301169190911790555b805160018a018054602084015160408501516060860151608090960151600160401b600160301b600160201b6201000061ffff808916909a018a1661ffff19909816979097178781048a16909601891690960263ffff000019909516949094178581048816909301871690940265ffff0000000019909216919091178281048616909601851690910267ffff0000000000001990951694909417818104841690940190921690910269ffff00000000000000001990921691909117905550610880915050565b604051600160e51b62461bcd0281526004016102c190611d3f565b60048054610100600160a81b0319166101006001600160a01b0385160217905584546040517f5f4bfc4bb3efc8381128908c65dba16d774750a4508f87b52ed63512630609f9916108d79189919088908790611cef565b60405180910390a1505050505050565b33600090815260036020526040902080541561091857604051600160e51b62461bcd0281526004016102c190611d6f565b6001546001600160a01b031633141561095e576002546001600160a01b031660009081526003602052604090205415610959576004805460ff191660011790555b6109be565b6002546001600160a01b03163314156109a3576001546001600160a01b031660009081526003602052604090205415610959576004805460ff191660011790556109be565b604051600160e51b62461bcd0281526004016102c190611d7f565b6109c66112c4565b5060408051606081018252835181526020808501519082015283820151918101919091526109fc828460005b6020020151610eb1565b610a08828460016109f2565b610a14828460026109f2565b7f48ca02657a8acb3a062f53bf24ca611bb25d8108f29f5e3c5e468080a44dca5d8382604051610a45929190611cc5565b60405180910390a160045460ff1615610a6057610a60611040565b505050565b600080805b8351811015610b38576000805485516001600160a01b0390911690639188d31290879085908110610a9757fe5b6020026020010151600001516040518263ffffffff1660e01b8152600401610abf9190611dcc565b600060405180830381600087803b158015610ad957600080fd5b505af1158015610aed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b159190810190611803565b60a0015190508261ffff168161ffff161115610b2f578092505b50600101610a6a565b5092915050565b6002546001600160a01b031681565b6005546001600160a01b031681565b610b656112e2565b6001600160a01b0382166000908152600360209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b82821015610c225760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352600160201b810483166060850152600160301b810483166080850152600160401b900490911660a08301529083529092019101610ba3565b505050908252506001919091015460ff1660209091015292915050565b6001546001600160a01b031681565b60045460ff1681565b60036020526000908152604090206001015460ff1681565b610c776112fa565b6001600160a01b03821660009081526003602052604090206001810154815460ff909116919082908110610ca757fe5b60009182526020918290206040805160c0810182526002909302909101805483526001015461ffff80821694840194909452620100008104841691830191909152600160201b810483166060830152600160301b810483166080830152600160401b900490911660a0820152915050919050565b600182015460009062010000900461ffff1615610e02576001830154610d4b9062010000900461ffff1685610e82565b60018501805463ffff000019166201000061ffff948516021790559150811615610dfd576001830154610d829061ffff1682610e82565b60018501805461ffff191661ffff9384161790559150811615610dfd576001808301805460ff808216909301831660ff199091161790819055835491161115610dce57610dce33610201565b60018201548254610dfd918391859160ff16908110610de957fe5b906000526020600020906002020184610d1b565b610e7c565b6001830154610e159061ffff1685610e82565b60018501805461ffff191661ffff9384161790559150811615610e7c576001808301805460ff808216909301831660ff199091161790819055835491161115610e6157610e6133610201565b60018201548254610e7c918391859160ff16908110610de957fe5b50505050565b6000808361ffff168361ffff161115610ea2575060009050828203610eaa565b505080820360005b9250929050565b610eb961124b565b600054604051600160e11b6348c469890281526001600160a01b0390911690639188d31290610eec908590600401611dcc565b600060405180830381600087803b158015610f0657600080fd5b505af1158015610f1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f429190810190611803565b6040805160c080820183529481528183015161ffff90811660208084019182526060808701518416958501958652608080880151851691860191825298870151841698850198895260e090960151831660a08501908152895460018181018c5560009b8c5292909a2094516002909a0290940198895590519701805493519451965192518216600160401b0269ffff000000000000000019938316600160301b0267ffff00000000000019988416600160201b0265ffff0000000019978516620100000263ffff0000199b90951661ffff19909716969096179990991692909217949094169290921794909416949094179290921692909217905550565b60045460ff1661106557604051600160e51b62461bcd0281526004016102c190611d2f565b6001546001600160a01b03166000908152600360209081526040808320805482518185028101850190935280835261112493859084015b8282101561111b5760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352600160201b810483166060850152600160301b810483166080850152600160401b900490911660a0830152908352909201910161109c565b50505050610a65565b6002546001600160a01b03166000908152600360209081526040808320805482518185028101850190935280835294955092936111de93919285908401821561111b5760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352600160201b810483166060850152600160301b810483166080850152600160401b900490911660a0830152908352909201910161109c565b90508061ffff168261ffff161061121d57600154600480546001600160a01b0390921661010002610100600160a81b0319909216919091179055611247565b600254600480546001600160a01b0390921661010002610100600160a81b03199092169190911790555b5050565b6040518061026001604052806060815260200161126661132f565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60405180606001604052806003906020820280388339509192915050565b60408051808201909152606081526000602082015290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6040518061018001604052806060815260200161134a611296565b8152602001611357611296565b8152600060209091015290565b60006113708235611e9d565b9392505050565b600082601f83011261138857600080fd5b813561139b61139682611e0f565b611de8565b915081818352602084019350602081019050838560c08402820111156113c057600080fd5b60005b838110156113ee57816113d688826116b1565b84525060209092019160c091909101906001016113c3565b5050505092915050565b600082601f83011261140957600080fd5b600561141761139682611e30565b9150818385602084028201111561142d57600080fd5b60005b838110156113ee57816114438882611760565b8452506020928301929190910190600101611430565b60006113708235611ed6565b600082601f83011261147657600080fd5b815161148461139682611e4e565b915080825260208301602083018583830111156114a057600080fd5b6114ab838284611ef0565b50505092915050565b600061018082840312156114c757600080fd5b6114d16080611de8565b825190915067ffffffffffffffff8111156114eb57600080fd5b6114f784828501611465565b82525060206115088484830161153d565b60208301525060c061151c8482850161153d565b60408301525061016061153184828501611754565b60608301525092915050565b600060a0828403121561154f57600080fd5b61155960a0611de8565b905060006115678484611754565b825250602061157884848301611754565b602083015250604061158c84828501611754565b60408301525060606115a084828501611754565b60608301525060806115b484828501611754565b60808301525092915050565b600061010082840312156115d357600080fd5b6115de610100611de8565b825190915067ffffffffffffffff8111156115f857600080fd5b61160484828501611465565b825250602082015167ffffffffffffffff81111561162157600080fd5b61162d848285016114b4565b602083015250604061164184828501611754565b604083015250606061165584828501611754565b606083015250608061166984828501611754565b60808301525060a061167d84828501611754565b60a08301525060c061169184828501611754565b60c08301525060e06116a584828501611754565b60e08301525092915050565b600060c082840312156116c357600080fd5b6116cd60c0611de8565b905060006116db8484611760565b82525060206116ec84848301611748565b602083015250604061170084828501611748565b604083015250606061171484828501611748565b606083015250608061172884828501611748565b60808301525060a061173c84828501611748565b60a08301525092915050565b60006113708235611ebd565b60006113708251611ebd565b60006113708235611e7c565b60006020828403121561177e57600080fd5b600061178a8484611364565b949350505050565b6000602082840312156117a457600080fd5b813567ffffffffffffffff8111156117bb57600080fd5b61178a84828501611377565b600060a082840312156117d957600080fd5b600061178a84846113f8565b6000602082840312156117f757600080fd5b600061178a8484611459565b60006020828403121561181557600080fd5b815167ffffffffffffffff81111561182c57600080fd5b61178a848285016115c0565b60006118448383611b5e565b505060c00190565b60006118588383611c9f565b505060200190565b61186981611e9d565b82525050565b600061187a82611e7f565b6118848185611e8f565b935061188f83611e76565b60005b828110156118ba576118a5868351611838565b95506118b082611e76565b9150600101611892565b5093949350505050565b6118cd81611e83565b6118d78184611e98565b92506118e282611e7c565b60005b8281101561190d576118f885835161184c565b945061190382611e76565b91506001016118e5565b5050505050565b61191d81611e89565b6119278184611e98565b925061193282611e7c565b60005b8281101561190d5761194885835161184c565b945061195382611e76565b9150600101611935565b61186981611ea8565b61186981611ee5565b600061197c602c83611e8f565b7f426f746820706c6179657273206861766520746f2068617665207069636b656481527f2074686569722063617264730000000000000000000000000000000000000000602082015260400192915050565b60006119db600c83611e8f565b7f496e76616c6964206d6f76650000000000000000000000000000000000000000815260200192915050565b6000611a14602983611e8f565b7f706c6179657273207475726e20646f6573206e6f7420657175616c20656974688152600160b91b6832b910383630bcb2b902602082015260400192915050565b6000611a62600d83611e8f565b7f4e6f7420796f7572207475726e00000000000000000000000000000000000000815260200192915050565b6000611a9b602583611e8f565b7f506c617965722068617320616c7265616479207069636b6564207468656972208152600160d81b64636172647302602082015260400192915050565b6000611ae5602883611e8f565b7f5472616e73616374696f6e2073656e646572206d75737420626520706c6179658152600160c11b673910189037b9101902602082015260400192915050565b6000611b32600f83611e8f565b7f4e6f7420656e6f756768206d616e610000000000000000000000000000000000815260200192915050565b805160c0830190611b6f8482611c9f565b506020820151611b826020850182611c96565b506040820151611b956040850182611c96565b506060820151611ba86060850182611c96565b506080820151611bbb6080850182611c96565b5060a0820151610e7c60a0850182611c96565b805460c0830190611bde81611f2f565b611be88582611c9f565b50506001820154611bf881611f1c565b611c056020860182611c96565b50611c0f81611f42565b611c1c6040860182611c96565b50611c2681611f50565b611c336060860182611c96565b50611c3d81611f5e565b611c4a6080860182611c96565b50611c5481611f6c565b61190d60a0860182611c96565b8051604080845260009190840190611c79828261186f565b9150506020830151611c8e6020860182611ca8565b509392505050565b61186981611ebd565b61186981611e7c565b61186981611ed0565b60208101611cbf8284611860565b92915050565b6101008101611cd48285611914565b61137060a08301846118c4565b60208101611cbf828461195d565b6101208101611cfe8287611966565b611d0b6020830186611c9f565b611d186040830185611bce565b611d26610100830184611860565b95945050505050565b60208082528101611cbf8161196f565b60208082528101611cbf816119ce565b60208082528101611cbf81611a07565b60208082528101611cbf81611a55565b60208082528101611cbf81611a8e565b60208082528101611cbf81611ad8565b60208082528101611cbf81611b25565b60c08101611cbf8284611b5e565b602080825281016113708184611c61565b60208101611cbf8284611c96565b60208101611cbf8284611c9f565b60208101611cbf8284611ca8565b60405181810167ffffffffffffffff81118282101715611e0757600080fd5b604052919050565b600067ffffffffffffffff821115611e2657600080fd5b5060209081020190565b600067ffffffffffffffff821115611e4757600080fd5b5060200290565b600067ffffffffffffffff821115611e6557600080fd5b506020601f91909101601f19160190565b60200190565b90565b5190565b50600390565b50600590565b90815260200190565b919050565b6000611cbf82611ec4565b151590565b600060038210611eb957fe5b5090565b61ffff1690565b6001600160a01b031690565b60ff1690565b600060038210611eb957600080fd5b6000611cbf82611ead565b60005b83811015611f0b578181015183820152602001611ef3565b83811115610e7c5750506000910152565b6000611cbf611f2a83611e7c565b611ebd565b6000611cbf611f3d83611e7c565b611e7c565b6000611cbf611f2a83611f7a565b6000611cbf611f2a83611f80565b6000611cbf611f2a83611f86565b6000611cbf611f2a83611f8c565b60101c90565b60201c90565b60301c90565b60401c9056fea265627a7a7230582020fe80fab98dacfc16d8550897d8755fe4c6b6425485d078f0441a7a114bf5f76c6578706572696d656e74616cf50037", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x59A5F12D GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD30895E4 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD30895E4 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xD7EB798C EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xE4B6C992 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0xFE145FBD EQ PUSH2 0x1CD JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x59A5F12D EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x5AD39846 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xC0D35449 EQ PUSH2 0x17D JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6880689 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x2A035B6C EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x2AF1E2F8 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x2E535940 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x48373963 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x4ED61446 EQ PUSH2 0x14D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1CB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0x201 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11A PUSH2 0x115 CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1DDA JUMP JUMPDEST PUSH2 0x105 PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0x17E5 JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST PUSH2 0x105 PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0x17C7 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x1792 JUMP JUMPDEST PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1DBE JUMP JUMPDEST PUSH2 0xDC PUSH2 0xB3F JUMP JUMPDEST PUSH2 0xDC PUSH2 0xB4E JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0xB5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST PUSH2 0xDC PUSH2 0xC3F JUMP JUMPDEST PUSH2 0x1AD PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1CE1 JUMP JUMPDEST PUSH2 0x11A PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0xC57 JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x1DB CALLDATASIZE PUSH1 0x4 PUSH2 0x176C JUMP JUMPDEST PUSH2 0xC6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1D9F JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xC50F4648FA14BE3EE68F160A224CC5D77EEEAC58EA500C6FB63FAC6788AFB0BE SWAP3 PUSH2 0x263 SWAP3 AND SWAP1 PUSH2 0x1CB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2CA JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 DUP3 ADD SLOAD DUP3 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP2 LT PUSH2 0x2FC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD SWAP4 SWAP1 SWAP5 MUL SWAP1 SWAP2 ADD SWAP5 POP SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0x33B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 DUP8 MSTORE PUSH1 0x3 SWAP1 SWAP5 MSTORE PUSH1 0x40 SWAP1 SWAP6 KECCAK256 PUSH1 0x4 SLOAD SWAP5 SWAP1 SWAP2 MUL SWAP1 SWAP2 ADD SWAP5 POP SWAP3 SWAP1 SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP2 EQ ISZERO PUSH2 0x422 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP2 LT PUSH2 0x3AC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 SWAP1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP4 ADD SWAP7 POP SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0x3EC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x45A JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D4F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x469 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x1 DUP1 DUP7 ADD DUP1 SLOAD PUSH2 0xFFFF PUSH1 0x1 PUSH1 0x20 SHL DUP1 DUP4 DIV DUP3 AND SWAP1 SWAP5 ADD DUP2 AND SWAP1 SWAP4 MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH2 0x4AF SWAP2 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP2 DIV AND DUP6 DUP6 PUSH2 0xD1B JUMP JUMPDEST PUSH2 0x880 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4C2 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x4AF SWAP1 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP6 DUP6 PUSH2 0xD1B JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4F1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x865 JUMPI PUSH2 0x4FF PUSH2 0x124B JUMP JUMPDEST PUSH1 0x0 SLOAD DUP7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x9188D312 SWAP2 PUSH2 0x532 SWAP2 PUSH1 0x4 ADD PUSH2 0x1DCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x560 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x588 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1803 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP1 DUP10 ADD SLOAD SWAP3 SWAP4 POP PUSH2 0xFFFF SWAP2 DUP3 AND PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP4 DIV DUP3 AND ADD AND LT ISZERO PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D8F JUMP JUMPDEST PUSH1 0x1 DUP7 DUP2 ADD SLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x0 SWAP3 PUSH2 0x5F5 SWAP3 PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH2 0xFFFF AND ADD SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP10 ADD DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP PUSH2 0x623 PUSH2 0x1296 JUMP JUMPDEST POP PUSH1 0x20 DUP1 DUP4 ADD MLOAD ADD MLOAD PUSH2 0x634 PUSH2 0x1296 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 DUP9 ADD SLOAD DUP3 MLOAD PUSH2 0x653 SWAP2 PUSH2 0xFFFF AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x20 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x683 SWAP3 PUSH3 0x10000 SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x6BB SWAP3 PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH6 0xFFFF00000000 NOT AND PUSH1 0x1 PUSH1 0x20 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x6F6 SWAP3 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH8 0xFFFF000000000000 NOT AND PUSH1 0x1 PUSH1 0x30 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x733 SWAP3 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH10 0xFFFF0000000000000000 NOT AND PUSH1 0x1 PUSH1 0x40 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE SWAP1 SWAP5 POP AND PUSH2 0x79F JUMPI DUP7 SLOAD PUSH1 0x1 DUP9 ADD SLOAD PUSH1 0xFF AND PUSH1 0x0 NOT SWAP1 SWAP2 ADD EQ ISZERO PUSH2 0x783 JUMPI PUSH2 0x77E CALLER PUSH2 0x201 JUMP JUMPDEST PUSH2 0x79F JUMP JUMPDEST PUSH1 0x1 DUP8 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP2 DUP3 AND SWAP1 SWAP4 ADD AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST DUP1 MLOAD PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x80 SWAP1 SWAP7 ADD MLOAD PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x30 SHL PUSH1 0x1 PUSH1 0x20 SHL PUSH3 0x10000 PUSH2 0xFFFF DUP1 DUP10 AND SWAP1 SWAP11 ADD DUP11 AND PUSH2 0xFFFF NOT SWAP1 SWAP9 AND SWAP8 SWAP1 SWAP8 OR DUP8 DUP2 DIV DUP11 AND SWAP1 SWAP7 ADD DUP10 AND SWAP1 SWAP7 MUL PUSH4 0xFFFF0000 NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP6 DUP2 DIV DUP9 AND SWAP1 SWAP4 ADD DUP8 AND SWAP1 SWAP5 MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP3 DUP2 DIV DUP7 AND SWAP1 SWAP7 ADD DUP6 AND SWAP1 SWAP2 MUL PUSH8 0xFFFF000000000000 NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP2 DUP2 DIV DUP5 AND SWAP1 SWAP5 ADD SWAP1 SWAP3 AND SWAP1 SWAP2 MUL PUSH10 0xFFFF0000000000000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH2 0x880 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D3F JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND MUL OR SWAP1 SSTORE DUP5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x5F4BFC4BB3EFC8381128908C65DBA16D774750A4508F87B52ED63512630609F9 SWAP2 PUSH2 0x8D7 SWAP2 DUP10 SWAP2 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D6F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x95E JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x959 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x959 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D7F JUMP JUMPDEST PUSH2 0x9C6 PUSH2 0x12C4 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP4 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD SWAP1 DUP3 ADD MSTORE DUP4 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x9FC DUP3 DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xEB1 JUMP JUMPDEST PUSH2 0xA08 DUP3 DUP5 PUSH1 0x1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0xA14 DUP3 DUP5 PUSH1 0x2 PUSH2 0x9F2 JUMP JUMPDEST PUSH32 0x48CA02657A8ACB3A062F53BF24CA611BB25D8108F29F5E3C5E468080A44DCA5D DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0xA45 SWAP3 SWAP2 SWAP1 PUSH2 0x1CC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA60 JUMPI PUSH2 0xA60 PUSH2 0x1040 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xB38 JUMPI PUSH1 0x0 DUP1 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xA97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xABF SWAP2 SWAP1 PUSH2 0x1DCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xB15 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1803 JUMP JUMPDEST PUSH1 0xA0 ADD MLOAD SWAP1 POP DUP3 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0xB2F JUMPI DUP1 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xA6A JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xB65 PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP2 SLOAD PUSH1 0x60 SWAP5 DUP2 MUL DUP3 ADD DUP6 ADD DUP5 MSTORE SWAP3 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP5 SWAP2 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 DUP6 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xC22 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xBA3 JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xC77 PUSH2 0x12FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0xCA7 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH3 0x10000 DUP2 DIV DUP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND ISZERO PUSH2 0xE02 JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xD4B SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND DUP6 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xDFD JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xD82 SWAP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xDFD JUMPI PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP1 SWAP4 ADD DUP4 AND PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE DUP4 SLOAD SWAP2 AND GT ISZERO PUSH2 0xDCE JUMPI PUSH2 0xDCE CALLER PUSH2 0x201 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH2 0xDFD SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0xDE9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD DUP5 PUSH2 0xD1B JUMP JUMPDEST PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xE15 SWAP1 PUSH2 0xFFFF AND DUP6 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xE7C JUMPI PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP1 SWAP4 ADD DUP4 AND PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE DUP4 SLOAD SWAP2 AND GT ISZERO PUSH2 0xE61 JUMPI PUSH2 0xE61 CALLER PUSH2 0x201 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH2 0xE7C SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0xDE9 JUMPI INVALID JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xFFFF AND DUP4 PUSH2 0xFFFF AND GT ISZERO PUSH2 0xEA2 JUMPI POP PUSH1 0x0 SWAP1 POP DUP3 DUP3 SUB PUSH2 0xEAA JUMP JUMPDEST POP POP DUP1 DUP3 SUB PUSH1 0x0 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xEB9 PUSH2 0x124B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 PUSH2 0xEEC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xF42 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1803 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE SWAP5 DUP2 MSTORE DUP2 DUP4 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP5 AND SWAP6 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP1 DUP9 ADD MLOAD DUP6 AND SWAP2 DUP7 ADD SWAP2 DUP3 MSTORE SWAP9 DUP8 ADD MLOAD DUP5 AND SWAP9 DUP6 ADD SWAP9 DUP10 MSTORE PUSH1 0xE0 SWAP1 SWAP7 ADD MLOAD DUP4 AND PUSH1 0xA0 DUP6 ADD SWAP1 DUP2 MSTORE DUP10 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP13 SSTORE PUSH1 0x0 SWAP12 DUP13 MSTORE SWAP3 SWAP1 SWAP11 KECCAK256 SWAP5 MLOAD PUSH1 0x2 SWAP1 SWAP11 MUL SWAP1 SWAP5 ADD SWAP9 DUP10 SSTORE SWAP1 MLOAD SWAP8 ADD DUP1 SLOAD SWAP4 MLOAD SWAP5 MLOAD SWAP7 MLOAD SWAP3 MLOAD DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH10 0xFFFF0000000000000000 NOT SWAP4 DUP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH8 0xFFFF000000000000 NOT SWAP9 DUP5 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH6 0xFFFF00000000 NOT SWAP8 DUP6 AND PUSH3 0x10000 MUL PUSH4 0xFFFF0000 NOT SWAP12 SWAP1 SWAP6 AND PUSH2 0xFFFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP10 SWAP1 SWAP10 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP5 SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0x1065 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH2 0x1124 SWAP4 DUP6 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x111B JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x109C JUMP JUMPDEST POP POP POP POP PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP5 SWAP6 POP SWAP3 SWAP4 PUSH2 0x11DE SWAP4 SWAP2 SWAP3 DUP6 SWAP1 DUP5 ADD DUP3 ISZERO PUSH2 0x111B JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x109C JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND LT PUSH2 0x121D JUMPI PUSH1 0x1 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1266 PUSH2 0x132F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x134A PUSH2 0x1296 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1357 PUSH2 0x1296 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 CALLDATALOAD PUSH2 0x1E9D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x139B PUSH2 0x1396 DUP3 PUSH2 0x1E0F JUMP JUMPDEST PUSH2 0x1DE8 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0xC0 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x13C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13EE JUMPI DUP2 PUSH2 0x13D6 DUP9 DUP3 PUSH2 0x16B1 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xC0 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x13C3 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0x1417 PUSH2 0x1396 DUP3 PUSH2 0x1E30 JUMP JUMPDEST SWAP2 POP DUP2 DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x142D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13EE JUMPI DUP2 PUSH2 0x1443 DUP9 DUP3 PUSH2 0x1760 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 CALLDATALOAD PUSH2 0x1ED6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1484 PUSH2 0x1396 DUP3 PUSH2 0x1E4E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x14A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14AB DUP4 DUP3 DUP5 PUSH2 0x1EF0 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D1 PUSH1 0x80 PUSH2 0x1DE8 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F7 DUP5 DUP3 DUP6 ADD PUSH2 0x1465 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1508 DUP5 DUP5 DUP4 ADD PUSH2 0x153D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x151C DUP5 DUP3 DUP6 ADD PUSH2 0x153D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0x1531 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x154F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1559 PUSH1 0xA0 PUSH2 0x1DE8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1567 DUP5 DUP5 PUSH2 0x1754 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1578 DUP5 DUP5 DUP4 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x158C DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x15A0 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x15B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15DE PUSH2 0x100 PUSH2 0x1DE8 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1604 DUP5 DUP3 DUP6 ADD PUSH2 0x1465 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x162D DUP5 DUP3 DUP6 ADD PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1641 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1655 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1669 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x167D DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x1691 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x16A5 DUP5 DUP3 DUP6 ADD PUSH2 0x1754 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16CD PUSH1 0xC0 PUSH2 0x1DE8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16DB DUP5 DUP5 PUSH2 0x1760 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x16EC DUP5 DUP5 DUP4 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1700 DUP5 DUP3 DUP6 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1714 DUP5 DUP3 DUP6 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1728 DUP5 DUP3 DUP6 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x173C DUP5 DUP3 DUP6 ADD PUSH2 0x1748 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 CALLDATALOAD PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 MLOAD PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1370 DUP3 CALLDATALOAD PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x177E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x178A DUP5 DUP5 PUSH2 0x1364 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x178A DUP5 DUP3 DUP6 ADD PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x178A DUP5 DUP5 PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x178A DUP5 DUP5 PUSH2 0x1459 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x182C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x178A DUP5 DUP3 DUP6 ADD PUSH2 0x15C0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1844 DUP4 DUP4 PUSH2 0x1B5E JUMP JUMPDEST POP POP PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1858 DUP4 DUP4 PUSH2 0x1C9F JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1E9D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x187A DUP3 PUSH2 0x1E7F JUMP JUMPDEST PUSH2 0x1884 DUP2 DUP6 PUSH2 0x1E8F JUMP JUMPDEST SWAP4 POP PUSH2 0x188F DUP4 PUSH2 0x1E76 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x18BA JUMPI PUSH2 0x18A5 DUP7 DUP4 MLOAD PUSH2 0x1838 JUMP JUMPDEST SWAP6 POP PUSH2 0x18B0 DUP3 PUSH2 0x1E76 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1892 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x18CD DUP2 PUSH2 0x1E83 JUMP JUMPDEST PUSH2 0x18D7 DUP2 DUP5 PUSH2 0x1E98 JUMP JUMPDEST SWAP3 POP PUSH2 0x18E2 DUP3 PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x190D JUMPI PUSH2 0x18F8 DUP6 DUP4 MLOAD PUSH2 0x184C JUMP JUMPDEST SWAP5 POP PUSH2 0x1903 DUP3 PUSH2 0x1E76 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x18E5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x191D DUP2 PUSH2 0x1E89 JUMP JUMPDEST PUSH2 0x1927 DUP2 DUP5 PUSH2 0x1E98 JUMP JUMPDEST SWAP3 POP PUSH2 0x1932 DUP3 PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x190D JUMPI PUSH2 0x1948 DUP6 DUP4 MLOAD PUSH2 0x184C JUMP JUMPDEST SWAP5 POP PUSH2 0x1953 DUP3 PUSH2 0x1E76 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1935 JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1EA8 JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1EE5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197C PUSH1 0x2C DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x426F746820706C6179657273206861766520746F2068617665207069636B6564 DUP2 MSTORE PUSH32 0x2074686569722063617264730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB PUSH1 0xC DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x496E76616C6964206D6F76650000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A14 PUSH1 0x29 DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x706C6179657273207475726E20646F6573206E6F7420657175616C2065697468 DUP2 MSTORE PUSH1 0x1 PUSH1 0xB9 SHL PUSH9 0x32B910383630BCB2B9 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A62 PUSH1 0xD DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x4E6F7420796F7572207475726E00000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A9B PUSH1 0x25 DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x506C617965722068617320616C7265616479207069636B656420746865697220 DUP2 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL PUSH5 0x6361726473 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AE5 PUSH1 0x28 DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x5472616E73616374696F6E2073656E646572206D75737420626520706C617965 DUP2 MSTORE PUSH1 0x1 PUSH1 0xC1 SHL PUSH8 0x3910189037B91019 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B32 PUSH1 0xF DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH32 0x4E6F7420656E6F756768206D616E610000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1B6F DUP5 DUP3 PUSH2 0x1C9F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1B82 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1B95 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1BA8 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1BBB PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0xE7C PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1BDE DUP2 PUSH2 0x1F2F JUMP JUMPDEST PUSH2 0x1BE8 DUP6 DUP3 PUSH2 0x1C9F JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x1BF8 DUP2 PUSH2 0x1F1C JUMP JUMPDEST PUSH2 0x1C05 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH2 0x1C0F DUP2 PUSH2 0x1F42 JUMP JUMPDEST PUSH2 0x1C1C PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH2 0x1C26 DUP2 PUSH2 0x1F50 JUMP JUMPDEST PUSH2 0x1C33 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH2 0x1C3D DUP2 PUSH2 0x1F5E JUMP JUMPDEST PUSH2 0x1C4A PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST POP PUSH2 0x1C54 DUP2 PUSH2 0x1F6C JUMP JUMPDEST PUSH2 0x190D PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x1C96 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1C79 DUP3 DUP3 PUSH2 0x186F JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1C8E PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1CA8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1EBD JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1E7C JUMP JUMPDEST PUSH2 0x1869 DUP2 PUSH2 0x1ED0 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1860 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x1CD4 DUP3 DUP6 PUSH2 0x1914 JUMP JUMPDEST PUSH2 0x1370 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x18C4 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x195D JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x1CFE DUP3 DUP8 PUSH2 0x1966 JUMP JUMPDEST PUSH2 0x1D0B PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1C9F JUMP JUMPDEST PUSH2 0x1D18 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BCE JUMP JUMPDEST PUSH2 0x1D26 PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x1860 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x196F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x19CE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1A07 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1A55 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1A8E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1AD8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1CBF DUP2 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1B5E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1370 DUP2 DUP5 PUSH2 0x1C61 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1C96 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1C9F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1CBF DUP3 DUP5 PUSH2 0x1CA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1E07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x3 SWAP1 JUMP JUMPDEST POP PUSH1 0x5 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF DUP3 PUSH2 0x1EC4 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 LT PUSH2 0x1EB9 JUMPI INVALID JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 LT PUSH2 0x1EB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1CBF DUP3 PUSH2 0x1EAD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F0B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1EF3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE7C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1E7C JUMP JUMPDEST PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F3D DUP4 PUSH2 0x1E7C JUMP JUMPDEST PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1F7A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1F80 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1F86 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBF PUSH2 0x1F2A DUP4 PUSH2 0x1F8C JUMP JUMPDEST PUSH1 0x10 SHR SWAP1 JUMP JUMPDEST PUSH1 0x20 SHR SWAP1 JUMP JUMPDEST PUSH1 0x30 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 SHR SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 KECCAK256 INVALID DUP1 STATICCALL 0xb9 DUP14 0xac 0xfc AND 0xd8 SSTORE ADDMOD SWAP8 0xd8 PUSH22 0x5FE4C6B6425485D078F0441A7A114BF5F76C65787065 PUSH19 0x696D656E74616CF50037000000000000000000 ", "sourceMap": "193:6160:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;193:6160:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;640:26:7;;;:::i;:::-;;;;;;;;;;;;;;;;6184:167:0;;;;;;;;;:::i;:::-;;1507:136:7;;;;;;;;;:::i;:::-;;;;;;;;689:4006:0;;;;;;;;;:::i;1777:1063:7:-;;;;;;;;;:::i;3358:382::-;;;;;;;;;:::i;:::-;;;;;;;;527:22;;;:::i;364:28:0:-;;;:::i;1649:122:7:-;;;;;;;;;:::i;:::-;;;;;;;;499:22;;;:::i;611:23::-;;;:::i;:::-;;;;;;;;555:50;;;;;;;;;:::i;1286:215::-;;;;;;;;;:::i;:::-;;;;;;;;640:26;;;;;;-1:-1:-1;;;;;640:26:7;;:::o;6184:167:0:-;6242:13;:30;;-1:-1:-1;;;;;;6242:30:0;-1:-1:-1;;;;;6242:30:0;;;;;;;;;;;6282:11;:24;;-1:-1:-1;;;;;;6282:24:0;;;6322:22;;;;;;6330:13;;6322:22;;;;;;;;;;6184:167;:::o;1507:136:7:-;-1:-1:-1;;;;;1605:19:7;1581:5;1605:19;;;:11;:19;;;;;:31;;;;;;1507:136::o;689:4006:0:-;739:11;;;;;-1:-1:-1;;;;;739:11:0;754:10;739:25;731:51;;;;-1:-1:-1;;;;;731:51:0;;;;;;;;;;;;;;;;;942:7;;;-1:-1:-1;;;;;942:7:0;892:35;930:20;;;:11;:20;;;;;963:32;;;;930:66;;892:35;;930:20;963:32;;;;;930:66;;;;;;;;;;;;;;;1057:7;;-1:-1:-1;;;;;1057:7:0;1045:20;;:11;:20;;;;;;1057:7;1078:32;;;1045:66;;930;;;;;;;;-1:-1:-1;1045:20:0;1078:32;;;1045:66;;;;;;;;;;;;;;;1166:7;;-1:-1:-1;;;;;1166:7:0;;;1154:20;;;:11;:20;;;;;;;1460:11;;1045:66;;;;;;;;-1:-1:-1;1154:20:0;1166:7;;;1460:11;;;:22;;1456:430;;;1529:7;;-1:-1:-1;;;;;1529:7:0;1517:20;;;;:11;:20;;;;;1529:7;1550:32;;;1517:66;;1550:32;;;;;1517:66;;;;;;;;;;;;;;1629:7;;;-1:-1:-1;;;;;1629:7:0;1617:20;;:11;:20;;;;;;;1650:32;;;;1617:66;;1517;;;;;;;;-1:-1:-1;1617:20:0;1650:32;;;1617:66;;;;;;;;;;;;;;1723:7;;-1:-1:-1;;;;;1723:7:0;1711:20;;;:11;:20;;;;;;;1617:66;;;;;;;;-1:-1:-1;1711:20:0;-1:-1:-1;1723:7:0;-1:-1:-1;1456:430:0;;;1801:7;;1786:11;;1801:7;1786:11;;-1:-1:-1;;;;;1786:11:0;;;1801:7;;1786:22;1782:104;;1824:51;;-1:-1:-1;;;;;1824:51:0;;;;;;;;1782:104;1918:28;;1960:4;:19;;;;;;;;;1956:2608;;;2019:21;;;;;;;-1:-1:-1;;;2019:21:0;;;;;:25;;;1995:49;;;;;-1:-1:-1;;1995:49:0;;;;;;;;2125:63;;-1:-1:-1;;;2132:23:0;;;;2157:17;2176:11;2125:6;:63::i;:::-;1956:2608;;;2217:18;2209:4;:26;;;;;;;;;2205:2359;;;2325:30;;;;2318:70;;-1:-1:-1;;;2325:30:0;;;;2357:17;2376:11;2318:6;:70::i;2205:2359::-;2418:12;2410:4;:20;;;;;;;;;2406:2158;;;2447:22;;:::i;:::-;2472:13;;2494:23;;2472:46;;-1:-1:-1;;;;;2472:46:0;;-1:-1:-1;;;;;2472:13:0;;;;:21;;:46;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2472:46:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2472:46:0;;;;;;39:16:-1;36:1;17:17;2:54;101:4;2472:46:0;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;2472:46:0;;;;;;;;;2570:18;;;;:27;;;2541:21;;;;;2447:71;;-1:-1:-1;2541:56:0;;;;-1:-1:-1;;;2541:21:0;;;;;:25;:56;;;2533:84;;;;-1:-1:-1;;;;;2533:84:0;;;;;;;;;2723:21;;;;;2750:18;;;;:27;;;2632:16;;2703:75;;-1:-1:-1;;;2723:21:0;;;;:25;;2703:19;:75::i;:::-;2667:21;;;2666:112;;;;;;-1:-1:-1;;;2666:112:0;-1:-1:-1;;2666:112:0;;;;;;;;;;;-1:-1:-1;2793:43:0;;:::i;:::-;-1:-1:-1;2839:18:0;;;;;:27;;2880:41;;:::i;:::-;-1:-1:-1;2924:18:0;;;;:25;;;3069:24;;;;3095:22;;3049:69;;3069:24;;;3049:19;:69::i;:::-;3010:24;;;3009:109;;-1:-1:-1;;3009:109:0;;;;;;;;;;3220:23;;;;3009:109;;-1:-1:-1;3173:71:0;;3193:25;;;;;;3173:19;:71::i;:::-;3133:25;;;3132:112;;-1:-1:-1;;3132:112:0;;;;;;;;;;;;3340:20;;;;3132:112;;-1:-1:-1;3296:65:0;;-1:-1:-1;;;3316:22:0;;;;;3296:19;:65::i;:::-;3259:22;;;3258:103;;-1:-1:-1;;3258:103:0;-1:-1:-1;;;3258:103:0;;;;;;;;;;3461:22;;;;3258:103;;-1:-1:-1;3415:69:0;;-1:-1:-1;;;3435:24:0;;;;;3415:19;:69::i;:::-;3376:24;;;3375:109;;-1:-1:-1;;3375:109:0;-1:-1:-1;;;3375:109:0;;;;;;;;;;3598:29;;;;3375:109;;-1:-1:-1;3545:83:0;;-1:-1:-1;;;3565:31:0;;;;;3545:19;:83::i;:::-;3499:31;;;3498:130;;-1:-1:-1;;3498:130:0;-1:-1:-1;;;3498:130:0;;;;;;;;;;;;-1:-1:-1;3694:24:0;3690:315;;3823:30;;3856:1;3796:23;;;;;-1:-1:-1;;3823:34:0;;;3796:61;3791:200;;;3881:19;3889:10;3881:7;:19::i;:::-;3791:200;;;3947:23;;;;:25;;-1:-1:-1;;3947:25:0;;;;;;;;;;;;;;;;3791:200;4110:20;;4084:23;;;;;4198:21;;;;4281:18;;;;4365:20;;;;4465:27;;;;;-1:-1:-1;;;;;;;;;4171:24:0;4084:23;;;;:46;;;4058:72;;-1:-1:-1;;4058:72:0;;;;;;;4171:24;;;;;:48;;;4144:75;;;;;-1:-1:-1;;4144:75:0;;;;;;;4257:21;;;;;:42;;;4233:66;;;;;-1:-1:-1;;4233:66:0;;;;;;;4339:23;;;;;:46;;;4313:72;;;;;-1:-1:-1;;4313:72:0;;;;;;;4432:30;;;;;:60;;;4399:93;;;;;;-1:-1:-1;;4399:93:0;;;;;;;;;-1:-1:-1;2406:2158:0;;-1:-1:-1;;2406:2158:0;;4531:22;;-1:-1:-1;;;;;4531:22:0;;;;;;;;2406:2158;4582:11;:24;;-1:-1:-1;;;;;;4582:24:0;;-1:-1:-1;;;;;4582:24:0;;;;;;4633:23;;4622:66;;;;;;4627:4;;4633:23;4658:17;;4582:24;;4622:66;;;;;;;;;;689:4006;;;;;;:::o;1777:1063:7:-;1895:10;1848:32;1883:23;;;:11;:23;;;;;1936:18;;:23;1928:73;;;;-1:-1:-1;;;;;1928:73:7;;;;;;;;;2016:7;;-1:-1:-1;;;;;2016:7:7;2027:10;2016:21;2012:397;;;2069:7;;-1:-1:-1;;;;;2069:7:7;2099:1;2057:20;;;:11;:20;;;;;:39;:43;2053:100;;2120:11;:18;;-1:-1:-1;;2120:18:7;2134:4;2120:18;;;2053:100;2012:397;;;2181:7;;-1:-1:-1;;;;;2181:7:7;2192:10;2181:21;2177:232;;;2234:7;;-1:-1:-1;;;;;2234:7:7;2264:1;2222:20;;;:11;:20;;;;;:39;:43;2218:100;;2285:11;:18;;-1:-1:-1;;2285:18:7;2299:4;2285:18;;;2177:232;;;2348:50;;-1:-1:-1;;;;;2348:50:7;;;;;;;;2177:232;2419:32;;:::i;:::-;-1:-1:-1;2419:123:7;;;;;;;;2468:15;;2419:123;;2468:15;2497;;;;2419:123;;;;2526:15;;;;2419:123;;;;;;;2553:44;2568:11;2468:15;-1:-1:-1;2581:15:7;;;;;2553:14;:44::i;:::-;2607;2622:11;2635:12;2648:1;2635:15;;2607:44;2661;2676:11;2689:12;2702:1;2689:15;;2661:44;2721:47;2736:12;2750:17;2721:47;;;;;;;;;;;;;;;;2783:11;;;;2779:55;;;2810:13;:11;:13::i;:::-;1777:1063;;;:::o;3358:382::-;3429:6;;;3478:230;3495:11;:18;3493:1;:20;3478:230;;;3535:16;3554:13;;3576:14;;-1:-1:-1;;;;;3554:13:7;;;;:21;;3576:11;;3588:1;;3576:14;;;;;;;;;;;;:21;;;3554:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3554:44:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3554:44:7;;;;;;39:16:-1;36:1;17:17;2:54;101:4;3554:44:7;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;3554:44:7;;;;;;;;;:50;;;3535:69;;3635:8;3623:20;;:9;:20;;;3619:79;;;3674:9;3663:20;;3619:79;-1:-1:-1;3515:3:7;;3478:230;;;-1:-1:-1;3725:8:7;3358:382;-1:-1:-1;;3358:382:7:o;527:22::-;;;-1:-1:-1;;;;;527:22:7;;:::o;364:28:0:-;;;-1:-1:-1;;;;;364:28:0;;:::o;1649:122:7:-;1709:17;;:::i;:::-;-1:-1:-1;;;;;1745:19:7;;;;;;:11;:19;;;;;;;;1738:26;;;;;;;;;;;;;;;;;;;;;;1745:19;;1738:26;;;;1745:19;;1738:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1738:26:7;;;;;;;;-1:-1:-1;;;1738:26:7;;;;;;;;-1:-1:-1;;;1738:26:7;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1738:26:7;;;-1:-1:-1;1738:26:7;;;;;;;;;;;;;;1649:122;-1:-1:-1;;1649:122:7:o;499:22::-;;;-1:-1:-1;;;;;499:22:7;;:::o;611:23::-;;;;;;:::o;555:50::-;;;;;;;;;;;;;;;;;:::o;1286:215::-;1353:17;;:::i;:::-;-1:-1:-1;;;;;1402:19:7;;1383:16;1402:19;;;:11;:19;;;;;:31;;;;1451:43;;1402:31;;;;;:19;:31;;1451:43;;;;;;;;;;;;;;;1444:50;;;;;;;;1451:43;;;;;;;1444:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1444:50:7;;;;;;;;-1:-1:-1;;;1444:50:7;;;;;;;;-1:-1:-1;;;1444:50:7;;;;;;;;;;-1:-1:-1;;1286:215:7;;;:::o;4761:1417:0:-;4930:25;;;;4887:28;;4930:25;;;;;:29;4926:1246;;5048:25;;;;5028:60;;5048:25;;;;;5075:12;5028:19;:60::i;:::-;4976:25;;;4975:113;;-1:-1:-1;;4975:113:0;;;;;;;;;;;-1:-1:-1;5107:25:0;;;5103:564;;5224:24;;;;5204:68;;5224:24;;5250:21;5204:19;:68::i;:::-;5153:24;;;5152:120;;-1:-1:-1;;5152:120:0;;;;;;;;;-1:-1:-1;5295:25:0;;;5291:362;;5344:23;;;;:25;;;;;;;;;;;-1:-1:-1;;5344:25:0;;;;;;;;5421:30;;5395:23;;:56;5391:130;;;5479:19;5487:10;5479:7;:19::i;:::-;5596:23;;;;5572:48;;5542:92;;5549:21;;5572:11;;5596:23;;;5572:48;;;;;;;;;;;;;;;;5622:11;5542:6;:92::i;:::-;4926:1246;;;5770:24;;;;5750:59;;5770:24;;5796:12;5750:19;:59::i;:::-;5699:24;;;5698:111;;-1:-1:-1;;5698:111:0;;;;;;;;;-1:-1:-1;5828:25:0;;;5824:338;;5873:23;;;;:25;;;;;;;;;;;-1:-1:-1;;5873:25:0;;;;;;;;5946:30;;5920:23;;:56;5916:122;;;6000:19;6008:10;6000:7;:19::i;:::-;6109:23;;;;6085:48;;6055:92;;6062:21;;6085:11;;6109:23;;;6085:48;;;;;6055:92;4761:1417;;;;:::o;164:173:5:-;226:6;234;259:1;255:5;;:1;:5;;;252:52;;;-1:-1:-1;284:1:5;;-1:-1:-1;287:5:5;;;276:17;;252:52;-1:-1:-1;;321:5:5;;;328:1;164:173;;;;;;:::o;865:415:7:-;956:16;;:::i;:::-;975:13;;:29;;-1:-1:-1;;;;;975:29:7;;-1:-1:-1;;;;;975:13:7;;;;:21;;:29;;997:6;;975:29;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;975:29:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;975:29:7;;;;;;39:16:-1;36:1;17:17;2:54;101:4;975:29:7;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;975:29:7;;;;;;;;;1033:239;;;;;;;;;;;;1094:15;;;;1033:239;;;;;;;;;;;1132:16;;;;;1033:239;;;;;;;;1168:13;;;;;1033:239;;;;;;;;1203:11;;;;1033:239;;;;;;;;1243:18;;;;;1033:239;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;-1:-1;1015:258:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1015:258:7;-1:-1:-1;;1015:258:7;;;-1:-1:-1;;;1015:258:7;-1:-1:-1;;1015:258:7;;;-1:-1:-1;;;1015:258:7;-1:-1:-1;;1015:258:7;;;;;-1:-1:-1;;1015:258:7;;;;-1:-1:-1;;1015:258:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;865:415:7:o;2916:436::-;2966:11;;;;2958:68;;;;-1:-1:-1;;;;;2958:68:7;;;;;;;;;3087:7;;-1:-1:-1;;;;;3087:7:7;3037:22;3075:20;;;:11;:20;;;;;;;;3062:46;;;;;;;;;;;;;;;;;;;3037:22;;3062:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3062:46:7;;;;;;;;-1:-1:-1;;;3062:46:7;;;;;;;;-1:-1:-1;;;3062:46:7;;;;;;;;;;;;;;;;;;;;;;;;:12;:46::i;:::-;3168:7;;-1:-1:-1;;;;;3168:7:7;3118:22;3156:20;;;:11;:20;;;;;;;;3143:46;;;;;;;;;;;;;;;;;3037:71;;-1:-1:-1;3118:22:7;;3143:46;;;;3118:22;;3143:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3143:46:7;;;;;;;;-1:-1:-1;;;3143:46:7;;;;;;;;-1:-1:-1;;;3143:46:7;;;;;;;;;;;;;;;;;;;;3118:71;;3223:15;3204:34;;:15;:34;;;3200:146;;3268:7;;3254:11;:21;;-1:-1:-1;;;;;3268:7:7;;;;3254:21;-1:-1:-1;;;;;;3254:21:7;;;;;;;;;3200:146;;;3328:7;;3314:11;:21;;-1:-1:-1;;;;;3328:7:7;;;;3314:21;-1:-1:-1;;;;;;3314:21:7;;;;;;;;;3200:146;2916:436;;:::o;193:6160:0:-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;193:6160:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;193:6160:0;;;-1:-1:-1;;193:6160:0:o;:::-;;;;;;;;;;;;;-1:-1:-1;193:6160:0;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;193:6160:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;174:779;;315:3;308:4;300:6;296:17;292:27;282:2;;333:1;330;323:12;282:2;370:6;357:20;392:104;407:88;488:6;407:88;;;392:104;;;383:113;;513:5;538:6;531:5;524:21;568:4;560:6;556:17;546:27;;590:4;585:3;581:14;574:21;;643:6;690:3;682:4;674:6;670:17;665:3;661:27;658:36;655:2;;;707:1;704;697:12;655:2;732:1;717:230;742:6;739:1;736:13;717:230;;;800:3;822:61;879:3;867:10;822:61;;;810:74;;-1:-1;907:4;898:14;;;;935:4;926:14;;;;;764:1;757:9;717:230;;;721:14;275:678;;;;;;;;980:615;;1095:3;1088:4;1080:6;1076:17;1072:27;1062:2;;1113:1;1110;1103:12;1062:2;1137:3;1155:78;1170:62;1225:6;1170:62;;1155:78;1146:87;;1250:5;1309:6;1356:3;1348:4;1340:6;1336:17;1331:3;1327:27;1324:36;1321:2;;;1373:1;1370;1363:12;1321:2;1398:1;1383:206;1408:6;1405:1;1402:13;1383:206;;;1466:3;1488:37;1521:3;1509:10;1488:37;;;1476:50;;-1:-1;1549:4;1540:14;;;;1568;;;;;1430:1;1423:9;1383:206;;1603:132;;1677:53;1722:6;1709:20;1677:53;;1743:436;;1852:3;1845:4;1837:6;1833:17;1829:27;1819:2;;1870:1;1867;1860:12;1819:2;1900:6;1894:13;1922:61;1937:45;1975:6;1937:45;;1922:61;1913:70;;2003:6;1996:5;1989:21;2039:4;2031:6;2027:17;2072:4;2065:5;2061:16;2107:3;2098:6;2093:3;2089:16;2086:25;2083:2;;;2124:1;2121;2114:12;2083:2;2134:39;2166:6;2161:3;2156;2134:39;;;1812:367;;;;;;;;2226:958;;2347:5;2335:9;2330:3;2326:19;2322:31;2319:2;;;2366:1;2363;2356:12;2319:2;2384:20;2399:4;2384:20;;;2454:24;;2375:29;;-1:-1;2498:18;2487:30;;2484:2;;;2530:1;2527;2520:12;2484:2;2564:66;2626:3;2617:6;2606:9;2602:22;2564:66;;;2540:91;;-1:-1;2696:2;2729:88;2813:3;2789:22;;;2729:88;;;2722:4;2715:5;2711:16;2704:114;2652:177;2881:3;2915:88;2999:3;2990:6;2979:9;2975:22;2915:88;;;2908:4;2901:5;2897:16;2890:114;2839:176;3069:3;3103:59;3158:3;3149:6;3138:9;3134:22;3103:59;;;3096:4;3089:5;3085:16;3078:85;3025:149;2313:871;;;;;3237:979;;3365:4;3353:9;3348:3;3344:19;3340:30;3337:2;;;3383:1;3380;3373:12;3337:2;3401:20;3416:4;3401:20;;;3392:29;-1:-1;3473:1;3504:59;3559:3;3539:9;3504:59;;;3480:84;;-1:-1;3628:2;3661:59;3716:3;3692:22;;;3661:59;;;3654:4;3647:5;3643:16;3636:85;3585:147;3782:2;3815:59;3870:3;3861:6;3850:9;3846:22;3815:59;;;3808:4;3801:5;3797:16;3790:85;3742:144;3938:2;3971:59;4026:3;4017:6;4006:9;4002:22;3971:59;;;3964:4;3957:5;3953:16;3946:85;3896:146;4101:3;4135:59;4190:3;4181:6;4170:9;4166:22;4135:59;;;4128:4;4121:5;4117:16;4110:85;4052:154;3331:885;;;;;4259:1643;;4381:5;4369:9;4364:3;4360:19;4356:31;4353:2;;;4400:1;4397;4390:12;4353:2;4418:21;4433:5;4418:21;;;4489:24;;4409:30;;-1:-1;4533:18;4522:30;;4519:2;;;4565:1;4562;4555:12;4519:2;4599:66;4661:3;4652:6;4641:9;4637:22;4599:66;;;4575:91;;-1:-1;4751:2;4736:18;;4730:25;4775:18;4764:30;;4761:2;;;4807:1;4804;4797:12;4761:2;4842:81;4919:3;4910:6;4899:9;4895:22;4842:81;;;4835:4;4828:5;4824:16;4817:107;4687:248;4991:2;5024:59;5079:3;5070:6;5059:9;5055:22;5024:59;;;5017:4;5010:5;5006:16;4999:85;4945:150;5152:2;5185:59;5240:3;5231:6;5220:9;5216:22;5185:59;;;5178:4;5171:5;5167:16;5160:85;5105:151;5310:3;5344:59;5399:3;5390:6;5379:9;5375:22;5344:59;;;5337:4;5330:5;5326:16;5319:85;5266:149;5466:3;5500:59;5555:3;5546:6;5535:9;5531:22;5500:59;;;5493:4;5486:5;5482:16;5475:85;5425:146;5623:3;5657:59;5712:3;5703:6;5692:9;5688:22;5657:59;;;5650:4;5643:5;5639:16;5632:85;5581:147;5787:3;5821:59;5876:3;5867:6;5856:9;5852:22;5821:59;;;5814:4;5807:5;5803:16;5796:85;5738:154;4347:1555;;;;;5949:1056;;6062:4;6050:9;6045:3;6041:19;6037:30;6034:2;;;6080:1;6077;6070:12;6034:2;6098:20;6113:4;6098:20;;;6089:29;-1:-1;6170:1;6201:49;6246:3;6226:9;6201:49;;;6177:74;;-1:-1;6314:2;6347:48;6391:3;6367:22;;;6347:48;;;6340:4;6333:5;6329:16;6322:74;6272:135;6460:2;6493:48;6537:3;6528:6;6517:9;6513:22;6493:48;;;6486:4;6479:5;6475:16;6468:74;6417:136;6603:2;6636:48;6680:3;6671:6;6660:9;6656:22;6636:48;;;6629:4;6622:5;6618:16;6611:74;6563:133;6748:3;6782:48;6826:3;6817:6;6806:9;6802:22;6782:48;;;6775:4;6768:5;6764:16;6757:74;6706:136;6901:3;6935:48;6979:3;6970:6;6959:9;6955:22;6935:48;;;6928:4;6921:5;6917:16;6910:74;6852:143;6028:977;;;;;7012:116;;7078:45;7115:6;7102:20;7078:45;;7135:120;;7212:38;7242:6;7236:13;7212:38;;7262:118;;7329:46;7367:6;7354:20;7329:46;;7387:241;;7491:2;7479:9;7470:7;7466:23;7462:32;7459:2;;;7507:1;7504;7497:12;7459:2;7542:1;7559:53;7604:7;7584:9;7559:53;;;7549:63;7453:175;-1:-1;;;;7453:175;7635:425;;7788:2;7776:9;7767:7;7763:23;7759:32;7756:2;;;7804:1;7801;7794:12;7756:2;7839:31;;7890:18;7879:30;;7876:2;;;7922:1;7919;7912:12;7876:2;7942:102;8036:7;8027:6;8016:9;8012:22;7942:102;;8067:288;;8194:3;8182:9;8173:7;8169:23;8165:33;8162:2;;;8211:1;8208;8201:12;8162:2;8246:1;8263:76;8331:7;8311:9;8263:76;;8362:255;;8473:2;8461:9;8452:7;8448:23;8444:32;8441:2;;;8489:1;8486;8479:12;8441:2;8524:1;8541:60;8593:7;8573:9;8541:60;;8624:386;;8761:2;8749:9;8740:7;8736:23;8732:32;8729:2;;;8777:1;8774;8767:12;8729:2;8812:24;;8856:18;8845:30;;8842:2;;;8888:1;8885;8878:12;8842:2;8908:86;8986:7;8977:6;8966:9;8962:22;8908:86;;9018:273;;9153:98;9247:3;9239:6;9153:98;;;-1:-1;;9280:4;9271:14;;9146:145;9300:173;;9387:46;9429:3;9421:6;9387:46;;;-1:-1;;9462:4;9453:14;;9380:93;9481:120;9564:31;9589:5;9564:31;;;9559:3;9552:44;9546:55;;;9691:777;;9870:74;9938:5;9870:74;;;9957:100;10050:6;10045:3;9957:100;;;9950:107;;10077:76;10147:5;10077:76;;;10174:1;10159:287;10184:6;10181:1;10178:13;10159:287;;;10231:111;10338:3;10329:6;10323:13;10231:111;;;10224:118;;10359:80;10432:6;10359:80;;;10349:90;-1:-1;10206:1;10199:9;10159:287;;;-1:-1;10459:3;;9849:619;-1:-1;;;;9849:619;10509:591;10642:52;10688:5;10642:52;;;10707:84;10784:6;10779:3;10707:84;;;10700:91;;10811:54;10859:5;10811:54;;;10886:1;10871:217;10896:6;10893:1;10890:13;10871:217;;;10943:63;11002:3;10993:6;10987:13;10943:63;;;10936:70;;11023:58;11074:6;11023:58;;;11013:68;-1:-1;10918:1;10911:9;10871:217;;;10875:14;10621:479;;;;;11141:591;11274:52;11320:5;11274:52;;;11339:84;11416:6;11411:3;11339:84;;;11332:91;;11443:54;11491:5;11443:54;;;11518:1;11503:217;11528:6;11525:1;11522:13;11503:217;;;11575:63;11634:3;11625:6;11619:13;11575:63;;;11568:70;;11655:58;11706:6;11655:58;;;11645:68;-1:-1;11550:1;11543:9;11503:217;;11740:111;11817:28;11839:5;11817:28;;11858:136;11946:42;11982:5;11946:42;;12002:465;;12162:67;12226:2;12221:3;12162:67;;;12262:66;12242:87;;12363:66;12358:2;12349:12;;12342:88;12458:2;12449:12;;12148:319;-1:-1;;12148:319;12476:364;;12636:67;12700:2;12695:3;12636:67;;;12736:66;12716:87;;12831:2;12822:12;;12622:218;-1:-1;;12622:218;12849:465;;13009:67;13073:2;13068:3;13009:67;;;13109:66;13089:87;;-1:-1;;;;;13205:2;13196:12;;13189:88;13305:2;13296:12;;12995:319;-1:-1;;12995:319;13323:364;;13483:67;13547:2;13542:3;13483:67;;;13583:66;13563:87;;13678:2;13669:12;;13469:218;-1:-1;;13469:218;13696:465;;13856:67;13920:2;13915:3;13856:67;;;13956:66;13936:87;;-1:-1;;;;;14052:2;14043:12;;14036:88;14152:2;14143:12;;13842:319;-1:-1;;13842:319;14170:465;;14330:67;14394:2;14389:3;14330:67;;;14430:66;14410:87;;-1:-1;;;;;14526:2;14517:12;;14510:88;14626:2;14617:12;;14316:319;-1:-1;;14316:319;14644:364;;14804:67;14868:2;14863:3;14804:67;;;14904:66;14884:87;;14999:2;14990:12;;14790:218;-1:-1;;14790:218;15093:1092;15309:22;;15242:4;15233:14;;;15337:61;15237:3;15309:22;15337:61;;;15262:142;15478:4;15471:5;15467:16;15461:23;15490:60;15544:4;15539:3;15535:14;15522:11;15490:60;;;15414:142;15631:4;15624:5;15620:16;15614:23;15643:60;15697:4;15692:3;15688:14;15675:11;15643:60;;;15566:143;15781:4;15774:5;15770:16;15764:23;15793:60;15847:4;15842:3;15838:14;15825:11;15793:60;;;15719:140;15933:4;15926:5;15922:16;15916:23;15945:60;15999:4;15994:3;15990:14;15977:11;15945:60;;;15869:142;16092:4;16085:5;16081:16;16075:23;16104:60;16158:4;16153:3;16149:14;16136:11;16104:60;;17431:1369;17654:22;;17581:4;17572:14;;;17701:55;17654:22;17701:55;;;17762:61;17813:3;17796:11;17762:61;;;-1:-1;;17891:3;17880:15;;17874:22;17921:54;17874:22;17921:54;;;17981:60;18035:4;18030:3;18026:14;18013:11;17981:60;;;17839:208;18105:54;18149:9;18105:54;;;18165:60;18219:4;18214:3;18210:14;18197:11;18165:60;;;18057:174;18286:54;18330:9;18286:54;;;18346:60;18400:4;18395:3;18391:14;18378:11;18346:60;;;18241:171;18469:54;18513:9;18469:54;;;18529:60;18583:4;18578:3;18574:14;18561:11;18529:60;;;18422:173;18659:54;18703:9;18659:54;;;18719:60;18773:4;18768:3;18764:14;18751:11;18719:60;;18884:655;19113:22;;19041:4;19148:37;;;18884:655;;19032:14;;;;19200:146;19032:14;19113:22;19200:146;;;19192:154;;19061:297;19437:4;19430:5;19426:16;19420:23;19449:58;19501:4;19496:3;19492:14;19479:11;19449:58;;;-1:-1;19530:4;19014:525;-1:-1;;;19014:525;19546:107;19617:30;19641:5;19617:30;;19784:110;19857:31;19882:5;19857:31;;20028:104;20097:29;20120:5;20097:29;;20260:213;20378:2;20363:18;;20392:71;20367:9;20436:6;20392:71;;;20349:124;;;;;20480:510;20718:3;20703:19;;20733:117;20707:9;20823:6;20733:117;;;20861:119;20975:3;20964:9;20960:19;20951:6;20861:119;;20997:201;21109:2;21094:18;;21123:65;21098:9;21161:6;21123:65;;21205:672;21469:3;21454:19;;21484:76;21458:9;21533:6;21484:76;;;21571:72;21639:2;21628:9;21624:18;21615:6;21571:72;;;21654:129;21779:2;21768:9;21764:18;21755:6;21654:129;;;21794:73;21862:3;21851:9;21847:19;21838:6;21794:73;;;21440:437;;;;;;;;21884:407;22075:2;22089:47;;;22060:18;;22150:131;22060:18;22150:131;;22298:407;22489:2;22503:47;;;22474:18;;22564:131;22474:18;22564:131;;22712:407;22903:2;22917:47;;;22888:18;;22978:131;22888:18;22978:131;;23126:407;23317:2;23331:47;;;23302:18;;23392:131;23302:18;23392:131;;23540:407;23731:2;23745:47;;;23716:18;;23806:131;23716:18;23806:131;;23954:407;24145:2;24159:47;;;24130:18;;24220:131;24130:18;24220:131;;24368:407;24559:2;24573:47;;;24544:18;;24634:131;24544:18;24634:131;;24782:326;24956:3;24941:19;;24971:127;24945:9;25071:6;24971:127;;25115:373;25289:2;25303:47;;;25274:18;;25364:114;25274:18;25464:6;25364:114;;25495:209;25611:2;25596:18;;25625:69;25600:9;25667:6;25625:69;;25711:213;25829:2;25814:18;;25843:71;25818:9;25887:6;25843:71;;25931:205;26045:2;26030:18;;26059:67;26034:9;26099:6;26059:67;;26143:256;26205:2;26199:9;26231:17;;;26306:18;26291:34;;26327:22;;;26288:62;26285:2;;;26363:1;26360;26353:12;26285:2;26379;26372:22;26183:216;;-1:-1;26183:216;26406:282;;26589:18;26581:6;26578:30;26575:2;;;26621:1;26618;26611:12;26575:2;-1:-1;26650:4;26638:17;;;26668:15;;26512:176;26695:233;;26852:18;26844:6;26841:30;26838:2;;;26884:1;26881;26874:12;26838:2;-1:-1;26913:4;26901:17;;26775:153;26935:255;;27075:18;27067:6;27064:30;27061:2;;;27107:1;27104;27097:12;27061:2;-1:-1;27180:4;27151;27128:17;;;;-1:-1;;27124:33;27170:15;;26998:192;27199:141;27328:4;27316:17;;27297:43;27351:108;27446:6;27427:32;27587:127;27697:12;;27681:33;27721:96;-1:-1;27809:3;;27793:24;27824:96;-1:-1;27912:3;;27896:24;28337:192;28469:19;;;28518:4;28509:14;;28462:67;28538:140;28669:3;28647:31;-1:-1;28647:31;29007:105;;29076:31;29101:5;29076:31;;29119:92;29192:13;29185:21;;29168:43;29218:124;;29303:1;29296:5;29293:12;29283:2;;29309:9;29283:2;-1:-1;29332:5;29277:65;29349:91;29428:6;29417:18;;29400:40;29447:128;-1:-1;;;;;29516:54;;29499:76;29668:88;29746:4;29735:16;;29718:38;30071:127;;30156:1;30149:5;30146:12;30136:2;;30172:1;30169;30162:12;30524:127;;30608:38;30640:5;30608:38;;30659:268;30724:1;30731:101;30745:6;30742:1;30739:13;30731:101;;;30812:11;;;30806:18;30793:11;;;30786:39;30767:2;30760:10;30731:101;;;30847:6;30844:1;30841:13;30838:2;;;-1:-1;;30912:1;30894:16;;30887:27;30708:219;30935:159;;31024:65;31054:34;31077:10;31054:34;;;31024:65;;31101:161;;31191:66;31222:34;31245:10;31222:34;;;31191:66;;31269:160;;31358:66;31388:35;31412:10;31388:35;;31436:160;;31525:66;31555:35;31579:10;31555:35;;31603:160;;31692:66;31722:35;31746:10;31722:35;;31770:160;;31859:66;31889:35;31913:10;31889:35;;32037:91;32112:2;32108:14;;32089:39;32138:91;32213:2;32209:14;;32190:39;32239:91;32314:2;32310:14;;32291:39;32340:91;32415:2;32411:14;;32392:39"}}}}, "contracts/BattleRandom.sol": {"BattleRandom": {"abi": [{"constant": true, "inputs": [], "name": "playersTurn", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_winningPlayer", "type": "address"}], "name": "endGame", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayersCurrentCardNumber", "outputs": [{"name": "", "type": "uint8"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "move", "type": "uint8"}], "name": "turn", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "desiredCards", "type": "uint256[5]"}], "name": "pickPayerCards", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "playerCards", "type": "tuple[]"}], "name": "calcMaxSpeed", "outputs": [{"name": "", "type": "uint16"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "player2", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "winningPlayer", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayerDeck", "outputs": [{"components": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "playerCards", "type": "tuple[]"}, {"name": "currentCard", "type": "uint8"}], "name": "", "type": "tuple"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "player1", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "cardsPicked", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "address"}], "name": "playerDecks", "outputs": [{"name": "currentCard", "type": "uint8"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayerCurrentCard", "outputs": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "", "type": "tuple"}], "payable": false, "stateMutability": "view", "type": "function"}, {"inputs": [{"name": "_player1", "type": "address"}, {"name": "_player2", "type": "address"}, {"name": "cardsAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "move", "type": "uint8"}, {"indexed": false, "name": "attachCardId", "type": "uint256"}, {"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "indexed": false, "name": "playerDefenceCard", "type": "tuple"}, {"indexed": false, "name": "nextPlayer", "type": "address"}], "name": "Turn", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "winningPlayer", "type": "address"}], "name": "EndGame", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "desiredCards", "type": "uint256[5]"}, {"indexed": false, "name": "pickedCards", "type": "uint256[3]"}], "name": "PickPayerCards", "type": "event"}], "evm": {"assembly": "    /* \"contracts/BattleRandom.sol\":197:6350  contract BattleRandom is PlayerCardsRandom {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/BattleRandom.sol\":546:689  constructor(address _player1, address _player2, address cardsAddress) public... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/BattleRandom.sol\":546:689  constructor(address _player1, address _player2, address cardsAddress) public... */\n  pop\n  mload(0x40)\n  0x60\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  dup1\n  0x40\n  mstore\n  tag_2\n  swap2\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_3)\ntag_2:\n    /* \"contracts/PlayerCardsRandom.sol\":762:769  player1 */\n  0x01\n    /* \"contracts/PlayerCardsRandom.sol\":762:780  player1 = _player1 */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap5\n  dup6\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/PlayerCardsRandom.sol\":790:797  player2 */\n  0x02\n    /* \"contracts/PlayerCardsRandom.sol\":790:808  player2 = _player2 */\n  dup1\n  sload\n  swap4\n  dup6\n  and\n  swap4\n  dup3\n  and\n  swap4\n  swap1\n  swap4\n  or\n  swap1\n  swap3\n  sstore\n  0x00\n    /* \"contracts/PlayerCardsRandom.sol\":819:854  cardsContract = Cards(cardsAddress) */\n  dup1\n  sload\n  swap2\n  swap1\n  swap4\n  and\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/BattleRandom.sol\":197:6350  contract BattleRandom is PlayerCardsRandom {... */\n  jump(tag_21)\n    /* \"--CODEGEN--\":5:127   */\ntag_10:\n  0x00\n    /* \"--CODEGEN--\":83:122   */\n  tag_11\n    /* \"--CODEGEN--\":114:120   */\n  dup3\n    /* \"--CODEGEN--\":108:121   */\n  mload\n    /* \"--CODEGEN--\":83:122   */\n  jump(tag_12)\ntag_11:\n    /* \"--CODEGEN--\":74:122   */\n  swap4\n    /* \"--CODEGEN--\":68:127   */\n  swap3\n  pop\n  pop\n  pop\n  jump\n    /* \"--CODEGEN--\":134:669   */\ntag_3:\n  0x00\n  dup1\n  0x00\n    /* \"--CODEGEN--\":283:285   */\n  0x60\n    /* \"--CODEGEN--\":271:280   */\n  dup5\n    /* \"--CODEGEN--\":262:269   */\n  dup7\n    /* \"--CODEGEN--\":258:281   */\n  sub\n    /* \"--CODEGEN--\":254:286   */\n  slt\n    /* \"--CODEGEN--\":251:253   */\n  iszero\n  tag_14\n  jumpi\n    /* \"--CODEGEN--\":299:300   */\n  0x00\n    /* \"--CODEGEN--\":296:297   */\n  dup1\n    /* \"--CODEGEN--\":289:301   */\n  revert\n    /* \"--CODEGEN--\":251:253   */\ntag_14:\n    /* \"--CODEGEN--\":334:335   */\n  0x00\n    /* \"--CODEGEN--\":351:415   */\n  tag_15\n    /* \"--CODEGEN--\":407:414   */\n  dup7\n    /* \"--CODEGEN--\":387:396   */\n  dup7\n    /* \"--CODEGEN--\":351:415   */\n  jump(tag_10)\ntag_15:\n    /* \"--CODEGEN--\":341:415   */\n  swap4\n  pop\n    /* \"--CODEGEN--\":313:421   */\n  pop\n    /* \"--CODEGEN--\":452:454   */\n  0x20\n    /* \"--CODEGEN--\":470:534   */\n  tag_16\n    /* \"--CODEGEN--\":526:533   */\n  dup7\n    /* \"--CODEGEN--\":517:523   */\n  dup3\n    /* \"--CODEGEN--\":506:515   */\n  dup8\n    /* \"--CODEGEN--\":502:524   */\n  add\n    /* \"--CODEGEN--\":470:534   */\n  jump(tag_10)\ntag_16:\n    /* \"--CODEGEN--\":460:534   */\n  swap3\n  pop\n    /* \"--CODEGEN--\":431:540   */\n  pop\n    /* \"--CODEGEN--\":571:573   */\n  0x40\n    /* \"--CODEGEN--\":589:653   */\n  tag_17\n    /* \"--CODEGEN--\":645:652   */\n  dup7\n    /* \"--CODEGEN--\":636:642   */\n  dup3\n    /* \"--CODEGEN--\":625:634   */\n  dup8\n    /* \"--CODEGEN--\":621:643   */\n  add\n    /* \"--CODEGEN--\":589:653   */\n  jump(tag_10)\ntag_17:\n    /* \"--CODEGEN--\":579:653   */\n  swap2\n  pop\n    /* \"--CODEGEN--\":550:659   */\n  pop\n    /* \"--CODEGEN--\":245:669   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\n    /* \"--CODEGEN--\":676:781   */\ntag_12:\n  0x00\n    /* \"--CODEGEN--\":745:776   */\n  tag_19\n    /* \"--CODEGEN--\":770:775   */\n  dup3\n    /* \"--CODEGEN--\":745:776   */\n  jump(tag_20)\ntag_19:\n    /* \"--CODEGEN--\":734:776   */\n  swap3\n    /* \"--CODEGEN--\":728:781   */\n  swap2\n  pop\n  pop\n  jump\n    /* \"--CODEGEN--\":788:916   */\ntag_20:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"--CODEGEN--\":857:911   */\n  and\n  swap1\n    /* \"--CODEGEN--\":840:916   */\n  jump\ntag_21:\n    /* \"contracts/BattleRandom.sol\":197:6350  contract BattleRandom is PlayerCardsRandom {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/BattleRandom.sol\":197:6350  contract BattleRandom is PlayerCardsRandom {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/BattleRandom.sol\":197:6350  contract BattleRandom is PlayerCardsRandom {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x59a5f12d\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xd30895e4\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xd30895e4\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xd7eb798c\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xe4b6c992\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xfe145fbd\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x59a5f12d\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x5ad39846\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xc0d35449\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_16:\n      dup1\n      0x06880689\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2a035b6c\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2af1e2f8\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x2e535940\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x48373963\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x4ed61446\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/PlayerCardsRandom.sol\":642:668  address public playersTurn */\n    tag_3:\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_21)\n    tag_20:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BattleRandom.sol\":6181:6348  function endGame(address _winningPlayer) public {... */\n    tag_4:\n      tag_22\n      tag_23\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_23:\n      tag_25\n      jump\t// in\n    tag_22:\n      stop\n        /* \"contracts/PlayerCardsRandom.sol\":1887:2023  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n    tag_5:\n      tag_26\n      tag_27\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_27:\n      tag_28\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_30)\n        /* \"contracts/BattleRandom.sol\":695:4692  function turn(Move move) public {... */\n    tag_6:\n      tag_22\n      tag_32\n      calldatasize\n      0x04\n      jump(tag_33)\n    tag_32:\n      tag_34\n      jump\t// in\n        /* \"contracts/PlayerCardsRandom.sol\":2029:3922  function pickPayerCards(uint[5] memory desiredCards) public {... */\n    tag_7:\n      tag_22\n      tag_36\n      calldatasize\n      0x04\n      jump(tag_37)\n    tag_36:\n      tag_38\n      jump\t// in\n        /* \"contracts/PlayerCardsRandom.sol\":4440:4822  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n    tag_8:\n      tag_39\n      tag_40\n      calldatasize\n      0x04\n      jump(tag_41)\n    tag_40:\n      tag_42\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_44)\n        /* \"contracts/PlayerCardsRandom.sol\":529:551  address public player2 */\n    tag_9:\n      tag_18\n      tag_46\n      jump\t// in\n        /* \"contracts/BattleRandom.sol\":372:400  address public winningPlayer */\n    tag_10:\n      tag_18\n      tag_49\n      jump\t// in\n        /* \"contracts/PlayerCardsRandom.sol\":4828:4950  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n    tag_11:\n      tag_51\n      tag_52\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_52:\n      tag_53\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_55)\n        /* \"contracts/PlayerCardsRandom.sol\":501:523  address public player1 */\n    tag_12:\n      tag_18\n      tag_57\n      jump\t// in\n        /* \"contracts/PlayerCardsRandom.sol\":613:636  bool public cardsPicked */\n    tag_13:\n      tag_59\n      tag_60\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_62)\n        /* \"contracts/PlayerCardsRandom.sol\":557:607  mapping (address => PlayerDeck) public playerDecks */\n    tag_14:\n      tag_26\n      tag_64\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_64:\n      tag_65\n      jump\t// in\n        /* \"contracts/PlayerCardsRandom.sol\":1666:1881  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n    tag_15:\n      tag_67\n      tag_68\n      calldatasize\n      0x04\n      jump(tag_24)\n    tag_68:\n      tag_69\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      jump(tag_71)\n        /* \"contracts/PlayerCardsRandom.sol\":642:668  address public playersTurn */\n    tag_19:\n      sload(0x04)\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/BattleRandom.sol\":6181:6348  function endGame(address _winningPlayer) public {... */\n    tag_25:\n        /* \"contracts/BattleRandom.sol\":6239:6252  winningPlayer */\n      0x05\n        /* \"contracts/BattleRandom.sol\":6239:6269  winningPlayer = _winningPlayer */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      dup2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap2\n      dup3\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":6279:6290  playersTurn */\n      0x04\n        /* \"contracts/BattleRandom.sol\":6279:6303  playersTurn = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      and\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":6319:6341  EndGame(winningPlayer) */\n      mload(0x40)\n      0xc50f4648fa14be3ee68f160a224cc5d77eeeac58ea500c6fb63fac6788afb0be\n      swap3\n      tag_73\n      swap3\n        /* \"contracts/BattleRandom.sol\":6327:6340  winningPlayer */\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":6319:6341  EndGame(winningPlayer) */\n      jump(tag_21)\n    tag_73:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/BattleRandom.sol\":6181:6348  function endGame(address _winningPlayer) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":1887:2023  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n    tag_28:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":1985:2004  playerDecks[player] */\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":1961:1966  uint8 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":1985:2004  playerDecks[player] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1985:1996  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":1985:2004  playerDecks[player] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":1985:2016  playerDecks[player].currentCard */\n      0x01\n      add\n      sload\n      0xff\n      and\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1887:2023  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n      jump\t// out\n        /* \"contracts/BattleRandom.sol\":695:4692  function turn(Move move) public {... */\n    tag_34:\n        /* \"contracts/BattleRandom.sol\":745:756  playersTurn */\n      sload(0x04)\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/BattleRandom.sol\":760:770  msg.sender */\n      caller\n        /* \"contracts/BattleRandom.sol\":745:770  playersTurn == msg.sender */\n      eq\n        /* \"contracts/BattleRandom.sol\":737:788  require(playersTurn == msg.sender, \"Not your turn\") */\n      tag_76\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_78)\n    tag_77:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_76:\n        /* \"contracts/BattleRandom.sol\":948:955  player1 */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/BattleRandom.sol\":898:933  PlayerCard storage playerAttackCard */\n      0x00\n        /* \"contracts/BattleRandom.sol\":936:956  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/BattleRandom.sol\":936:947  playerDecks */\n      0x03\n        /* \"contracts/BattleRandom.sol\":936:956  playerDecks[player1] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/BattleRandom.sol\":969:1001  playerDecks[player1].currentCard */\n      swap2\n      dup3\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":936:1002  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      dup3\n      sload\n        /* \"contracts/BattleRandom.sol\":898:933  PlayerCard storage playerAttackCard */\n      swap2\n      swap3\n        /* \"contracts/BattleRandom.sol\":936:956  playerDecks[player1] */\n      swap2\n        /* \"contracts/BattleRandom.sol\":969:1001  playerDecks[player1].currentCard */\n      0xff\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":936:1002  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      dup2\n      lt\n      tag_79\n      jumpi\n      invalid\n    tag_79:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      0x02\n        /* \"contracts/BattleRandom.sol\":1063:1070  player2 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/BattleRandom.sol\":1051:1071  playerDecks[player2] */\n      dup6\n      mstore\n        /* \"contracts/BattleRandom.sol\":1051:1062  playerDecks */\n      0x03\n        /* \"contracts/BattleRandom.sol\":1051:1071  playerDecks[player2] */\n      swap1\n      swap3\n      mstore\n      0x40\n      dup5\n      keccak256\n        /* \"contracts/BattleRandom.sol\":1063:1070  player2 */\n      0x01\n        /* \"contracts/BattleRandom.sol\":1084:1116  playerDecks[player2].currentCard */\n      dup2\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":1051:1117  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      dup2\n      sload\n        /* \"contracts/BattleRandom.sol\":936:1002  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      swap4\n      swap1\n      swap5\n      mul\n      swap1\n      swap2\n      add\n      swap5\n      pop\n        /* \"contracts/BattleRandom.sol\":1051:1071  playerDecks[player2] */\n      swap2\n        /* \"contracts/BattleRandom.sol\":1084:1116  playerDecks[player2].currentCard */\n      0xff\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":1051:1117  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      dup2\n      lt\n      tag_81\n      jumpi\n      invalid\n    tag_81:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      0x02\n        /* \"contracts/BattleRandom.sol\":1172:1179  player2 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"contracts/BattleRandom.sol\":1160:1180  playerDecks[player2] */\n      dup1\n      dup8\n      mstore\n        /* \"contracts/BattleRandom.sol\":1160:1171  playerDecks */\n      0x03\n        /* \"contracts/BattleRandom.sol\":1160:1180  playerDecks[player2] */\n      swap1\n      swap5\n      mstore\n      0x40\n      swap1\n      swap6\n      keccak256\n        /* \"contracts/BattleRandom.sol\":1465:1476  playersTurn */\n      sload(0x04)\n        /* \"contracts/BattleRandom.sol\":1051:1117  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      swap5\n      swap1\n      swap2\n      mul\n      swap1\n      swap2\n      add\n      swap5\n      pop\n        /* \"contracts/BattleRandom.sol\":1160:1180  playerDecks[player2] */\n      swap3\n        /* \"contracts/BattleRandom.sol\":1172:1179  player2 */\n      swap1\n      swap2\n      0x0100\n        /* \"contracts/BattleRandom.sol\":1465:1476  playersTurn */\n      swap1\n      div\n      and\n        /* \"contracts/BattleRandom.sol\":1465:1487  playersTurn == player2 */\n      dup2\n      eq\n        /* \"contracts/BattleRandom.sol\":1461:1891  if (playersTurn == player2) {... */\n      iszero\n      tag_83\n      jumpi\n        /* \"contracts/BattleRandom.sol\":1534:1541  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/BattleRandom.sol\":1522:1542  playerDecks[player2] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/BattleRandom.sol\":1522:1533  playerDecks */\n      0x03\n        /* \"contracts/BattleRandom.sol\":1522:1542  playerDecks[player2] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/BattleRandom.sol\":1534:1541  player2 */\n      0x01\n        /* \"contracts/BattleRandom.sol\":1555:1587  playerDecks[player2].currentCard */\n      dup2\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":1522:1588  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      dup2\n      sload\n        /* \"contracts/BattleRandom.sol\":1555:1587  playerDecks[player2].currentCard */\n      0xff\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":1522:1588  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      dup2\n      lt\n      tag_84\n      jumpi\n      invalid\n    tag_84:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/BattleRandom.sol\":1634:1641  player1 */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/BattleRandom.sol\":1622:1642  playerDecks[player1] */\n      dup6\n      mstore\n        /* \"contracts/BattleRandom.sol\":1622:1633  playerDecks */\n      0x03\n        /* \"contracts/BattleRandom.sol\":1622:1642  playerDecks[player1] */\n      swap1\n      swap3\n      mstore\n      0x40\n      swap1\n      swap4\n      keccak256\n        /* \"contracts/BattleRandom.sol\":1655:1687  playerDecks[player1].currentCard */\n      swap1\n      dup2\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":1622:1688  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      dup2\n      sload\n        /* \"contracts/BattleRandom.sol\":1522:1588  playerDecks[player2].playerCards[playerDecks[player2].currentCard] */\n      0x02\n      swap1\n      swap4\n      mul\n      swap1\n      swap4\n      add\n      swap7\n      pop\n        /* \"contracts/BattleRandom.sol\":1622:1642  playerDecks[player1] */\n      swap2\n        /* \"contracts/BattleRandom.sol\":1655:1687  playerDecks[player1].currentCard */\n      0xff\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":1622:1688  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      dup2\n      lt\n      tag_86\n      jumpi\n      invalid\n    tag_86:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/BattleRandom.sol\":1728:1735  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/BattleRandom.sol\":1716:1736  playerDecks[player1] */\n      dup1\n      dup6\n      mstore\n        /* \"contracts/BattleRandom.sol\":1716:1727  playerDecks */\n      0x03\n        /* \"contracts/BattleRandom.sol\":1716:1736  playerDecks[player1] */\n      swap1\n      swap3\n      mstore\n      0x40\n      swap1\n      swap4\n      keccak256\n        /* \"contracts/BattleRandom.sol\":1622:1688  playerDecks[player1].playerCards[playerDecks[player1].currentCard] */\n      0x02\n      swap1\n      swap3\n      mul\n      swap1\n      swap3\n      add\n      swap5\n      pop\n        /* \"contracts/BattleRandom.sol\":1716:1736  playerDecks[player1] */\n      swap3\n      pop\n        /* \"contracts/BattleRandom.sol\":1728:1735  player1 */\n      swap1\n      pop\n        /* \"contracts/BattleRandom.sol\":1461:1891  if (playersTurn == player2) {... */\n      jump(tag_89)\n    tag_83:\n        /* \"contracts/BattleRandom.sol\":1806:1813  player1 */\n      sload(0x01)\n        /* \"contracts/BattleRandom.sol\":1791:1802  playersTurn */\n      sload(0x04)\n        /* \"contracts/BattleRandom.sol\":1806:1813  player1 */\n      0x0100\n        /* \"contracts/BattleRandom.sol\":1791:1802  playersTurn */\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"contracts/BattleRandom.sol\":1806:1813  player1 */\n      swap2\n      and\n        /* \"contracts/BattleRandom.sol\":1791:1813  playersTurn != player1 */\n      eq\n        /* \"contracts/BattleRandom.sol\":1787:1891  if (playersTurn != player1) {... */\n      tag_89\n      jumpi\n        /* \"contracts/BattleRandom.sol\":1829:1880  revert('players turn does not equal either player') */\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_91)\n        /* \"contracts/BattleRandom.sol\":1787:1891  if (playersTurn != player1) {... */\n    tag_89:\n        /* \"contracts/BattleRandom.sol\":1923:1951  uint16 remainingAttackAmount */\n      0x00\n      dup1\n        /* \"contracts/BattleRandom.sol\":1965:1969  move */\n      dup7\n        /* \"contracts/BattleRandom.sol\":1965:1984  move == Move.Attack */\n      0x02\n      dup2\n      gt\n      iszero\n      tag_93\n      jumpi\n      invalid\n    tag_93:\n      eq\n        /* \"contracts/BattleRandom.sol\":1961:4569  if (move == Move.Attack) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/BattleRandom.sol\":2024:2045  playerAttackCard.mana */\n      0x01\n      dup1\n      dup7\n      add\n      dup1\n      sload\n      0xffff\n      shl(0x20, 0x01)\n      dup1\n      dup4\n      div\n      dup3\n      and\n        /* \"contracts/BattleRandom.sol\":2024:2049  playerAttackCard.mana + 1 */\n      swap1\n      swap5\n      add\n        /* \"contracts/BattleRandom.sol\":2000:2049  playerAttackCard.mana = playerAttackCard.mana + 1 */\n      dup2\n      and\n      swap1\n      swap4\n      mul\n      not(0xffff00000000)\n      swap1\n      swap2\n      and\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":2130:2193  attack(playerAttackCard.attack, playerDefenceCard, defenceDeck) */\n      tag_95\n      swap2\n      shl(0x30, 0x01)\n        /* \"contracts/BattleRandom.sol\":2137:2160  playerAttackCard.attack */\n      swap1\n      swap2\n      div\n      and\n        /* \"contracts/BattleRandom.sol\":2162:2179  playerDefenceCard */\n      dup6\n        /* \"contracts/BattleRandom.sol\":2181:2192  defenceDeck */\n      dup6\n        /* \"contracts/BattleRandom.sol\":2130:2136  attack */\n      tag_96\n        /* \"contracts/BattleRandom.sol\":2130:2193  attack(playerAttackCard.attack, playerDefenceCard, defenceDeck) */\n      jump\t// in\n    tag_95:\n        /* \"contracts/BattleRandom.sol\":1961:4569  if (move == Move.Attack) {... */\n      jump(tag_131)\n    tag_94:\n        /* \"contracts/BattleRandom.sol\":2222:2240  Move.SpecialAttack */\n      0x01\n        /* \"contracts/BattleRandom.sol\":2214:2218  move */\n      dup7\n        /* \"contracts/BattleRandom.sol\":2214:2240  move == Move.SpecialAttack */\n      0x02\n      dup2\n      gt\n      iszero\n      tag_99\n      jumpi\n      invalid\n    tag_99:\n      eq\n        /* \"contracts/BattleRandom.sol\":2210:4569  if (move == Move.SpecialAttack) {... */\n      iszero\n      tag_100\n      jumpi\n        /* \"contracts/BattleRandom.sol\":2330:2360  playerAttackCard.specialAttack */\n      0x01\n      dup6\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":2323:2393  attack(playerAttackCard.specialAttack, playerDefenceCard, defenceDeck) */\n      tag_95\n      swap1\n      shl(0x40, 0x01)\n        /* \"contracts/BattleRandom.sol\":2330:2360  playerAttackCard.specialAttack */\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/BattleRandom.sol\":2362:2379  playerDefenceCard */\n      dup6\n        /* \"contracts/BattleRandom.sol\":2381:2392  defenceDeck */\n      dup6\n        /* \"contracts/BattleRandom.sol\":2323:2329  attack */\n      tag_96\n        /* \"contracts/BattleRandom.sol\":2323:2393  attack(playerAttackCard.specialAttack, playerDefenceCard, defenceDeck) */\n      jump\t// in\n        /* \"contracts/BattleRandom.sol\":2210:4569  if (move == Move.SpecialAttack) {... */\n    tag_100:\n        /* \"contracts/BattleRandom.sol\":2423:2435  Move.Ability */\n      0x02\n        /* \"contracts/BattleRandom.sol\":2415:2419  move */\n      dup7\n        /* \"contracts/BattleRandom.sol\":2415:2435  move == Move.Ability */\n      0x02\n      dup2\n      gt\n      iszero\n      tag_104\n      jumpi\n      invalid\n    tag_104:\n      eq\n        /* \"contracts/BattleRandom.sol\":2411:4569  if (move == Move.Ability) {... */\n      iszero\n      tag_105\n      jumpi\n        /* \"contracts/BattleRandom.sol\":2452:2474  Card memory attackCard */\n      tag_106\n      tag_107\n      jump\t// in\n    tag_106:\n        /* \"contracts/BattleRandom.sol\":2477:2490  cardsContract */\n      sload(0x00)\n        /* \"contracts/BattleRandom.sol\":2499:2522  playerAttackCard.cardId */\n      dup7\n      sload\n        /* \"contracts/BattleRandom.sol\":2477:2523  cardsContract.getCard(playerAttackCard.cardId) */\n      mload(0x40)\n      mul(0x48c46989, shl(0xe1, 0x01))\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/BattleRandom.sol\":2477:2490  cardsContract */\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/BattleRandom.sol\":2477:2498  cardsContract.getCard */\n      0x9188d312\n      swap2\n        /* \"contracts/BattleRandom.sol\":2477:2523  cardsContract.getCard(playerAttackCard.cardId) */\n      tag_108\n      swap2\n      0x04\n      add\n      jump(tag_109)\n    tag_108:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_110\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_110:\n        /* \"contracts/BattleRandom.sol\":2477:2523  cardsContract.getCard(playerAttackCard.cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_111\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_111:\n        /* \"contracts/BattleRandom.sol\":2477:2523  cardsContract.getCard(playerAttackCard.cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/BattleRandom.sol\":2477:2523  cardsContract.getCard(playerAttackCard.cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/BattleRandom.sol\":2477:2523  cardsContract.getCard(playerAttackCard.cardId) */\n      tag_112\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_113)\n    tag_112:\n        /* \"contracts/BattleRandom.sol\":2575:2593  attackCard.ability */\n      0x20\n      dup2\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":2575:2602  attackCard.ability.manaCost */\n      0x60\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":2546:2567  playerAttackCard.mana */\n      0x01\n      dup1\n      dup10\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":2452:2523  Card memory attackCard = cardsContract.getCard(playerAttackCard.cardId) */\n      swap3\n      swap4\n      pop\n        /* \"contracts/BattleRandom.sol\":2546:2602  playerAttackCard.mana + 1 >= attackCard.ability.manaCost */\n      0xffff\n      swap2\n      dup3\n      and\n      shl(0x20, 0x01)\n        /* \"contracts/BattleRandom.sol\":2546:2567  playerAttackCard.mana */\n      swap1\n      swap4\n      div\n      dup3\n      and\n        /* \"contracts/BattleRandom.sol\":2546:2571  playerAttackCard.mana + 1 */\n      add\n        /* \"contracts/BattleRandom.sol\":2546:2602  playerAttackCard.mana + 1 >= attackCard.ability.manaCost */\n      and\n      lt\n      iszero\n        /* \"contracts/BattleRandom.sol\":2538:2622  require(playerAttackCard.mana + 1 >= attackCard.ability.manaCost, 'Not enough mana') */\n      tag_114\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_116)\n    tag_114:\n        /* \"contracts/BattleRandom.sol\":2728:2749  playerAttackCard.mana */\n      0x01\n      dup7\n      dup2\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":2755:2773  attackCard.ability */\n      0x20\n      dup4\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":2755:2782  attackCard.ability.manaCost */\n      0x60\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":2637:2653  uint16 remainder */\n      0x00\n      swap3\n        /* \"contracts/BattleRandom.sol\":2708:2783  MathUtils.subToZero(playerAttackCard.mana + 1, attackCard.ability.manaCost) */\n      tag_117\n      swap3\n      shl(0x20, 0x01)\n        /* \"contracts/BattleRandom.sol\":2728:2749  playerAttackCard.mana */\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/BattleRandom.sol\":2728:2753  playerAttackCard.mana + 1 */\n      add\n      swap1\n        /* \"contracts/BattleRandom.sol\":2708:2727  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattleRandom.sol\":2708:2783  MathUtils.subToZero(playerAttackCard.mana + 1, attackCard.ability.manaCost) */\n      jump\t// in\n    tag_117:\n        /* \"contracts/BattleRandom.sol\":2672:2693  playerAttackCard.mana */\n      0x01\n      dup10\n      add\n        /* \"contracts/BattleRandom.sol\":2671:2783  (playerAttackCard.mana, remainder) = MathUtils.subToZero(playerAttackCard.mana + 1, attackCard.ability.manaCost) */\n      dup1\n      sload\n      0xffff\n      swap1\n      swap4\n      and\n      shl(0x20, 0x01)\n      mul\n      not(0xffff00000000)\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      sstore\n      swap1\n      pop\n        /* \"contracts/BattleRandom.sol\":2798:2841  Cards.CardProperties memory opponentAbility */\n      tag_119\n      tag_120\n      jump\t// in\n    tag_119:\n      pop\n        /* \"contracts/BattleRandom.sol\":2844:2862  attackCard.ability */\n      0x20\n      dup1\n      dup4\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":2844:2871  attackCard.ability.opponent */\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":2885:2926  Cards.CardProperties memory playerAbility */\n      tag_121\n      tag_120\n      jump\t// in\n    tag_121:\n      pop\n        /* \"contracts/BattleRandom.sol\":2929:2947  attackCard.ability */\n      0x20\n      dup4\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":2929:2954  attackCard.ability.player */\n      0x40\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":3074:3098  playerDefenceCard.health */\n      0x01\n      dup9\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":3100:3122  opponentAbility.health */\n      dup3\n      mload\n        /* \"contracts/BattleRandom.sol\":3054:3123  MathUtils.subToZero(playerDefenceCard.health, opponentAbility.health) */\n      tag_122\n      swap2\n        /* \"contracts/BattleRandom.sol\":3074:3098  playerDefenceCard.health */\n      0xffff\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":3054:3073  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattleRandom.sol\":3054:3123  MathUtils.subToZero(playerDefenceCard.health, opponentAbility.health) */\n      jump\t// in\n    tag_122:\n        /* \"contracts/BattleRandom.sol\":3015:3039  playerDefenceCard.health */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattleRandom.sol\":3014:3123  (playerDefenceCard.health, remainder) = MathUtils.subToZero(playerDefenceCard.health, opponentAbility.health) */\n      dup1\n      sload\n      not(0xffff)\n      and\n      0xffff\n      swap4\n      dup5\n      and\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":3225:3248  opponentAbility.defence */\n      0x20\n      dup6\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":3014:3123  (playerDefenceCard.health, remainder) = MathUtils.subToZero(playerDefenceCard.health, opponentAbility.health) */\n      swap2\n      swap6\n      pop\n        /* \"contracts/BattleRandom.sol\":3178:3249  MathUtils.subToZero(playerDefenceCard.defence, opponentAbility.defence) */\n      tag_123\n      swap3\n        /* \"contracts/BattleRandom.sol\":3198:3223  playerDefenceCard.defence */\n      0x010000\n      swap1\n      swap2\n      div\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":3178:3197  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattleRandom.sol\":3178:3249  MathUtils.subToZero(playerDefenceCard.defence, opponentAbility.defence) */\n      jump\t// in\n    tag_123:\n        /* \"contracts/BattleRandom.sol\":3138:3163  playerDefenceCard.defence */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattleRandom.sol\":3137:3249  (playerDefenceCard.defence, remainder) = MathUtils.subToZero(playerDefenceCard.defence, opponentAbility.defence) */\n      dup1\n      sload\n      not(0xffff0000)\n      and\n      0x010000\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":3345:3365  opponentAbility.mana */\n      0x40\n      dup6\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":3137:3249  (playerDefenceCard.defence, remainder) = MathUtils.subToZero(playerDefenceCard.defence, opponentAbility.defence) */\n      swap2\n      swap6\n      pop\n        /* \"contracts/BattleRandom.sol\":3301:3366  MathUtils.subToZero(playerDefenceCard.mana, opponentAbility.mana) */\n      tag_124\n      swap3\n      shl(0x20, 0x01)\n        /* \"contracts/BattleRandom.sol\":3321:3343  playerDefenceCard.mana */\n      swap1\n      swap2\n      div\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":3301:3320  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattleRandom.sol\":3301:3366  MathUtils.subToZero(playerDefenceCard.mana, opponentAbility.mana) */\n      jump\t// in\n    tag_124:\n        /* \"contracts/BattleRandom.sol\":3264:3286  playerDefenceCard.mana */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattleRandom.sol\":3263:3366  (playerDefenceCard.mana, remainder) = MathUtils.subToZero(playerDefenceCard.mana, opponentAbility.mana) */\n      dup1\n      sload\n      not(0xffff00000000)\n      and\n      shl(0x20, 0x01)\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":3466:3488  opponentAbility.attack */\n      0x60\n      dup6\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":3263:3366  (playerDefenceCard.mana, remainder) = MathUtils.subToZero(playerDefenceCard.mana, opponentAbility.mana) */\n      swap2\n      swap6\n      pop\n        /* \"contracts/BattleRandom.sol\":3420:3489  MathUtils.subToZero(playerDefenceCard.attack, opponentAbility.attack) */\n      tag_125\n      swap3\n      shl(0x30, 0x01)\n        /* \"contracts/BattleRandom.sol\":3440:3464  playerDefenceCard.attack */\n      swap1\n      swap2\n      div\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":3420:3439  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattleRandom.sol\":3420:3489  MathUtils.subToZero(playerDefenceCard.attack, opponentAbility.attack) */\n      jump\t// in\n    tag_125:\n        /* \"contracts/BattleRandom.sol\":3381:3405  playerDefenceCard.attack */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattleRandom.sol\":3380:3489  (playerDefenceCard.attack, remainder) = MathUtils.subToZero(playerDefenceCard.attack, opponentAbility.attack) */\n      dup1\n      sload\n      not(0xffff000000000000)\n      and\n      shl(0x30, 0x01)\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":3603:3632  opponentAbility.specialAttack */\n      0x80\n      dup6\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":3380:3489  (playerDefenceCard.attack, remainder) = MathUtils.subToZero(playerDefenceCard.attack, opponentAbility.attack) */\n      swap2\n      swap6\n      pop\n        /* \"contracts/BattleRandom.sol\":3550:3633  MathUtils.subToZero(playerDefenceCard.specialAttack, opponentAbility.specialAttack) */\n      tag_126\n      swap3\n      shl(0x40, 0x01)\n        /* \"contracts/BattleRandom.sol\":3570:3601  playerDefenceCard.specialAttack */\n      swap1\n      swap2\n      div\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":3550:3569  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattleRandom.sol\":3550:3633  MathUtils.subToZero(playerDefenceCard.specialAttack, opponentAbility.specialAttack) */\n      jump\t// in\n    tag_126:\n        /* \"contracts/BattleRandom.sol\":3504:3535  playerDefenceCard.specialAttack */\n      0x01\n      dup11\n      add\n        /* \"contracts/BattleRandom.sol\":3503:3633  (playerDefenceCard.specialAttack, remainder) = MathUtils.subToZero(playerDefenceCard.specialAttack, opponentAbility.specialAttack) */\n      dup1\n      sload\n      not(0xffff0000000000000000)\n      and\n      shl(0x40, 0x01)\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n      swap1\n      swap5\n      pop\n        /* \"contracts/BattleRandom.sol\":3699:3723  playerDefenceCard.health */\n      and\n        /* \"contracts/BattleRandom.sol\":3695:4010  if (playerDefenceCard.health == 0) {... */\n      tag_130\n      jumpi\n        /* \"contracts/BattleRandom.sol\":3828:3858  defenceDeck.playerCards.length */\n      dup7\n      sload\n        /* \"contracts/BattleRandom.sol\":3861:3862  1 */\n      0x01\n        /* \"contracts/BattleRandom.sol\":3801:3824  defenceDeck.currentCard */\n      dup9\n      add\n      sload\n      0xff\n      and\n      not(0x00)\n        /* \"contracts/BattleRandom.sol\":3828:3862  defenceDeck.playerCards.length - 1 */\n      swap1\n      swap2\n      add\n        /* \"contracts/BattleRandom.sol\":3801:3862  defenceDeck.currentCard == defenceDeck.playerCards.length - 1 */\n      eq\n        /* \"contracts/BattleRandom.sol\":3796:3996  if  (defenceDeck.currentCard == defenceDeck.playerCards.length - 1) {... */\n      iszero\n      tag_128\n      jumpi\n        /* \"contracts/BattleRandom.sol\":3886:3905  endGame(msg.sender) */\n      tag_129\n        /* \"contracts/BattleRandom.sol\":3894:3904  msg.sender */\n      caller\n        /* \"contracts/BattleRandom.sol\":3886:3893  endGame */\n      tag_25\n        /* \"contracts/BattleRandom.sol\":3886:3905  endGame(msg.sender) */\n      jump\t// in\n    tag_129:\n        /* \"contracts/BattleRandom.sol\":3796:3996  if  (defenceDeck.currentCard == defenceDeck.playerCards.length - 1) {... */\n      jump(tag_130)\n    tag_128:\n        /* \"contracts/BattleRandom.sol\":3952:3975  defenceDeck.currentCard */\n      0x01\n      dup8\n      dup2\n      add\n        /* \"contracts/BattleRandom.sol\":3952:3977  defenceDeck.currentCard++ */\n      dup1\n      sload\n      not(0xff)\n      dup2\n      and\n      0xff\n      swap2\n      dup3\n      and\n      swap1\n      swap4\n      add\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":3796:3996  if  (defenceDeck.currentCard == defenceDeck.playerCards.length - 1) {... */\n    tag_130:\n        /* \"contracts/BattleRandom.sol\":4115:4135  playerAbility.health */\n      dup1\n      mload\n        /* \"contracts/BattleRandom.sol\":4089:4112  playerAttackCard.health */\n      0x01\n      dup11\n      add\n      dup1\n      sload\n        /* \"contracts/BattleRandom.sol\":4203:4224  playerAbility.defence */\n      0x20\n      dup5\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":4286:4304  playerAbility.mana */\n      0x40\n      dup6\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":4370:4390  playerAbility.attack */\n      0x60\n      dup7\n      add\n      mload\n        /* \"contracts/BattleRandom.sol\":4470:4497  playerAbility.specialAttack */\n      0x80\n      swap1\n      swap7\n      add\n      mload\n      shl(0x40, 0x01)\n      shl(0x30, 0x01)\n      shl(0x20, 0x01)\n        /* \"contracts/BattleRandom.sol\":4176:4200  playerAttackCard.defence */\n      0x010000\n        /* \"contracts/BattleRandom.sol\":4089:4112  playerAttackCard.health */\n      0xffff\n      dup1\n      dup10\n      and\n        /* \"contracts/BattleRandom.sol\":4089:4135  playerAttackCard.health + playerAbility.health */\n      swap1\n      swap11\n      add\n        /* \"contracts/BattleRandom.sol\":4063:4135  playerAttackCard.health = playerAttackCard.health + playerAbility.health */\n      dup11\n      and\n      not(0xffff)\n      swap1\n      swap9\n      and\n      swap8\n      swap1\n      swap8\n      or\n        /* \"contracts/BattleRandom.sol\":4176:4200  playerAttackCard.defence */\n      dup8\n      dup2\n      div\n      dup11\n      and\n        /* \"contracts/BattleRandom.sol\":4176:4224  playerAttackCard.defence + playerAbility.defence */\n      swap1\n      swap7\n      add\n        /* \"contracts/BattleRandom.sol\":4149:4224  playerAttackCard.defence = playerAttackCard.defence + playerAbility.defence */\n      dup10\n      and\n      swap1\n      swap7\n      mul\n      not(0xffff0000)\n      swap1\n      swap6\n      and\n      swap5\n      swap1\n      swap5\n      or\n        /* \"contracts/BattleRandom.sol\":4262:4283  playerAttackCard.mana */\n      dup6\n      dup2\n      div\n      dup9\n      and\n        /* \"contracts/BattleRandom.sol\":4262:4304  playerAttackCard.mana + playerAbility.mana */\n      swap1\n      swap4\n      add\n        /* \"contracts/BattleRandom.sol\":4238:4304  playerAttackCard.mana = playerAttackCard.mana + playerAbility.mana */\n      dup8\n      and\n      swap1\n      swap5\n      mul\n      not(0xffff00000000)\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n        /* \"contracts/BattleRandom.sol\":4344:4367  playerAttackCard.attack */\n      dup3\n      dup2\n      div\n      dup7\n      and\n        /* \"contracts/BattleRandom.sol\":4344:4390  playerAttackCard.attack + playerAbility.attack */\n      swap1\n      swap7\n      add\n        /* \"contracts/BattleRandom.sol\":4318:4390  playerAttackCard.attack = playerAttackCard.attack + playerAbility.attack */\n      dup6\n      and\n      swap1\n      swap2\n      mul\n      not(0xffff000000000000)\n      swap1\n      swap6\n      and\n      swap5\n      swap1\n      swap5\n      or\n        /* \"contracts/BattleRandom.sol\":4437:4467  playerAttackCard.specialAttack */\n      dup2\n      dup2\n      div\n      dup5\n      and\n        /* \"contracts/BattleRandom.sol\":4437:4497  playerAttackCard.specialAttack + playerAbility.specialAttack */\n      swap1\n      swap5\n      add\n        /* \"contracts/BattleRandom.sol\":4404:4497  playerAttackCard.specialAttack = playerAttackCard.specialAttack + playerAbility.specialAttack */\n      swap1\n      swap3\n      and\n      swap1\n      swap2\n      mul\n      not(0xffff0000000000000000)\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/BattleRandom.sol\":2411:4569  if (move == Move.Ability) {... */\n      tag_131\n      swap2\n      pop\n      pop\n      jump\n    tag_105:\n        /* \"contracts/BattleRandom.sol\":4536:4558  revert('Invalid move') */\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_133)\n        /* \"contracts/BattleRandom.sol\":2411:4569  if (move == Move.Ability) {... */\n    tag_131:\n        /* \"contracts/BattleRandom.sol\":4579:4590  playersTurn */\n      0x04\n        /* \"contracts/BattleRandom.sol\":4579:4603  playersTurn = nextPlayer */\n      dup1\n      sload\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      and\n      0x0100\n      sub(shl(0xa0, 0x01), 0x01)\n      dup6\n      and\n      mul\n      or\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":4630:4653  playerAttackCard.cardId */\n      dup5\n      sload\n        /* \"contracts/BattleRandom.sol\":4619:4685  Turn(move, playerAttackCard.cardId, playerDefenceCard, nextPlayer) */\n      mload(0x40)\n      0x5f4bfc4bb3efc8381128908c65dba16d774750a4508f87b52ed63512630609f9\n      swap2\n      tag_134\n      swap2\n        /* \"contracts/BattleRandom.sol\":4624:4628  move */\n      dup10\n      swap2\n        /* \"contracts/BattleRandom.sol\":4630:4653  playerAttackCard.cardId */\n      swap1\n        /* \"contracts/BattleRandom.sol\":4655:4672  playerDefenceCard */\n      dup9\n      swap1\n        /* \"contracts/BattleRandom.sol\":4579:4603  playersTurn = nextPlayer */\n      dup8\n      swap1\n        /* \"contracts/BattleRandom.sol\":4619:4685  Turn(move, playerAttackCard.cardId, playerDefenceCard, nextPlayer) */\n      jump(tag_135)\n    tag_134:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/BattleRandom.sol\":695:4692  function turn(Move move) public {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":2029:3922  function pickPayerCards(uint[5] memory desiredCards) public {... */\n    tag_38:\n        /* \"contracts/PlayerCardsRandom.sol\":2147:2157  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsRandom.sol\":2100:2132  PlayerCard[] storage playerCards */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2135:2158  playerDecks[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":2135:2146  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":2135:2158  playerDecks[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":2188:2206  playerCards.length */\n      dup1\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":2188:2211  playerCards.length == 0 */\n      iszero\n        /* \"contracts/PlayerCardsRandom.sol\":2180:2253  require(playerCards.length == 0, 'Player has already picked their cards') */\n      tag_137\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_139)\n    tag_137:\n        /* \"contracts/PlayerCardsRandom.sol\":2268:2275  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsRandom.sol\":2279:2289  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsRandom.sol\":2268:2289  player1 == msg.sender */\n      eq\n        /* \"contracts/PlayerCardsRandom.sol\":2264:2661  if (player1 == msg.sender) {... */\n      iszero\n      tag_140\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":2321:2328  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsRandom.sol\":2351:2352  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2329  playerDecks[player2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2320  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2329  playerDecks[player2] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2348  playerDecks[player2].playerCards.length */\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2352  playerDecks[player2].playerCards.length > 0 */\n      iszero\n        /* \"contracts/PlayerCardsRandom.sol\":2305:2405  if (playerDecks[player2].playerCards.length > 0) {... */\n      tag_141\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":2372:2383  cardsPicked */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":2372:2390  cardsPicked = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":2386:2390  true */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":2372:2390  cardsPicked = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsRandom.sol\":2305:2405  if (playerDecks[player2].playerCards.length > 0) {... */\n    tag_141:\n        /* \"contracts/PlayerCardsRandom.sol\":2264:2661  if (player1 == msg.sender) {... */\n      jump(tag_145)\n    tag_140:\n        /* \"contracts/PlayerCardsRandom.sol\":2433:2440  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsRandom.sol\":2444:2454  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsRandom.sol\":2433:2454  player2 == msg.sender */\n      eq\n        /* \"contracts/PlayerCardsRandom.sol\":2429:2661  if (player2 == msg.sender) {... */\n      iszero\n      tag_143\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":2486:2493  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsRandom.sol\":2516:2517  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2494  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2485  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2494  playerDecks[player1] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2513  playerDecks[player1].playerCards.length */\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2517  playerDecks[player1].playerCards.length > 0 */\n      iszero\n        /* \"contracts/PlayerCardsRandom.sol\":2470:2570  if (playerDecks[player1].playerCards.length > 0) {... */\n      tag_141\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":2537:2548  cardsPicked */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":2537:2555  cardsPicked = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":2551:2555  true */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":2537:2555  cardsPicked = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsRandom.sol\":2429:2661  if (player2 == msg.sender) {... */\n      jump(tag_145)\n    tag_143:\n        /* \"contracts/PlayerCardsRandom.sol\":2600:2650  revert('Transaction sender must be player 1 or 2') */\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_147)\n        /* \"contracts/PlayerCardsRandom.sol\":2429:2661  if (player2 == msg.sender) {... */\n    tag_145:\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2703  uint[3] memory pickedCardNumbers */\n      tag_148\n      tag_149\n      jump\t// in\n    tag_148:\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2721  uint[3] memory pickedCardNumbers = [uint(0), 0, 0] */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":2712:2713  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2721  uint[3] memory pickedCardNumbers = [uint(0), 0, 0] */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":2716:2717  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2721  uint[3] memory pickedCardNumbers = [uint(0), 0, 0] */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":2719:2720  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2721  uint[3] memory pickedCardNumbers = [uint(0), 0, 0] */\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":2761:2777  uint randomPick1 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2780:2799  _randomNumber(5, 1) */\n      tag_150\n        /* \"contracts/PlayerCardsRandom.sol\":2794:2795  5 */\n      0x05\n        /* \"contracts/PlayerCardsRandom.sol\":2797:2798  1 */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":2780:2793  _randomNumber */\n      tag_151\n        /* \"contracts/PlayerCardsRandom.sol\":2780:2799  _randomNumber(5, 1) */\n      jump\t// in\n    tag_150:\n        /* \"contracts/PlayerCardsRandom.sol\":2761:2799  uint randomPick1 = _randomNumber(5, 1) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":2809:2863  _setPlayerCard(playerCards, desiredCards[randomPick1]) */\n      tag_152\n        /* \"contracts/PlayerCardsRandom.sol\":2824:2835  playerCards */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":2837:2849  desiredCards */\n      dup6\n        /* \"contracts/PlayerCardsRandom.sol\":2850:2861  randomPick1 */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":2837:2862  desiredCards[randomPick1] */\n      0x05\n      dup2\n      lt\n      tag_153\n      jumpi\n      invalid\n    tag_153:\n      0x20\n      mul\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":2809:2823  _setPlayerCard */\n      tag_154\n        /* \"contracts/PlayerCardsRandom.sol\":2809:2863  _setPlayerCard(playerCards, desiredCards[randomPick1]) */\n      jump\t// in\n    tag_152:\n        /* \"contracts/PlayerCardsRandom.sol\":2896:2907  playerCards */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":2908:2909  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2896:2910  playerCards[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_155\n      jumpi\n      invalid\n    tag_155:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      keccak256\n      0x02\n      swap2\n      dup3\n      mul\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":2896:2917  playerCards[0].cardId */\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":2873:2917  pickedCardNumbers[0] = playerCards[0].cardId */\n      dup5\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":3073:3093  _randomNumber(10, 2) */\n      tag_158\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3087:3089  10 */\n      0x0a\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3073:3086  _randomNumber */\n      tag_151\n        /* \"contracts/PlayerCardsRandom.sol\":3073:3093  _randomNumber(10, 2) */\n      jump\t// in\n    tag_158:\n        /* \"contracts/PlayerCardsRandom.sol\":3054:3093  uint randomPick2 = _randomNumber(10, 2) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3202:3213  randomPick2 */\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":3187:3198  randomPick1 */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":3187:3213  randomPick1 == randomPick2 */\n      eq\n        /* \"contracts/PlayerCardsRandom.sol\":3187:3244  randomPick1 == randomPick2 ||... */\n      dup1\n      tag_159\n      jumpi\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3243:3244  4 */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":3229:3240  randomPick2 */\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":3229:3244  randomPick2 > 4 */\n      gt\n        /* \"contracts/PlayerCardsRandom.sol\":3187:3244  randomPick1 == randomPick2 ||... */\n    tag_159:\n        /* \"contracts/PlayerCardsRandom.sol\":3183:3551  if (randomPick1 == randomPick2 ||... */\n      iszero\n      tag_160\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":3274:3321  _randomNumber(cardsContract.cardCount() - 1, 2) */\n      tag_161\n        /* \"contracts/PlayerCardsRandom.sol\":3316:3317  1 */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3301  cardsContract */\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3311  cardsContract.cardCount */\n      and\n      0x1b6cde10\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3313  cardsContract.cardCount() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_162\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_162:\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3313  cardsContract.cardCount() */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_163\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_163:\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3313  cardsContract.cardCount() */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"--CODEGEN--\":97:106   */\n      not\n        /* \"--CODEGEN--\":90:94   */\n      0x1f\n        /* \"--CODEGEN--\":84:88   */\n      dup3\n        /* \"--CODEGEN--\":80:95   */\n      add\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":69:74   */\n      dup3\n        /* \"--CODEGEN--\":65:108   */\n      add\n        /* \"--CODEGEN--\":126:132   */\n      dup1\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"--CODEGEN--\":0:138   */\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3313  cardsContract.cardCount() */\n      tag_164\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_165)\n    tag_164:\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3317  cardsContract.cardCount() - 1 */\n      sub\n        /* \"contracts/PlayerCardsRandom.sol\":3319:3320  2 */\n      0x02\n        /* \"contracts/PlayerCardsRandom.sol\":3274:3287  _randomNumber */\n      tag_151\n        /* \"contracts/PlayerCardsRandom.sol\":3274:3321  _randomNumber(cardsContract.cardCount() - 1, 2) */\n      jump\t// in\n    tag_161:\n        /* \"contracts/PlayerCardsRandom.sol\":3260:3321  randomPick2 = _randomNumber(cardsContract.cardCount() - 1, 2) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3364:3404  _setPlayerCard(playerCards, randomPick2) */\n      tag_166\n        /* \"contracts/PlayerCardsRandom.sol\":3379:3390  playerCards */\n      dup5\n        /* \"contracts/PlayerCardsRandom.sol\":3392:3403  randomPick2 */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":3364:3378  _setPlayerCard */\n      tag_154\n        /* \"contracts/PlayerCardsRandom.sol\":3364:3404  _setPlayerCard(playerCards, randomPick2) */\n      jump\t// in\n    tag_166:\n        /* \"contracts/PlayerCardsRandom.sol\":3183:3551  if (randomPick1 == randomPick2 ||... */\n      jump(tag_168)\n    tag_160:\n        /* \"contracts/PlayerCardsRandom.sol\":3486:3540  _setPlayerCard(playerCards, desiredCards[randomPick2]) */\n      tag_168\n        /* \"contracts/PlayerCardsRandom.sol\":3501:3512  playerCards */\n      dup5\n        /* \"contracts/PlayerCardsRandom.sol\":3514:3526  desiredCards */\n      dup7\n        /* \"contracts/PlayerCardsRandom.sol\":3527:3538  randomPick2 */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":3514:3539  desiredCards[randomPick2] */\n      0x05\n      dup2\n      lt\n      tag_153\n      jumpi\n      invalid\n        /* \"contracts/PlayerCardsRandom.sol\":3486:3540  _setPlayerCard(playerCards, desiredCards[randomPick2]) */\n    tag_168:\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3595  playerCards */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":3596:3597  1 */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3598  playerCards[1] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_170\n      jumpi\n      invalid\n    tag_170:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      0x02\n      swap1\n      swap3\n      mul\n      swap1\n      swap2\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3605  playerCards[1].cardId */\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":3561:3581  pickedCardNumbers[1] */\n      dup6\n      dup3\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":3561:3605  pickedCardNumbers[1] = playerCards[1].cardId */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3662  cardsContract */\n      dup2\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      0x40\n      dup1\n      mload\n      mul(0x01b6cde1, shl(0xe4, 0x01))\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":3635:3682  _randomNumber(cardsContract.cardCount() - 1, 3) */\n      tag_173\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":3579:3580  1 */\n      0x01\n      swap4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3662  cardsContract */\n      and\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3672  cardsContract.cardCount */\n      0x1b6cde10\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      0x04\n      dup1\n      dup4\n      add\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3598  playerCards[1] */\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3598  playerCards[1] */\n      dup10\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3662  cardsContract */\n      dup8\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":5:7   */\n      dup1\n      iszero\n      tag_174\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_174:\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_175\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_175:\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"--CODEGEN--\":97:106   */\n      not\n        /* \"--CODEGEN--\":90:94   */\n      0x1f\n        /* \"--CODEGEN--\":84:88   */\n      dup3\n        /* \"--CODEGEN--\":80:95   */\n      add\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":69:74   */\n      dup3\n        /* \"--CODEGEN--\":65:108   */\n      add\n        /* \"--CODEGEN--\":126:132   */\n      dup1\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"--CODEGEN--\":0:138   */\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      tag_176\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_165)\n    tag_176:\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3678  cardsContract.cardCount() - 1 */\n      sub\n        /* \"contracts/PlayerCardsRandom.sol\":3680:3681  3 */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":3635:3648  _randomNumber */\n      tag_151\n        /* \"contracts/PlayerCardsRandom.sol\":3635:3682  _randomNumber(cardsContract.cardCount() - 1, 3) */\n      jump\t// in\n    tag_173:\n        /* \"contracts/PlayerCardsRandom.sol\":3616:3682  uint randomPick3 = _randomNumber(cardsContract.cardCount() - 1, 3) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3692:3732  _setPlayerCard(playerCards, randomPick3) */\n      tag_177\n        /* \"contracts/PlayerCardsRandom.sol\":3707:3718  playerCards */\n      dup6\n        /* \"contracts/PlayerCardsRandom.sol\":3720:3731  randomPick3 */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":3692:3706  _setPlayerCard */\n      tag_154\n        /* \"contracts/PlayerCardsRandom.sol\":3692:3732  _setPlayerCard(playerCards, randomPick3) */\n      jump\t// in\n    tag_177:\n        /* \"contracts/PlayerCardsRandom.sol\":3766:3777  playerCards */\n      dup5\n        /* \"contracts/PlayerCardsRandom.sol\":3778:3779  2 */\n      0x02\n        /* \"contracts/PlayerCardsRandom.sol\":3766:3780  playerCards[2] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_178\n      jumpi\n      invalid\n    tag_178:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      0x02\n      swap2\n      dup3\n      mul\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":3766:3787  playerCards[2].cardId */\n      sload\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3743:3760  pickedCardNumbers */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3743:3763  pickedCardNumbers[2] */\n      0x20\n      mul\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":3743:3787  pickedCardNumbers[2] = playerCards[2].cardId */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":3803:3850  PickPayerCards(desiredCards, pickedCardNumbers) */\n      mload(0x40)\n      0x48ca02657a8acb3a062f53bf24ca611bb25d8108f29f5e3c5e468080a44dca5d\n      swap1\n      tag_181\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3818:3830  desiredCards */\n      dup9\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3832:3849  pickedCardNumbers */\n      dup8\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3803:3850  PickPayerCards(desiredCards, pickedCardNumbers) */\n      jump(tag_182)\n    tag_181:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/PlayerCardsRandom.sol\":3865:3876  cardsPicked */\n      and(0xff, sload(0x04))\n        /* \"contracts/PlayerCardsRandom.sol\":3861:3916  if (cardsPicked) {... */\n      iszero\n      tag_184\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":3892:3905  startBattle() */\n      tag_184\n        /* \"contracts/PlayerCardsRandom.sol\":3892:3903  startBattle */\n      tag_185\n        /* \"contracts/PlayerCardsRandom.sol\":3892:3905  startBattle() */\n      jump\t// in\n    tag_184:\n        /* \"contracts/PlayerCardsRandom.sol\":2029:3922  function pickPayerCards(uint[5] memory desiredCards) public {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":4440:4822  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n    tag_42:\n        /* \"contracts/PlayerCardsRandom.sol\":4511:4517  uint16 */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":4560:4790  for (uint i=0; i<playerCards.length; i++) {... */\n    tag_187:\n        /* \"contracts/PlayerCardsRandom.sol\":4577:4588  playerCards */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":4577:4595  playerCards.length */\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":4575:4576  i */\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":4575:4595  i<playerCards.length */\n      lt\n        /* \"contracts/PlayerCardsRandom.sol\":4560:4790  for (uint i=0; i<playerCards.length; i++) {... */\n      iszero\n      tag_188\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":4617:4633  uint16 cardSpeed */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4649  cardsContract */\n      dup1\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":4658:4672  playerCards[i] */\n      dup6\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4649  cardsContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4657  cardsContract.getCard */\n      0x9188d312\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4658:4669  playerCards */\n      dup8\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4670:4671  i */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4658:4672  playerCards[i] */\n      dup2\n      lt\n      tag_190\n      jumpi\n      invalid\n    tag_190:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":4658:4679  playerCards[i].cardId */\n      0x00\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_191\n      swap2\n      swap1\n      jump(tag_109)\n    tag_191:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_192\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_192:\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_193\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_193:\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      tag_194\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_113)\n    tag_194:\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4686  cardsContract.getCard(playerCards[i].cardId).speed */\n      0xa0\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":4617:4686  uint16 cardSpeed = cardsContract.getCard(playerCards[i].cardId).speed */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4717:4725  maxSpeed */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":4705:4725  cardSpeed > maxSpeed */\n      0xffff\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":4705:4714  cardSpeed */\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":4705:4725  cardSpeed > maxSpeed */\n      0xffff\n      and\n      gt\n        /* \"contracts/PlayerCardsRandom.sol\":4701:4780  if (cardSpeed > maxSpeed) {... */\n      iszero\n      tag_195\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":4756:4765  cardSpeed */\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":4745:4765  maxSpeed = cardSpeed */\n      swap3\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4701:4780  if (cardSpeed > maxSpeed) {... */\n    tag_195:\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4597:4600  i++ */\n      0x01\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":4560:4790  for (uint i=0; i<playerCards.length; i++) {... */\n      jump(tag_187)\n    tag_188:\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4807:4815  maxSpeed */\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4440:4822  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":529:551  address public player2 */\n    tag_46:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/BattleRandom.sol\":372:400  address public winningPlayer */\n    tag_49:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":4828:4950  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n    tag_53:\n        /* \"contracts/PlayerCardsRandom.sol\":4888:4905  PlayerDeck memory */\n      tag_196\n      tag_197\n      jump\t// in\n    tag_196:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4943  playerDecks[player] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4935  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4943  playerDecks[player] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":4917:4943  return playerDecks[player] */\n      dup2\n      mload\n      dup2\n      sload\n      0x60\n      swap5\n      dup2\n      mul\n      dup3\n      add\n      dup6\n      add\n      dup5\n      mstore\n      swap3\n      dup2\n      add\n      dup4\n      dup2\n      mstore\n      swap1\n      swap5\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4943  playerDecks[player] */\n      swap2\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":4917:4943  return playerDecks[player] */\n      dup6\n      swap4\n      swap2\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4943  playerDecks[player] */\n      dup6\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4917:4943  return playerDecks[player] */\n      swap2\n      dup6\n      add\n    tag_199:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_200\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0x20, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_199)\n    tag_200:\n      pop\n      pop\n      pop\n      swap1\n      dup3\n      mstore\n      pop\n      0x01\n      swap2\n      swap1\n      swap2\n      add\n      sload\n      0xff\n      and\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4828:4950  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":501:523  address public player1 */\n    tag_57:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":613:636  bool public cardsPicked */\n    tag_60:\n      and(0xff, sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":557:607  mapping (address => PlayerDeck) public playerDecks */\n    tag_65:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      0x01\n      add\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":1666:1881  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n    tag_69:\n        /* \"contracts/PlayerCardsRandom.sol\":1733:1750  PlayerCard memory */\n      tag_202\n      tag_203\n      jump\t// in\n    tag_202:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1801  playerDecks[player] */\n      dup3\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":1763:1779  uint8 deckNumber */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1801  playerDecks[player] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1793  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1801  playerDecks[player] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1813  playerDecks[player].currentCard */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":1831:1874  playerDecks[player].playerCards[deckNumber] */\n      dup2\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1813  playerDecks[player].currentCard */\n      0xff\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1801  playerDecks[player] */\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1813  playerDecks[player].currentCard */\n      dup3\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1831:1874  playerDecks[player].playerCards[deckNumber] */\n      dup2\n      lt\n      tag_205\n      jumpi\n      invalid\n    tag_205:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":1824:1874  return playerDecks[player].playerCards[deckNumber] */\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1831:1874  playerDecks[player].playerCards[deckNumber] */\n      0x02\n      swap1\n      swap4\n      mul\n      swap1\n      swap2\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":1824:1874  return playerDecks[player].playerCards[deckNumber] */\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      swap5\n      dup5\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n      0x010000\n      dup2\n      div\n      dup5\n      and\n      swap2\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      shl(0x20, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup4\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup4\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup3\n      add\n      mstore\n      swap2\n      pop\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":1666:1881  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/BattleRandom.sol\":4758:6175  function attack(uint16 attackAmount, PlayerCard storage playerDefenceCard, PlayerDeck storage defenceDeck) internal {... */\n    tag_96:\n        /* \"contracts/BattleRandom.sol\":4927:4952  playerDefenceCard.defence */\n      0x01\n      dup3\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":4884:4912  uint16 remainingAttackAmount */\n      0x00\n      swap1\n        /* \"contracts/BattleRandom.sol\":4927:4952  playerDefenceCard.defence */\n      0x010000\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/BattleRandom.sol\":4927:4956  playerDefenceCard.defence > 0 */\n      iszero\n        /* \"contracts/BattleRandom.sol\":4923:6169  if (playerDefenceCard.defence > 0) {... */\n      tag_208\n      jumpi\n        /* \"contracts/BattleRandom.sol\":5045:5070  playerDefenceCard.defence */\n      0x01\n      dup4\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":5025:5085  MathUtils.subToZero(playerDefenceCard.defence, attackAmount) */\n      tag_209\n      swap1\n        /* \"contracts/BattleRandom.sol\":5045:5070  playerDefenceCard.defence */\n      0x010000\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/BattleRandom.sol\":5072:5084  attackAmount */\n      dup6\n        /* \"contracts/BattleRandom.sol\":5025:5044  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattleRandom.sol\":5025:5085  MathUtils.subToZero(playerDefenceCard.defence, attackAmount) */\n      jump\t// in\n    tag_209:\n        /* \"contracts/BattleRandom.sol\":4973:4998  playerDefenceCard.defence */\n      0x01\n      dup6\n      add\n        /* \"contracts/BattleRandom.sol\":4972:5085  (playerDefenceCard.defence, remainingAttackAmount) = MathUtils.subToZero(playerDefenceCard.defence, attackAmount) */\n      dup1\n      sload\n      not(0xffff0000)\n      and\n      0x010000\n      0xffff\n      swap5\n      dup6\n      and\n      mul\n      or\n      swap1\n      sstore\n      swap2\n      pop\n        /* \"contracts/BattleRandom.sol\":5104:5129  remainingAttackAmount > 0 */\n      dup2\n      and\n      iszero\n        /* \"contracts/BattleRandom.sol\":5100:5664  if (remainingAttackAmount > 0) {... */\n      tag_215\n      jumpi\n        /* \"contracts/BattleRandom.sol\":5221:5245  playerDefenceCard.health */\n      0x01\n      dup4\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":5201:5269  MathUtils.subToZero(playerDefenceCard.health, remainingAttackAmount) */\n      tag_211\n      swap1\n        /* \"contracts/BattleRandom.sol\":5221:5245  playerDefenceCard.health */\n      0xffff\n      and\n        /* \"contracts/BattleRandom.sol\":5247:5268  remainingAttackAmount */\n      dup3\n        /* \"contracts/BattleRandom.sol\":5201:5220  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattleRandom.sol\":5201:5269  MathUtils.subToZero(playerDefenceCard.health, remainingAttackAmount) */\n      jump\t// in\n    tag_211:\n        /* \"contracts/BattleRandom.sol\":5150:5174  playerDefenceCard.health */\n      0x01\n      dup6\n      add\n        /* \"contracts/BattleRandom.sol\":5149:5269  (playerDefenceCard.health, remainingAttackAmount) = MathUtils.subToZero(playerDefenceCard.health, remainingAttackAmount) */\n      dup1\n      sload\n      not(0xffff)\n      and\n      0xffff\n      swap4\n      dup5\n      and\n      or\n      swap1\n      sstore\n      swap2\n      pop\n        /* \"contracts/BattleRandom.sol\":5292:5317  remainingAttackAmount > 0 */\n      dup2\n      and\n      iszero\n        /* \"contracts/BattleRandom.sol\":5288:5650  if (remainingAttackAmount > 0) {... */\n      tag_215\n      jumpi\n        /* \"contracts/BattleRandom.sol\":5341:5364  defenceDeck.currentCard */\n      0x01\n      dup1\n      dup4\n      add\n        /* \"contracts/BattleRandom.sol\":5341:5366  defenceDeck.currentCard++ */\n      dup1\n      sload\n      0xff\n      dup1\n      dup3\n      and\n      swap1\n      swap4\n      add\n      dup4\n      and\n      not(0xff)\n      swap1\n      swap2\n      and\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":5418:5448  defenceDeck.playerCards.length */\n      dup4\n      sload\n        /* \"contracts/BattleRandom.sol\":5392:5415  defenceDeck.currentCard */\n      swap2\n      and\n        /* \"contracts/BattleRandom.sol\":5392:5448  defenceDeck.currentCard > defenceDeck.playerCards.length */\n      gt\n        /* \"contracts/BattleRandom.sol\":5388:5518  if (defenceDeck.currentCard > defenceDeck.playerCards.length) {... */\n      iszero\n      tag_214\n      jumpi\n        /* \"contracts/BattleRandom.sol\":5476:5495  endGame(msg.sender) */\n      tag_214\n        /* \"contracts/BattleRandom.sol\":5484:5494  msg.sender */\n      caller\n        /* \"contracts/BattleRandom.sol\":5476:5483  endGame */\n      tag_25\n        /* \"contracts/BattleRandom.sol\":5476:5495  endGame(msg.sender) */\n      jump\t// in\n    tag_214:\n        /* \"contracts/BattleRandom.sol\":5593:5616  defenceDeck.currentCard */\n      0x01\n      dup3\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":5569:5617  defenceDeck.playerCards[defenceDeck.currentCard] */\n      dup3\n      sload\n        /* \"contracts/BattleRandom.sol\":5539:5631  attack(remainingAttackAmount, defenceDeck.playerCards[defenceDeck.currentCard], defenceDeck) */\n      tag_215\n      swap2\n        /* \"contracts/BattleRandom.sol\":5546:5567  remainingAttackAmount */\n      dup4\n      swap2\n        /* \"contracts/BattleRandom.sol\":5569:5580  defenceDeck */\n      dup6\n      swap2\n        /* \"contracts/BattleRandom.sol\":5593:5616  defenceDeck.currentCard */\n      0xff\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":5569:5617  defenceDeck.playerCards[defenceDeck.currentCard] */\n      dup2\n      lt\n      tag_216\n      jumpi\n      invalid\n    tag_216:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x02\n      mul\n      add\n        /* \"contracts/BattleRandom.sol\":5619:5630  defenceDeck */\n      dup5\n        /* \"contracts/BattleRandom.sol\":5539:5545  attack */\n      tag_96\n        /* \"contracts/BattleRandom.sol\":5539:5631  attack(remainingAttackAmount, defenceDeck.playerCards[defenceDeck.currentCard], defenceDeck) */\n      jump\t// in\n    tag_215:\n        /* \"contracts/BattleRandom.sol\":4923:6169  if (playerDefenceCard.defence > 0) {... */\n      jump(tag_223)\n    tag_208:\n        /* \"contracts/BattleRandom.sol\":5767:5791  playerDefenceCard.health */\n      0x01\n      dup4\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":5747:5806  MathUtils.subToZero(playerDefenceCard.health, attackAmount) */\n      tag_219\n      swap1\n        /* \"contracts/BattleRandom.sol\":5767:5791  playerDefenceCard.health */\n      0xffff\n      and\n        /* \"contracts/BattleRandom.sol\":5793:5805  attackAmount */\n      dup6\n        /* \"contracts/BattleRandom.sol\":5747:5766  MathUtils.subToZero */\n      tag_118\n        /* \"contracts/BattleRandom.sol\":5747:5806  MathUtils.subToZero(playerDefenceCard.health, attackAmount) */\n      jump\t// in\n    tag_219:\n        /* \"contracts/BattleRandom.sol\":5696:5720  playerDefenceCard.health */\n      0x01\n      dup6\n      add\n        /* \"contracts/BattleRandom.sol\":5695:5806  (playerDefenceCard.health, remainingAttackAmount) = MathUtils.subToZero(playerDefenceCard.health, attackAmount) */\n      dup1\n      sload\n      not(0xffff)\n      and\n      0xffff\n      swap4\n      dup5\n      and\n      or\n      swap1\n      sstore\n      swap2\n      pop\n        /* \"contracts/BattleRandom.sol\":5825:5850  remainingAttackAmount > 0 */\n      dup2\n      and\n      iszero\n        /* \"contracts/BattleRandom.sol\":5821:6159  if (remainingAttackAmount > 0) {... */\n      tag_223\n      jumpi\n        /* \"contracts/BattleRandom.sol\":5870:5893  defenceDeck.currentCard */\n      0x01\n      dup1\n      dup4\n      add\n        /* \"contracts/BattleRandom.sol\":5870:5895  defenceDeck.currentCard++ */\n      dup1\n      sload\n      0xff\n      dup1\n      dup3\n      and\n      swap1\n      swap4\n      add\n      dup4\n      and\n      not(0xff)\n      swap1\n      swap2\n      and\n      or\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/BattleRandom.sol\":5943:5973  defenceDeck.playerCards.length */\n      dup4\n      sload\n        /* \"contracts/BattleRandom.sol\":5917:5940  defenceDeck.currentCard */\n      swap2\n      and\n        /* \"contracts/BattleRandom.sol\":5917:5973  defenceDeck.currentCard > defenceDeck.playerCards.length */\n      gt\n        /* \"contracts/BattleRandom.sol\":5913:6035  if (defenceDeck.currentCard > defenceDeck.playerCards.length) {... */\n      iszero\n      tag_222\n      jumpi\n        /* \"contracts/BattleRandom.sol\":5997:6016  endGame(msg.sender) */\n      tag_222\n        /* \"contracts/BattleRandom.sol\":6005:6015  msg.sender */\n      caller\n        /* \"contracts/BattleRandom.sol\":5997:6004  endGame */\n      tag_25\n        /* \"contracts/BattleRandom.sol\":5997:6016  endGame(msg.sender) */\n      jump\t// in\n    tag_222:\n        /* \"contracts/BattleRandom.sol\":6106:6129  defenceDeck.currentCard */\n      0x01\n      dup3\n      add\n      sload\n        /* \"contracts/BattleRandom.sol\":6082:6130  defenceDeck.playerCards[defenceDeck.currentCard] */\n      dup3\n      sload\n        /* \"contracts/BattleRandom.sol\":6052:6144  attack(remainingAttackAmount, defenceDeck.playerCards[defenceDeck.currentCard], defenceDeck) */\n      tag_223\n      swap2\n        /* \"contracts/BattleRandom.sol\":6059:6080  remainingAttackAmount */\n      dup4\n      swap2\n        /* \"contracts/BattleRandom.sol\":6082:6093  defenceDeck */\n      dup6\n      swap2\n        /* \"contracts/BattleRandom.sol\":6106:6129  defenceDeck.currentCard */\n      0xff\n      and\n      swap1\n        /* \"contracts/BattleRandom.sol\":6082:6130  defenceDeck.playerCards[defenceDeck.currentCard] */\n      dup2\n      lt\n      tag_216\n      jumpi\n      invalid\n        /* \"contracts/BattleRandom.sol\":6052:6144  attack(remainingAttackAmount, defenceDeck.playerCards[defenceDeck.currentCard], defenceDeck) */\n    tag_223:\n        /* \"contracts/BattleRandom.sol\":4758:6175  function attack(uint16 attackAmount, PlayerCard storage playerDefenceCard, PlayerDeck storage defenceDeck) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/MathUtils.sol\":164:337  function subToZero(uint16 a, uint16 b) internal pure returns (uint16, uint16) {... */\n    tag_118:\n        /* \"contracts/MathUtils.sol\":226:232  uint16 */\n      0x00\n        /* \"contracts/MathUtils.sol\":234:240  uint16 */\n      dup1\n        /* \"contracts/MathUtils.sol\":259:260  a */\n      dup4\n        /* \"contracts/MathUtils.sol\":255:260  b > a */\n      0xffff\n      and\n        /* \"contracts/MathUtils.sol\":255:256  b */\n      dup4\n        /* \"contracts/MathUtils.sol\":255:260  b > a */\n      0xffff\n      and\n      gt\n        /* \"contracts/MathUtils.sol\":252:304  if(b > a) {... */\n      iszero\n      tag_227\n      jumpi\n      pop\n        /* \"contracts/MathUtils.sol\":284:285  0 */\n      0x00\n      swap1\n      pop\n        /* \"contracts/MathUtils.sol\":287:292  b - a */\n      dup3\n      dup3\n      sub\n        /* \"contracts/MathUtils.sol\":276:293  return (0, b - a) */\n      jump(tag_226)\n        /* \"contracts/MathUtils.sol\":252:304  if(b > a) {... */\n    tag_227:\n      pop\n      pop\n        /* \"contracts/MathUtils.sol\":321:326  a - b */\n      dup1\n      dup3\n      sub\n        /* \"contracts/MathUtils.sol\":328:329  0 */\n      0x00\n        /* \"contracts/MathUtils.sol\":164:337  function subToZero(uint16 a, uint16 b) internal pure returns (uint16, uint16) {... */\n    tag_226:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":867:1239  function _randomNumber(uint numberOfPicks, uint8 pickNumber) private view returns (uint) {... */\n    tag_151:\n        /* \"contracts/PlayerCardsRandom.sol\":950:954  uint */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":967:976  uint rand */\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":1062:1072  pickNumber */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":1119:1120  1 */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":1104:1116  block.number */\n      number\n        /* \"contracts/PlayerCardsRandom.sol\":1104:1120  block.number - 1 */\n      sub\n        /* \"contracts/PlayerCardsRandom.sol\":1094:1121  blockhash(block.number - 1) */\n      blockhash\n        /* \"contracts/PlayerCardsRandom.sol\":1143:1153  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsRandom.sol\":1024:1171  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_229\n      swap4\n      swap3\n      swap2\n      swap1\n      jump(tag_230)\n    tag_229:\n      mload(0x40)\n        /* \"--CODEGEN--\":49:53   */\n      0x20\n        /* \"--CODEGEN--\":39:46   */\n      dup2\n        /* \"--CODEGEN--\":30:37   */\n      dup4\n        /* \"--CODEGEN--\":26:47   */\n      sub\n        /* \"--CODEGEN--\":22:54   */\n      sub\n        /* \"--CODEGEN--\":13:20   */\n      dup2\n        /* \"--CODEGEN--\":6:55   */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1024:1171  abi.encodePacked(... */\n      swap1\n      0x40\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":997:1185  keccak256(... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":979:1195  uint(... */\n      0x00\n      shr\n        /* \"contracts/PlayerCardsRandom.sol\":967:1195  uint rand = uint(... */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":1219:1232  numberOfPicks */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":1212:1216  rand */\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":1212:1232  rand % numberOfPicks */\n      dup2\n      tag_231\n      jumpi\n      invalid\n    tag_231:\n      mod\n        /* \"contracts/PlayerCardsRandom.sol\":1205:1232  return rand % numberOfPicks */\n      swap2\n      pop\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":867:1239  function _randomNumber(uint numberOfPicks, uint8 pickNumber) private view returns (uint) {... */\n    tag_228:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":1245:1660  function _setPlayerCard(PlayerCard[] storage playerCards, uint cardId) internal {... */\n    tag_154:\n        /* \"contracts/PlayerCardsRandom.sol\":1336:1352  Card memory card */\n      tag_233\n      tag_107\n      jump\t// in\n    tag_233:\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1368  cardsContract */\n      sload(0x00)\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      mload(0x40)\n      mul(0x48c46989, shl(0xe1, 0x01))\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1368  cardsContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1376  cardsContract.getCard */\n      0x9188d312\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      tag_234\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1377:1383  cardId */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      0x04\n      add\n      jump(tag_109)\n    tag_234:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_235\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_235:\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_236\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_236:\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      tag_237\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_113)\n    tag_237:\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      0x40\n      dup1\n      mload\n      0xc0\n      dup1\n      dup3\n      add\n      dup4\n      mstore\n      swap5\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1474:1489  card.initHealth */\n      dup2\n      dup4\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      0xffff\n      swap1\n      dup2\n      and\n      0x20\n      dup1\n      dup5\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1512:1528  card.initDefence */\n      0x60\n      dup1\n      dup8\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      dup5\n      and\n      swap6\n      dup6\n      add\n      swap6\n      dup7\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1548:1561  card.initMana */\n      0x80\n      dup1\n      dup9\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      dup6\n      and\n      swap2\n      dup7\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1583:1594  card.attack */\n      swap9\n      dup8\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      dup5\n      and\n      swap9\n      dup6\n      add\n      swap9\n      dup10\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1623:1641  card.specialAttack */\n      0xe0\n      swap1\n      swap7\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      dup4\n      and\n      0xa0\n      dup6\n      add\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":27:37   */\n      dup10\n      sload\n        /* \"--CODEGEN--\":39:40   */\n      0x01\n        /* \"--CODEGEN--\":23:41   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":45:68   */\n      dup13\n      sstore\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":1395:1653  playerCards.push( PlayerCard({... */\n      swap12\n      dup13\n      mstore\n      swap3\n      swap1\n      swap11\n      keccak256\n      swap5\n      mload\n      0x02\n      swap1\n      swap11\n      mul\n      swap1\n      swap5\n      add\n      swap9\n      dup10\n      sstore\n      swap1\n      mload\n      swap8\n      add\n      dup1\n      sload\n      swap4\n      mload\n      swap5\n      mload\n      swap7\n      mload\n      swap3\n      mload\n      dup3\n      and\n      shl(0x40, 0x01)\n      mul\n      not(0xffff0000000000000000)\n      swap4\n      dup4\n      and\n      shl(0x30, 0x01)\n      mul\n      not(0xffff000000000000)\n      swap9\n      dup5\n      and\n      shl(0x20, 0x01)\n      mul\n      not(0xffff00000000)\n      swap8\n      dup6\n      and\n      0x010000\n      mul\n      not(0xffff0000)\n      swap12\n      swap1\n      swap6\n      and\n      not(0xffff)\n      swap1\n      swap8\n      and\n      swap7\n      swap1\n      swap7\n      or\n      swap10\n      swap1\n      swap10\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap5\n      swap1\n      swap5\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap5\n      swap1\n      swap5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap3\n      swap1\n      swap3\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":1245:1660  function _setPlayerCard(PlayerCard[] storage playerCards, uint cardId) internal {... */\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":3998:4434  function startBattle() internal {... */\n    tag_185:\n        /* \"contracts/PlayerCardsRandom.sol\":4048:4059  cardsPicked */\n      and(0xff, sload(0x04))\n        /* \"contracts/PlayerCardsRandom.sol\":4040:4108  require(cardsPicked, 'Both players have to have picked their cards') */\n      tag_240\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap1\n      jump(tag_242)\n    tag_240:\n        /* \"contracts/PlayerCardsRandom.sol\":4169:4176  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsRandom.sol\":4119:4141  uint16 player1MaxSpeed */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":4157:4177  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4157:4168  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":4157:4177  playerDecks[player1] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":4144:4190  calcMaxSpeed(playerDecks[player1].playerCards) */\n      dup1\n      sload\n      dup3\n      mload\n      dup2\n      dup6\n      mul\n      dup2\n      add\n      dup6\n      add\n      swap1\n      swap4\n      mstore\n      dup1\n      dup4\n      mstore\n      tag_243\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":4119:4141  uint16 player1MaxSpeed */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4144:4190  calcMaxSpeed(playerDecks[player1].playerCards) */\n      dup5\n      add\n    tag_244:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_245\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0x20, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_244)\n    tag_245:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4144:4156  calcMaxSpeed */\n      tag_42\n        /* \"contracts/PlayerCardsRandom.sol\":4144:4190  calcMaxSpeed(playerDecks[player1].playerCards) */\n      jump\t// in\n    tag_243:\n        /* \"contracts/PlayerCardsRandom.sol\":4250:4257  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsRandom.sol\":4200:4222  uint16 player2MaxSpeed */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":4238:4258  playerDecks[player2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4238:4249  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":4238:4258  playerDecks[player2] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":4225:4271  calcMaxSpeed(playerDecks[player2].playerCards) */\n      dup1\n      sload\n      dup3\n      mload\n      dup2\n      dup6\n      mul\n      dup2\n      add\n      dup6\n      add\n      swap1\n      swap4\n      mstore\n      dup1\n      dup4\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4119:4190  uint16 player1MaxSpeed = calcMaxSpeed(playerDecks[player1].playerCards) */\n      swap5\n      swap6\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4200:4222  uint16 player2MaxSpeed */\n      swap3\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":4225:4271  calcMaxSpeed(playerDecks[player2].playerCards) */\n      tag_247\n      swap4\n      swap2\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4200:4222  uint16 player2MaxSpeed */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4225:4271  calcMaxSpeed(playerDecks[player2].playerCards) */\n      dup5\n      add\n      dup3\n      iszero\n      tag_245\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0x20, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_244)\n    tag_247:\n        /* \"contracts/PlayerCardsRandom.sol\":4200:4271  uint16 player2MaxSpeed = calcMaxSpeed(playerDecks[player2].playerCards) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4305:4320  player2MaxSpeed */\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":4286:4320  player1MaxSpeed >= player2MaxSpeed */\n      0xffff\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":4286:4301  player1MaxSpeed */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":4286:4320  player1MaxSpeed >= player2MaxSpeed */\n      0xffff\n      and\n      lt\n        /* \"contracts/PlayerCardsRandom.sol\":4282:4428  if (player1MaxSpeed >= player2MaxSpeed) {... */\n      tag_251\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":4350:4357  player1 */\n      sload(0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4336:4347  playersTurn */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":4336:4357  playersTurn = player1 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4350:4357  player1 */\n      swap1\n      swap3\n      and\n      0x0100\n        /* \"contracts/PlayerCardsRandom.sol\":4336:4357  playersTurn = player1 */\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsRandom.sol\":4282:4428  if (player1MaxSpeed >= player2MaxSpeed) {... */\n      jump(tag_252)\n    tag_251:\n        /* \"contracts/PlayerCardsRandom.sol\":4410:4417  player2 */\n      sload(0x02)\n        /* \"contracts/PlayerCardsRandom.sol\":4396:4407  playersTurn */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":4396:4417  playersTurn = player2 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4410:4417  player2 */\n      swap1\n      swap3\n      and\n      0x0100\n        /* \"contracts/PlayerCardsRandom.sol\":4396:4417  playersTurn = player2 */\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsRandom.sol\":4282:4428  if (player1MaxSpeed >= player2MaxSpeed) {... */\n    tag_252:\n        /* \"contracts/PlayerCardsRandom.sol\":3998:4434  function startBattle() internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/BattleRandom.sol\":197:6350  contract BattleRandom is PlayerCardsRandom {... */\n    tag_107:\n      mload(0x40)\n      dup1\n      0x0260\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_253\n      tag_254\n      jump\t// in\n    tag_253:\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x40\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x60\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x80\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xa0\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xc0\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_120:\n      0x40\n      dup1\n      mload\n      0xa0\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n    tag_149:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x03\n      swap1\n        /* \"--CODEGEN--\":29:31   */\n      0x20\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:32   */\n      mul\n        /* \"--CODEGEN--\":117:121   */\n      dup1\n        /* \"--CODEGEN--\":105:115   */\n      codesize\n        /* \"--CODEGEN--\":97:103   */\n      dup4\n        /* \"--CODEGEN--\":88:122   */\n      codecopy\n      pop\n        /* \"contracts/BattleRandom.sol\":197:6350  contract BattleRandom is PlayerCardsRandom {... */\n      swap2\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_197:\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x60\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_203:\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0xa0\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n    tag_254:\n      mload(0x40)\n      dup1\n      0x0180\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_255\n      tag_120\n      jump\t// in\n    tag_255:\n      dup2\n      mstore\n      0x20\n      add\n      tag_257\n      tag_120\n      jump\t// in\n    tag_257:\n      dup2\n      mstore\n      0x00\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n        /* \"--CODEGEN--\":5:123   */\n    tag_259:\n      0x00\n        /* \"--CODEGEN--\":72:118   */\n      tag_260\n        /* \"--CODEGEN--\":110:116   */\n      dup3\n        /* \"--CODEGEN--\":97:117   */\n      calldataload\n        /* \"--CODEGEN--\":72:118   */\n      jump(tag_391)\n    tag_260:\n        /* \"--CODEGEN--\":63:118   */\n      swap4\n        /* \"--CODEGEN--\":57:123   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":176:955   */\n    tag_263:\n      0x00\n        /* \"--CODEGEN--\":317:320   */\n      dup3\n        /* \"--CODEGEN--\":310:314   */\n      0x1f\n        /* \"--CODEGEN--\":302:308   */\n      dup4\n        /* \"--CODEGEN--\":298:315   */\n      add\n        /* \"--CODEGEN--\":294:321   */\n      slt\n        /* \"--CODEGEN--\":284:286   */\n      tag_264\n      jumpi\n        /* \"--CODEGEN--\":335:336   */\n      0x00\n        /* \"--CODEGEN--\":332:333   */\n      dup1\n        /* \"--CODEGEN--\":325:337   */\n      revert\n        /* \"--CODEGEN--\":284:286   */\n    tag_264:\n        /* \"--CODEGEN--\":372:378   */\n      dup2\n        /* \"--CODEGEN--\":359:379   */\n      calldataload\n        /* \"--CODEGEN--\":394:498   */\n      tag_265\n        /* \"--CODEGEN--\":409:497   */\n      tag_266\n        /* \"--CODEGEN--\":490:496   */\n      dup3\n        /* \"--CODEGEN--\":409:497   */\n      jump(tag_267)\n    tag_266:\n        /* \"--CODEGEN--\":394:498   */\n      jump(tag_268)\n    tag_265:\n        /* \"--CODEGEN--\":385:498   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":515:520   */\n      dup2\n        /* \"--CODEGEN--\":540:546   */\n      dup2\n        /* \"--CODEGEN--\":533:538   */\n      dup4\n        /* \"--CODEGEN--\":526:547   */\n      mstore\n        /* \"--CODEGEN--\":570:574   */\n      0x20\n        /* \"--CODEGEN--\":562:568   */\n      dup5\n        /* \"--CODEGEN--\":558:575   */\n      add\n        /* \"--CODEGEN--\":548:575   */\n      swap4\n      pop\n        /* \"--CODEGEN--\":592:596   */\n      0x20\n        /* \"--CODEGEN--\":587:590   */\n      dup2\n        /* \"--CODEGEN--\":583:597   */\n      add\n        /* \"--CODEGEN--\":576:597   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":645:651   */\n      dup4\n        /* \"--CODEGEN--\":692:695   */\n      dup6\n        /* \"--CODEGEN--\":684:688   */\n      0xc0\n        /* \"--CODEGEN--\":676:682   */\n      dup5\n        /* \"--CODEGEN--\":672:689   */\n      mul\n        /* \"--CODEGEN--\":667:670   */\n      dup3\n        /* \"--CODEGEN--\":663:690   */\n      add\n        /* \"--CODEGEN--\":660:696   */\n      gt\n        /* \"--CODEGEN--\":657:659   */\n      iszero\n      tag_269\n      jumpi\n        /* \"--CODEGEN--\":709:710   */\n      0x00\n        /* \"--CODEGEN--\":706:707   */\n      dup1\n        /* \"--CODEGEN--\":699:711   */\n      revert\n        /* \"--CODEGEN--\":657:659   */\n    tag_269:\n        /* \"--CODEGEN--\":734:735   */\n      0x00\n        /* \"--CODEGEN--\":719:949   */\n    tag_270:\n        /* \"--CODEGEN--\":744:750   */\n      dup4\n        /* \"--CODEGEN--\":741:742   */\n      dup2\n        /* \"--CODEGEN--\":738:751   */\n      lt\n        /* \"--CODEGEN--\":719:949   */\n      iszero\n      tag_272\n      jumpi\n        /* \"--CODEGEN--\":802:805   */\n      dup2\n        /* \"--CODEGEN--\":824:885   */\n      tag_273\n        /* \"--CODEGEN--\":881:884   */\n      dup9\n        /* \"--CODEGEN--\":869:879   */\n      dup3\n        /* \"--CODEGEN--\":824:885   */\n      jump(tag_274)\n    tag_273:\n        /* \"--CODEGEN--\":812:886   */\n      dup5\n      mstore\n      pop\n        /* \"--CODEGEN--\":909:913   */\n      0x20\n        /* \"--CODEGEN--\":900:914   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"--CODEGEN--\":937:941   */\n      0xc0\n        /* \"--CODEGEN--\":928:942   */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n        /* \"--CODEGEN--\":766:767   */\n      0x01\n        /* \"--CODEGEN--\":759:768   */\n      add\n        /* \"--CODEGEN--\":719:949   */\n      jump(tag_270)\n    tag_272:\n        /* \"--CODEGEN--\":723:737   */\n      pop\n        /* \"--CODEGEN--\":277:955   */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":982:1597   */\n    tag_276:\n      0x00\n        /* \"--CODEGEN--\":1097:1100   */\n      dup3\n        /* \"--CODEGEN--\":1090:1094   */\n      0x1f\n        /* \"--CODEGEN--\":1082:1088   */\n      dup4\n        /* \"--CODEGEN--\":1078:1095   */\n      add\n        /* \"--CODEGEN--\":1074:1101   */\n      slt\n        /* \"--CODEGEN--\":1064:1066   */\n      tag_277\n      jumpi\n        /* \"--CODEGEN--\":1115:1116   */\n      0x00\n        /* \"--CODEGEN--\":1112:1113   */\n      dup1\n        /* \"--CODEGEN--\":1105:1117   */\n      revert\n        /* \"--CODEGEN--\":1064:1066   */\n    tag_277:\n        /* \"--CODEGEN--\":1139:1142   */\n      0x05\n        /* \"--CODEGEN--\":1157:1235   */\n      tag_278\n        /* \"--CODEGEN--\":1172:1234   */\n      tag_266\n        /* \"--CODEGEN--\":1227:1233   */\n      dup3\n        /* \"--CODEGEN--\":1172:1234   */\n      jump(tag_280)\n        /* \"--CODEGEN--\":1157:1235   */\n    tag_278:\n        /* \"--CODEGEN--\":1148:1235   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":1252:1257   */\n      dup2\n        /* \"--CODEGEN--\":1311:1317   */\n      dup4\n        /* \"--CODEGEN--\":1358:1361   */\n      dup6\n        /* \"--CODEGEN--\":1350:1354   */\n      0x20\n        /* \"--CODEGEN--\":1342:1348   */\n      dup5\n        /* \"--CODEGEN--\":1338:1355   */\n      mul\n        /* \"--CODEGEN--\":1333:1336   */\n      dup3\n        /* \"--CODEGEN--\":1329:1356   */\n      add\n        /* \"--CODEGEN--\":1326:1362   */\n      gt\n        /* \"--CODEGEN--\":1323:1325   */\n      iszero\n      tag_281\n      jumpi\n        /* \"--CODEGEN--\":1375:1376   */\n      0x00\n        /* \"--CODEGEN--\":1372:1373   */\n      dup1\n        /* \"--CODEGEN--\":1365:1377   */\n      revert\n        /* \"--CODEGEN--\":1323:1325   */\n    tag_281:\n        /* \"--CODEGEN--\":1400:1401   */\n      0x00\n        /* \"--CODEGEN--\":1385:1591   */\n    tag_282:\n        /* \"--CODEGEN--\":1410:1416   */\n      dup4\n        /* \"--CODEGEN--\":1407:1408   */\n      dup2\n        /* \"--CODEGEN--\":1404:1417   */\n      lt\n        /* \"--CODEGEN--\":1385:1591   */\n      iszero\n      tag_272\n      jumpi\n        /* \"--CODEGEN--\":1468:1471   */\n      dup2\n        /* \"--CODEGEN--\":1490:1527   */\n      tag_285\n        /* \"--CODEGEN--\":1523:1526   */\n      dup9\n        /* \"--CODEGEN--\":1511:1521   */\n      dup3\n        /* \"--CODEGEN--\":1490:1527   */\n      jump(tag_286)\n    tag_285:\n        /* \"--CODEGEN--\":1478:1528   */\n      dup5\n      mstore\n      pop\n        /* \"--CODEGEN--\":1551:1555   */\n      0x20\n        /* \"--CODEGEN--\":1542:1556   */\n      swap3\n      dup4\n      add\n      swap3\n        /* \"--CODEGEN--\":1570:1584   */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n        /* \"--CODEGEN--\":1432:1433   */\n      0x01\n        /* \"--CODEGEN--\":1425:1434   */\n      add\n        /* \"--CODEGEN--\":1385:1591   */\n      jump(tag_282)\n        /* \"--CODEGEN--\":1605:1739   */\n    tag_288:\n      0x00\n        /* \"--CODEGEN--\":1680:1734   */\n      tag_260\n        /* \"--CODEGEN--\":1726:1732   */\n      dup3\n        /* \"--CODEGEN--\":1713:1733   */\n      calldataload\n        /* \"--CODEGEN--\":1680:1734   */\n      jump(tag_290)\n        /* \"--CODEGEN--\":1747:2183   */\n    tag_292:\n      0x00\n        /* \"--CODEGEN--\":1856:1859   */\n      dup3\n        /* \"--CODEGEN--\":1849:1853   */\n      0x1f\n        /* \"--CODEGEN--\":1841:1847   */\n      dup4\n        /* \"--CODEGEN--\":1837:1854   */\n      add\n        /* \"--CODEGEN--\":1833:1860   */\n      slt\n        /* \"--CODEGEN--\":1823:1825   */\n      tag_293\n      jumpi\n        /* \"--CODEGEN--\":1874:1875   */\n      0x00\n        /* \"--CODEGEN--\":1871:1872   */\n      dup1\n        /* \"--CODEGEN--\":1864:1876   */\n      revert\n        /* \"--CODEGEN--\":1823:1825   */\n    tag_293:\n        /* \"--CODEGEN--\":1904:1910   */\n      dup2\n        /* \"--CODEGEN--\":1898:1911   */\n      mload\n        /* \"--CODEGEN--\":1926:1987   */\n      tag_294\n        /* \"--CODEGEN--\":1941:1986   */\n      tag_266\n        /* \"--CODEGEN--\":1979:1985   */\n      dup3\n        /* \"--CODEGEN--\":1941:1986   */\n      jump(tag_296)\n        /* \"--CODEGEN--\":1926:1987   */\n    tag_294:\n        /* \"--CODEGEN--\":1917:1987   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":2007:2013   */\n      dup1\n        /* \"--CODEGEN--\":2000:2005   */\n      dup3\n        /* \"--CODEGEN--\":1993:2014   */\n      mstore\n        /* \"--CODEGEN--\":2043:2047   */\n      0x20\n        /* \"--CODEGEN--\":2035:2041   */\n      dup4\n        /* \"--CODEGEN--\":2031:2048   */\n      add\n        /* \"--CODEGEN--\":2076:2080   */\n      0x20\n        /* \"--CODEGEN--\":2069:2074   */\n      dup4\n        /* \"--CODEGEN--\":2065:2081   */\n      add\n        /* \"--CODEGEN--\":2111:2114   */\n      dup6\n        /* \"--CODEGEN--\":2102:2108   */\n      dup4\n        /* \"--CODEGEN--\":2097:2100   */\n      dup4\n        /* \"--CODEGEN--\":2093:2109   */\n      add\n        /* \"--CODEGEN--\":2090:2115   */\n      gt\n        /* \"--CODEGEN--\":2087:2089   */\n      iszero\n      tag_297\n      jumpi\n        /* \"--CODEGEN--\":2128:2129   */\n      0x00\n        /* \"--CODEGEN--\":2125:2126   */\n      dup1\n        /* \"--CODEGEN--\":2118:2130   */\n      revert\n        /* \"--CODEGEN--\":2087:2089   */\n    tag_297:\n        /* \"--CODEGEN--\":2138:2177   */\n      tag_298\n        /* \"--CODEGEN--\":2170:2176   */\n      dup4\n        /* \"--CODEGEN--\":2165:2168   */\n      dup3\n        /* \"--CODEGEN--\":2160:2163   */\n      dup5\n        /* \"--CODEGEN--\":2138:2177   */\n      jump(tag_299)\n    tag_298:\n        /* \"--CODEGEN--\":1816:2183   */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":2230:3188   */\n    tag_301:\n      0x00\n        /* \"--CODEGEN--\":2351:2356   */\n      0x0180\n        /* \"--CODEGEN--\":2339:2348   */\n      dup3\n        /* \"--CODEGEN--\":2334:2337   */\n      dup5\n        /* \"--CODEGEN--\":2330:2349   */\n      sub\n        /* \"--CODEGEN--\":2326:2357   */\n      slt\n        /* \"--CODEGEN--\":2323:2325   */\n      iszero\n      tag_302\n      jumpi\n        /* \"--CODEGEN--\":2370:2371   */\n      0x00\n        /* \"--CODEGEN--\":2367:2368   */\n      dup1\n        /* \"--CODEGEN--\":2360:2372   */\n      revert\n        /* \"--CODEGEN--\":2323:2325   */\n    tag_302:\n        /* \"--CODEGEN--\":2388:2408   */\n      tag_303\n        /* \"--CODEGEN--\":2403:2407   */\n      0x80\n        /* \"--CODEGEN--\":2388:2408   */\n      jump(tag_268)\n    tag_303:\n        /* \"--CODEGEN--\":2458:2482   */\n      dup3\n      mload\n        /* \"--CODEGEN--\":2379:2408   */\n      swap1\n      swap2\n      pop\n        /* \"--CODEGEN--\":2502:2520   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":2491:2521   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":2488:2490   */\n      iszero\n      tag_304\n      jumpi\n        /* \"--CODEGEN--\":2534:2535   */\n      0x00\n        /* \"--CODEGEN--\":2531:2532   */\n      dup1\n        /* \"--CODEGEN--\":2524:2536   */\n      revert\n        /* \"--CODEGEN--\":2488:2490   */\n    tag_304:\n        /* \"--CODEGEN--\":2568:2634   */\n      tag_305\n        /* \"--CODEGEN--\":2630:2633   */\n      dup5\n        /* \"--CODEGEN--\":2621:2627   */\n      dup3\n        /* \"--CODEGEN--\":2610:2619   */\n      dup6\n        /* \"--CODEGEN--\":2606:2628   */\n      add\n        /* \"--CODEGEN--\":2568:2634   */\n      jump(tag_292)\n    tag_305:\n        /* \"--CODEGEN--\":2544:2635   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":2700:2702   */\n      0x20\n        /* \"--CODEGEN--\":2733:2821   */\n      tag_306\n        /* \"--CODEGEN--\":2817:2820   */\n      dup5\n        /* \"--CODEGEN--\":2793:2815   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":2733:2821   */\n      jump(tag_307)\n    tag_306:\n        /* \"--CODEGEN--\":2726:2730   */\n      0x20\n        /* \"--CODEGEN--\":2719:2724   */\n      dup4\n        /* \"--CODEGEN--\":2715:2731   */\n      add\n        /* \"--CODEGEN--\":2708:2822   */\n      mstore\n        /* \"--CODEGEN--\":2656:2833   */\n      pop\n        /* \"--CODEGEN--\":2885:2888   */\n      0xc0\n        /* \"--CODEGEN--\":2919:3007   */\n      tag_308\n        /* \"--CODEGEN--\":3003:3006   */\n      dup5\n        /* \"--CODEGEN--\":2994:3000   */\n      dup3\n        /* \"--CODEGEN--\":2983:2992   */\n      dup6\n        /* \"--CODEGEN--\":2979:3001   */\n      add\n        /* \"--CODEGEN--\":2919:3007   */\n      jump(tag_307)\n    tag_308:\n        /* \"--CODEGEN--\":2912:2916   */\n      0x40\n        /* \"--CODEGEN--\":2905:2910   */\n      dup4\n        /* \"--CODEGEN--\":2901:2917   */\n      add\n        /* \"--CODEGEN--\":2894:3008   */\n      mstore\n        /* \"--CODEGEN--\":2843:3019   */\n      pop\n        /* \"--CODEGEN--\":3073:3076   */\n      0x0160\n        /* \"--CODEGEN--\":3107:3166   */\n      tag_309\n        /* \"--CODEGEN--\":3162:3165   */\n      dup5\n        /* \"--CODEGEN--\":3153:3159   */\n      dup3\n        /* \"--CODEGEN--\":3142:3151   */\n      dup6\n        /* \"--CODEGEN--\":3138:3160   */\n      add\n        /* \"--CODEGEN--\":3107:3166   */\n      jump(tag_310)\n    tag_309:\n        /* \"--CODEGEN--\":3100:3104   */\n      0x60\n        /* \"--CODEGEN--\":3093:3098   */\n      dup4\n        /* \"--CODEGEN--\":3089:3105   */\n      add\n        /* \"--CODEGEN--\":3082:3167   */\n      mstore\n        /* \"--CODEGEN--\":3029:3178   */\n      pop\n        /* \"--CODEGEN--\":2317:3188   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":3241:4220   */\n    tag_307:\n      0x00\n        /* \"--CODEGEN--\":3369:3373   */\n      0xa0\n        /* \"--CODEGEN--\":3357:3366   */\n      dup3\n        /* \"--CODEGEN--\":3352:3355   */\n      dup5\n        /* \"--CODEGEN--\":3348:3367   */\n      sub\n        /* \"--CODEGEN--\":3344:3374   */\n      slt\n        /* \"--CODEGEN--\":3341:3343   */\n      iszero\n      tag_312\n      jumpi\n        /* \"--CODEGEN--\":3387:3388   */\n      0x00\n        /* \"--CODEGEN--\":3384:3385   */\n      dup1\n        /* \"--CODEGEN--\":3377:3389   */\n      revert\n        /* \"--CODEGEN--\":3341:3343   */\n    tag_312:\n        /* \"--CODEGEN--\":3405:3425   */\n      tag_313\n        /* \"--CODEGEN--\":3420:3424   */\n      0xa0\n        /* \"--CODEGEN--\":3405:3425   */\n      jump(tag_268)\n    tag_313:\n        /* \"--CODEGEN--\":3396:3425   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":3477:3478   */\n      0x00\n        /* \"--CODEGEN--\":3508:3567   */\n      tag_314\n        /* \"--CODEGEN--\":3563:3566   */\n      dup5\n        /* \"--CODEGEN--\":3543:3552   */\n      dup5\n        /* \"--CODEGEN--\":3508:3567   */\n      jump(tag_310)\n    tag_314:\n        /* \"--CODEGEN--\":3484:3568   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":3632:3634   */\n      0x20\n        /* \"--CODEGEN--\":3665:3724   */\n      tag_315\n        /* \"--CODEGEN--\":3720:3723   */\n      dup5\n        /* \"--CODEGEN--\":3696:3718   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":3665:3724   */\n      jump(tag_310)\n    tag_315:\n        /* \"--CODEGEN--\":3658:3662   */\n      0x20\n        /* \"--CODEGEN--\":3651:3656   */\n      dup4\n        /* \"--CODEGEN--\":3647:3663   */\n      add\n        /* \"--CODEGEN--\":3640:3725   */\n      mstore\n        /* \"--CODEGEN--\":3589:3736   */\n      pop\n        /* \"--CODEGEN--\":3786:3788   */\n      0x40\n        /* \"--CODEGEN--\":3819:3878   */\n      tag_316\n        /* \"--CODEGEN--\":3874:3877   */\n      dup5\n        /* \"--CODEGEN--\":3865:3871   */\n      dup3\n        /* \"--CODEGEN--\":3854:3863   */\n      dup6\n        /* \"--CODEGEN--\":3850:3872   */\n      add\n        /* \"--CODEGEN--\":3819:3878   */\n      jump(tag_310)\n    tag_316:\n        /* \"--CODEGEN--\":3812:3816   */\n      0x40\n        /* \"--CODEGEN--\":3805:3810   */\n      dup4\n        /* \"--CODEGEN--\":3801:3817   */\n      add\n        /* \"--CODEGEN--\":3794:3879   */\n      mstore\n        /* \"--CODEGEN--\":3746:3890   */\n      pop\n        /* \"--CODEGEN--\":3942:3944   */\n      0x60\n        /* \"--CODEGEN--\":3975:4034   */\n      tag_317\n        /* \"--CODEGEN--\":4030:4033   */\n      dup5\n        /* \"--CODEGEN--\":4021:4027   */\n      dup3\n        /* \"--CODEGEN--\":4010:4019   */\n      dup6\n        /* \"--CODEGEN--\":4006:4028   */\n      add\n        /* \"--CODEGEN--\":3975:4034   */\n      jump(tag_310)\n    tag_317:\n        /* \"--CODEGEN--\":3968:3972   */\n      0x60\n        /* \"--CODEGEN--\":3961:3966   */\n      dup4\n        /* \"--CODEGEN--\":3957:3973   */\n      add\n        /* \"--CODEGEN--\":3950:4035   */\n      mstore\n        /* \"--CODEGEN--\":3900:4046   */\n      pop\n        /* \"--CODEGEN--\":4105:4108   */\n      0x80\n        /* \"--CODEGEN--\":4139:4198   */\n      tag_318\n        /* \"--CODEGEN--\":4194:4197   */\n      dup5\n        /* \"--CODEGEN--\":4185:4191   */\n      dup3\n        /* \"--CODEGEN--\":4174:4183   */\n      dup6\n        /* \"--CODEGEN--\":4170:4192   */\n      add\n        /* \"--CODEGEN--\":4139:4198   */\n      jump(tag_310)\n    tag_318:\n        /* \"--CODEGEN--\":4132:4136   */\n      0x80\n        /* \"--CODEGEN--\":4125:4130   */\n      dup4\n        /* \"--CODEGEN--\":4121:4137   */\n      add\n        /* \"--CODEGEN--\":4114:4199   */\n      mstore\n        /* \"--CODEGEN--\":4056:4210   */\n      pop\n        /* \"--CODEGEN--\":3335:4220   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":4263:5906   */\n    tag_320:\n      0x00\n        /* \"--CODEGEN--\":4385:4390   */\n      0x0100\n        /* \"--CODEGEN--\":4373:4382   */\n      dup3\n        /* \"--CODEGEN--\":4368:4371   */\n      dup5\n        /* \"--CODEGEN--\":4364:4383   */\n      sub\n        /* \"--CODEGEN--\":4360:4391   */\n      slt\n        /* \"--CODEGEN--\":4357:4359   */\n      iszero\n      tag_321\n      jumpi\n        /* \"--CODEGEN--\":4404:4405   */\n      0x00\n        /* \"--CODEGEN--\":4401:4402   */\n      dup1\n        /* \"--CODEGEN--\":4394:4406   */\n      revert\n        /* \"--CODEGEN--\":4357:4359   */\n    tag_321:\n        /* \"--CODEGEN--\":4422:4443   */\n      tag_322\n        /* \"--CODEGEN--\":4437:4442   */\n      0x0100\n        /* \"--CODEGEN--\":4422:4443   */\n      jump(tag_268)\n    tag_322:\n        /* \"--CODEGEN--\":4493:4517   */\n      dup3\n      mload\n        /* \"--CODEGEN--\":4413:4443   */\n      swap1\n      swap2\n      pop\n        /* \"--CODEGEN--\":4537:4555   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":4526:4556   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":4523:4525   */\n      iszero\n      tag_323\n      jumpi\n        /* \"--CODEGEN--\":4569:4570   */\n      0x00\n        /* \"--CODEGEN--\":4566:4567   */\n      dup1\n        /* \"--CODEGEN--\":4559:4571   */\n      revert\n        /* \"--CODEGEN--\":4523:4525   */\n    tag_323:\n        /* \"--CODEGEN--\":4603:4669   */\n      tag_324\n        /* \"--CODEGEN--\":4665:4668   */\n      dup5\n        /* \"--CODEGEN--\":4656:4662   */\n      dup3\n        /* \"--CODEGEN--\":4645:4654   */\n      dup6\n        /* \"--CODEGEN--\":4641:4663   */\n      add\n        /* \"--CODEGEN--\":4603:4669   */\n      jump(tag_292)\n    tag_324:\n        /* \"--CODEGEN--\":4579:4670   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":4755:4757   */\n      0x20\n        /* \"--CODEGEN--\":4740:4758   */\n      dup3\n      add\n        /* \"--CODEGEN--\":4734:4759   */\n      mload\n        /* \"--CODEGEN--\":4779:4797   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":4768:4798   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":4765:4767   */\n      iszero\n      tag_325\n      jumpi\n        /* \"--CODEGEN--\":4811:4812   */\n      0x00\n        /* \"--CODEGEN--\":4808:4809   */\n      dup1\n        /* \"--CODEGEN--\":4801:4813   */\n      revert\n        /* \"--CODEGEN--\":4765:4767   */\n    tag_325:\n        /* \"--CODEGEN--\":4846:4927   */\n      tag_326\n        /* \"--CODEGEN--\":4923:4926   */\n      dup5\n        /* \"--CODEGEN--\":4914:4920   */\n      dup3\n        /* \"--CODEGEN--\":4903:4912   */\n      dup6\n        /* \"--CODEGEN--\":4899:4921   */\n      add\n        /* \"--CODEGEN--\":4846:4927   */\n      jump(tag_301)\n    tag_326:\n        /* \"--CODEGEN--\":4839:4843   */\n      0x20\n        /* \"--CODEGEN--\":4832:4837   */\n      dup4\n        /* \"--CODEGEN--\":4828:4844   */\n      add\n        /* \"--CODEGEN--\":4821:4928   */\n      mstore\n        /* \"--CODEGEN--\":4691:4939   */\n      pop\n        /* \"--CODEGEN--\":4995:4997   */\n      0x40\n        /* \"--CODEGEN--\":5028:5087   */\n      tag_327\n        /* \"--CODEGEN--\":5083:5086   */\n      dup5\n        /* \"--CODEGEN--\":5074:5080   */\n      dup3\n        /* \"--CODEGEN--\":5063:5072   */\n      dup6\n        /* \"--CODEGEN--\":5059:5081   */\n      add\n        /* \"--CODEGEN--\":5028:5087   */\n      jump(tag_310)\n    tag_327:\n        /* \"--CODEGEN--\":5021:5025   */\n      0x40\n        /* \"--CODEGEN--\":5014:5019   */\n      dup4\n        /* \"--CODEGEN--\":5010:5026   */\n      add\n        /* \"--CODEGEN--\":5003:5088   */\n      mstore\n        /* \"--CODEGEN--\":4949:5099   */\n      pop\n        /* \"--CODEGEN--\":5156:5158   */\n      0x60\n        /* \"--CODEGEN--\":5189:5248   */\n      tag_328\n        /* \"--CODEGEN--\":5244:5247   */\n      dup5\n        /* \"--CODEGEN--\":5235:5241   */\n      dup3\n        /* \"--CODEGEN--\":5224:5233   */\n      dup6\n        /* \"--CODEGEN--\":5220:5242   */\n      add\n        /* \"--CODEGEN--\":5189:5248   */\n      jump(tag_310)\n    tag_328:\n        /* \"--CODEGEN--\":5182:5186   */\n      0x60\n        /* \"--CODEGEN--\":5175:5180   */\n      dup4\n        /* \"--CODEGEN--\":5171:5187   */\n      add\n        /* \"--CODEGEN--\":5164:5249   */\n      mstore\n        /* \"--CODEGEN--\":5109:5260   */\n      pop\n        /* \"--CODEGEN--\":5314:5317   */\n      0x80\n        /* \"--CODEGEN--\":5348:5407   */\n      tag_329\n        /* \"--CODEGEN--\":5403:5406   */\n      dup5\n        /* \"--CODEGEN--\":5394:5400   */\n      dup3\n        /* \"--CODEGEN--\":5383:5392   */\n      dup6\n        /* \"--CODEGEN--\":5379:5401   */\n      add\n        /* \"--CODEGEN--\":5348:5407   */\n      jump(tag_310)\n    tag_329:\n        /* \"--CODEGEN--\":5341:5345   */\n      0x80\n        /* \"--CODEGEN--\":5334:5339   */\n      dup4\n        /* \"--CODEGEN--\":5330:5346   */\n      add\n        /* \"--CODEGEN--\":5323:5408   */\n      mstore\n        /* \"--CODEGEN--\":5270:5419   */\n      pop\n        /* \"--CODEGEN--\":5470:5473   */\n      0xa0\n        /* \"--CODEGEN--\":5504:5563   */\n      tag_330\n        /* \"--CODEGEN--\":5559:5562   */\n      dup5\n        /* \"--CODEGEN--\":5550:5556   */\n      dup3\n        /* \"--CODEGEN--\":5539:5548   */\n      dup6\n        /* \"--CODEGEN--\":5535:5557   */\n      add\n        /* \"--CODEGEN--\":5504:5563   */\n      jump(tag_310)\n    tag_330:\n        /* \"--CODEGEN--\":5497:5501   */\n      0xa0\n        /* \"--CODEGEN--\":5490:5495   */\n      dup4\n        /* \"--CODEGEN--\":5486:5502   */\n      add\n        /* \"--CODEGEN--\":5479:5564   */\n      mstore\n        /* \"--CODEGEN--\":5429:5575   */\n      pop\n        /* \"--CODEGEN--\":5627:5630   */\n      0xc0\n        /* \"--CODEGEN--\":5661:5720   */\n      tag_331\n        /* \"--CODEGEN--\":5716:5719   */\n      dup5\n        /* \"--CODEGEN--\":5707:5713   */\n      dup3\n        /* \"--CODEGEN--\":5696:5705   */\n      dup6\n        /* \"--CODEGEN--\":5692:5714   */\n      add\n        /* \"--CODEGEN--\":5661:5720   */\n      jump(tag_310)\n    tag_331:\n        /* \"--CODEGEN--\":5654:5658   */\n      0xc0\n        /* \"--CODEGEN--\":5647:5652   */\n      dup4\n        /* \"--CODEGEN--\":5643:5659   */\n      add\n        /* \"--CODEGEN--\":5636:5721   */\n      mstore\n        /* \"--CODEGEN--\":5585:5732   */\n      pop\n        /* \"--CODEGEN--\":5791:5794   */\n      0xe0\n        /* \"--CODEGEN--\":5825:5884   */\n      tag_332\n        /* \"--CODEGEN--\":5880:5883   */\n      dup5\n        /* \"--CODEGEN--\":5871:5877   */\n      dup3\n        /* \"--CODEGEN--\":5860:5869   */\n      dup6\n        /* \"--CODEGEN--\":5856:5878   */\n      add\n        /* \"--CODEGEN--\":5825:5884   */\n      jump(tag_310)\n    tag_332:\n        /* \"--CODEGEN--\":5818:5822   */\n      0xe0\n        /* \"--CODEGEN--\":5811:5816   */\n      dup4\n        /* \"--CODEGEN--\":5807:5823   */\n      add\n        /* \"--CODEGEN--\":5800:5885   */\n      mstore\n        /* \"--CODEGEN--\":5742:5896   */\n      pop\n        /* \"--CODEGEN--\":4351:5906   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":5955:7011   */\n    tag_274:\n      0x00\n        /* \"--CODEGEN--\":6068:6072   */\n      0xc0\n        /* \"--CODEGEN--\":6056:6065   */\n      dup3\n        /* \"--CODEGEN--\":6051:6054   */\n      dup5\n        /* \"--CODEGEN--\":6047:6066   */\n      sub\n        /* \"--CODEGEN--\":6043:6073   */\n      slt\n        /* \"--CODEGEN--\":6040:6042   */\n      iszero\n      tag_334\n      jumpi\n        /* \"--CODEGEN--\":6086:6087   */\n      0x00\n        /* \"--CODEGEN--\":6083:6084   */\n      dup1\n        /* \"--CODEGEN--\":6076:6088   */\n      revert\n        /* \"--CODEGEN--\":6040:6042   */\n    tag_334:\n        /* \"--CODEGEN--\":6104:6124   */\n      tag_335\n        /* \"--CODEGEN--\":6119:6123   */\n      0xc0\n        /* \"--CODEGEN--\":6104:6124   */\n      jump(tag_268)\n    tag_335:\n        /* \"--CODEGEN--\":6095:6124   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":6176:6177   */\n      0x00\n        /* \"--CODEGEN--\":6207:6256   */\n      tag_336\n        /* \"--CODEGEN--\":6252:6255   */\n      dup5\n        /* \"--CODEGEN--\":6232:6241   */\n      dup5\n        /* \"--CODEGEN--\":6207:6256   */\n      jump(tag_286)\n    tag_336:\n        /* \"--CODEGEN--\":6183:6257   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":6320:6322   */\n      0x20\n        /* \"--CODEGEN--\":6353:6401   */\n      tag_337\n        /* \"--CODEGEN--\":6397:6400   */\n      dup5\n        /* \"--CODEGEN--\":6373:6395   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":6353:6401   */\n      jump(tag_338)\n    tag_337:\n        /* \"--CODEGEN--\":6346:6350   */\n      0x20\n        /* \"--CODEGEN--\":6339:6344   */\n      dup4\n        /* \"--CODEGEN--\":6335:6351   */\n      add\n        /* \"--CODEGEN--\":6328:6402   */\n      mstore\n        /* \"--CODEGEN--\":6278:6413   */\n      pop\n        /* \"--CODEGEN--\":6466:6468   */\n      0x40\n        /* \"--CODEGEN--\":6499:6547   */\n      tag_339\n        /* \"--CODEGEN--\":6543:6546   */\n      dup5\n        /* \"--CODEGEN--\":6534:6540   */\n      dup3\n        /* \"--CODEGEN--\":6523:6532   */\n      dup6\n        /* \"--CODEGEN--\":6519:6541   */\n      add\n        /* \"--CODEGEN--\":6499:6547   */\n      jump(tag_338)\n    tag_339:\n        /* \"--CODEGEN--\":6492:6496   */\n      0x40\n        /* \"--CODEGEN--\":6485:6490   */\n      dup4\n        /* \"--CODEGEN--\":6481:6497   */\n      add\n        /* \"--CODEGEN--\":6474:6548   */\n      mstore\n        /* \"--CODEGEN--\":6423:6559   */\n      pop\n        /* \"--CODEGEN--\":6609:6611   */\n      0x60\n        /* \"--CODEGEN--\":6642:6690   */\n      tag_340\n        /* \"--CODEGEN--\":6686:6689   */\n      dup5\n        /* \"--CODEGEN--\":6677:6683   */\n      dup3\n        /* \"--CODEGEN--\":6666:6675   */\n      dup6\n        /* \"--CODEGEN--\":6662:6684   */\n      add\n        /* \"--CODEGEN--\":6642:6690   */\n      jump(tag_338)\n    tag_340:\n        /* \"--CODEGEN--\":6635:6639   */\n      0x60\n        /* \"--CODEGEN--\":6628:6633   */\n      dup4\n        /* \"--CODEGEN--\":6624:6640   */\n      add\n        /* \"--CODEGEN--\":6617:6691   */\n      mstore\n        /* \"--CODEGEN--\":6569:6702   */\n      pop\n        /* \"--CODEGEN--\":6754:6757   */\n      0x80\n        /* \"--CODEGEN--\":6788:6836   */\n      tag_341\n        /* \"--CODEGEN--\":6832:6835   */\n      dup5\n        /* \"--CODEGEN--\":6823:6829   */\n      dup3\n        /* \"--CODEGEN--\":6812:6821   */\n      dup6\n        /* \"--CODEGEN--\":6808:6830   */\n      add\n        /* \"--CODEGEN--\":6788:6836   */\n      jump(tag_338)\n    tag_341:\n        /* \"--CODEGEN--\":6781:6785   */\n      0x80\n        /* \"--CODEGEN--\":6774:6779   */\n      dup4\n        /* \"--CODEGEN--\":6770:6786   */\n      add\n        /* \"--CODEGEN--\":6763:6837   */\n      mstore\n        /* \"--CODEGEN--\":6712:6848   */\n      pop\n        /* \"--CODEGEN--\":6907:6910   */\n      0xa0\n        /* \"--CODEGEN--\":6941:6989   */\n      tag_342\n        /* \"--CODEGEN--\":6985:6988   */\n      dup5\n        /* \"--CODEGEN--\":6976:6982   */\n      dup3\n        /* \"--CODEGEN--\":6965:6974   */\n      dup6\n        /* \"--CODEGEN--\":6961:6983   */\n      add\n        /* \"--CODEGEN--\":6941:6989   */\n      jump(tag_338)\n    tag_342:\n        /* \"--CODEGEN--\":6934:6938   */\n      0xa0\n        /* \"--CODEGEN--\":6927:6932   */\n      dup4\n        /* \"--CODEGEN--\":6923:6939   */\n      add\n        /* \"--CODEGEN--\":6916:6990   */\n      mstore\n        /* \"--CODEGEN--\":6858:7001   */\n      pop\n        /* \"--CODEGEN--\":6034:7011   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":7018:7134   */\n    tag_338:\n      0x00\n        /* \"--CODEGEN--\":7084:7129   */\n      tag_260\n        /* \"--CODEGEN--\":7121:7127   */\n      dup3\n        /* \"--CODEGEN--\":7108:7128   */\n      calldataload\n        /* \"--CODEGEN--\":7084:7129   */\n      jump(tag_513)\n        /* \"--CODEGEN--\":7141:7261   */\n    tag_310:\n      0x00\n        /* \"--CODEGEN--\":7218:7256   */\n      tag_260\n        /* \"--CODEGEN--\":7248:7254   */\n      dup3\n        /* \"--CODEGEN--\":7242:7255   */\n      mload\n        /* \"--CODEGEN--\":7218:7256   */\n      jump(tag_513)\n        /* \"--CODEGEN--\":7268:7386   */\n    tag_286:\n      0x00\n        /* \"--CODEGEN--\":7335:7381   */\n      tag_260\n        /* \"--CODEGEN--\":7373:7379   */\n      dup3\n        /* \"--CODEGEN--\":7360:7380   */\n      calldataload\n        /* \"--CODEGEN--\":7335:7381   */\n      jump(tag_413)\n        /* \"--CODEGEN--\":7393:7515   */\n    tag_352:\n      0x00\n        /* \"--CODEGEN--\":7471:7510   */\n      tag_260\n        /* \"--CODEGEN--\":7502:7508   */\n      dup3\n        /* \"--CODEGEN--\":7496:7509   */\n      mload\n        /* \"--CODEGEN--\":7471:7510   */\n      jump(tag_413)\n        /* \"--CODEGEN--\":7522:7763   */\n    tag_24:\n      0x00\n        /* \"--CODEGEN--\":7626:7628   */\n      0x20\n        /* \"--CODEGEN--\":7614:7623   */\n      dup3\n        /* \"--CODEGEN--\":7605:7612   */\n      dup5\n        /* \"--CODEGEN--\":7601:7624   */\n      sub\n        /* \"--CODEGEN--\":7597:7629   */\n      slt\n        /* \"--CODEGEN--\":7594:7596   */\n      iszero\n      tag_355\n      jumpi\n        /* \"--CODEGEN--\":7642:7643   */\n      0x00\n        /* \"--CODEGEN--\":7639:7640   */\n      dup1\n        /* \"--CODEGEN--\":7632:7644   */\n      revert\n        /* \"--CODEGEN--\":7594:7596   */\n    tag_355:\n        /* \"--CODEGEN--\":7677:7678   */\n      0x00\n        /* \"--CODEGEN--\":7694:7747   */\n      tag_356\n        /* \"--CODEGEN--\":7739:7746   */\n      dup5\n        /* \"--CODEGEN--\":7719:7728   */\n      dup5\n        /* \"--CODEGEN--\":7694:7747   */\n      jump(tag_259)\n    tag_356:\n        /* \"--CODEGEN--\":7684:7747   */\n      swap5\n        /* \"--CODEGEN--\":7588:7763   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":7770:8195   */\n    tag_41:\n      0x00\n        /* \"--CODEGEN--\":7923:7925   */\n      0x20\n        /* \"--CODEGEN--\":7911:7920   */\n      dup3\n        /* \"--CODEGEN--\":7902:7909   */\n      dup5\n        /* \"--CODEGEN--\":7898:7921   */\n      sub\n        /* \"--CODEGEN--\":7894:7926   */\n      slt\n        /* \"--CODEGEN--\":7891:7893   */\n      iszero\n      tag_358\n      jumpi\n        /* \"--CODEGEN--\":7939:7940   */\n      0x00\n        /* \"--CODEGEN--\":7936:7937   */\n      dup1\n        /* \"--CODEGEN--\":7929:7941   */\n      revert\n        /* \"--CODEGEN--\":7891:7893   */\n    tag_358:\n        /* \"--CODEGEN--\":7974:8005   */\n      dup2\n      calldataload\n        /* \"--CODEGEN--\":8025:8043   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":8014:8044   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":8011:8013   */\n      iszero\n      tag_359\n      jumpi\n        /* \"--CODEGEN--\":8057:8058   */\n      0x00\n        /* \"--CODEGEN--\":8054:8055   */\n      dup1\n        /* \"--CODEGEN--\":8047:8059   */\n      revert\n        /* \"--CODEGEN--\":8011:8013   */\n    tag_359:\n        /* \"--CODEGEN--\":8077:8179   */\n      tag_356\n        /* \"--CODEGEN--\":8171:8178   */\n      dup5\n        /* \"--CODEGEN--\":8162:8168   */\n      dup3\n        /* \"--CODEGEN--\":8151:8160   */\n      dup6\n        /* \"--CODEGEN--\":8147:8169   */\n      add\n        /* \"--CODEGEN--\":8077:8179   */\n      jump(tag_263)\n        /* \"--CODEGEN--\":8202:8490   */\n    tag_37:\n      0x00\n        /* \"--CODEGEN--\":8329:8332   */\n      0xa0\n        /* \"--CODEGEN--\":8317:8326   */\n      dup3\n        /* \"--CODEGEN--\":8308:8315   */\n      dup5\n        /* \"--CODEGEN--\":8304:8327   */\n      sub\n        /* \"--CODEGEN--\":8300:8333   */\n      slt\n        /* \"--CODEGEN--\":8297:8299   */\n      iszero\n      tag_362\n      jumpi\n        /* \"--CODEGEN--\":8346:8347   */\n      0x00\n        /* \"--CODEGEN--\":8343:8344   */\n      dup1\n        /* \"--CODEGEN--\":8336:8348   */\n      revert\n        /* \"--CODEGEN--\":8297:8299   */\n    tag_362:\n        /* \"--CODEGEN--\":8381:8382   */\n      0x00\n        /* \"--CODEGEN--\":8398:8474   */\n      tag_356\n        /* \"--CODEGEN--\":8466:8473   */\n      dup5\n        /* \"--CODEGEN--\":8446:8455   */\n      dup5\n        /* \"--CODEGEN--\":8398:8474   */\n      jump(tag_276)\n        /* \"--CODEGEN--\":8497:8754   */\n    tag_33:\n      0x00\n        /* \"--CODEGEN--\":8609:8611   */\n      0x20\n        /* \"--CODEGEN--\":8597:8606   */\n      dup3\n        /* \"--CODEGEN--\":8588:8595   */\n      dup5\n        /* \"--CODEGEN--\":8584:8607   */\n      sub\n        /* \"--CODEGEN--\":8580:8612   */\n      slt\n        /* \"--CODEGEN--\":8577:8579   */\n      iszero\n      tag_365\n      jumpi\n        /* \"--CODEGEN--\":8625:8626   */\n      0x00\n        /* \"--CODEGEN--\":8622:8623   */\n      dup1\n        /* \"--CODEGEN--\":8615:8627   */\n      revert\n        /* \"--CODEGEN--\":8577:8579   */\n    tag_365:\n        /* \"--CODEGEN--\":8660:8661   */\n      0x00\n        /* \"--CODEGEN--\":8677:8738   */\n      tag_356\n        /* \"--CODEGEN--\":8730:8737   */\n      dup5\n        /* \"--CODEGEN--\":8710:8719   */\n      dup5\n        /* \"--CODEGEN--\":8677:8738   */\n      jump(tag_288)\n        /* \"--CODEGEN--\":8761:9147   */\n    tag_113:\n      0x00\n        /* \"--CODEGEN--\":8898:8900   */\n      0x20\n        /* \"--CODEGEN--\":8886:8895   */\n      dup3\n        /* \"--CODEGEN--\":8877:8884   */\n      dup5\n        /* \"--CODEGEN--\":8873:8896   */\n      sub\n        /* \"--CODEGEN--\":8869:8901   */\n      slt\n        /* \"--CODEGEN--\":8866:8868   */\n      iszero\n      tag_368\n      jumpi\n        /* \"--CODEGEN--\":8914:8915   */\n      0x00\n        /* \"--CODEGEN--\":8911:8912   */\n      dup1\n        /* \"--CODEGEN--\":8904:8916   */\n      revert\n        /* \"--CODEGEN--\":8866:8868   */\n    tag_368:\n        /* \"--CODEGEN--\":8949:8973   */\n      dup2\n      mload\n        /* \"--CODEGEN--\":8993:9011   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":8982:9012   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":8979:8981   */\n      iszero\n      tag_369\n      jumpi\n        /* \"--CODEGEN--\":9025:9026   */\n      0x00\n        /* \"--CODEGEN--\":9022:9023   */\n      dup1\n        /* \"--CODEGEN--\":9015:9027   */\n      revert\n        /* \"--CODEGEN--\":8979:8981   */\n    tag_369:\n        /* \"--CODEGEN--\":9045:9131   */\n      tag_356\n        /* \"--CODEGEN--\":9123:9130   */\n      dup5\n        /* \"--CODEGEN--\":9114:9120   */\n      dup3\n        /* \"--CODEGEN--\":9103:9112   */\n      dup6\n        /* \"--CODEGEN--\":9099:9121   */\n      add\n        /* \"--CODEGEN--\":9045:9131   */\n      jump(tag_320)\n        /* \"--CODEGEN--\":9154:9417   */\n    tag_165:\n      0x00\n        /* \"--CODEGEN--\":9269:9271   */\n      0x20\n        /* \"--CODEGEN--\":9257:9266   */\n      dup3\n        /* \"--CODEGEN--\":9248:9255   */\n      dup5\n        /* \"--CODEGEN--\":9244:9267   */\n      sub\n        /* \"--CODEGEN--\":9240:9272   */\n      slt\n        /* \"--CODEGEN--\":9237:9239   */\n      iszero\n      tag_372\n      jumpi\n        /* \"--CODEGEN--\":9285:9286   */\n      0x00\n        /* \"--CODEGEN--\":9282:9283   */\n      dup1\n        /* \"--CODEGEN--\":9275:9287   */\n      revert\n        /* \"--CODEGEN--\":9237:9239   */\n    tag_372:\n        /* \"--CODEGEN--\":9320:9321   */\n      0x00\n        /* \"--CODEGEN--\":9337:9401   */\n      tag_356\n        /* \"--CODEGEN--\":9393:9400   */\n      dup5\n        /* \"--CODEGEN--\":9373:9382   */\n      dup5\n        /* \"--CODEGEN--\":9337:9401   */\n      jump(tag_352)\n        /* \"--CODEGEN--\":9425:9698   */\n    tag_375:\n      0x00\n        /* \"--CODEGEN--\":9560:9658   */\n      tag_376\n        /* \"--CODEGEN--\":9654:9657   */\n      dup4\n        /* \"--CODEGEN--\":9646:9652   */\n      dup4\n        /* \"--CODEGEN--\":9560:9658   */\n      jump(tag_471)\n    tag_376:\n      pop\n      pop\n        /* \"--CODEGEN--\":9687:9691   */\n      0xc0\n        /* \"--CODEGEN--\":9678:9692   */\n      add\n      swap1\n        /* \"--CODEGEN--\":9553:9698   */\n      jump\n        /* \"--CODEGEN--\":9707:9880   */\n    tag_379:\n      0x00\n        /* \"--CODEGEN--\":9794:9840   */\n      tag_380\n        /* \"--CODEGEN--\":9836:9839   */\n      dup4\n        /* \"--CODEGEN--\":9828:9834   */\n      dup4\n        /* \"--CODEGEN--\":9794:9840   */\n      jump(tag_381)\n    tag_380:\n      pop\n      pop\n        /* \"--CODEGEN--\":9869:9873   */\n      0x20\n        /* \"--CODEGEN--\":9860:9874   */\n      add\n      swap1\n        /* \"--CODEGEN--\":9787:9880   */\n      jump\n        /* \"--CODEGEN--\":9888:10079   */\n    tag_383:\n        /* \"--CODEGEN--\":10005:10073   */\n      tag_384\n        /* \"--CODEGEN--\":10033:10072   */\n      tag_385\n        /* \"--CODEGEN--\":10066:10071   */\n      dup3\n        /* \"--CODEGEN--\":10033:10072   */\n      jump(tag_391)\n    tag_385:\n        /* \"--CODEGEN--\":10005:10073   */\n      jump(tag_387)\n    tag_384:\n        /* \"--CODEGEN--\":10000:10003   */\n      dup3\n        /* \"--CODEGEN--\":9993:10074   */\n      mstore\n        /* \"--CODEGEN--\":9987:10079   */\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":10086:10206   */\n    tag_389:\n        /* \"--CODEGEN--\":10169:10200   */\n      tag_384\n        /* \"--CODEGEN--\":10194:10199   */\n      dup2\n        /* \"--CODEGEN--\":10169:10200   */\n      jump(tag_391)\n        /* \"--CODEGEN--\":10300:11077   */\n    tag_393:\n      0x00\n        /* \"--CODEGEN--\":10479:10553   */\n      tag_394\n        /* \"--CODEGEN--\":10547:10552   */\n      dup3\n        /* \"--CODEGEN--\":10479:10553   */\n      jump(tag_395)\n    tag_394:\n        /* \"--CODEGEN--\":10566:10666   */\n      tag_396\n        /* \"--CODEGEN--\":10659:10665   */\n      dup2\n        /* \"--CODEGEN--\":10654:10657   */\n      dup6\n        /* \"--CODEGEN--\":10566:10666   */\n      jump(tag_397)\n    tag_396:\n        /* \"--CODEGEN--\":10559:10666   */\n      swap4\n      pop\n        /* \"--CODEGEN--\":10686:10762   */\n      tag_398\n        /* \"--CODEGEN--\":10756:10761   */\n      dup4\n        /* \"--CODEGEN--\":10686:10762   */\n      jump(tag_399)\n    tag_398:\n        /* \"--CODEGEN--\":10783:10784   */\n      0x00\n        /* \"--CODEGEN--\":10768:11055   */\n    tag_400:\n        /* \"--CODEGEN--\":10793:10799   */\n      dup3\n        /* \"--CODEGEN--\":10790:10791   */\n      dup2\n        /* \"--CODEGEN--\":10787:10800   */\n      lt\n        /* \"--CODEGEN--\":10768:11055   */\n      iszero\n      tag_402\n      jumpi\n        /* \"--CODEGEN--\":10840:10951   */\n      tag_403\n        /* \"--CODEGEN--\":10947:10950   */\n      dup7\n        /* \"--CODEGEN--\":10938:10944   */\n      dup4\n        /* \"--CODEGEN--\":10932:10945   */\n      mload\n        /* \"--CODEGEN--\":10840:10951   */\n      jump(tag_375)\n    tag_403:\n        /* \"--CODEGEN--\":10833:10951   */\n      swap6\n      pop\n        /* \"--CODEGEN--\":10968:11048   */\n      tag_404\n        /* \"--CODEGEN--\":11041:11047   */\n      dup3\n        /* \"--CODEGEN--\":10968:11048   */\n      jump(tag_399)\n    tag_404:\n        /* \"--CODEGEN--\":10958:11048   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":10815:10816   */\n      0x01\n        /* \"--CODEGEN--\":10808:10817   */\n      add\n        /* \"--CODEGEN--\":10768:11055   */\n      jump(tag_400)\n    tag_402:\n      pop\n        /* \"--CODEGEN--\":11068:11071   */\n      swap4\n      swap5\n        /* \"--CODEGEN--\":10458:11077   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":11118:11709   */\n    tag_407:\n        /* \"--CODEGEN--\":11251:11303   */\n      tag_408\n        /* \"--CODEGEN--\":11297:11302   */\n      dup2\n        /* \"--CODEGEN--\":11251:11303   */\n      jump(tag_409)\n    tag_408:\n        /* \"--CODEGEN--\":11316:11400   */\n      tag_410\n        /* \"--CODEGEN--\":11393:11399   */\n      dup2\n        /* \"--CODEGEN--\":11388:11391   */\n      dup5\n        /* \"--CODEGEN--\":11316:11400   */\n      jump(tag_411)\n    tag_410:\n        /* \"--CODEGEN--\":11309:11400   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":11420:11474   */\n      tag_412\n        /* \"--CODEGEN--\":11468:11473   */\n      dup3\n        /* \"--CODEGEN--\":11420:11474   */\n      jump(tag_413)\n    tag_412:\n        /* \"--CODEGEN--\":11495:11496   */\n      0x00\n        /* \"--CODEGEN--\":11480:11697   */\n    tag_414:\n        /* \"--CODEGEN--\":11505:11511   */\n      dup3\n        /* \"--CODEGEN--\":11502:11503   */\n      dup2\n        /* \"--CODEGEN--\":11499:11512   */\n      lt\n        /* \"--CODEGEN--\":11480:11697   */\n      iszero\n      tag_416\n      jumpi\n        /* \"--CODEGEN--\":11552:11615   */\n      tag_417\n        /* \"--CODEGEN--\":11611:11614   */\n      dup6\n        /* \"--CODEGEN--\":11602:11608   */\n      dup4\n        /* \"--CODEGEN--\":11596:11609   */\n      mload\n        /* \"--CODEGEN--\":11552:11615   */\n      jump(tag_379)\n    tag_417:\n        /* \"--CODEGEN--\":11545:11615   */\n      swap5\n      pop\n        /* \"--CODEGEN--\":11632:11690   */\n      tag_418\n        /* \"--CODEGEN--\":11683:11689   */\n      dup3\n        /* \"--CODEGEN--\":11632:11690   */\n      jump(tag_399)\n    tag_418:\n        /* \"--CODEGEN--\":11622:11690   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":11527:11528   */\n      0x01\n        /* \"--CODEGEN--\":11520:11529   */\n      add\n        /* \"--CODEGEN--\":11480:11697   */\n      jump(tag_414)\n    tag_416:\n        /* \"--CODEGEN--\":11484:11498   */\n      pop\n        /* \"--CODEGEN--\":11230:11709   */\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":11750:12341   */\n    tag_421:\n        /* \"--CODEGEN--\":11883:11935   */\n      tag_422\n        /* \"--CODEGEN--\":11929:11934   */\n      dup2\n        /* \"--CODEGEN--\":11883:11935   */\n      jump(tag_423)\n    tag_422:\n        /* \"--CODEGEN--\":11948:12032   */\n      tag_424\n        /* \"--CODEGEN--\":12025:12031   */\n      dup2\n        /* \"--CODEGEN--\":12020:12023   */\n      dup5\n        /* \"--CODEGEN--\":11948:12032   */\n      jump(tag_411)\n    tag_424:\n        /* \"--CODEGEN--\":11941:12032   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":12052:12106   */\n      tag_426\n        /* \"--CODEGEN--\":12100:12105   */\n      dup3\n        /* \"--CODEGEN--\":12052:12106   */\n      jump(tag_413)\n    tag_426:\n        /* \"--CODEGEN--\":12127:12128   */\n      0x00\n        /* \"--CODEGEN--\":12112:12329   */\n    tag_428:\n        /* \"--CODEGEN--\":12137:12143   */\n      dup3\n        /* \"--CODEGEN--\":12134:12135   */\n      dup2\n        /* \"--CODEGEN--\":12131:12144   */\n      lt\n        /* \"--CODEGEN--\":12112:12329   */\n      iszero\n      tag_416\n      jumpi\n        /* \"--CODEGEN--\":12184:12247   */\n      tag_431\n        /* \"--CODEGEN--\":12243:12246   */\n      dup6\n        /* \"--CODEGEN--\":12234:12240   */\n      dup4\n        /* \"--CODEGEN--\":12228:12241   */\n      mload\n        /* \"--CODEGEN--\":12184:12247   */\n      jump(tag_379)\n    tag_431:\n        /* \"--CODEGEN--\":12177:12247   */\n      swap5\n      pop\n        /* \"--CODEGEN--\":12264:12322   */\n      tag_432\n        /* \"--CODEGEN--\":12315:12321   */\n      dup3\n        /* \"--CODEGEN--\":12264:12322   */\n      jump(tag_399)\n    tag_432:\n        /* \"--CODEGEN--\":12254:12322   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":12159:12160   */\n      0x01\n        /* \"--CODEGEN--\":12152:12161   */\n      add\n        /* \"--CODEGEN--\":12112:12329   */\n      jump(tag_428)\n        /* \"--CODEGEN--\":12349:12460   */\n    tag_435:\n        /* \"--CODEGEN--\":12426:12454   */\n      tag_384\n        /* \"--CODEGEN--\":12448:12453   */\n      dup2\n        /* \"--CODEGEN--\":12426:12454   */\n      jump(tag_437)\n        /* \"--CODEGEN--\":12467:12626   */\n    tag_439:\n        /* \"--CODEGEN--\":12568:12620   */\n      tag_384\n        /* \"--CODEGEN--\":12588:12619   */\n      tag_441\n        /* \"--CODEGEN--\":12613:12618   */\n      dup3\n        /* \"--CODEGEN--\":12588:12619   */\n      jump(tag_413)\n    tag_441:\n        /* \"--CODEGEN--\":12568:12620   */\n      jump(tag_413)\n        /* \"--CODEGEN--\":12633:12771   */\n    tag_445:\n        /* \"--CODEGEN--\":12722:12765   */\n      tag_384\n        /* \"--CODEGEN--\":12759:12764   */\n      dup2\n        /* \"--CODEGEN--\":12722:12765   */\n      jump(tag_447)\n        /* \"--CODEGEN--\":12779:13244   */\n    tag_449:\n      0x00\n        /* \"--CODEGEN--\":12939:13006   */\n      tag_450\n        /* \"--CODEGEN--\":13003:13005   */\n      0x2c\n        /* \"--CODEGEN--\":12998:13001   */\n      dup4\n        /* \"--CODEGEN--\":12939:13006   */\n      jump(tag_397)\n    tag_450:\n        /* \"--CODEGEN--\":13039:13105   */\n      0x426f746820706c6179657273206861766520746f2068617665207069636b6564\n        /* \"--CODEGEN--\":13019:13106   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":13140:13206   */\n      0x2074686569722063617264730000000000000000000000000000000000000000\n        /* \"--CODEGEN--\":13135:13137   */\n      0x20\n        /* \"--CODEGEN--\":13126:13138   */\n      dup3\n      add\n        /* \"--CODEGEN--\":13119:13207   */\n      mstore\n        /* \"--CODEGEN--\":13235:13237   */\n      0x40\n        /* \"--CODEGEN--\":13226:13238   */\n      add\n      swap3\n        /* \"--CODEGEN--\":12925:13244   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":13253:13617   */\n    tag_453:\n      0x00\n        /* \"--CODEGEN--\":13413:13480   */\n      tag_454\n        /* \"--CODEGEN--\":13477:13479   */\n      0x0c\n        /* \"--CODEGEN--\":13472:13475   */\n      dup4\n        /* \"--CODEGEN--\":13413:13480   */\n      jump(tag_397)\n    tag_454:\n        /* \"--CODEGEN--\":13513:13579   */\n      0x496e76616c6964206d6f76650000000000000000000000000000000000000000\n        /* \"--CODEGEN--\":13493:13580   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":13608:13610   */\n      0x20\n        /* \"--CODEGEN--\":13599:13611   */\n      add\n      swap3\n        /* \"--CODEGEN--\":13399:13617   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":13626:14091   */\n    tag_456:\n      0x00\n        /* \"--CODEGEN--\":13786:13853   */\n      tag_457\n        /* \"--CODEGEN--\":13850:13852   */\n      0x29\n        /* \"--CODEGEN--\":13845:13848   */\n      dup4\n        /* \"--CODEGEN--\":13786:13853   */\n      jump(tag_397)\n    tag_457:\n        /* \"--CODEGEN--\":13886:13952   */\n      0x706c6179657273207475726e20646f6573206e6f7420657175616c2065697468\n        /* \"--CODEGEN--\":13866:13953   */\n      dup2\n      mstore\n      mul(0x32b910383630bcb2b9, shl(0xb9, 0x01))\n        /* \"--CODEGEN--\":13982:13984   */\n      0x20\n        /* \"--CODEGEN--\":13973:13985   */\n      dup3\n      add\n        /* \"--CODEGEN--\":13966:14054   */\n      mstore\n        /* \"--CODEGEN--\":14082:14084   */\n      0x40\n        /* \"--CODEGEN--\":14073:14085   */\n      add\n      swap3\n        /* \"--CODEGEN--\":13772:14091   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":14100:14464   */\n    tag_459:\n      0x00\n        /* \"--CODEGEN--\":14260:14327   */\n      tag_460\n        /* \"--CODEGEN--\":14324:14326   */\n      0x0d\n        /* \"--CODEGEN--\":14319:14322   */\n      dup4\n        /* \"--CODEGEN--\":14260:14327   */\n      jump(tag_397)\n    tag_460:\n        /* \"--CODEGEN--\":14360:14426   */\n      0x4e6f7420796f7572207475726e00000000000000000000000000000000000000\n        /* \"--CODEGEN--\":14340:14427   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":14455:14457   */\n      0x20\n        /* \"--CODEGEN--\":14446:14458   */\n      add\n      swap3\n        /* \"--CODEGEN--\":14246:14464   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":14473:14938   */\n    tag_462:\n      0x00\n        /* \"--CODEGEN--\":14633:14700   */\n      tag_463\n        /* \"--CODEGEN--\":14697:14699   */\n      0x25\n        /* \"--CODEGEN--\":14692:14695   */\n      dup4\n        /* \"--CODEGEN--\":14633:14700   */\n      jump(tag_397)\n    tag_463:\n        /* \"--CODEGEN--\":14733:14799   */\n      0x506c617965722068617320616c7265616479207069636b656420746865697220\n        /* \"--CODEGEN--\":14713:14800   */\n      dup2\n      mstore\n      mul(0x6361726473, shl(0xd8, 0x01))\n        /* \"--CODEGEN--\":14829:14831   */\n      0x20\n        /* \"--CODEGEN--\":14820:14832   */\n      dup3\n      add\n        /* \"--CODEGEN--\":14813:14901   */\n      mstore\n        /* \"--CODEGEN--\":14929:14931   */\n      0x40\n        /* \"--CODEGEN--\":14920:14932   */\n      add\n      swap3\n        /* \"--CODEGEN--\":14619:14938   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":14947:15412   */\n    tag_465:\n      0x00\n        /* \"--CODEGEN--\":15107:15174   */\n      tag_466\n        /* \"--CODEGEN--\":15171:15173   */\n      0x28\n        /* \"--CODEGEN--\":15166:15169   */\n      dup4\n        /* \"--CODEGEN--\":15107:15174   */\n      jump(tag_397)\n    tag_466:\n        /* \"--CODEGEN--\":15207:15273   */\n      0x5472616e73616374696f6e2073656e646572206d75737420626520706c617965\n        /* \"--CODEGEN--\":15187:15274   */\n      dup2\n      mstore\n      mul(0x3910189037b91019, shl(0xc1, 0x01))\n        /* \"--CODEGEN--\":15303:15305   */\n      0x20\n        /* \"--CODEGEN--\":15294:15306   */\n      dup3\n      add\n        /* \"--CODEGEN--\":15287:15375   */\n      mstore\n        /* \"--CODEGEN--\":15403:15405   */\n      0x40\n        /* \"--CODEGEN--\":15394:15406   */\n      add\n      swap3\n        /* \"--CODEGEN--\":15093:15412   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":15421:15785   */\n    tag_468:\n      0x00\n        /* \"--CODEGEN--\":15581:15648   */\n      tag_469\n        /* \"--CODEGEN--\":15645:15647   */\n      0x0f\n        /* \"--CODEGEN--\":15640:15643   */\n      dup4\n        /* \"--CODEGEN--\":15581:15648   */\n      jump(tag_397)\n    tag_469:\n        /* \"--CODEGEN--\":15681:15747   */\n      0x4e6f7420656e6f756768206d616e610000000000000000000000000000000000\n        /* \"--CODEGEN--\":15661:15748   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":15776:15778   */\n      0x20\n        /* \"--CODEGEN--\":15767:15779   */\n      add\n      swap3\n        /* \"--CODEGEN--\":15567:15785   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":15874:16966   */\n    tag_471:\n        /* \"--CODEGEN--\":16090:16112   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":16023:16027   */\n      0xc0\n        /* \"--CODEGEN--\":16014:16028   */\n      dup4\n      add\n      swap1\n        /* \"--CODEGEN--\":16118:16179   */\n      tag_472\n        /* \"--CODEGEN--\":16018:16021   */\n      dup5\n        /* \"--CODEGEN--\":16090:16112   */\n      dup3\n        /* \"--CODEGEN--\":16118:16179   */\n      jump(tag_381)\n    tag_472:\n        /* \"--CODEGEN--\":16043:16185   */\n      pop\n        /* \"--CODEGEN--\":16259:16263   */\n      0x20\n        /* \"--CODEGEN--\":16252:16257   */\n      dup3\n        /* \"--CODEGEN--\":16248:16264   */\n      add\n        /* \"--CODEGEN--\":16242:16265   */\n      mload\n        /* \"--CODEGEN--\":16271:16331   */\n      tag_473\n        /* \"--CODEGEN--\":16325:16329   */\n      0x20\n        /* \"--CODEGEN--\":16320:16323   */\n      dup6\n        /* \"--CODEGEN--\":16316:16330   */\n      add\n        /* \"--CODEGEN--\":16303:16314   */\n      dup3\n        /* \"--CODEGEN--\":16271:16331   */\n      jump(tag_474)\n    tag_473:\n        /* \"--CODEGEN--\":16195:16337   */\n      pop\n        /* \"--CODEGEN--\":16412:16416   */\n      0x40\n        /* \"--CODEGEN--\":16405:16410   */\n      dup3\n        /* \"--CODEGEN--\":16401:16417   */\n      add\n        /* \"--CODEGEN--\":16395:16418   */\n      mload\n        /* \"--CODEGEN--\":16424:16484   */\n      tag_475\n        /* \"--CODEGEN--\":16478:16482   */\n      0x40\n        /* \"--CODEGEN--\":16473:16476   */\n      dup6\n        /* \"--CODEGEN--\":16469:16483   */\n      add\n        /* \"--CODEGEN--\":16456:16467   */\n      dup3\n        /* \"--CODEGEN--\":16424:16484   */\n      jump(tag_474)\n    tag_475:\n        /* \"--CODEGEN--\":16347:16490   */\n      pop\n        /* \"--CODEGEN--\":16562:16566   */\n      0x60\n        /* \"--CODEGEN--\":16555:16560   */\n      dup3\n        /* \"--CODEGEN--\":16551:16567   */\n      add\n        /* \"--CODEGEN--\":16545:16568   */\n      mload\n        /* \"--CODEGEN--\":16574:16634   */\n      tag_476\n        /* \"--CODEGEN--\":16628:16632   */\n      0x60\n        /* \"--CODEGEN--\":16623:16626   */\n      dup6\n        /* \"--CODEGEN--\":16619:16633   */\n      add\n        /* \"--CODEGEN--\":16606:16617   */\n      dup3\n        /* \"--CODEGEN--\":16574:16634   */\n      jump(tag_474)\n    tag_476:\n        /* \"--CODEGEN--\":16500:16640   */\n      pop\n        /* \"--CODEGEN--\":16714:16718   */\n      0x80\n        /* \"--CODEGEN--\":16707:16712   */\n      dup3\n        /* \"--CODEGEN--\":16703:16719   */\n      add\n        /* \"--CODEGEN--\":16697:16720   */\n      mload\n        /* \"--CODEGEN--\":16726:16786   */\n      tag_477\n        /* \"--CODEGEN--\":16780:16784   */\n      0x80\n        /* \"--CODEGEN--\":16775:16778   */\n      dup6\n        /* \"--CODEGEN--\":16771:16785   */\n      add\n        /* \"--CODEGEN--\":16758:16769   */\n      dup3\n        /* \"--CODEGEN--\":16726:16786   */\n      jump(tag_474)\n    tag_477:\n        /* \"--CODEGEN--\":16650:16792   */\n      pop\n        /* \"--CODEGEN--\":16873:16877   */\n      0xa0\n        /* \"--CODEGEN--\":16866:16871   */\n      dup3\n        /* \"--CODEGEN--\":16862:16878   */\n      add\n        /* \"--CODEGEN--\":16856:16879   */\n      mload\n        /* \"--CODEGEN--\":16885:16945   */\n      tag_223\n        /* \"--CODEGEN--\":16939:16943   */\n      0xa0\n        /* \"--CODEGEN--\":16934:16937   */\n      dup6\n        /* \"--CODEGEN--\":16930:16944   */\n      add\n        /* \"--CODEGEN--\":16917:16928   */\n      dup3\n        /* \"--CODEGEN--\":16885:16945   */\n      jump(tag_474)\n        /* \"--CODEGEN--\":18220:19589   */\n    tag_487:\n        /* \"--CODEGEN--\":18443:18465   */\n      dup1\n      sload\n        /* \"--CODEGEN--\":18370:18374   */\n      0xc0\n        /* \"--CODEGEN--\":18361:18375   */\n      dup4\n      add\n      swap1\n        /* \"--CODEGEN--\":18490:18545   */\n      tag_488\n        /* \"--CODEGEN--\":18443:18465   */\n      dup2\n        /* \"--CODEGEN--\":18490:18545   */\n      jump(tag_489)\n    tag_488:\n        /* \"--CODEGEN--\":18551:18612   */\n      tag_490\n        /* \"--CODEGEN--\":18602:18605   */\n      dup6\n        /* \"--CODEGEN--\":18585:18596   */\n      dup3\n        /* \"--CODEGEN--\":18551:18612   */\n      jump(tag_381)\n    tag_490:\n      pop\n      pop\n        /* \"--CODEGEN--\":18680:18683   */\n      0x01\n        /* \"--CODEGEN--\":18669:18684   */\n      dup3\n      add\n        /* \"--CODEGEN--\":18663:18685   */\n      sload\n        /* \"--CODEGEN--\":18710:18764   */\n      tag_491\n        /* \"--CODEGEN--\":18663:18685   */\n      dup2\n        /* \"--CODEGEN--\":18710:18764   */\n      jump(tag_492)\n    tag_491:\n        /* \"--CODEGEN--\":18770:18830   */\n      tag_493\n        /* \"--CODEGEN--\":18824:18828   */\n      0x20\n        /* \"--CODEGEN--\":18819:18822   */\n      dup7\n        /* \"--CODEGEN--\":18815:18829   */\n      add\n        /* \"--CODEGEN--\":18802:18813   */\n      dup3\n        /* \"--CODEGEN--\":18770:18830   */\n      jump(tag_474)\n    tag_493:\n        /* \"--CODEGEN--\":18628:18836   */\n      pop\n        /* \"--CODEGEN--\":18894:18948   */\n      tag_494\n        /* \"--CODEGEN--\":18938:18947   */\n      dup2\n        /* \"--CODEGEN--\":18894:18948   */\n      jump(tag_495)\n    tag_494:\n        /* \"--CODEGEN--\":18954:19014   */\n      tag_496\n        /* \"--CODEGEN--\":19008:19012   */\n      0x40\n        /* \"--CODEGEN--\":19003:19006   */\n      dup7\n        /* \"--CODEGEN--\":18999:19013   */\n      add\n        /* \"--CODEGEN--\":18986:18997   */\n      dup3\n        /* \"--CODEGEN--\":18954:19014   */\n      jump(tag_474)\n    tag_496:\n        /* \"--CODEGEN--\":18846:19020   */\n      pop\n        /* \"--CODEGEN--\":19075:19129   */\n      tag_497\n        /* \"--CODEGEN--\":19119:19128   */\n      dup2\n        /* \"--CODEGEN--\":19075:19129   */\n      jump(tag_498)\n    tag_497:\n        /* \"--CODEGEN--\":19135:19195   */\n      tag_499\n        /* \"--CODEGEN--\":19189:19193   */\n      0x60\n        /* \"--CODEGEN--\":19184:19187   */\n      dup7\n        /* \"--CODEGEN--\":19180:19194   */\n      add\n        /* \"--CODEGEN--\":19167:19178   */\n      dup3\n        /* \"--CODEGEN--\":19135:19195   */\n      jump(tag_474)\n    tag_499:\n        /* \"--CODEGEN--\":19030:19201   */\n      pop\n        /* \"--CODEGEN--\":19258:19312   */\n      tag_500\n        /* \"--CODEGEN--\":19302:19311   */\n      dup2\n        /* \"--CODEGEN--\":19258:19312   */\n      jump(tag_501)\n    tag_500:\n        /* \"--CODEGEN--\":19318:19378   */\n      tag_502\n        /* \"--CODEGEN--\":19372:19376   */\n      0x80\n        /* \"--CODEGEN--\":19367:19370   */\n      dup7\n        /* \"--CODEGEN--\":19363:19377   */\n      add\n        /* \"--CODEGEN--\":19350:19361   */\n      dup3\n        /* \"--CODEGEN--\":19318:19378   */\n      jump(tag_474)\n    tag_502:\n        /* \"--CODEGEN--\":19211:19384   */\n      pop\n        /* \"--CODEGEN--\":19448:19502   */\n      tag_503\n        /* \"--CODEGEN--\":19492:19501   */\n      dup2\n        /* \"--CODEGEN--\":19448:19502   */\n      jump(tag_504)\n    tag_503:\n        /* \"--CODEGEN--\":19508:19568   */\n      tag_416\n        /* \"--CODEGEN--\":19562:19566   */\n      0xa0\n        /* \"--CODEGEN--\":19557:19560   */\n      dup7\n        /* \"--CODEGEN--\":19553:19567   */\n      add\n        /* \"--CODEGEN--\":19540:19551   */\n      dup3\n        /* \"--CODEGEN--\":19508:19568   */\n      jump(tag_474)\n        /* \"--CODEGEN--\":19677:20332   */\n    tag_507:\n        /* \"--CODEGEN--\":19906:19928   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":19834:19838   */\n      0x40\n        /* \"--CODEGEN--\":19941:19978   */\n      dup1\n      dup5\n      mstore\n        /* \"--CODEGEN--\":19677:20332   */\n      0x00\n      swap2\n        /* \"--CODEGEN--\":19825:19839   */\n      swap1\n      dup5\n      add\n      swap1\n        /* \"--CODEGEN--\":19993:20139   */\n      tag_508\n        /* \"--CODEGEN--\":19825:19839   */\n      dup3\n        /* \"--CODEGEN--\":19906:19928   */\n      dup3\n        /* \"--CODEGEN--\":19993:20139   */\n      jump(tag_393)\n    tag_508:\n        /* \"--CODEGEN--\":19985:20139   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":19854:20151   */\n      pop\n        /* \"--CODEGEN--\":20230:20234   */\n      0x20\n        /* \"--CODEGEN--\":20223:20228   */\n      dup4\n        /* \"--CODEGEN--\":20219:20235   */\n      add\n        /* \"--CODEGEN--\":20213:20236   */\n      mload\n        /* \"--CODEGEN--\":20242:20300   */\n      tag_509\n        /* \"--CODEGEN--\":20294:20298   */\n      0x20\n        /* \"--CODEGEN--\":20289:20292   */\n      dup7\n        /* \"--CODEGEN--\":20285:20299   */\n      add\n        /* \"--CODEGEN--\":20272:20283   */\n      dup3\n        /* \"--CODEGEN--\":20242:20300   */\n      jump(tag_510)\n    tag_509:\n      pop\n        /* \"--CODEGEN--\":20323:20327   */\n      swap4\n        /* \"--CODEGEN--\":19807:20332   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":20339:20446   */\n    tag_474:\n        /* \"--CODEGEN--\":20410:20440   */\n      tag_384\n        /* \"--CODEGEN--\":20434:20439   */\n      dup2\n        /* \"--CODEGEN--\":20410:20440   */\n      jump(tag_513)\n        /* \"--CODEGEN--\":20577:20687   */\n    tag_381:\n        /* \"--CODEGEN--\":20650:20681   */\n      tag_384\n        /* \"--CODEGEN--\":20675:20680   */\n      dup2\n        /* \"--CODEGEN--\":20650:20681   */\n      jump(tag_413)\n        /* \"--CODEGEN--\":20821:20925   */\n    tag_510:\n        /* \"--CODEGEN--\":20890:20919   */\n      tag_384\n        /* \"--CODEGEN--\":20913:20918   */\n      dup2\n        /* \"--CODEGEN--\":20890:20919   */\n      jump(tag_525)\n        /* \"--CODEGEN--\":21053:21204   */\n    tag_530:\n        /* \"--CODEGEN--\":21150:21198   */\n      tag_384\n        /* \"--CODEGEN--\":21168:21197   */\n      tag_532\n        /* \"--CODEGEN--\":21191:21196   */\n      dup3\n        /* \"--CODEGEN--\":21168:21197   */\n      jump(tag_525)\n    tag_532:\n        /* \"--CODEGEN--\":21150:21198   */\n      jump(tag_533)\n        /* \"--CODEGEN--\":21211:21756   */\n    tag_230:\n      0x00\n        /* \"--CODEGEN--\":21398:21469   */\n      tag_535\n        /* \"--CODEGEN--\":21465:21468   */\n      dup3\n        /* \"--CODEGEN--\":21456:21462   */\n      dup7\n        /* \"--CODEGEN--\":21398:21469   */\n      jump(tag_530)\n    tag_535:\n        /* \"--CODEGEN--\":21491:21492   */\n      0x01\n        /* \"--CODEGEN--\":21486:21489   */\n      dup3\n        /* \"--CODEGEN--\":21482:21493   */\n      add\n        /* \"--CODEGEN--\":21475:21493   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":21504:21579   */\n      tag_536\n        /* \"--CODEGEN--\":21575:21578   */\n      dup3\n        /* \"--CODEGEN--\":21566:21572   */\n      dup6\n        /* \"--CODEGEN--\":21504:21579   */\n      jump(tag_439)\n    tag_536:\n        /* \"--CODEGEN--\":21601:21603   */\n      0x20\n        /* \"--CODEGEN--\":21596:21599   */\n      dup3\n        /* \"--CODEGEN--\":21592:21604   */\n      add\n        /* \"--CODEGEN--\":21585:21604   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":21615:21706   */\n      tag_537\n        /* \"--CODEGEN--\":21702:21705   */\n      dup3\n        /* \"--CODEGEN--\":21693:21699   */\n      dup5\n        /* \"--CODEGEN--\":21615:21706   */\n      jump(tag_383)\n    tag_537:\n      pop\n        /* \"--CODEGEN--\":21728:21730   */\n      0x14\n        /* \"--CODEGEN--\":21719:21731   */\n      add\n      swap4\n        /* \"--CODEGEN--\":21386:21756   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":21763:21976   */\n    tag_21:\n        /* \"--CODEGEN--\":21881:21883   */\n      0x20\n        /* \"--CODEGEN--\":21866:21884   */\n      dup2\n      add\n        /* \"--CODEGEN--\":21895:21966   */\n      tag_228\n        /* \"--CODEGEN--\":21870:21879   */\n      dup3\n        /* \"--CODEGEN--\":21939:21945   */\n      dup5\n        /* \"--CODEGEN--\":21895:21966   */\n      jump(tag_389)\n        /* \"--CODEGEN--\":21983:22493   */\n    tag_182:\n        /* \"--CODEGEN--\":22221:22224   */\n      0x0100\n        /* \"--CODEGEN--\":22206:22225   */\n      dup2\n      add\n        /* \"--CODEGEN--\":22236:22353   */\n      tag_541\n        /* \"--CODEGEN--\":22210:22219   */\n      dup3\n        /* \"--CODEGEN--\":22326:22332   */\n      dup6\n        /* \"--CODEGEN--\":22236:22353   */\n      jump(tag_421)\n    tag_541:\n        /* \"--CODEGEN--\":22364:22483   */\n      tag_260\n        /* \"--CODEGEN--\":22478:22481   */\n      0xa0\n        /* \"--CODEGEN--\":22467:22476   */\n      dup4\n        /* \"--CODEGEN--\":22463:22482   */\n      add\n        /* \"--CODEGEN--\":22454:22460   */\n      dup5\n        /* \"--CODEGEN--\":22364:22483   */\n      jump(tag_407)\n        /* \"--CODEGEN--\":22500:22701   */\n    tag_62:\n        /* \"--CODEGEN--\":22612:22614   */\n      0x20\n        /* \"--CODEGEN--\":22597:22615   */\n      dup2\n      add\n        /* \"--CODEGEN--\":22626:22691   */\n      tag_228\n        /* \"--CODEGEN--\":22601:22610   */\n      dup3\n        /* \"--CODEGEN--\":22664:22670   */\n      dup5\n        /* \"--CODEGEN--\":22626:22691   */\n      jump(tag_435)\n        /* \"--CODEGEN--\":22708:23382   */\n    tag_135:\n        /* \"--CODEGEN--\":22973:22976   */\n      0x0120\n        /* \"--CODEGEN--\":22958:22977   */\n      dup2\n      add\n        /* \"--CODEGEN--\":22988:23065   */\n      tag_546\n        /* \"--CODEGEN--\":22962:22971   */\n      dup3\n        /* \"--CODEGEN--\":23038:23044   */\n      dup8\n        /* \"--CODEGEN--\":22988:23065   */\n      jump(tag_445)\n    tag_546:\n        /* \"--CODEGEN--\":23076:23148   */\n      tag_547\n        /* \"--CODEGEN--\":23144:23146   */\n      0x20\n        /* \"--CODEGEN--\":23133:23142   */\n      dup4\n        /* \"--CODEGEN--\":23129:23147   */\n      add\n        /* \"--CODEGEN--\":23120:23126   */\n      dup7\n        /* \"--CODEGEN--\":23076:23148   */\n      jump(tag_381)\n    tag_547:\n        /* \"--CODEGEN--\":23159:23288   */\n      tag_548\n        /* \"--CODEGEN--\":23284:23286   */\n      0x40\n        /* \"--CODEGEN--\":23273:23282   */\n      dup4\n        /* \"--CODEGEN--\":23269:23287   */\n      add\n        /* \"--CODEGEN--\":23260:23266   */\n      dup6\n        /* \"--CODEGEN--\":23159:23288   */\n      jump(tag_487)\n    tag_548:\n        /* \"--CODEGEN--\":23299:23372   */\n      tag_549\n        /* \"--CODEGEN--\":23367:23370   */\n      0x0100\n        /* \"--CODEGEN--\":23356:23365   */\n      dup4\n        /* \"--CODEGEN--\":23352:23371   */\n      add\n        /* \"--CODEGEN--\":23343:23349   */\n      dup5\n        /* \"--CODEGEN--\":23299:23372   */\n      jump(tag_389)\n    tag_549:\n        /* \"--CODEGEN--\":22944:23382   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":23389:23796   */\n    tag_242:\n        /* \"--CODEGEN--\":23580:23582   */\n      0x20\n        /* \"--CODEGEN--\":23594:23641   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":23565:23583   */\n      dup2\n      add\n        /* \"--CODEGEN--\":23655:23786   */\n      tag_228\n        /* \"--CODEGEN--\":23565:23583   */\n      dup2\n        /* \"--CODEGEN--\":23655:23786   */\n      jump(tag_449)\n        /* \"--CODEGEN--\":23803:24210   */\n    tag_133:\n        /* \"--CODEGEN--\":23994:23996   */\n      0x20\n        /* \"--CODEGEN--\":24008:24055   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":23979:23997   */\n      dup2\n      add\n        /* \"--CODEGEN--\":24069:24200   */\n      tag_228\n        /* \"--CODEGEN--\":23979:23997   */\n      dup2\n        /* \"--CODEGEN--\":24069:24200   */\n      jump(tag_453)\n        /* \"--CODEGEN--\":24217:24624   */\n    tag_91:\n        /* \"--CODEGEN--\":24408:24410   */\n      0x20\n        /* \"--CODEGEN--\":24422:24469   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":24393:24411   */\n      dup2\n      add\n        /* \"--CODEGEN--\":24483:24614   */\n      tag_228\n        /* \"--CODEGEN--\":24393:24411   */\n      dup2\n        /* \"--CODEGEN--\":24483:24614   */\n      jump(tag_456)\n        /* \"--CODEGEN--\":24631:25038   */\n    tag_78:\n        /* \"--CODEGEN--\":24822:24824   */\n      0x20\n        /* \"--CODEGEN--\":24836:24883   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":24807:24825   */\n      dup2\n      add\n        /* \"--CODEGEN--\":24897:25028   */\n      tag_228\n        /* \"--CODEGEN--\":24807:24825   */\n      dup2\n        /* \"--CODEGEN--\":24897:25028   */\n      jump(tag_459)\n        /* \"--CODEGEN--\":25045:25452   */\n    tag_139:\n        /* \"--CODEGEN--\":25236:25238   */\n      0x20\n        /* \"--CODEGEN--\":25250:25297   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":25221:25239   */\n      dup2\n      add\n        /* \"--CODEGEN--\":25311:25442   */\n      tag_228\n        /* \"--CODEGEN--\":25221:25239   */\n      dup2\n        /* \"--CODEGEN--\":25311:25442   */\n      jump(tag_462)\n        /* \"--CODEGEN--\":25459:25866   */\n    tag_147:\n        /* \"--CODEGEN--\":25650:25652   */\n      0x20\n        /* \"--CODEGEN--\":25664:25711   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":25635:25653   */\n      dup2\n      add\n        /* \"--CODEGEN--\":25725:25856   */\n      tag_228\n        /* \"--CODEGEN--\":25635:25653   */\n      dup2\n        /* \"--CODEGEN--\":25725:25856   */\n      jump(tag_465)\n        /* \"--CODEGEN--\":25873:26280   */\n    tag_116:\n        /* \"--CODEGEN--\":26064:26066   */\n      0x20\n        /* \"--CODEGEN--\":26078:26125   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":26049:26067   */\n      dup2\n      add\n        /* \"--CODEGEN--\":26139:26270   */\n      tag_228\n        /* \"--CODEGEN--\":26049:26067   */\n      dup2\n        /* \"--CODEGEN--\":26139:26270   */\n      jump(tag_468)\n        /* \"--CODEGEN--\":26287:26613   */\n    tag_71:\n        /* \"--CODEGEN--\":26461:26464   */\n      0xc0\n        /* \"--CODEGEN--\":26446:26465   */\n      dup2\n      add\n        /* \"--CODEGEN--\":26476:26603   */\n      tag_228\n        /* \"--CODEGEN--\":26450:26459   */\n      dup3\n        /* \"--CODEGEN--\":26576:26582   */\n      dup5\n        /* \"--CODEGEN--\":26476:26603   */\n      jump(tag_471)\n        /* \"--CODEGEN--\":26620:26993   */\n    tag_55:\n        /* \"--CODEGEN--\":26794:26796   */\n      0x20\n        /* \"--CODEGEN--\":26808:26855   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":26779:26797   */\n      dup2\n      add\n        /* \"--CODEGEN--\":26869:26983   */\n      tag_260\n        /* \"--CODEGEN--\":26779:26797   */\n      dup2\n        /* \"--CODEGEN--\":26969:26975   */\n      dup5\n        /* \"--CODEGEN--\":26869:26983   */\n      jump(tag_507)\n        /* \"--CODEGEN--\":27000:27209   */\n    tag_44:\n        /* \"--CODEGEN--\":27116:27118   */\n      0x20\n        /* \"--CODEGEN--\":27101:27119   */\n      dup2\n      add\n        /* \"--CODEGEN--\":27130:27199   */\n      tag_228\n        /* \"--CODEGEN--\":27105:27114   */\n      dup3\n        /* \"--CODEGEN--\":27172:27178   */\n      dup5\n        /* \"--CODEGEN--\":27130:27199   */\n      jump(tag_474)\n        /* \"--CODEGEN--\":27216:27429   */\n    tag_109:\n        /* \"--CODEGEN--\":27334:27336   */\n      0x20\n        /* \"--CODEGEN--\":27319:27337   */\n      dup2\n      add\n        /* \"--CODEGEN--\":27348:27419   */\n      tag_228\n        /* \"--CODEGEN--\":27323:27332   */\n      dup3\n        /* \"--CODEGEN--\":27392:27398   */\n      dup5\n        /* \"--CODEGEN--\":27348:27419   */\n      jump(tag_381)\n        /* \"--CODEGEN--\":27436:27641   */\n    tag_30:\n        /* \"--CODEGEN--\":27550:27552   */\n      0x20\n        /* \"--CODEGEN--\":27535:27553   */\n      dup2\n      add\n        /* \"--CODEGEN--\":27564:27631   */\n      tag_228\n        /* \"--CODEGEN--\":27539:27548   */\n      dup3\n        /* \"--CODEGEN--\":27604:27610   */\n      dup5\n        /* \"--CODEGEN--\":27564:27631   */\n      jump(tag_510)\n        /* \"--CODEGEN--\":27648:27904   */\n    tag_268:\n        /* \"--CODEGEN--\":27710:27712   */\n      0x40\n        /* \"--CODEGEN--\":27704:27713   */\n      mload\n        /* \"--CODEGEN--\":27736:27753   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":27811:27829   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":27796:27830   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":27832:27854   */\n      dup3\n      dup3\n      lt\n        /* \"--CODEGEN--\":27793:27855   */\n      or\n        /* \"--CODEGEN--\":27790:27792   */\n      iszero\n      tag_575\n      jumpi\n        /* \"--CODEGEN--\":27868:27869   */\n      0x00\n        /* \"--CODEGEN--\":27865:27866   */\n      dup1\n        /* \"--CODEGEN--\":27858:27870   */\n      revert\n        /* \"--CODEGEN--\":27790:27792   */\n    tag_575:\n        /* \"--CODEGEN--\":27884:27886   */\n      0x40\n        /* \"--CODEGEN--\":27877:27899   */\n      mstore\n        /* \"--CODEGEN--\":27688:27904   */\n      swap2\n      swap1\n      pop\n      jump\n        /* \"--CODEGEN--\":27911:28193   */\n    tag_267:\n      0x00\n        /* \"--CODEGEN--\":28094:28112   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":28086:28092   */\n      dup3\n        /* \"--CODEGEN--\":28083:28113   */\n      gt\n        /* \"--CODEGEN--\":28080:28082   */\n      iszero\n      tag_577\n      jumpi\n        /* \"--CODEGEN--\":28126:28127   */\n      0x00\n        /* \"--CODEGEN--\":28123:28124   */\n      dup1\n        /* \"--CODEGEN--\":28116:28128   */\n      revert\n        /* \"--CODEGEN--\":28080:28082   */\n    tag_577:\n      pop\n        /* \"--CODEGEN--\":28155:28159   */\n      0x20\n        /* \"--CODEGEN--\":28143:28160   */\n      swap1\n      dup2\n      mul\n        /* \"--CODEGEN--\":28173:28188   */\n      add\n      swap1\n        /* \"--CODEGEN--\":28017:28193   */\n      jump\n        /* \"--CODEGEN--\":28200:28433   */\n    tag_280:\n      0x00\n        /* \"--CODEGEN--\":28357:28375   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":28349:28355   */\n      dup3\n        /* \"--CODEGEN--\":28346:28376   */\n      gt\n        /* \"--CODEGEN--\":28343:28345   */\n      iszero\n      tag_579\n      jumpi\n        /* \"--CODEGEN--\":28389:28390   */\n      0x00\n        /* \"--CODEGEN--\":28386:28387   */\n      dup1\n        /* \"--CODEGEN--\":28379:28391   */\n      revert\n        /* \"--CODEGEN--\":28343:28345   */\n    tag_579:\n      pop\n        /* \"--CODEGEN--\":28418:28422   */\n      0x20\n        /* \"--CODEGEN--\":28406:28423   */\n      mul\n      swap1\n        /* \"--CODEGEN--\":28280:28433   */\n      jump\n        /* \"--CODEGEN--\":28440:28695   */\n    tag_296:\n      0x00\n        /* \"--CODEGEN--\":28580:28598   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":28572:28578   */\n      dup3\n        /* \"--CODEGEN--\":28569:28599   */\n      gt\n        /* \"--CODEGEN--\":28566:28568   */\n      iszero\n      tag_581\n      jumpi\n        /* \"--CODEGEN--\":28612:28613   */\n      0x00\n        /* \"--CODEGEN--\":28609:28610   */\n      dup1\n        /* \"--CODEGEN--\":28602:28614   */\n      revert\n        /* \"--CODEGEN--\":28566:28568   */\n    tag_581:\n      pop\n        /* \"--CODEGEN--\":28685:28689   */\n      0x20\n        /* \"--CODEGEN--\":28656:28660   */\n      0x1f\n        /* \"--CODEGEN--\":28633:28650   */\n      swap2\n      swap1\n      swap2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":28629:28662   */\n      and\n        /* \"--CODEGEN--\":28675:28690   */\n      add\n      swap1\n        /* \"--CODEGEN--\":28503:28695   */\n      jump\n        /* \"--CODEGEN--\":28704:28845   */\n    tag_399:\n        /* \"--CODEGEN--\":28833:28837   */\n      0x20\n        /* \"--CODEGEN--\":28821:28838   */\n      add\n      swap1\n        /* \"--CODEGEN--\":28802:28845   */\n      jump\n        /* \"--CODEGEN--\":28856:28964   */\n    tag_413:\n        /* \"--CODEGEN--\":28951:28957   */\n      swap1\n        /* \"--CODEGEN--\":28932:28964   */\n      jump\n        /* \"--CODEGEN--\":29092:29219   */\n    tag_395:\n        /* \"--CODEGEN--\":29202:29214   */\n      mload\n      swap1\n        /* \"--CODEGEN--\":29186:29219   */\n      jump\n        /* \"--CODEGEN--\":29226:29322   */\n    tag_409:\n      pop\n        /* \"--CODEGEN--\":29314:29317   */\n      0x03\n      swap1\n        /* \"--CODEGEN--\":29298:29322   */\n      jump\n        /* \"--CODEGEN--\":29329:29425   */\n    tag_423:\n      pop\n        /* \"--CODEGEN--\":29417:29420   */\n      0x05\n      swap1\n        /* \"--CODEGEN--\":29401:29425   */\n      jump\n        /* \"--CODEGEN--\":29842:30034   */\n    tag_397:\n        /* \"--CODEGEN--\":29974:29993   */\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":30023:30027   */\n      0x20\n        /* \"--CODEGEN--\":30014:30028   */\n      add\n      swap1\n        /* \"--CODEGEN--\":29967:30034   */\n      jump\n        /* \"--CODEGEN--\":30043:30183   */\n    tag_411:\n        /* \"--CODEGEN--\":30174:30177   */\n      swap2\n        /* \"--CODEGEN--\":30152:30183   */\n      swap1\n      pop\n      jump\n        /* \"--CODEGEN--\":30512:30617   */\n    tag_391:\n      0x00\n        /* \"--CODEGEN--\":30581:30612   */\n      tag_228\n        /* \"--CODEGEN--\":30606:30611   */\n      dup3\n        /* \"--CODEGEN--\":30581:30612   */\n      jump(tag_597)\n        /* \"--CODEGEN--\":30744:30836   */\n    tag_437:\n        /* \"--CODEGEN--\":30817:30830   */\n      iszero\n        /* \"--CODEGEN--\":30810:30831   */\n      iszero\n      swap1\n        /* \"--CODEGEN--\":30793:30836   */\n      jump\n        /* \"--CODEGEN--\":30929:31054   */\n    tag_603:\n      0x00\n        /* \"--CODEGEN--\":31015:31016   */\n      0x03\n        /* \"--CODEGEN--\":31008:31013   */\n      dup3\n        /* \"--CODEGEN--\":31005:31017   */\n      lt\n        /* \"--CODEGEN--\":30995:30997   */\n      tag_604\n      jumpi\n        /* \"--CODEGEN--\":31021:31030   */\n      invalid\n        /* \"--CODEGEN--\":30995:30997   */\n    tag_604:\n      pop\n        /* \"--CODEGEN--\":31044:31049   */\n      swap1\n        /* \"--CODEGEN--\":30989:31054   */\n      jump\n        /* \"--CODEGEN--\":31061:31152   */\n    tag_513:\n        /* \"--CODEGEN--\":31140:31146   */\n      0xffff\n        /* \"--CODEGEN--\":31129:31147   */\n      and\n      swap1\n        /* \"--CODEGEN--\":31112:31152   */\n      jump\n        /* \"--CODEGEN--\":31159:31287   */\n    tag_597:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":31228:31282   */\n      and\n      swap1\n        /* \"--CODEGEN--\":31211:31287   */\n      jump\n        /* \"--CODEGEN--\":31380:31468   */\n    tag_525:\n        /* \"--CODEGEN--\":31458:31462   */\n      0xff\n        /* \"--CODEGEN--\":31447:31463   */\n      and\n      swap1\n        /* \"--CODEGEN--\":31430:31468   */\n      jump\n        /* \"--CODEGEN--\":31783:31911   */\n    tag_290:\n      0x00\n        /* \"--CODEGEN--\":31869:31870   */\n      0x03\n        /* \"--CODEGEN--\":31862:31867   */\n      dup3\n        /* \"--CODEGEN--\":31859:31871   */\n      lt\n        /* \"--CODEGEN--\":31849:31851   */\n      tag_604\n      jumpi\n        /* \"--CODEGEN--\":31885:31886   */\n      0x00\n        /* \"--CODEGEN--\":31882:31883   */\n      dup1\n        /* \"--CODEGEN--\":31875:31887   */\n      revert\n        /* \"--CODEGEN--\":32237:32366   */\n    tag_447:\n      0x00\n        /* \"--CODEGEN--\":32322:32361   */\n      tag_228\n        /* \"--CODEGEN--\":32355:32360   */\n      dup3\n        /* \"--CODEGEN--\":32322:32361   */\n      jump(tag_603)\n        /* \"--CODEGEN--\":32374:32642   */\n    tag_299:\n        /* \"--CODEGEN--\":32439:32440   */\n      0x00\n        /* \"--CODEGEN--\":32446:32547   */\n    tag_624:\n        /* \"--CODEGEN--\":32460:32466   */\n      dup4\n        /* \"--CODEGEN--\":32457:32458   */\n      dup2\n        /* \"--CODEGEN--\":32454:32467   */\n      lt\n        /* \"--CODEGEN--\":32446:32547   */\n      iszero\n      tag_626\n      jumpi\n        /* \"--CODEGEN--\":32527:32538   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":32521:32539   */\n      mload\n        /* \"--CODEGEN--\":32508:32519   */\n      dup4\n      dup3\n      add\n        /* \"--CODEGEN--\":32501:32540   */\n      mstore\n        /* \"--CODEGEN--\":32482:32484   */\n      0x20\n        /* \"--CODEGEN--\":32475:32485   */\n      add\n        /* \"--CODEGEN--\":32446:32547   */\n      jump(tag_624)\n    tag_626:\n        /* \"--CODEGEN--\":32562:32568   */\n      dup4\n        /* \"--CODEGEN--\":32559:32560   */\n      dup2\n        /* \"--CODEGEN--\":32556:32569   */\n      gt\n        /* \"--CODEGEN--\":32553:32555   */\n      iszero\n      tag_223\n      jumpi\n      pop\n      pop\n        /* \"--CODEGEN--\":32627:32628   */\n      0x00\n        /* \"--CODEGEN--\":32609:32625   */\n      swap2\n      add\n        /* \"--CODEGEN--\":32602:32629   */\n      mstore\n        /* \"--CODEGEN--\":32423:32642   */\n      jump\n        /* \"--CODEGEN--\":32650:32809   */\n    tag_492:\n      0x00\n        /* \"--CODEGEN--\":32739:32804   */\n      tag_228\n        /* \"--CODEGEN--\":32769:32803   */\n      tag_630\n        /* \"--CODEGEN--\":32792:32802   */\n      dup4\n        /* \"--CODEGEN--\":32769:32803   */\n      jump(tag_413)\n    tag_630:\n        /* \"--CODEGEN--\":32739:32804   */\n      jump(tag_513)\n        /* \"--CODEGEN--\":32816:32977   */\n    tag_489:\n      0x00\n        /* \"--CODEGEN--\":32906:32972   */\n      tag_228\n        /* \"--CODEGEN--\":32937:32971   */\n      tag_441\n        /* \"--CODEGEN--\":32960:32970   */\n      dup4\n        /* \"--CODEGEN--\":32937:32971   */\n      jump(tag_413)\n        /* \"--CODEGEN--\":32984:33144   */\n    tag_495:\n      0x00\n        /* \"--CODEGEN--\":33073:33139   */\n      tag_228\n        /* \"--CODEGEN--\":33103:33138   */\n      tag_630\n        /* \"--CODEGEN--\":33127:33137   */\n      dup4\n        /* \"--CODEGEN--\":33103:33138   */\n      jump(tag_638)\n        /* \"--CODEGEN--\":33151:33311   */\n    tag_498:\n      0x00\n        /* \"--CODEGEN--\":33240:33306   */\n      tag_228\n        /* \"--CODEGEN--\":33270:33305   */\n      tag_630\n        /* \"--CODEGEN--\":33294:33304   */\n      dup4\n        /* \"--CODEGEN--\":33270:33305   */\n      jump(tag_642)\n        /* \"--CODEGEN--\":33318:33478   */\n    tag_501:\n      0x00\n        /* \"--CODEGEN--\":33407:33473   */\n      tag_228\n        /* \"--CODEGEN--\":33437:33472   */\n      tag_630\n        /* \"--CODEGEN--\":33461:33471   */\n      dup4\n        /* \"--CODEGEN--\":33437:33472   */\n      jump(tag_646)\n        /* \"--CODEGEN--\":33485:33645   */\n    tag_504:\n      0x00\n        /* \"--CODEGEN--\":33574:33640   */\n      tag_228\n        /* \"--CODEGEN--\":33604:33639   */\n      tag_630\n        /* \"--CODEGEN--\":33628:33638   */\n      dup4\n        /* \"--CODEGEN--\":33604:33639   */\n      jump(tag_650)\n        /* \"--CODEGEN--\":33652:33755   */\n    tag_387:\n      0x00\n        /* \"--CODEGEN--\":33724:33750   */\n      tag_228\n        /* \"--CODEGEN--\":33744:33749   */\n      dup3\n        /* \"--CODEGEN--\":33843:33932   */\n      0x00\n        /* \"--CODEGEN--\":33907:33927   */\n      tag_228\n        /* \"--CODEGEN--\":33921:33926   */\n      dup3\n        /* \"--CODEGEN--\":33907:33927   */\n      jump(tag_657)\n        /* \"--CODEGEN--\":33939:34027   */\n    tag_533:\n      0x00\n        /* \"--CODEGEN--\":34001:34022   */\n      tag_228\n        /* \"--CODEGEN--\":34016:34021   */\n      dup3\n        /* \"--CODEGEN--\":34101:34104   */\n      0xf8\n        /* \"--CODEGEN--\":34097:34112   */\n      shl\n      swap1\n        /* \"--CODEGEN--\":34078:34118   */\n      jump\n        /* \"--CODEGEN--\":34128:34209   */\n    tag_657:\n        /* \"--CODEGEN--\":34193:34195   */\n      0x60\n        /* \"--CODEGEN--\":34189:34203   */\n      shl\n      swap1\n        /* \"--CODEGEN--\":34170:34209   */\n      jump\n        /* \"--CODEGEN--\":34318:34409   */\n    tag_638:\n        /* \"--CODEGEN--\":34393:34395   */\n      0x10\n        /* \"--CODEGEN--\":34389:34403   */\n      shr\n      swap1\n        /* \"--CODEGEN--\":34370:34409   */\n      jump\n        /* \"--CODEGEN--\":34419:34510   */\n    tag_642:\n        /* \"--CODEGEN--\":34494:34496   */\n      0x20\n        /* \"--CODEGEN--\":34490:34504   */\n      shr\n      swap1\n        /* \"--CODEGEN--\":34471:34510   */\n      jump\n        /* \"--CODEGEN--\":34520:34611   */\n    tag_646:\n        /* \"--CODEGEN--\":34595:34597   */\n      0x30\n        /* \"--CODEGEN--\":34591:34605   */\n      shr\n      swap1\n        /* \"--CODEGEN--\":34572:34611   */\n      jump\n        /* \"--CODEGEN--\":34621:34712   */\n    tag_650:\n        /* \"--CODEGEN--\":34696:34698   */\n      0x40\n        /* \"--CODEGEN--\":34692:34706   */\n      shr\n      swap1\n        /* \"--CODEGEN--\":34673:34712   */\n      jump\n\n    auxdata: 0xa265627a7a7230582026bf19e16975b57a9ca0ac088f968b35bcfe49cb7181e9f1730083bb5eac7f3d6c6578706572696d656e74616cf50037\n}\n", "bytecode": {"linkReferences": {}, "object": "60806040523480156200001157600080fd5b50604051606080620023a483398101806040526200003391908101906200008b565b600180546001600160a01b039485166001600160a01b031991821617909155600280549385169382169390931790925560008054919093169116179055620000fe565b6000620000848251620000df565b9392505050565b600080600060608486031215620000a157600080fd5b6000620000af868662000076565b9350506020620000c28682870162000076565b9250506040620000d58682870162000076565b9150509250925092565b6000620000ec82620000f2565b92915050565b6001600160a01b031690565b612296806200010e6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806359a5f12d1161008c578063d30895e411610066578063d30895e41461019d578063d7eb798c146101a5578063e4b6c992146101ba578063fe145fbd146101cd576100cf565b806359a5f12d1461016d5780635ad3984614610175578063c0d354491461017d576100cf565b806306880689146100d45780632a035b6c146100f25780632af1e2f8146101075780632e53594014610127578063483739631461013a5780634ed614461461014d575b600080fd5b6100dc6101ed565b6040516100e99190611f63565b60405180910390f35b610105610100366004611996565b610201565b005b61011a610115366004611996565b61026e565b6040516100e99190612086565b610105610135366004611a0f565b61028f565b6101056101483660046119f1565b6108e7565b61016061015b3660046119bc565b610c38565b6040516100e9919061206a565b6100dc610d12565b6100dc610d21565b61019061018b366004611996565b610d30565b6040516100e99190612059565b6100dc610e12565b6101ad610e21565b6040516100e99190611f8d565b61011a6101c8366004611996565b610e2a565b6101e06101db366004611996565b610e42565b6040516100e9919061204b565b60045461010090046001600160a01b031681565b600580546001600160a01b0319166001600160a01b03838116919091179182905560048054610100600160a81b03191690556040517fc50f4648fa14be3ee68f160a224cc5d77eeeac58ea500c6fb63fac6788afb0be92610263921690611f63565b60405180910390a150565b6001600160a01b031660009081526003602052604090206001015460ff1690565b60045461010090046001600160a01b031633146102ca57604051600160e51b62461bcd0281526004016102c19061200b565b60405180910390fd5b600180546001600160a01b0316600090815260036020526040812091820154825491929160ff9091169081106102fc57fe5b60009182526020808320600280546001600160a01b03168552600390925260408420600181015481549390940290910194509160ff1690811061033b57fe5b60009182526020808320600280546001600160a01b0390811680875260039094526040909520600454949091029091019450929091610100900416811415610422576002546001600160a01b031660009081526003602052604090206001810154815460ff9091169081106103ac57fe5b60009182526020808320600180546001600160a01b0316855260039092526040909320908101548154600290930290930196509160ff169081106103ec57fe5b600091825260208083206001546001600160a01b031680855260039092526040909320600290920290920194509250905061045a565b60015460045461010090046001600160a01b0390811691161461045a57604051600160e51b62461bcd0281526004016102c190611ffb565b60008086600281111561046957fe5b14156104b4576001808601805461ffff600160201b8083048216909401811690930265ffff000000001990911617908190556104af91600160301b909104168585610eee565b610880565b60018660028111156104c257fe5b14156104e35760018501546104af90600160401b900461ffff168585610eee565b60028660028111156104f157fe5b1415610865576104ff611469565b6000548654604051600160e11b6348c469890281526001600160a01b0390921691639188d3129161053291600401612078565b600060405180830381600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105889190810190611a2d565b60208101516060015160018089015492935061ffff918216600160201b9093048216011610156105cd57604051600160e51b62461bcd0281526004016102c19061203b565b6001868101546020830151606001516000926105f592600160201b900461ffff160190611055565b60018901805461ffff909316600160201b0265ffff00000000199093169290921790915590506106236114b4565b5060208083015101516106346114b4565b50602083015160400151600188015482516106539161ffff1690611055565b60018a01805461ffff191661ffff9384161790819055602085015191955061068392620100009091041690611055565b60018a01805463ffff000019166201000061ffff94851602179081905560408501519195506106bb92600160201b9091041690611055565b60018a01805465ffff000000001916600160201b61ffff94851602179081905560608501519195506106f692600160301b9091041690611055565b60018a01805467ffff0000000000001916600160301b61ffff948516021790819055608085015191955061073392600160401b9091041690611055565b60018a01805469ffff00000000000000001916600160401b61ffff9485160217908190559094501661079f578654600188015460ff1660001990910114156107835761077e33610201565b61079f565b6001878101805460ff19811660ff918216909301169190911790555b805160018a018054602084015160408501516060860151608090960151600160401b600160301b600160201b6201000061ffff808916909a018a1661ffff19909816979097178781048a16909601891690960263ffff000019909516949094178581048816909301871690940265ffff0000000019909216919091178281048616909601851690910267ffff0000000000001990951694909417818104841690940190921690910269ffff00000000000000001990921691909117905550610880915050565b604051600160e51b62461bcd0281526004016102c190611feb565b60048054610100600160a81b0319166101006001600160a01b0385160217905584546040517f5f4bfc4bb3efc8381128908c65dba16d774750a4508f87b52ed63512630609f9916108d79189919088908790611f9b565b60405180910390a1505050505050565b33600090815260036020526040902080541561091857604051600160e51b62461bcd0281526004016102c19061201b565b6001546001600160a01b031633141561095e576002546001600160a01b031660009081526003602052604090205415610959576004805460ff191660011790555b6109be565b6002546001600160a01b03163314156109a3576001546001600160a01b031660009081526003602052604090205415610959576004805460ff191660011790556109be565b604051600160e51b62461bcd0281526004016102c19061202b565b6109c66114e2565b604051806060016040528060008152602001600081526020016000815250905060006109f460056001611084565b9050610a1083858360058110610a0657fe5b60200201516110cf565b82600081548110610a1d57fe5b600091825260208220600291820201548452610a3b90600a90611084565b905080821480610a4b5750600481115b15610af557610ae460016000809054906101000a90046001600160a01b03166001600160a01b0316631b6cde106040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610adc9190810190611a62565b036002611084565b9050610af084826110cf565b610b05565b610b0584868360058110610a0657fe5b83600181548110610b1257fe5b6000918252602080832060029092029091015485820152815460408051600160e41b6301b6cde10281529051610bb1936001936001600160a01b031692631b6cde10926004808301939282900301818987803b158015610b7157600080fd5b505af1158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ba99190810190611a62565b036003611084565b9050610bbd85826110cf565b84600281548110610bca57fe5b600091825260209091206002918202015490859060200201526040517f48ca02657a8acb3a062f53bf24ca611bb25d8108f29f5e3c5e468080a44dca5d90610c159088908790611f71565b60405180910390a160045460ff1615610c3057610c3061125e565b505050505050565b600080805b8351811015610d0b576000805485516001600160a01b0390911690639188d31290879085908110610c6a57fe5b6020026020010151600001516040518263ffffffff1660e01b8152600401610c929190612078565b600060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ce89190810190611a2d565b60a0015190508261ffff168161ffff161115610d02578092505b50600101610c3d565b5092915050565b6002546001600160a01b031681565b6005546001600160a01b031681565b610d38611500565b6001600160a01b0382166000908152600360209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b82821015610df55760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352600160201b810483166060850152600160301b810483166080850152600160401b900490911660a08301529083529092019101610d76565b505050908252506001919091015460ff1660209091015292915050565b6001546001600160a01b031681565b60045460ff1681565b60036020526000908152604090206001015460ff1681565b610e4a611518565b6001600160a01b03821660009081526003602052604090206001810154815460ff909116919082908110610e7a57fe5b60009182526020918290206040805160c0810182526002909302909101805483526001015461ffff80821694840194909452620100008104841691830191909152600160201b810483166060830152600160301b810483166080830152600160401b900490911660a0820152915050919050565b600182015460009062010000900461ffff1615610fd5576001830154610f1e9062010000900461ffff1685611055565b60018501805463ffff000019166201000061ffff948516021790559150811615610fd0576001830154610f559061ffff1682611055565b60018501805461ffff191661ffff9384161790559150811615610fd0576001808301805460ff808216909301831660ff199091161790819055835491161115610fa157610fa133610201565b60018201548254610fd0918391859160ff16908110610fbc57fe5b906000526020600020906002020184610eee565b61104f565b6001830154610fe89061ffff1685611055565b60018501805461ffff191661ffff938416179055915081161561104f576001808301805460ff808216909301831660ff1990911617908190558354911611156110345761103433610201565b6001820154825461104f918391859160ff16908110610fbc57fe5b50505050565b6000808361ffff168361ffff16111561107557506000905082820361107d565b505080820360005b9250929050565b600080826001430340336040516020016110a093929190611f2c565b6040516020818303038152906040528051906020012060001c90508381816110c457fe5b069150505b92915050565b6110d7611469565b600054604051600160e11b6348c469890281526001600160a01b0390911690639188d3129061110a908590600401612078565b600060405180830381600087803b15801561112457600080fd5b505af1158015611138573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111609190810190611a2d565b6040805160c080820183529481528183015161ffff90811660208084019182526060808701518416958501958652608080880151851691860191825298870151841698850198895260e090960151831660a08501908152895460018181018c5560009b8c5292909a2094516002909a0290940198895590519701805493519451965192518216600160401b0269ffff000000000000000019938316600160301b0267ffff00000000000019988416600160201b0265ffff0000000019978516620100000263ffff0000199b90951661ffff19909716969096179990991692909217949094169290921794909416949094179290921692909217905550565b60045460ff1661128357604051600160e51b62461bcd0281526004016102c190611fdb565b6001546001600160a01b03166000908152600360209081526040808320805482518185028101850190935280835261134293859084015b828210156113395760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352600160201b810483166060850152600160301b810483166080850152600160401b900490911660a083015290835290920191016112ba565b50505050610c38565b6002546001600160a01b03166000908152600360209081526040808320805482518185028101850190935280835294955092936113fc9391928590840182156113395760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352600160201b810483166060850152600160301b810483166080850152600160401b900490911660a083015290835290920191016112ba565b90508061ffff168261ffff161061143b57600154600480546001600160a01b0390921661010002610100600160a81b0319909216919091179055611465565b600254600480546001600160a01b0390921661010002610100600160a81b03199092169190911790555b5050565b6040518061026001604052806060815260200161148461154d565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60405180606001604052806003906020820280388339509192915050565b60408051808201909152606081526000602082015290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b604051806101800160405280606081526020016115686114b4565b81526020016115756114b4565b8152600060209091015290565b600061158e8235612149565b9392505050565b600082601f8301126115a657600080fd5b81356115b96115b4826120bb565b612094565b915081818352602084019350602081019050838560c08402820111156115de57600080fd5b60005b8381101561160c57816115f488826118cf565b84525060209092019160c091909101906001016115e1565b5050505092915050565b600082601f83011261162757600080fd5b60056116356115b4826120dc565b9150818385602084028201111561164b57600080fd5b60005b8381101561160c5781611661888261197e565b845250602092830192919091019060010161164e565b600061158e8235612182565b600082601f83011261169457600080fd5b81516116a26115b4826120fa565b915080825260208301602083018583830111156116be57600080fd5b6116c983828461219c565b50505092915050565b600061018082840312156116e557600080fd5b6116ef6080612094565b825190915067ffffffffffffffff81111561170957600080fd5b61171584828501611683565b82525060206117268484830161175b565b60208301525060c061173a8482850161175b565b60408301525061016061174f84828501611972565b60608301525092915050565b600060a0828403121561176d57600080fd5b61177760a0612094565b905060006117858484611972565b825250602061179684848301611972565b60208301525060406117aa84828501611972565b60408301525060606117be84828501611972565b60608301525060806117d284828501611972565b60808301525092915050565b600061010082840312156117f157600080fd5b6117fc610100612094565b825190915067ffffffffffffffff81111561181657600080fd5b61182284828501611683565b825250602082015167ffffffffffffffff81111561183f57600080fd5b61184b848285016116d2565b602083015250604061185f84828501611972565b604083015250606061187384828501611972565b606083015250608061188784828501611972565b60808301525060a061189b84828501611972565b60a08301525060c06118af84828501611972565b60c08301525060e06118c384828501611972565b60e08301525092915050565b600060c082840312156118e157600080fd5b6118eb60c0612094565b905060006118f9848461197e565b825250602061190a84848301611966565b602083015250604061191e84828501611966565b604083015250606061193284828501611966565b606083015250608061194684828501611966565b60808301525060a061195a84828501611966565b60a08301525092915050565b600061158e8235612169565b600061158e8251612169565b600061158e8235612128565b600061158e8251612128565b6000602082840312156119a857600080fd5b60006119b48484611582565b949350505050565b6000602082840312156119ce57600080fd5b813567ffffffffffffffff8111156119e557600080fd5b6119b484828501611595565b600060a08284031215611a0357600080fd5b60006119b48484611616565b600060208284031215611a2157600080fd5b60006119b48484611677565b600060208284031215611a3f57600080fd5b815167ffffffffffffffff811115611a5657600080fd5b6119b4848285016117de565b600060208284031215611a7457600080fd5b60006119b4848461198a565b6000611a8c8383611dc8565b505060c00190565b6000611aa08383611f09565b505060200190565b611ab9611ab482612149565b612221565b82525050565b611ab981612149565b6000611ad38261212b565b611add818561213b565b9350611ae883612122565b60005b82811015611b1357611afe868351611a80565b9550611b0982612122565b9150600101611aeb565b5093949350505050565b611b268161212f565b611b308184612144565b9250611b3b82612128565b60005b82811015611b6657611b51858351611a94565b9450611b5c82612122565b9150600101611b3e565b5050505050565b611b7681612135565b611b808184612144565b9250611b8b82612128565b60005b82811015611b6657611ba1858351611a94565b9450611bac82612122565b9150600101611b8e565b611ab981612154565b611ab9611bcb82612128565b612128565b611ab981612191565b6000611be6602c8361213b565b7f426f746820706c6179657273206861766520746f2068617665207069636b656481527f2074686569722063617264730000000000000000000000000000000000000000602082015260400192915050565b6000611c45600c8361213b565b7f496e76616c6964206d6f76650000000000000000000000000000000000000000815260200192915050565b6000611c7e60298361213b565b7f706c6179657273207475726e20646f6573206e6f7420657175616c20656974688152600160b91b6832b910383630bcb2b902602082015260400192915050565b6000611ccc600d8361213b565b7f4e6f7420796f7572207475726e00000000000000000000000000000000000000815260200192915050565b6000611d0560258361213b565b7f506c617965722068617320616c7265616479207069636b6564207468656972208152600160d81b64636172647302602082015260400192915050565b6000611d4f60288361213b565b7f5472616e73616374696f6e2073656e646572206d75737420626520706c6179658152600160c11b673910189037b9101902602082015260400192915050565b6000611d9c600f8361213b565b7f4e6f7420656e6f756768206d616e610000000000000000000000000000000000815260200192915050565b805160c0830190611dd98482611f09565b506020820151611dec6020850182611f00565b506040820151611dff6040850182611f00565b506060820151611e126060850182611f00565b506080820151611e256080850182611f00565b5060a082015161104f60a0850182611f00565b805460c0830190611e48816121db565b611e528582611f09565b50506001820154611e62816121c8565b611e6f6020860182611f00565b50611e79816121e9565b611e866040860182611f00565b50611e90816121f7565b611e9d6060860182611f00565b50611ea781612205565b611eb46080860182611f00565b50611ebe81612213565b611b6660a0860182611f00565b8051604080845260009190840190611ee38282611ac8565b9150506020830151611ef86020860182611f12565b509392505050565b611ab981612169565b611ab981612128565b611ab98161217c565b611ab9611f278261217c565b612232565b6000611f388286611f1b565b600182019150611f488285611bbf565b602082019150611f588284611aa8565b506014019392505050565b602081016110c98284611abf565b6101008101611f808285611b6d565b61158e60a0830184611b1d565b602081016110c98284611bb6565b6101208101611faa8287611bd0565b611fb76020830186611f09565b611fc46040830185611e38565b611fd2610100830184611abf565b95945050505050565b602080825281016110c981611bd9565b602080825281016110c981611c38565b602080825281016110c981611c71565b602080825281016110c981611cbf565b602080825281016110c981611cf8565b602080825281016110c981611d42565b602080825281016110c981611d8f565b60c081016110c98284611dc8565b6020808252810161158e8184611ecb565b602081016110c98284611f00565b602081016110c98284611f09565b602081016110c98284611f12565b60405181810167ffffffffffffffff811182821017156120b357600080fd5b604052919050565b600067ffffffffffffffff8211156120d257600080fd5b5060209081020190565b600067ffffffffffffffff8211156120f357600080fd5b5060200290565b600067ffffffffffffffff82111561211157600080fd5b506020601f91909101601f19160190565b60200190565b90565b5190565b50600390565b50600590565b90815260200190565b919050565b60006110c982612170565b151590565b60006003821061216557fe5b5090565b61ffff1690565b6001600160a01b031690565b60ff1690565b60006003821061216557600080fd5b60006110c982612159565b60005b838110156121b757818101518382015260200161219f565b8381111561104f5750506000910152565b60006110c96121d683612128565b612169565b60006110c9611bcb83612128565b60006110c96121d683612244565b60006110c96121d68361224a565b60006110c96121d683612250565b60006110c96121d683612256565b60006110c98260006110c98261223e565b60006110c98260f81b90565b60601b90565b60101c90565b60201c90565b60301c90565b60401c9056fea265627a7a7230582026bf19e16975b57a9ca0ac088f968b35bcfe49cb7181e9f1730083bb5eac7f3d6c6578706572696d656e74616cf50037", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x60 DUP1 PUSH3 0x23A4 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x33 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x8B JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP4 DUP6 AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH3 0xFE JUMP JUMPDEST PUSH1 0x0 PUSH3 0x84 DUP3 MLOAD PUSH3 0xDF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0xA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xAF DUP7 DUP7 PUSH3 0x76 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0xC2 DUP7 DUP3 DUP8 ADD PUSH3 0x76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0xD5 DUP7 DUP3 DUP8 ADD PUSH3 0x76 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xEC DUP3 PUSH3 0xF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2296 DUP1 PUSH3 0x10E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x59A5F12D GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD30895E4 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD30895E4 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xD7EB798C EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xE4B6C992 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0xFE145FBD EQ PUSH2 0x1CD JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x59A5F12D EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x5AD39846 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xC0D35449 EQ PUSH2 0x17D JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6880689 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x2A035B6C EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x2AF1E2F8 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x2E535940 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x48373963 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x4ED61446 EQ PUSH2 0x14D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0x201 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11A PUSH2 0x115 CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A0F JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST PUSH2 0x105 PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F1 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x19BC JUMP JUMPDEST PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x206A JUMP JUMPDEST PUSH2 0xDC PUSH2 0xD12 JUMP JUMPDEST PUSH2 0xDC PUSH2 0xD21 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0xD30 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x2059 JUMP JUMPDEST PUSH2 0xDC PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1F8D JUMP JUMPDEST PUSH2 0x11A PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0xE2A JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x1DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x204B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xC50F4648FA14BE3EE68F160A224CC5D77EEEAC58EA500C6FB63FAC6788AFB0BE SWAP3 PUSH2 0x263 SWAP3 AND SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2CA JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x200B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 DUP3 ADD SLOAD DUP3 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP2 LT PUSH2 0x2FC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD SWAP4 SWAP1 SWAP5 MUL SWAP1 SWAP2 ADD SWAP5 POP SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0x33B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 DUP8 MSTORE PUSH1 0x3 SWAP1 SWAP5 MSTORE PUSH1 0x40 SWAP1 SWAP6 KECCAK256 PUSH1 0x4 SLOAD SWAP5 SWAP1 SWAP2 MUL SWAP1 SWAP2 ADD SWAP5 POP SWAP3 SWAP1 SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP2 EQ ISZERO PUSH2 0x422 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP2 LT PUSH2 0x3AC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 SWAP1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP4 ADD SWAP7 POP SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0x3EC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x45A JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x469 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x1 DUP1 DUP7 ADD DUP1 SLOAD PUSH2 0xFFFF PUSH1 0x1 PUSH1 0x20 SHL DUP1 DUP4 DIV DUP3 AND SWAP1 SWAP5 ADD DUP2 AND SWAP1 SWAP4 MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH2 0x4AF SWAP2 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP2 DIV AND DUP6 DUP6 PUSH2 0xEEE JUMP JUMPDEST PUSH2 0x880 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4C2 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x4AF SWAP1 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP6 DUP6 PUSH2 0xEEE JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4F1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x865 JUMPI PUSH2 0x4FF PUSH2 0x1469 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x9188D312 SWAP2 PUSH2 0x532 SWAP2 PUSH1 0x4 ADD PUSH2 0x2078 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x560 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x588 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A2D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP1 DUP10 ADD SLOAD SWAP3 SWAP4 POP PUSH2 0xFFFF SWAP2 DUP3 AND PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP4 DIV DUP3 AND ADD AND LT ISZERO PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x203B JUMP JUMPDEST PUSH1 0x1 DUP7 DUP2 ADD SLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x0 SWAP3 PUSH2 0x5F5 SWAP3 PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH2 0xFFFF AND ADD SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP10 ADD DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP PUSH2 0x623 PUSH2 0x14B4 JUMP JUMPDEST POP PUSH1 0x20 DUP1 DUP4 ADD MLOAD ADD MLOAD PUSH2 0x634 PUSH2 0x14B4 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 DUP9 ADD SLOAD DUP3 MLOAD PUSH2 0x653 SWAP2 PUSH2 0xFFFF AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x20 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x683 SWAP3 PUSH3 0x10000 SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x6BB SWAP3 PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH6 0xFFFF00000000 NOT AND PUSH1 0x1 PUSH1 0x20 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x6F6 SWAP3 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH8 0xFFFF000000000000 NOT AND PUSH1 0x1 PUSH1 0x30 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x733 SWAP3 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH10 0xFFFF0000000000000000 NOT AND PUSH1 0x1 PUSH1 0x40 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE SWAP1 SWAP5 POP AND PUSH2 0x79F JUMPI DUP7 SLOAD PUSH1 0x1 DUP9 ADD SLOAD PUSH1 0xFF AND PUSH1 0x0 NOT SWAP1 SWAP2 ADD EQ ISZERO PUSH2 0x783 JUMPI PUSH2 0x77E CALLER PUSH2 0x201 JUMP JUMPDEST PUSH2 0x79F JUMP JUMPDEST PUSH1 0x1 DUP8 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP2 DUP3 AND SWAP1 SWAP4 ADD AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST DUP1 MLOAD PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x80 SWAP1 SWAP7 ADD MLOAD PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x30 SHL PUSH1 0x1 PUSH1 0x20 SHL PUSH3 0x10000 PUSH2 0xFFFF DUP1 DUP10 AND SWAP1 SWAP11 ADD DUP11 AND PUSH2 0xFFFF NOT SWAP1 SWAP9 AND SWAP8 SWAP1 SWAP8 OR DUP8 DUP2 DIV DUP11 AND SWAP1 SWAP7 ADD DUP10 AND SWAP1 SWAP7 MUL PUSH4 0xFFFF0000 NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP6 DUP2 DIV DUP9 AND SWAP1 SWAP4 ADD DUP8 AND SWAP1 SWAP5 MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP3 DUP2 DIV DUP7 AND SWAP1 SWAP7 ADD DUP6 AND SWAP1 SWAP2 MUL PUSH8 0xFFFF000000000000 NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP2 DUP2 DIV DUP5 AND SWAP1 SWAP5 ADD SWAP1 SWAP3 AND SWAP1 SWAP2 MUL PUSH10 0xFFFF0000000000000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH2 0x880 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1FEB JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND MUL OR SWAP1 SSTORE DUP5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x5F4BFC4BB3EFC8381128908C65DBA16D774750A4508F87B52ED63512630609F9 SWAP2 PUSH2 0x8D7 SWAP2 DUP10 SWAP2 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x1F9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x201B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x95E JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x959 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x959 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x202B JUMP JUMPDEST PUSH2 0x9C6 PUSH2 0x14E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x9F4 PUSH1 0x5 PUSH1 0x1 PUSH2 0x1084 JUMP JUMPDEST SWAP1 POP PUSH2 0xA10 DUP4 DUP6 DUP4 PUSH1 0x5 DUP2 LT PUSH2 0xA06 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x10CF JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0xA1D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x2 SWAP2 DUP3 MUL ADD SLOAD DUP5 MSTORE PUSH2 0xA3B SWAP1 PUSH1 0xA SWAP1 PUSH2 0x1084 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ DUP1 PUSH2 0xA4B JUMPI POP PUSH1 0x4 DUP2 GT JUMPDEST ISZERO PUSH2 0xAF5 JUMPI PUSH2 0xAE4 PUSH1 0x1 PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1B6CDE10 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xADC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A62 JUMP JUMPDEST SUB PUSH1 0x2 PUSH2 0x1084 JUMP JUMPDEST SWAP1 POP PUSH2 0xAF0 DUP5 DUP3 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST PUSH2 0xB05 DUP5 DUP7 DUP4 PUSH1 0x5 DUP2 LT PUSH2 0xA06 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 SLOAD DUP2 LT PUSH2 0xB12 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD SLOAD DUP6 DUP3 ADD MSTORE DUP2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xE4 SHL PUSH4 0x1B6CDE1 MUL DUP2 MSTORE SWAP1 MLOAD PUSH2 0xBB1 SWAP4 PUSH1 0x1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH4 0x1B6CDE10 SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP10 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB85 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xBA9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A62 JUMP JUMPDEST SUB PUSH1 0x3 PUSH2 0x1084 JUMP JUMPDEST SWAP1 POP PUSH2 0xBBD DUP6 DUP3 PUSH2 0x10CF JUMP JUMPDEST DUP5 PUSH1 0x2 DUP2 SLOAD DUP2 LT PUSH2 0xBCA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP2 DUP3 MUL ADD SLOAD SWAP1 DUP6 SWAP1 PUSH1 0x20 MUL ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x48CA02657A8ACB3A062F53BF24CA611BB25D8108F29F5E3C5E468080A44DCA5D SWAP1 PUSH2 0xC15 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xC30 JUMPI PUSH2 0xC30 PUSH2 0x125E JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xC6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC92 SWAP2 SWAP1 PUSH2 0x2078 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCE8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A2D JUMP JUMPDEST PUSH1 0xA0 ADD MLOAD SWAP1 POP DUP3 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0xD02 JUMPI DUP1 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xC3D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xD38 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP2 SLOAD PUSH1 0x60 SWAP5 DUP2 MUL DUP3 ADD DUP6 ADD DUP5 MSTORE SWAP3 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP5 SWAP2 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 DUP6 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xD76 JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xE4A PUSH2 0x1518 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0xE7A JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH3 0x10000 DUP2 DIV DUP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND ISZERO PUSH2 0xFD5 JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xF1E SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND DUP6 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xFD0 JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xF55 SWAP1 PUSH2 0xFFFF AND DUP3 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xFD0 JUMPI PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP1 SWAP4 ADD DUP4 AND PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE DUP4 SLOAD SWAP2 AND GT ISZERO PUSH2 0xFA1 JUMPI PUSH2 0xFA1 CALLER PUSH2 0x201 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH2 0xFD0 SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0xFBC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD DUP5 PUSH2 0xEEE JUMP JUMPDEST PUSH2 0x104F JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xFE8 SWAP1 PUSH2 0xFFFF AND DUP6 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0x104F JUMPI PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP1 SWAP4 ADD DUP4 AND PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE DUP4 SLOAD SWAP2 AND GT ISZERO PUSH2 0x1034 JUMPI PUSH2 0x1034 CALLER PUSH2 0x201 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH2 0x104F SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0xFBC JUMPI INVALID JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xFFFF AND DUP4 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x1075 JUMPI POP PUSH1 0x0 SWAP1 POP DUP3 DUP3 SUB PUSH2 0x107D JUMP JUMPDEST POP POP DUP1 DUP3 SUB PUSH1 0x0 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 NUMBER SUB BLOCKHASH CALLER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10A0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F2C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP4 DUP2 DUP2 PUSH2 0x10C4 JUMPI INVALID JUMPDEST MOD SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10D7 PUSH2 0x1469 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 PUSH2 0x110A SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2078 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1138 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1160 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A2D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE SWAP5 DUP2 MSTORE DUP2 DUP4 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP5 AND SWAP6 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP1 DUP9 ADD MLOAD DUP6 AND SWAP2 DUP7 ADD SWAP2 DUP3 MSTORE SWAP9 DUP8 ADD MLOAD DUP5 AND SWAP9 DUP6 ADD SWAP9 DUP10 MSTORE PUSH1 0xE0 SWAP1 SWAP7 ADD MLOAD DUP4 AND PUSH1 0xA0 DUP6 ADD SWAP1 DUP2 MSTORE DUP10 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP13 SSTORE PUSH1 0x0 SWAP12 DUP13 MSTORE SWAP3 SWAP1 SWAP11 KECCAK256 SWAP5 MLOAD PUSH1 0x2 SWAP1 SWAP11 MUL SWAP1 SWAP5 ADD SWAP9 DUP10 SSTORE SWAP1 MLOAD SWAP8 ADD DUP1 SLOAD SWAP4 MLOAD SWAP5 MLOAD SWAP7 MLOAD SWAP3 MLOAD DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH10 0xFFFF0000000000000000 NOT SWAP4 DUP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH8 0xFFFF000000000000 NOT SWAP9 DUP5 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH6 0xFFFF00000000 NOT SWAP8 DUP6 AND PUSH3 0x10000 MUL PUSH4 0xFFFF0000 NOT SWAP12 SWAP1 SWAP6 AND PUSH2 0xFFFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP10 SWAP1 SWAP10 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP5 SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0x1283 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1FDB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH2 0x1342 SWAP4 DUP6 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x1339 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x12BA JUMP JUMPDEST POP POP POP POP PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP5 SWAP6 POP SWAP3 SWAP4 PUSH2 0x13FC SWAP4 SWAP2 SWAP3 DUP6 SWAP1 DUP5 ADD DUP3 ISZERO PUSH2 0x1339 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x12BA JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND LT PUSH2 0x143B JUMPI PUSH1 0x1 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1465 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1484 PUSH2 0x154D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1568 PUSH2 0x14B4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1575 PUSH2 0x14B4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 CALLDATALOAD PUSH2 0x2149 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15B9 PUSH2 0x15B4 DUP3 PUSH2 0x20BB JUMP JUMPDEST PUSH2 0x2094 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0xC0 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x15DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x160C JUMPI DUP2 PUSH2 0x15F4 DUP9 DUP3 PUSH2 0x18CF JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xC0 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x15E1 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0x1635 PUSH2 0x15B4 DUP3 PUSH2 0x20DC JUMP JUMPDEST SWAP2 POP DUP2 DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x164B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x160C JUMPI DUP2 PUSH2 0x1661 DUP9 DUP3 PUSH2 0x197E JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x164E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 CALLDATALOAD PUSH2 0x2182 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x16A2 PUSH2 0x15B4 DUP3 PUSH2 0x20FA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x16BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16C9 DUP4 DUP3 DUP5 PUSH2 0x219C JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16EF PUSH1 0x80 PUSH2 0x2094 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1709 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1715 DUP5 DUP3 DUP6 ADD PUSH2 0x1683 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1726 DUP5 DUP5 DUP4 ADD PUSH2 0x175B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x173A DUP5 DUP3 DUP6 ADD PUSH2 0x175B JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0x174F DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x176D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1777 PUSH1 0xA0 PUSH2 0x2094 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1785 DUP5 DUP5 PUSH2 0x1972 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1796 DUP5 DUP5 DUP4 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x17AA DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x17BE DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x17D2 DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17FC PUSH2 0x100 PUSH2 0x2094 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1822 DUP5 DUP3 DUP6 ADD PUSH2 0x1683 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x183F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x184B DUP5 DUP3 DUP6 ADD PUSH2 0x16D2 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x185F DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1873 DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1887 DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x189B DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x18AF DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x18C3 DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18EB PUSH1 0xC0 PUSH2 0x2094 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18F9 DUP5 DUP5 PUSH2 0x197E JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x190A DUP5 DUP5 DUP4 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x191E DUP5 DUP3 DUP6 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1932 DUP5 DUP3 DUP6 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1946 DUP5 DUP3 DUP6 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x195A DUP5 DUP3 DUP6 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 CALLDATALOAD PUSH2 0x2169 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 MLOAD PUSH2 0x2169 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 CALLDATALOAD PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 MLOAD PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B4 DUP5 DUP5 PUSH2 0x1582 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B4 DUP5 DUP5 PUSH2 0x1616 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B4 DUP5 DUP5 PUSH2 0x1677 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B4 DUP5 DUP3 DUP6 ADD PUSH2 0x17DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B4 DUP5 DUP5 PUSH2 0x198A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8C DUP4 DUP4 PUSH2 0x1DC8 JUMP JUMPDEST POP POP PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA0 DUP4 DUP4 PUSH2 0x1F09 JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1AB9 PUSH2 0x1AB4 DUP3 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x2221 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2149 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD3 DUP3 PUSH2 0x212B JUMP JUMPDEST PUSH2 0x1ADD DUP2 DUP6 PUSH2 0x213B JUMP JUMPDEST SWAP4 POP PUSH2 0x1AE8 DUP4 PUSH2 0x2122 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1B13 JUMPI PUSH2 0x1AFE DUP7 DUP4 MLOAD PUSH2 0x1A80 JUMP JUMPDEST SWAP6 POP PUSH2 0x1B09 DUP3 PUSH2 0x2122 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1AEB JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1B26 DUP2 PUSH2 0x212F JUMP JUMPDEST PUSH2 0x1B30 DUP2 DUP5 PUSH2 0x2144 JUMP JUMPDEST SWAP3 POP PUSH2 0x1B3B DUP3 PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1B66 JUMPI PUSH2 0x1B51 DUP6 DUP4 MLOAD PUSH2 0x1A94 JUMP JUMPDEST SWAP5 POP PUSH2 0x1B5C DUP3 PUSH2 0x2122 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1B3E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1B76 DUP2 PUSH2 0x2135 JUMP JUMPDEST PUSH2 0x1B80 DUP2 DUP5 PUSH2 0x2144 JUMP JUMPDEST SWAP3 POP PUSH2 0x1B8B DUP3 PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1B66 JUMPI PUSH2 0x1BA1 DUP6 DUP4 MLOAD PUSH2 0x1A94 JUMP JUMPDEST SWAP5 POP PUSH2 0x1BAC DUP3 PUSH2 0x2122 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1B8E JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2154 JUMP JUMPDEST PUSH2 0x1AB9 PUSH2 0x1BCB DUP3 PUSH2 0x2128 JUMP JUMPDEST PUSH2 0x2128 JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2191 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BE6 PUSH1 0x2C DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x426F746820706C6179657273206861766520746F2068617665207069636B6564 DUP2 MSTORE PUSH32 0x2074686569722063617264730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C45 PUSH1 0xC DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x496E76616C6964206D6F76650000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C7E PUSH1 0x29 DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x706C6179657273207475726E20646F6573206E6F7420657175616C2065697468 DUP2 MSTORE PUSH1 0x1 PUSH1 0xB9 SHL PUSH9 0x32B910383630BCB2B9 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CCC PUSH1 0xD DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x4E6F7420796F7572207475726E00000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D05 PUSH1 0x25 DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x506C617965722068617320616C7265616479207069636B656420746865697220 DUP2 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL PUSH5 0x6361726473 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D4F PUSH1 0x28 DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x5472616E73616374696F6E2073656E646572206D75737420626520706C617965 DUP2 MSTORE PUSH1 0x1 PUSH1 0xC1 SHL PUSH8 0x3910189037B91019 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9C PUSH1 0xF DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x4E6F7420656E6F756768206D616E610000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1DD9 DUP5 DUP3 PUSH2 0x1F09 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1DEC PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1DFF PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1E12 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1E25 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x104F PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1E48 DUP2 PUSH2 0x21DB JUMP JUMPDEST PUSH2 0x1E52 DUP6 DUP3 PUSH2 0x1F09 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x1E62 DUP2 PUSH2 0x21C8 JUMP JUMPDEST PUSH2 0x1E6F PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH2 0x1E79 DUP2 PUSH2 0x21E9 JUMP JUMPDEST PUSH2 0x1E86 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH2 0x1E90 DUP2 PUSH2 0x21F7 JUMP JUMPDEST PUSH2 0x1E9D PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH2 0x1EA7 DUP2 PUSH2 0x2205 JUMP JUMPDEST PUSH2 0x1EB4 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH2 0x1EBE DUP2 PUSH2 0x2213 JUMP JUMPDEST PUSH2 0x1B66 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1EE3 DUP3 DUP3 PUSH2 0x1AC8 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1EF8 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1F12 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2169 JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2128 JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x1AB9 PUSH2 0x1F27 DUP3 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x2232 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F38 DUP3 DUP7 PUSH2 0x1F1B JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x1F48 DUP3 DUP6 PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x1F58 DUP3 DUP5 PUSH2 0x1AA8 JUMP JUMPDEST POP PUSH1 0x14 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1ABF JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x1F80 DUP3 DUP6 PUSH2 0x1B6D JUMP JUMPDEST PUSH2 0x158E PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1BB6 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x1FAA DUP3 DUP8 PUSH2 0x1BD0 JUMP JUMPDEST PUSH2 0x1FB7 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x1FC4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1E38 JUMP JUMPDEST PUSH2 0x1FD2 PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x1ABF JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1BD9 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1C71 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1CBF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1D42 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1D8F JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1DC8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x158E DUP2 DUP5 PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1F00 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1F09 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1F12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x20B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x20D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x20F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x3 SWAP1 JUMP JUMPDEST POP PUSH1 0x5 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH2 0x2170 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 LT PUSH2 0x2165 JUMPI INVALID JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 LT PUSH2 0x2165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21B7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x219F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x104F JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x2128 JUMP JUMPDEST PUSH2 0x2169 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x1BCB DUP4 PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x2244 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x224A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x2250 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x2256 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH2 0x223E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH1 0x10 SHR SWAP1 JUMP JUMPDEST PUSH1 0x20 SHR SWAP1 JUMP JUMPDEST PUSH1 0x30 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 SHR SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x26 0xbf NOT 0xe1 PUSH10 0x75B57A9CA0AC088F968B CALLDATALOAD 0xbc INVALID 0x49 0xcb PUSH18 0x81E9F1730083BB5EAC7F3D6C657870657269 PUSH14 0x656E74616CF50037000000000000 ", "sourceMap": "197:6153:1:-;;;546:143;8:9:-1;5:2;;;30:1;27;20:12;5:2;546:143:1;;;;;;;;;;;;;;;;;;;;;;762:7:8;:18;;-1:-1:-1;;;;;762:18:8;;;-1:-1:-1;;;;;;762:18:8;;;;;;;790:7;:18;;;;;;;;;;;;;;;-1:-1:-1;819:35:8;;;;;;;;;;;197:6153:1;;5:122:-1;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:535;;;;283:2;271:9;262:7;258:23;254:32;251:2;;;299:1;296;289:12;251:2;334:1;351:64;407:7;387:9;351:64;;;341:74;;313:108;452:2;470:64;526:7;517:6;506:9;502:22;470:64;;;460:74;;431:109;571:2;589:64;645:7;636:6;625:9;621:22;589:64;;;579:74;;550:109;245:424;;;;;;676:105;;745:31;770:5;745:31;;;734:42;728:53;-1:-1;;728:53;788:128;-1:-1;;;;;857:54;;840:76;;197:6153:1;;;;;;"}, "deployedBytecode": {"linkReferences": {}, "object": "", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x59A5F12D GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD30895E4 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD30895E4 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xD7EB798C EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xE4B6C992 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0xFE145FBD EQ PUSH2 0x1CD JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x59A5F12D EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x5AD39846 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xC0D35449 EQ PUSH2 0x17D JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6880689 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x2A035B6C EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x2AF1E2F8 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x2E535940 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x48373963 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x4ED61446 EQ PUSH2 0x14D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0x201 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11A PUSH2 0x115 CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A0F JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST PUSH2 0x105 PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F1 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x19BC JUMP JUMPDEST PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x206A JUMP JUMPDEST PUSH2 0xDC PUSH2 0xD12 JUMP JUMPDEST PUSH2 0xDC PUSH2 0xD21 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0xD30 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x2059 JUMP JUMPDEST PUSH2 0xDC PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1F8D JUMP JUMPDEST PUSH2 0x11A PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0xE2A JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x1DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1996 JUMP JUMPDEST PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x204B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xC50F4648FA14BE3EE68F160A224CC5D77EEEAC58EA500C6FB63FAC6788AFB0BE SWAP3 PUSH2 0x263 SWAP3 AND SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2CA JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x200B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 DUP3 ADD SLOAD DUP3 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP2 LT PUSH2 0x2FC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD SWAP4 SWAP1 SWAP5 MUL SWAP1 SWAP2 ADD SWAP5 POP SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0x33B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 DUP8 MSTORE PUSH1 0x3 SWAP1 SWAP5 MSTORE PUSH1 0x40 SWAP1 SWAP6 KECCAK256 PUSH1 0x4 SLOAD SWAP5 SWAP1 SWAP2 MUL SWAP1 SWAP2 ADD SWAP5 POP SWAP3 SWAP1 SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP2 EQ ISZERO PUSH2 0x422 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP2 LT PUSH2 0x3AC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 SWAP1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP4 ADD SWAP7 POP SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0x3EC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x45A JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1FFB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x469 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x1 DUP1 DUP7 ADD DUP1 SLOAD PUSH2 0xFFFF PUSH1 0x1 PUSH1 0x20 SHL DUP1 DUP4 DIV DUP3 AND SWAP1 SWAP5 ADD DUP2 AND SWAP1 SWAP4 MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH2 0x4AF SWAP2 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP2 DIV AND DUP6 DUP6 PUSH2 0xEEE JUMP JUMPDEST PUSH2 0x880 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4C2 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x4AF SWAP1 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP6 DUP6 PUSH2 0xEEE JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4F1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x865 JUMPI PUSH2 0x4FF PUSH2 0x1469 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x9188D312 SWAP2 PUSH2 0x532 SWAP2 PUSH1 0x4 ADD PUSH2 0x2078 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x560 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x588 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A2D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP1 DUP10 ADD SLOAD SWAP3 SWAP4 POP PUSH2 0xFFFF SWAP2 DUP3 AND PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP4 DIV DUP3 AND ADD AND LT ISZERO PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x203B JUMP JUMPDEST PUSH1 0x1 DUP7 DUP2 ADD SLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x0 SWAP3 PUSH2 0x5F5 SWAP3 PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH2 0xFFFF AND ADD SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP10 ADD DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP PUSH2 0x623 PUSH2 0x14B4 JUMP JUMPDEST POP PUSH1 0x20 DUP1 DUP4 ADD MLOAD ADD MLOAD PUSH2 0x634 PUSH2 0x14B4 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 DUP9 ADD SLOAD DUP3 MLOAD PUSH2 0x653 SWAP2 PUSH2 0xFFFF AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x20 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x683 SWAP3 PUSH3 0x10000 SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x6BB SWAP3 PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH6 0xFFFF00000000 NOT AND PUSH1 0x1 PUSH1 0x20 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x6F6 SWAP3 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH8 0xFFFF000000000000 NOT AND PUSH1 0x1 PUSH1 0x30 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x733 SWAP3 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH10 0xFFFF0000000000000000 NOT AND PUSH1 0x1 PUSH1 0x40 SHL PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 DUP2 SWAP1 SSTORE SWAP1 SWAP5 POP AND PUSH2 0x79F JUMPI DUP7 SLOAD PUSH1 0x1 DUP9 ADD SLOAD PUSH1 0xFF AND PUSH1 0x0 NOT SWAP1 SWAP2 ADD EQ ISZERO PUSH2 0x783 JUMPI PUSH2 0x77E CALLER PUSH2 0x201 JUMP JUMPDEST PUSH2 0x79F JUMP JUMPDEST PUSH1 0x1 DUP8 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP2 DUP3 AND SWAP1 SWAP4 ADD AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST DUP1 MLOAD PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x80 SWAP1 SWAP7 ADD MLOAD PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x30 SHL PUSH1 0x1 PUSH1 0x20 SHL PUSH3 0x10000 PUSH2 0xFFFF DUP1 DUP10 AND SWAP1 SWAP11 ADD DUP11 AND PUSH2 0xFFFF NOT SWAP1 SWAP9 AND SWAP8 SWAP1 SWAP8 OR DUP8 DUP2 DIV DUP11 AND SWAP1 SWAP7 ADD DUP10 AND SWAP1 SWAP7 MUL PUSH4 0xFFFF0000 NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP6 DUP2 DIV DUP9 AND SWAP1 SWAP4 ADD DUP8 AND SWAP1 SWAP5 MUL PUSH6 0xFFFF00000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP3 DUP2 DIV DUP7 AND SWAP1 SWAP7 ADD DUP6 AND SWAP1 SWAP2 MUL PUSH8 0xFFFF000000000000 NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP2 DUP2 DIV DUP5 AND SWAP1 SWAP5 ADD SWAP1 SWAP3 AND SWAP1 SWAP2 MUL PUSH10 0xFFFF0000000000000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH2 0x880 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1FEB JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND MUL OR SWAP1 SSTORE DUP5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x5F4BFC4BB3EFC8381128908C65DBA16D774750A4508F87B52ED63512630609F9 SWAP2 PUSH2 0x8D7 SWAP2 DUP10 SWAP2 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x1F9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x201B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x95E JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x959 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x959 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x202B JUMP JUMPDEST PUSH2 0x9C6 PUSH2 0x14E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x9F4 PUSH1 0x5 PUSH1 0x1 PUSH2 0x1084 JUMP JUMPDEST SWAP1 POP PUSH2 0xA10 DUP4 DUP6 DUP4 PUSH1 0x5 DUP2 LT PUSH2 0xA06 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x10CF JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0xA1D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x2 SWAP2 DUP3 MUL ADD SLOAD DUP5 MSTORE PUSH2 0xA3B SWAP1 PUSH1 0xA SWAP1 PUSH2 0x1084 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ DUP1 PUSH2 0xA4B JUMPI POP PUSH1 0x4 DUP2 GT JUMPDEST ISZERO PUSH2 0xAF5 JUMPI PUSH2 0xAE4 PUSH1 0x1 PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1B6CDE10 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xADC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A62 JUMP JUMPDEST SUB PUSH1 0x2 PUSH2 0x1084 JUMP JUMPDEST SWAP1 POP PUSH2 0xAF0 DUP5 DUP3 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST PUSH2 0xB05 DUP5 DUP7 DUP4 PUSH1 0x5 DUP2 LT PUSH2 0xA06 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 SLOAD DUP2 LT PUSH2 0xB12 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD SLOAD DUP6 DUP3 ADD MSTORE DUP2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xE4 SHL PUSH4 0x1B6CDE1 MUL DUP2 MSTORE SWAP1 MLOAD PUSH2 0xBB1 SWAP4 PUSH1 0x1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH4 0x1B6CDE10 SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP10 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB85 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xBA9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A62 JUMP JUMPDEST SUB PUSH1 0x3 PUSH2 0x1084 JUMP JUMPDEST SWAP1 POP PUSH2 0xBBD DUP6 DUP3 PUSH2 0x10CF JUMP JUMPDEST DUP5 PUSH1 0x2 DUP2 SLOAD DUP2 LT PUSH2 0xBCA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP2 DUP3 MUL ADD SLOAD SWAP1 DUP6 SWAP1 PUSH1 0x20 MUL ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x48CA02657A8ACB3A062F53BF24CA611BB25D8108F29F5E3C5E468080A44DCA5D SWAP1 PUSH2 0xC15 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xC30 JUMPI PUSH2 0xC30 PUSH2 0x125E JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xC6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC92 SWAP2 SWAP1 PUSH2 0x2078 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCE8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A2D JUMP JUMPDEST PUSH1 0xA0 ADD MLOAD SWAP1 POP DUP3 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0xD02 JUMPI DUP1 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xC3D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xD38 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP2 SLOAD PUSH1 0x60 SWAP5 DUP2 MUL DUP3 ADD DUP6 ADD DUP5 MSTORE SWAP3 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP5 SWAP2 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 DUP6 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xD76 JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xE4A PUSH2 0x1518 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0xE7A JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH3 0x10000 DUP2 DIV DUP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND ISZERO PUSH2 0xFD5 JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xF1E SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND DUP6 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF SWAP5 DUP6 AND MUL OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xFD0 JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xF55 SWAP1 PUSH2 0xFFFF AND DUP3 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0xFD0 JUMPI PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP1 SWAP4 ADD DUP4 AND PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE DUP4 SLOAD SWAP2 AND GT ISZERO PUSH2 0xFA1 JUMPI PUSH2 0xFA1 CALLER PUSH2 0x201 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH2 0xFD0 SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0xFBC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD DUP5 PUSH2 0xEEE JUMP JUMPDEST PUSH2 0x104F JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0xFE8 SWAP1 PUSH2 0xFFFF AND DUP6 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP2 POP DUP2 AND ISZERO PUSH2 0x104F JUMPI PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP1 SWAP4 ADD DUP4 AND PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 DUP2 SWAP1 SSTORE DUP4 SLOAD SWAP2 AND GT ISZERO PUSH2 0x1034 JUMPI PUSH2 0x1034 CALLER PUSH2 0x201 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH2 0x104F SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH1 0xFF AND SWAP1 DUP2 LT PUSH2 0xFBC JUMPI INVALID JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xFFFF AND DUP4 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x1075 JUMPI POP PUSH1 0x0 SWAP1 POP DUP3 DUP3 SUB PUSH2 0x107D JUMP JUMPDEST POP POP DUP1 DUP3 SUB PUSH1 0x0 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 NUMBER SUB BLOCKHASH CALLER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10A0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F2C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP4 DUP2 DUP2 PUSH2 0x10C4 JUMPI INVALID JUMPDEST MOD SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10D7 PUSH2 0x1469 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 PUSH2 0x110A SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2078 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1138 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1160 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A2D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE SWAP5 DUP2 MSTORE DUP2 DUP4 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP5 AND SWAP6 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP1 DUP9 ADD MLOAD DUP6 AND SWAP2 DUP7 ADD SWAP2 DUP3 MSTORE SWAP9 DUP8 ADD MLOAD DUP5 AND SWAP9 DUP6 ADD SWAP9 DUP10 MSTORE PUSH1 0xE0 SWAP1 SWAP7 ADD MLOAD DUP4 AND PUSH1 0xA0 DUP6 ADD SWAP1 DUP2 MSTORE DUP10 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP13 SSTORE PUSH1 0x0 SWAP12 DUP13 MSTORE SWAP3 SWAP1 SWAP11 KECCAK256 SWAP5 MLOAD PUSH1 0x2 SWAP1 SWAP11 MUL SWAP1 SWAP5 ADD SWAP9 DUP10 SSTORE SWAP1 MLOAD SWAP8 ADD DUP1 SLOAD SWAP4 MLOAD SWAP5 MLOAD SWAP7 MLOAD SWAP3 MLOAD DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH10 0xFFFF0000000000000000 NOT SWAP4 DUP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH8 0xFFFF000000000000 NOT SWAP9 DUP5 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH6 0xFFFF00000000 NOT SWAP8 DUP6 AND PUSH3 0x10000 MUL PUSH4 0xFFFF0000 NOT SWAP12 SWAP1 SWAP6 AND PUSH2 0xFFFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP10 SWAP1 SWAP10 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP5 SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0x1283 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C1 SWAP1 PUSH2 0x1FDB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH2 0x1342 SWAP4 DUP6 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x1339 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x12BA JUMP JUMPDEST POP POP POP POP PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP5 SWAP6 POP SWAP3 SWAP4 PUSH2 0x13FC SWAP4 SWAP2 SWAP3 DUP6 SWAP1 DUP5 ADD DUP3 ISZERO PUSH2 0x1339 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x12BA JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND LT PUSH2 0x143B JUMPI PUSH1 0x1 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1465 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1484 PUSH2 0x154D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1568 PUSH2 0x14B4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1575 PUSH2 0x14B4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 CALLDATALOAD PUSH2 0x2149 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15B9 PUSH2 0x15B4 DUP3 PUSH2 0x20BB JUMP JUMPDEST PUSH2 0x2094 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0xC0 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x15DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x160C JUMPI DUP2 PUSH2 0x15F4 DUP9 DUP3 PUSH2 0x18CF JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xC0 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x15E1 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0x1635 PUSH2 0x15B4 DUP3 PUSH2 0x20DC JUMP JUMPDEST SWAP2 POP DUP2 DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x164B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x160C JUMPI DUP2 PUSH2 0x1661 DUP9 DUP3 PUSH2 0x197E JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x164E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 CALLDATALOAD PUSH2 0x2182 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x16A2 PUSH2 0x15B4 DUP3 PUSH2 0x20FA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x16BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16C9 DUP4 DUP3 DUP5 PUSH2 0x219C JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16EF PUSH1 0x80 PUSH2 0x2094 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1709 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1715 DUP5 DUP3 DUP6 ADD PUSH2 0x1683 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1726 DUP5 DUP5 DUP4 ADD PUSH2 0x175B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x173A DUP5 DUP3 DUP6 ADD PUSH2 0x175B JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0x174F DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x176D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1777 PUSH1 0xA0 PUSH2 0x2094 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1785 DUP5 DUP5 PUSH2 0x1972 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1796 DUP5 DUP5 DUP4 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x17AA DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x17BE DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x17D2 DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17FC PUSH2 0x100 PUSH2 0x2094 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1822 DUP5 DUP3 DUP6 ADD PUSH2 0x1683 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x183F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x184B DUP5 DUP3 DUP6 ADD PUSH2 0x16D2 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x185F DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1873 DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1887 DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x189B DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x18AF DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x18C3 DUP5 DUP3 DUP6 ADD PUSH2 0x1972 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18EB PUSH1 0xC0 PUSH2 0x2094 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18F9 DUP5 DUP5 PUSH2 0x197E JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x190A DUP5 DUP5 DUP4 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x191E DUP5 DUP3 DUP6 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1932 DUP5 DUP3 DUP6 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1946 DUP5 DUP3 DUP6 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x195A DUP5 DUP3 DUP6 ADD PUSH2 0x1966 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 CALLDATALOAD PUSH2 0x2169 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 MLOAD PUSH2 0x2169 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 CALLDATALOAD PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158E DUP3 MLOAD PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B4 DUP5 DUP5 PUSH2 0x1582 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B4 DUP5 DUP5 PUSH2 0x1616 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B4 DUP5 DUP5 PUSH2 0x1677 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B4 DUP5 DUP3 DUP6 ADD PUSH2 0x17DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B4 DUP5 DUP5 PUSH2 0x198A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8C DUP4 DUP4 PUSH2 0x1DC8 JUMP JUMPDEST POP POP PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA0 DUP4 DUP4 PUSH2 0x1F09 JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1AB9 PUSH2 0x1AB4 DUP3 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x2221 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2149 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD3 DUP3 PUSH2 0x212B JUMP JUMPDEST PUSH2 0x1ADD DUP2 DUP6 PUSH2 0x213B JUMP JUMPDEST SWAP4 POP PUSH2 0x1AE8 DUP4 PUSH2 0x2122 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1B13 JUMPI PUSH2 0x1AFE DUP7 DUP4 MLOAD PUSH2 0x1A80 JUMP JUMPDEST SWAP6 POP PUSH2 0x1B09 DUP3 PUSH2 0x2122 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1AEB JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1B26 DUP2 PUSH2 0x212F JUMP JUMPDEST PUSH2 0x1B30 DUP2 DUP5 PUSH2 0x2144 JUMP JUMPDEST SWAP3 POP PUSH2 0x1B3B DUP3 PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1B66 JUMPI PUSH2 0x1B51 DUP6 DUP4 MLOAD PUSH2 0x1A94 JUMP JUMPDEST SWAP5 POP PUSH2 0x1B5C DUP3 PUSH2 0x2122 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1B3E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1B76 DUP2 PUSH2 0x2135 JUMP JUMPDEST PUSH2 0x1B80 DUP2 DUP5 PUSH2 0x2144 JUMP JUMPDEST SWAP3 POP PUSH2 0x1B8B DUP3 PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1B66 JUMPI PUSH2 0x1BA1 DUP6 DUP4 MLOAD PUSH2 0x1A94 JUMP JUMPDEST SWAP5 POP PUSH2 0x1BAC DUP3 PUSH2 0x2122 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1B8E JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2154 JUMP JUMPDEST PUSH2 0x1AB9 PUSH2 0x1BCB DUP3 PUSH2 0x2128 JUMP JUMPDEST PUSH2 0x2128 JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2191 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BE6 PUSH1 0x2C DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x426F746820706C6179657273206861766520746F2068617665207069636B6564 DUP2 MSTORE PUSH32 0x2074686569722063617264730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C45 PUSH1 0xC DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x496E76616C6964206D6F76650000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C7E PUSH1 0x29 DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x706C6179657273207475726E20646F6573206E6F7420657175616C2065697468 DUP2 MSTORE PUSH1 0x1 PUSH1 0xB9 SHL PUSH9 0x32B910383630BCB2B9 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CCC PUSH1 0xD DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x4E6F7420796F7572207475726E00000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D05 PUSH1 0x25 DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x506C617965722068617320616C7265616479207069636B656420746865697220 DUP2 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL PUSH5 0x6361726473 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D4F PUSH1 0x28 DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x5472616E73616374696F6E2073656E646572206D75737420626520706C617965 DUP2 MSTORE PUSH1 0x1 PUSH1 0xC1 SHL PUSH8 0x3910189037B91019 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9C PUSH1 0xF DUP4 PUSH2 0x213B JUMP JUMPDEST PUSH32 0x4E6F7420656E6F756768206D616E610000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1DD9 DUP5 DUP3 PUSH2 0x1F09 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1DEC PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1DFF PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1E12 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1E25 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x104F PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1E48 DUP2 PUSH2 0x21DB JUMP JUMPDEST PUSH2 0x1E52 DUP6 DUP3 PUSH2 0x1F09 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x1E62 DUP2 PUSH2 0x21C8 JUMP JUMPDEST PUSH2 0x1E6F PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH2 0x1E79 DUP2 PUSH2 0x21E9 JUMP JUMPDEST PUSH2 0x1E86 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH2 0x1E90 DUP2 PUSH2 0x21F7 JUMP JUMPDEST PUSH2 0x1E9D PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH2 0x1EA7 DUP2 PUSH2 0x2205 JUMP JUMPDEST PUSH2 0x1EB4 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST POP PUSH2 0x1EBE DUP2 PUSH2 0x2213 JUMP JUMPDEST PUSH2 0x1B66 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x1F00 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1EE3 DUP3 DUP3 PUSH2 0x1AC8 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1EF8 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1F12 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2169 JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x2128 JUMP JUMPDEST PUSH2 0x1AB9 DUP2 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x1AB9 PUSH2 0x1F27 DUP3 PUSH2 0x217C JUMP JUMPDEST PUSH2 0x2232 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F38 DUP3 DUP7 PUSH2 0x1F1B JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x1F48 DUP3 DUP6 PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x1F58 DUP3 DUP5 PUSH2 0x1AA8 JUMP JUMPDEST POP PUSH1 0x14 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1ABF JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x1F80 DUP3 DUP6 PUSH2 0x1B6D JUMP JUMPDEST PUSH2 0x158E PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1BB6 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x1FAA DUP3 DUP8 PUSH2 0x1BD0 JUMP JUMPDEST PUSH2 0x1FB7 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x1FC4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1E38 JUMP JUMPDEST PUSH2 0x1FD2 PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x1ABF JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1BD9 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1C71 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1CBF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1D42 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10C9 DUP2 PUSH2 0x1D8F JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1DC8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x158E DUP2 DUP5 PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1F00 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1F09 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10C9 DUP3 DUP5 PUSH2 0x1F12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x20B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x20D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x20F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x3 SWAP1 JUMP JUMPDEST POP PUSH1 0x5 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH2 0x2170 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 LT PUSH2 0x2165 JUMPI INVALID JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 LT PUSH2 0x2165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21B7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x219F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x104F JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x2128 JUMP JUMPDEST PUSH2 0x2169 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x1BCB DUP4 PUSH2 0x2128 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x2244 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x224A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x2250 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 PUSH2 0x21D6 DUP4 PUSH2 0x2256 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH2 0x223E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C9 DUP3 PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH1 0x10 SHR SWAP1 JUMP JUMPDEST PUSH1 0x20 SHR SWAP1 JUMP JUMPDEST PUSH1 0x30 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 SHR SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x26 0xbf NOT 0xe1 PUSH10 0x75B57A9CA0AC088F968B CALLDATALOAD 0xbc INVALID 0x49 0xcb PUSH18 0x81E9F1730083BB5EAC7F3D6C657870657269 PUSH14 0x656E74616CF50037000000000000 ", "sourceMap": "197:6153:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;197:6153:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;642:26:8;;;:::i;:::-;;;;;;;;;;;;;;;;6181:167:1;;;;;;;;;:::i;:::-;;1887:136:8;;;;;;;;;:::i;:::-;;;;;;;;695:3997:1;;;;;;;;;:::i;2029:1893:8:-;;;;;;;;;:::i;4440:382::-;;;;;;;;;:::i;:::-;;;;;;;;529:22;;;:::i;372:28:1:-;;;:::i;4828:122:8:-;;;;;;;;;:::i;:::-;;;;;;;;501:22;;;:::i;613:23::-;;;:::i;:::-;;;;;;;;557:50;;;;;;;;;:::i;1666:215::-;;;;;;;;;:::i;:::-;;;;;;;;642:26;;;;;;-1:-1:-1;;;;;642:26:8;;:::o;6181:167:1:-;6239:13;:30;;-1:-1:-1;;;;;;6239:30:1;-1:-1:-1;;;;;6239:30:1;;;;;;;;;;;6279:11;:24;;-1:-1:-1;;;;;;6279:24:1;;;6319:22;;;;;;6327:13;;6319:22;;;;;;;;;;6181:167;:::o;1887:136:8:-;-1:-1:-1;;;;;1985:19:8;1961:5;1985:19;;;:11;:19;;;;;:31;;;;;;1887:136::o;695:3997:1:-;745:11;;;;;-1:-1:-1;;;;;745:11:1;760:10;745:25;737:51;;;;-1:-1:-1;;;;;737:51:1;;;;;;;;;;;;;;;;;948:7;;;-1:-1:-1;;;;;948:7:1;898:35;936:20;;;:11;:20;;;;;969:32;;;;936:66;;898:35;;936:20;969:32;;;;;936:66;;;;;;;;;;;;;;;1063:7;;-1:-1:-1;;;;;1063:7:1;1051:20;;:11;:20;;;;;;1063:7;1084:32;;;1051:66;;936;;;;;;;;-1:-1:-1;1051:20:1;1084:32;;;1051:66;;;;;;;;;;;;;;;1172:7;;-1:-1:-1;;;;;1172:7:1;;;1160:20;;;:11;:20;;;;;;;1465:11;;1051:66;;;;;;;;-1:-1:-1;1160:20:1;1172:7;;;1465:11;;;:22;;1461:430;;;1534:7;;-1:-1:-1;;;;;1534:7:1;1522:20;;;;:11;:20;;;;;1534:7;1555:32;;;1522:66;;1555:32;;;;;1522:66;;;;;;;;;;;;;;1634:7;;;-1:-1:-1;;;;;1634:7:1;1622:20;;:11;:20;;;;;;;1655:32;;;;1622:66;;1522;;;;;;;;-1:-1:-1;1622:20:1;1655:32;;;1622:66;;;;;;;;;;;;;;1728:7;;-1:-1:-1;;;;;1728:7:1;1716:20;;;:11;:20;;;;;;;1622:66;;;;;;;;-1:-1:-1;1716:20:1;-1:-1:-1;1728:7:1;-1:-1:-1;1461:430:1;;;1806:7;;1791:11;;1806:7;1791:11;;-1:-1:-1;;;;;1791:11:1;;;1806:7;;1791:22;1787:104;;1829:51;;-1:-1:-1;;;;;1829:51:1;;;;;;;;1787:104;1923:28;;1965:4;:19;;;;;;;;;1961:2608;;;2024:21;;;;;;;-1:-1:-1;;;2024:21:1;;;;;:25;;;2000:49;;;;;-1:-1:-1;;2000:49:1;;;;;;;;2130:63;;-1:-1:-1;;;2137:23:1;;;;2162:17;2181:11;2130:6;:63::i;:::-;1961:2608;;;2222:18;2214:4;:26;;;;;;;;;2210:2359;;;2330:30;;;;2323:70;;-1:-1:-1;;;2330:30:1;;;;2362:17;2381:11;2323:6;:70::i;2210:2359::-;2423:12;2415:4;:20;;;;;;;;;2411:2158;;;2452:22;;:::i;:::-;2477:13;;2499:23;;2477:46;;-1:-1:-1;;;;;2477:46:1;;-1:-1:-1;;;;;2477:13:1;;;;:21;;:46;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2477:46:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2477:46:1;;;;;;39:16:-1;36:1;17:17;2:54;101:4;2477:46:1;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;2477:46:1;;;;;;;;;2575:18;;;;:27;;;2546:21;;;;;2452:71;;-1:-1:-1;2546:56:1;;;;-1:-1:-1;;;2546:21:1;;;;;:25;:56;;;2538:84;;;;-1:-1:-1;;;;;2538:84:1;;;;;;;;;2728:21;;;;;2755:18;;;;:27;;;2637:16;;2708:75;;-1:-1:-1;;;2728:21:1;;;;:25;;2708:19;:75::i;:::-;2672:21;;;2671:112;;;;;;-1:-1:-1;;;2671:112:1;-1:-1:-1;;2671:112:1;;;;;;;;;;;-1:-1:-1;2798:43:1;;:::i;:::-;-1:-1:-1;2844:18:1;;;;;:27;;2885:41;;:::i;:::-;-1:-1:-1;2929:18:1;;;;:25;;;3074:24;;;;3100:22;;3054:69;;3074:24;;;3054:19;:69::i;:::-;3015:24;;;3014:109;;-1:-1:-1;;3014:109:1;;;;;;;;;;3225:23;;;;3014:109;;-1:-1:-1;3178:71:1;;3198:25;;;;;;3178:19;:71::i;:::-;3138:25;;;3137:112;;-1:-1:-1;;3137:112:1;;;;;;;;;;;;3345:20;;;;3137:112;;-1:-1:-1;3301:65:1;;-1:-1:-1;;;3321:22:1;;;;;3301:19;:65::i;:::-;3264:22;;;3263:103;;-1:-1:-1;;3263:103:1;-1:-1:-1;;;3263:103:1;;;;;;;;;;3466:22;;;;3263:103;;-1:-1:-1;3420:69:1;;-1:-1:-1;;;3440:24:1;;;;;3420:19;:69::i;:::-;3381:24;;;3380:109;;-1:-1:-1;;3380:109:1;-1:-1:-1;;;3380:109:1;;;;;;;;;;3603:29;;;;3380:109;;-1:-1:-1;3550:83:1;;-1:-1:-1;;;3570:31:1;;;;;3550:19;:83::i;:::-;3504:31;;;3503:130;;-1:-1:-1;;3503:130:1;-1:-1:-1;;;3503:130:1;;;;;;;;;;;;-1:-1:-1;3699:24:1;3695:315;;3828:30;;3861:1;3801:23;;;;;-1:-1:-1;;3828:34:1;;;3801:61;3796:200;;;3886:19;3894:10;3886:7;:19::i;:::-;3796:200;;;3952:23;;;;:25;;-1:-1:-1;;3952:25:1;;;;;;;;;;;;;;;;3796:200;4115:20;;4089:23;;;;;4203:21;;;;4286:18;;;;4370:20;;;;4470:27;;;;;-1:-1:-1;;;;;;;;;4176:24:1;4089:23;;;;:46;;;4063:72;;-1:-1:-1;;4063:72:1;;;;;;;4176:24;;;;;:48;;;4149:75;;;;;-1:-1:-1;;4149:75:1;;;;;;;4262:21;;;;;:42;;;4238:66;;;;;-1:-1:-1;;4238:66:1;;;;;;;4344:23;;;;;:46;;;4318:72;;;;;-1:-1:-1;;4318:72:1;;;;;;;4437:30;;;;;:60;;;4404:93;;;;;;-1:-1:-1;;4404:93:1;;;;;;;;;-1:-1:-1;2411:2158:1;;-1:-1:-1;;2411:2158:1;;4536:22;;-1:-1:-1;;;;;4536:22:1;;;;;;;;2411:2158;4579:11;:24;;-1:-1:-1;;;;;;4579:24:1;;-1:-1:-1;;;;;4579:24:1;;;;;;4630:23;;4619:66;;;;;;4624:4;;4630:23;4655:17;;4579:24;;4619:66;;;;;;;;;;695:3997;;;;;;:::o;2029:1893:8:-;2147:10;2100:32;2135:23;;;:11;:23;;;;;2188:18;;:23;2180:73;;;;-1:-1:-1;;;;;2180:73:8;;;;;;;;;2268:7;;-1:-1:-1;;;;;2268:7:8;2279:10;2268:21;2264:397;;;2321:7;;-1:-1:-1;;;;;2321:7:8;2351:1;2309:20;;;:11;:20;;;;;:39;:43;2305:100;;2372:11;:18;;-1:-1:-1;;2372:18:8;2386:4;2372:18;;;2305:100;2264:397;;;2433:7;;-1:-1:-1;;;;;2433:7:8;2444:10;2433:21;2429:232;;;2486:7;;-1:-1:-1;;;;;2486:7:8;2516:1;2474:20;;;:11;:20;;;;;:39;:43;2470:100;;2537:11;:18;;-1:-1:-1;;2537:18:8;2551:4;2537:18;;;2429:232;;;2600:50;;-1:-1:-1;;;;;2600:50:8;;;;;;;;2429:232;2671:32;;:::i;:::-;:50;;;;;;;;2712:1;2671:50;;;;2716:1;2671:50;;;;2719:1;2671:50;;;;;2761:16;2780:19;2794:1;2797;2780:13;:19::i;:::-;2761:38;;2809:54;2824:11;2837:12;2850:11;2837:25;;;;;;;;;;;2809:14;:54::i;:::-;2896:11;2908:1;2896:14;;;;;;;;;;;;;;;;;;;;:21;2873:44;;3073:20;;3087:2;;3073:13;:20::i;:::-;3054:39;;3202:11;3187;:26;:57;;;;3243:1;3229:11;:15;3187:57;3183:368;;;3274:47;3316:1;3288:13;;;;;;;;;-1:-1:-1;;;;;3288:13:8;-1:-1:-1;;;;;3288:23:8;;:25;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3288:25:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3288:25:8;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3288:25:8;;;;;;;;;:29;3319:1;3274:13;:47::i;:::-;3260:61;;3364:40;3379:11;3392;3364:14;:40::i;:::-;3183:368;;;3486:54;3501:11;3514:12;3527:11;3514:25;;;;;;3486:54;3584:11;3596:1;3584:14;;;;;;;;;;;;;;;;;;;;;;;:21;3561:20;;;:44;3649:13;;:25;;;-1:-1:-1;;;;;3649:25:8;;;;3635:47;;3579:1;;-1:-1:-1;;;;;3649:13:8;;:23;;:25;;;;;3584:14;3649:25;;;;;3584:14;3649:13;:25;;;5:2:-1;;;;30:1;27;20:12;5:2;3649:25:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3649:25:8;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3649:25:8;;;;;;;;;:29;3680:1;3635:13;:47::i;:::-;3616:66;;3692:40;3707:11;3720;3692:14;:40::i;:::-;3766:11;3778:1;3766:14;;;;;;;;;;;;;;;;;;;;;:21;;3743:17;;:20;;;:44;3803:47;;;;;;3818:12;;3832:17;;3803:47;;;;;;;;;;3865:11;;;;3861:55;;;3892:13;:11;:13::i;:::-;2029:1893;;;;;;:::o;4440:382::-;4511:6;;;4560:230;4577:11;:18;4575:1;:20;4560:230;;;4617:16;4636:13;;4658:14;;-1:-1:-1;;;;;4636:13:8;;;;:21;;4658:11;;4670:1;;4658:14;;;;;;;;;;;;:21;;;4636:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4636:44:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4636:44:8;;;;;;39:16:-1;36:1;17:17;2:54;101:4;4636:44:8;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;4636:44:8;;;;;;;;;:50;;;4617:69;;4717:8;4705:20;;:9;:20;;;4701:79;;;4756:9;4745:20;;4701:79;-1:-1:-1;4597:3:8;;4560:230;;;-1:-1:-1;4807:8:8;4440:382;-1:-1:-1;;4440:382:8:o;529:22::-;;;-1:-1:-1;;;;;529:22:8;;:::o;372:28:1:-;;;-1:-1:-1;;;;;372:28:1;;:::o;4828:122:8:-;4888:17;;:::i;:::-;-1:-1:-1;;;;;4924:19:8;;;;;;:11;:19;;;;;;;;4917:26;;;;;;;;;;;;;;;;;;;;;;4924:19;;4917:26;;;;4924:19;;4917:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4917:26:8;;;;;;;;-1:-1:-1;;;4917:26:8;;;;;;;;-1:-1:-1;;;4917:26:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4917:26:8;;;-1:-1:-1;4917:26:8;;;;;;;;;;;;;;4828:122;-1:-1:-1;;4828:122:8:o;501:22::-;;;-1:-1:-1;;;;;501:22:8;;:::o;613:23::-;;;;;;:::o;557:50::-;;;;;;;;;;;;;;;;;:::o;1666:215::-;1733:17;;:::i;:::-;-1:-1:-1;;;;;1782:19:8;;1763:16;1782:19;;;:11;:19;;;;;:31;;;;1831:43;;1782:31;;;;;:19;:31;;1831:43;;;;;;;;;;;;;;;1824:50;;;;;;;;1831:43;;;;;;;1824:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1824:50:8;;;;;;;;-1:-1:-1;;;1824:50:8;;;;;;;;-1:-1:-1;;;1824:50:8;;;;;;;;;;-1:-1:-1;;1666:215:8;;;:::o;4758:1417:1:-;4927:25;;;;4884:28;;4927:25;;;;;:29;4923:1246;;5045:25;;;;5025:60;;5045:25;;;;;5072:12;5025:19;:60::i;:::-;4973:25;;;4972:113;;-1:-1:-1;;4972:113:1;;;;;;;;;;;-1:-1:-1;5104:25:1;;;5100:564;;5221:24;;;;5201:68;;5221:24;;5247:21;5201:19;:68::i;:::-;5150:24;;;5149:120;;-1:-1:-1;;5149:120:1;;;;;;;;;-1:-1:-1;5292:25:1;;;5288:362;;5341:23;;;;:25;;;;;;;;;;;-1:-1:-1;;5341:25:1;;;;;;;;5418:30;;5392:23;;:56;5388:130;;;5476:19;5484:10;5476:7;:19::i;:::-;5593:23;;;;5569:48;;5539:92;;5546:21;;5569:11;;5593:23;;;5569:48;;;;;;;;;;;;;;;;5619:11;5539:6;:92::i;:::-;4923:1246;;;5767:24;;;;5747:59;;5767:24;;5793:12;5747:19;:59::i;:::-;5696:24;;;5695:111;;-1:-1:-1;;5695:111:1;;;;;;;;;-1:-1:-1;5825:25:1;;;5821:338;;5870:23;;;;:25;;;;;;;;;;;-1:-1:-1;;5870:25:1;;;;;;;;5943:30;;5917:23;;:56;5913:122;;;5997:19;6005:10;5997:7;:19::i;:::-;6106:23;;;;6082:48;;6052:92;;6059:21;;6082:11;;6106:23;;;6082:48;;;;;6052:92;4758:1417;;;;:::o;164:173:5:-;226:6;234;259:1;255:5;;:1;:5;;;252:52;;;-1:-1:-1;284:1:5;;-1:-1:-1;287:5:5;;;276:17;;252:52;-1:-1:-1;;321:5:5;;;328:1;164:173;;;;;;:::o;867:372:8:-;950:4;967:9;1062:10;1119:1;1104:12;:16;1094:27;1143:10;1024:147;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1024:147:8;;;997:188;;;;;;979:216;;967:228;;1219:13;1212:4;:20;;;;;;1205:27;;;867:372;;;;;:::o;1245:415::-;1336:16;;:::i;:::-;1355:13;;:29;;-1:-1:-1;;;;;1355:29:8;;-1:-1:-1;;;;;1355:13:8;;;;:21;;:29;;1377:6;;1355:29;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1355:29:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1355:29:8;;;;;;39:16:-1;36:1;17:17;2:54;101:4;1355:29:8;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;1355:29:8;;;;;;;;;1413:239;;;;;;;;;;;;1474:15;;;;1413:239;;;;;;;;;;;1512:16;;;;;1413:239;;;;;;;;1548:13;;;;;1413:239;;;;;;;;1583:11;;;;1413:239;;;;;;;;1623:18;;;;;1413:239;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;-1:-1;1395:258:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1395:258:8;-1:-1:-1;;1395:258:8;;;-1:-1:-1;;;1395:258:8;-1:-1:-1;;1395:258:8;;;-1:-1:-1;;;1395:258:8;-1:-1:-1;;1395:258:8;;;;;-1:-1:-1;;1395:258:8;;;;-1:-1:-1;;1395:258:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1245:415:8:o;3998:436::-;4048:11;;;;4040:68;;;;-1:-1:-1;;;;;4040:68:8;;;;;;;;;4169:7;;-1:-1:-1;;;;;4169:7:8;4119:22;4157:20;;;:11;:20;;;;;;;;4144:46;;;;;;;;;;;;;;;;;;;4119:22;;4144:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4144:46:8;;;;;;;;-1:-1:-1;;;4144:46:8;;;;;;;;-1:-1:-1;;;4144:46:8;;;;;;;;;;;;;;;;;;;;;;;;:12;:46::i;:::-;4250:7;;-1:-1:-1;;;;;4250:7:8;4200:22;4238:20;;;:11;:20;;;;;;;;4225:46;;;;;;;;;;;;;;;;;4119:71;;-1:-1:-1;4200:22:8;;4225:46;;;;4200:22;;4225:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4225:46:8;;;;;;;;-1:-1:-1;;;4225:46:8;;;;;;;;-1:-1:-1;;;4225:46:8;;;;;;;;;;;;;;;;;;;;4200:71;;4305:15;4286:34;;:15;:34;;;4282:146;;4350:7;;4336:11;:21;;-1:-1:-1;;;;;4350:7:8;;;;4336:21;-1:-1:-1;;;;;;4336:21:8;;;;;;;;;4282:146;;;4410:7;;4396:11;:21;;-1:-1:-1;;;;;4410:7:8;;;;4396:21;-1:-1:-1;;;;;;4396:21:8;;;;;;;;;4282:146;3998:436;;:::o;197:6153:1:-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;197:6153:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;197:6153:1;;;-1:-1:-1;;197:6153:1:o;:::-;;;;;;;;;;;;;-1:-1:-1;197:6153:1;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;197:6153:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;176:779;;317:3;310:4;302:6;298:17;294:27;284:2;;335:1;332;325:12;284:2;372:6;359:20;394:104;409:88;490:6;409:88;;;394:104;;;385:113;;515:5;540:6;533:5;526:21;570:4;562:6;558:17;548:27;;592:4;587:3;583:14;576:21;;645:6;692:3;684:4;676:6;672:17;667:3;663:27;660:36;657:2;;;709:1;706;699:12;657:2;734:1;719:230;744:6;741:1;738:13;719:230;;;802:3;824:61;881:3;869:10;824:61;;;812:74;;-1:-1;909:4;900:14;;;;937:4;928:14;;;;;766:1;759:9;719:230;;;723:14;277:678;;;;;;;;982:615;;1097:3;1090:4;1082:6;1078:17;1074:27;1064:2;;1115:1;1112;1105:12;1064:2;1139:3;1157:78;1172:62;1227:6;1172:62;;1157:78;1148:87;;1252:5;1311:6;1358:3;1350:4;1342:6;1338:17;1333:3;1329:27;1326:36;1323:2;;;1375:1;1372;1365:12;1323:2;1400:1;1385:206;1410:6;1407:1;1404:13;1385:206;;;1468:3;1490:37;1523:3;1511:10;1490:37;;;1478:50;;-1:-1;1551:4;1542:14;;;;1570;;;;;1432:1;1425:9;1385:206;;1605:134;;1680:54;1726:6;1713:20;1680:54;;1747:436;;1856:3;1849:4;1841:6;1837:17;1833:27;1823:2;;1874:1;1871;1864:12;1823:2;1904:6;1898:13;1926:61;1941:45;1979:6;1941:45;;1926:61;1917:70;;2007:6;2000:5;1993:21;2043:4;2035:6;2031:17;2076:4;2069:5;2065:16;2111:3;2102:6;2097:3;2093:16;2090:25;2087:2;;;2128:1;2125;2118:12;2087:2;2138:39;2170:6;2165:3;2160;2138:39;;;1816:367;;;;;;;;2230:958;;2351:5;2339:9;2334:3;2330:19;2326:31;2323:2;;;2370:1;2367;2360:12;2323:2;2388:20;2403:4;2388:20;;;2458:24;;2379:29;;-1:-1;2502:18;2491:30;;2488:2;;;2534:1;2531;2524:12;2488:2;2568:66;2630:3;2621:6;2610:9;2606:22;2568:66;;;2544:91;;-1:-1;2700:2;2733:88;2817:3;2793:22;;;2733:88;;;2726:4;2719:5;2715:16;2708:114;2656:177;2885:3;2919:88;3003:3;2994:6;2983:9;2979:22;2919:88;;;2912:4;2905:5;2901:16;2894:114;2843:176;3073:3;3107:59;3162:3;3153:6;3142:9;3138:22;3107:59;;;3100:4;3093:5;3089:16;3082:85;3029:149;2317:871;;;;;3241:979;;3369:4;3357:9;3352:3;3348:19;3344:30;3341:2;;;3387:1;3384;3377:12;3341:2;3405:20;3420:4;3405:20;;;3396:29;-1:-1;3477:1;3508:59;3563:3;3543:9;3508:59;;;3484:84;;-1:-1;3632:2;3665:59;3720:3;3696:22;;;3665:59;;;3658:4;3651:5;3647:16;3640:85;3589:147;3786:2;3819:59;3874:3;3865:6;3854:9;3850:22;3819:59;;;3812:4;3805:5;3801:16;3794:85;3746:144;3942:2;3975:59;4030:3;4021:6;4010:9;4006:22;3975:59;;;3968:4;3961:5;3957:16;3950:85;3900:146;4105:3;4139:59;4194:3;4185:6;4174:9;4170:22;4139:59;;;4132:4;4125:5;4121:16;4114:85;4056:154;3335:885;;;;;4263:1643;;4385:5;4373:9;4368:3;4364:19;4360:31;4357:2;;;4404:1;4401;4394:12;4357:2;4422:21;4437:5;4422:21;;;4493:24;;4413:30;;-1:-1;4537:18;4526:30;;4523:2;;;4569:1;4566;4559:12;4523:2;4603:66;4665:3;4656:6;4645:9;4641:22;4603:66;;;4579:91;;-1:-1;4755:2;4740:18;;4734:25;4779:18;4768:30;;4765:2;;;4811:1;4808;4801:12;4765:2;4846:81;4923:3;4914:6;4903:9;4899:22;4846:81;;;4839:4;4832:5;4828:16;4821:107;4691:248;4995:2;5028:59;5083:3;5074:6;5063:9;5059:22;5028:59;;;5021:4;5014:5;5010:16;5003:85;4949:150;5156:2;5189:59;5244:3;5235:6;5224:9;5220:22;5189:59;;;5182:4;5175:5;5171:16;5164:85;5109:151;5314:3;5348:59;5403:3;5394:6;5383:9;5379:22;5348:59;;;5341:4;5334:5;5330:16;5323:85;5270:149;5470:3;5504:59;5559:3;5550:6;5539:9;5535:22;5504:59;;;5497:4;5490:5;5486:16;5479:85;5429:146;5627:3;5661:59;5716:3;5707:6;5696:9;5692:22;5661:59;;;5654:4;5647:5;5643:16;5636:85;5585:147;5791:3;5825:59;5880:3;5871:6;5860:9;5856:22;5825:59;;;5818:4;5811:5;5807:16;5800:85;5742:154;4351:1555;;;;;5955:1056;;6068:4;6056:9;6051:3;6047:19;6043:30;6040:2;;;6086:1;6083;6076:12;6040:2;6104:20;6119:4;6104:20;;;6095:29;-1:-1;6176:1;6207:49;6252:3;6232:9;6207:49;;;6183:74;;-1:-1;6320:2;6353:48;6397:3;6373:22;;;6353:48;;;6346:4;6339:5;6335:16;6328:74;6278:135;6466:2;6499:48;6543:3;6534:6;6523:9;6519:22;6499:48;;;6492:4;6485:5;6481:16;6474:74;6423:136;6609:2;6642:48;6686:3;6677:6;6666:9;6662:22;6642:48;;;6635:4;6628:5;6624:16;6617:74;6569:133;6754:3;6788:48;6832:3;6823:6;6812:9;6808:22;6788:48;;;6781:4;6774:5;6770:16;6763:74;6712:136;6907:3;6941:48;6985:3;6976:6;6965:9;6961:22;6941:48;;;6934:4;6927:5;6923:16;6916:74;6858:143;6034:977;;;;;7018:116;;7084:45;7121:6;7108:20;7084:45;;7141:120;;7218:38;7248:6;7242:13;7218:38;;7268:118;;7335:46;7373:6;7360:20;7335:46;;7393:122;;7471:39;7502:6;7496:13;7471:39;;7522:241;;7626:2;7614:9;7605:7;7601:23;7597:32;7594:2;;;7642:1;7639;7632:12;7594:2;7677:1;7694:53;7739:7;7719:9;7694:53;;;7684:63;7588:175;-1:-1;;;;7588:175;7770:425;;7923:2;7911:9;7902:7;7898:23;7894:32;7891:2;;;7939:1;7936;7929:12;7891:2;7974:31;;8025:18;8014:30;;8011:2;;;8057:1;8054;8047:12;8011:2;8077:102;8171:7;8162:6;8151:9;8147:22;8077:102;;8202:288;;8329:3;8317:9;8308:7;8304:23;8300:33;8297:2;;;8346:1;8343;8336:12;8297:2;8381:1;8398:76;8466:7;8446:9;8398:76;;8497:257;;8609:2;8597:9;8588:7;8584:23;8580:32;8577:2;;;8625:1;8622;8615:12;8577:2;8660:1;8677:61;8730:7;8710:9;8677:61;;8761:386;;8898:2;8886:9;8877:7;8873:23;8869:32;8866:2;;;8914:1;8911;8904:12;8866:2;8949:24;;8993:18;8982:30;;8979:2;;;9025:1;9022;9015:12;8979:2;9045:86;9123:7;9114:6;9103:9;9099:22;9045:86;;9154:263;;9269:2;9257:9;9248:7;9244:23;9240:32;9237:2;;;9285:1;9282;9275:12;9237:2;9320:1;9337:64;9393:7;9373:9;9337:64;;9425:273;;9560:98;9654:3;9646:6;9560:98;;;-1:-1;;9687:4;9678:14;;9553:145;9707:173;;9794:46;9836:3;9828:6;9794:46;;;-1:-1;;9869:4;9860:14;;9787:93;9888:191;10005:68;10033:39;10066:5;10033:39;;;10005:68;;;10000:3;9993:81;9987:92;;;10086:120;10169:31;10194:5;10169:31;;10300:777;;10479:74;10547:5;10479:74;;;10566:100;10659:6;10654:3;10566:100;;;10559:107;;10686:76;10756:5;10686:76;;;10783:1;10768:287;10793:6;10790:1;10787:13;10768:287;;;10840:111;10947:3;10938:6;10932:13;10840:111;;;10833:118;;10968:80;11041:6;10968:80;;;10958:90;-1:-1;10815:1;10808:9;10768:287;;;-1:-1;11068:3;;10458:619;-1:-1;;;;10458:619;11118:591;11251:52;11297:5;11251:52;;;11316:84;11393:6;11388:3;11316:84;;;11309:91;;11420:54;11468:5;11420:54;;;11495:1;11480:217;11505:6;11502:1;11499:13;11480:217;;;11552:63;11611:3;11602:6;11596:13;11552:63;;;11545:70;;11632:58;11683:6;11632:58;;;11622:68;-1:-1;11527:1;11520:9;11480:217;;;11484:14;11230:479;;;;;11750:591;11883:52;11929:5;11883:52;;;11948:84;12025:6;12020:3;11948:84;;;11941:91;;12052:54;12100:5;12052:54;;;12127:1;12112:217;12137:6;12134:1;12131:13;12112:217;;;12184:63;12243:3;12234:6;12228:13;12184:63;;;12177:70;;12264:58;12315:6;12264:58;;;12254:68;-1:-1;12159:1;12152:9;12112:217;;12349:111;12426:28;12448:5;12426:28;;12467:159;12568:52;12588:31;12613:5;12588:31;;;12568:52;;12633:138;12722:43;12759:5;12722:43;;12779:465;;12939:67;13003:2;12998:3;12939:67;;;13039:66;13019:87;;13140:66;13135:2;13126:12;;13119:88;13235:2;13226:12;;12925:319;-1:-1;;12925:319;13253:364;;13413:67;13477:2;13472:3;13413:67;;;13513:66;13493:87;;13608:2;13599:12;;13399:218;-1:-1;;13399:218;13626:465;;13786:67;13850:2;13845:3;13786:67;;;13886:66;13866:87;;-1:-1;;;;;13982:2;13973:12;;13966:88;14082:2;14073:12;;13772:319;-1:-1;;13772:319;14100:364;;14260:67;14324:2;14319:3;14260:67;;;14360:66;14340:87;;14455:2;14446:12;;14246:218;-1:-1;;14246:218;14473:465;;14633:67;14697:2;14692:3;14633:67;;;14733:66;14713:87;;-1:-1;;;;;14829:2;14820:12;;14813:88;14929:2;14920:12;;14619:319;-1:-1;;14619:319;14947:465;;15107:67;15171:2;15166:3;15107:67;;;15207:66;15187:87;;-1:-1;;;;;15303:2;15294:12;;15287:88;15403:2;15394:12;;15093:319;-1:-1;;15093:319;15421:364;;15581:67;15645:2;15640:3;15581:67;;;15681:66;15661:87;;15776:2;15767:12;;15567:218;-1:-1;;15567:218;15874:1092;16090:22;;16023:4;16014:14;;;16118:61;16018:3;16090:22;16118:61;;;16043:142;16259:4;16252:5;16248:16;16242:23;16271:60;16325:4;16320:3;16316:14;16303:11;16271:60;;;16195:142;16412:4;16405:5;16401:16;16395:23;16424:60;16478:4;16473:3;16469:14;16456:11;16424:60;;;16347:143;16562:4;16555:5;16551:16;16545:23;16574:60;16628:4;16623:3;16619:14;16606:11;16574:60;;;16500:140;16714:4;16707:5;16703:16;16697:23;16726:60;16780:4;16775:3;16771:14;16758:11;16726:60;;;16650:142;16873:4;16866:5;16862:16;16856:23;16885:60;16939:4;16934:3;16930:14;16917:11;16885:60;;18220:1369;18443:22;;18370:4;18361:14;;;18490:55;18443:22;18490:55;;;18551:61;18602:3;18585:11;18551:61;;;-1:-1;;18680:3;18669:15;;18663:22;18710:54;18663:22;18710:54;;;18770:60;18824:4;18819:3;18815:14;18802:11;18770:60;;;18628:208;18894:54;18938:9;18894:54;;;18954:60;19008:4;19003:3;18999:14;18986:11;18954:60;;;18846:174;19075:54;19119:9;19075:54;;;19135:60;19189:4;19184:3;19180:14;19167:11;19135:60;;;19030:171;19258:54;19302:9;19258:54;;;19318:60;19372:4;19367:3;19363:14;19350:11;19318:60;;;19211:173;19448:54;19492:9;19448:54;;;19508:60;19562:4;19557:3;19553:14;19540:11;19508:60;;19677:655;19906:22;;19834:4;19941:37;;;19677:655;;19825:14;;;;19993:146;19825:14;19906:22;19993:146;;;19985:154;;19854:297;20230:4;20223:5;20219:16;20213:23;20242:58;20294:4;20289:3;20285:14;20272:11;20242:58;;;-1:-1;20323:4;19807:525;-1:-1;;;19807:525;20339:107;20410:30;20434:5;20410:30;;20577:110;20650:31;20675:5;20650:31;;20821:104;20890:29;20913:5;20890:29;;21053:151;21150:48;21168:29;21191:5;21168:29;;;21150:48;;21211:545;;21398:71;21465:3;21456:6;21398:71;;;21491:1;21486:3;21482:11;21475:18;;21504:75;21575:3;21566:6;21504:75;;;21601:2;21596:3;21592:12;21585:19;;21615:91;21702:3;21693:6;21615:91;;;-1:-1;21728:2;21719:12;;21386:370;-1:-1;;;21386:370;21763:213;21881:2;21866:18;;21895:71;21870:9;21939:6;21895:71;;21983:510;22221:3;22206:19;;22236:117;22210:9;22326:6;22236:117;;;22364:119;22478:3;22467:9;22463:19;22454:6;22364:119;;22500:201;22612:2;22597:18;;22626:65;22601:9;22664:6;22626:65;;22708:674;22973:3;22958:19;;22988:77;22962:9;23038:6;22988:77;;;23076:72;23144:2;23133:9;23129:18;23120:6;23076:72;;;23159:129;23284:2;23273:9;23269:18;23260:6;23159:129;;;23299:73;23367:3;23356:9;23352:19;23343:6;23299:73;;;22944:438;;;;;;;;23389:407;23580:2;23594:47;;;23565:18;;23655:131;23565:18;23655:131;;23803:407;23994:2;24008:47;;;23979:18;;24069:131;23979:18;24069:131;;24217:407;24408:2;24422:47;;;24393:18;;24483:131;24393:18;24483:131;;24631:407;24822:2;24836:47;;;24807:18;;24897:131;24807:18;24897:131;;25045:407;25236:2;25250:47;;;25221:18;;25311:131;25221:18;25311:131;;25459:407;25650:2;25664:47;;;25635:18;;25725:131;25635:18;25725:131;;25873:407;26064:2;26078:47;;;26049:18;;26139:131;26049:18;26139:131;;26287:326;26461:3;26446:19;;26476:127;26450:9;26576:6;26476:127;;26620:373;26794:2;26808:47;;;26779:18;;26869:114;26779:18;26969:6;26869:114;;27000:209;27116:2;27101:18;;27130:69;27105:9;27172:6;27130:69;;27216:213;27334:2;27319:18;;27348:71;27323:9;27392:6;27348:71;;27436:205;27550:2;27535:18;;27564:67;27539:9;27604:6;27564:67;;27648:256;27710:2;27704:9;27736:17;;;27811:18;27796:34;;27832:22;;;27793:62;27790:2;;;27868:1;27865;27858:12;27790:2;27884;27877:22;27688:216;;-1:-1;27688:216;27911:282;;28094:18;28086:6;28083:30;28080:2;;;28126:1;28123;28116:12;28080:2;-1:-1;28155:4;28143:17;;;28173:15;;28017:176;28200:233;;28357:18;28349:6;28346:30;28343:2;;;28389:1;28386;28379:12;28343:2;-1:-1;28418:4;28406:17;;28280:153;28440:255;;28580:18;28572:6;28569:30;28566:2;;;28612:1;28609;28602:12;28566:2;-1:-1;28685:4;28656;28633:17;;;;-1:-1;;28629:33;28675:15;;28503:192;28704:141;28833:4;28821:17;;28802:43;28856:108;28951:6;28932:32;29092:127;29202:12;;29186:33;29226:96;-1:-1;29314:3;;29298:24;29329:96;-1:-1;29417:3;;29401:24;29842:192;29974:19;;;30023:4;30014:14;;29967:67;30043:140;30174:3;30152:31;-1:-1;30152:31;30512:105;;30581:31;30606:5;30581:31;;30744:92;30817:13;30810:21;;30793:43;30929:125;;31015:1;31008:5;31005:12;30995:2;;31021:9;30995:2;-1:-1;31044:5;30989:65;31061:91;31140:6;31129:18;;31112:40;31159:128;-1:-1;;;;;31228:54;;31211:76;31380:88;31458:4;31447:16;;31430:38;31783:128;;31869:1;31862:5;31859:12;31849:2;;31885:1;31882;31875:12;32237:129;;32322:39;32355:5;32322:39;;32374:268;32439:1;32446:101;32460:6;32457:1;32454:13;32446:101;;;32527:11;;;32521:18;32508:11;;;32501:39;32482:2;32475:10;32446:101;;;32562:6;32559:1;32556:13;32553:2;;;-1:-1;;32627:1;32609:16;;32602:27;32423:219;32650:159;;32739:65;32769:34;32792:10;32769:34;;;32739:65;;32816:161;;32906:66;32937:34;32960:10;32937:34;;32984:160;;33073:66;33103:35;33127:10;33103:35;;33151:160;;33240:66;33270:35;33294:10;33270:35;;33318:160;;33407:66;33437:35;33461:10;33437:35;;33485:160;;33574:66;33604:35;33628:10;33604:35;;33652:103;;33724:26;33744:5;33843:89;33907:20;33921:5;33907:20;;33939:88;;34001:21;34016:5;34101:3;34097:15;;34078:40;34128:81;34193:2;34189:14;;34170:39;34318:91;34393:2;34389:14;;34370:39;34419:91;34494:2;34490:14;;34471:39;34520:91;34595:2;34591:14;;34572:39;34621:91;34696:2;34692:14;;34673:39"}}}}, "contracts/Cards.sol": {"Cards": {"abi": [{"constant": false, "inputs": [], "name": "cardCount", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"components": [{"name": "name", "type": "string"}, {"components": [{"name": "name", "type": "string"}, {"components": [{"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "opponent", "type": "tuple"}, {"components": [{"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "player", "type": "tuple"}, {"name": "manaCost", "type": "uint16"}], "name": "ability", "type": "tuple"}, {"name": "initHealth", "type": "uint16"}, {"name": "initDefence", "type": "uint16"}, {"name": "initMana", "type": "uint16"}, {"name": "speed", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "card", "type": "tuple"}], "name": "createCard", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}], "name": "cards", "outputs": [{"name": "name", "type": "string"}, {"components": [{"name": "name", "type": "string"}, {"components": [{"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "opponent", "type": "tuple"}, {"components": [{"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "player", "type": "tuple"}, {"name": "manaCost", "type": "uint16"}], "name": "ability", "type": "tuple"}, {"name": "initHealth", "type": "uint16"}, {"name": "initDefence", "type": "uint16"}, {"name": "initMana", "type": "uint16"}, {"name": "speed", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "index", "type": "uint256"}], "name": "getCard", "outputs": [{"components": [{"name": "name", "type": "string"}, {"components": [{"name": "name", "type": "string"}, {"components": [{"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "opponent", "type": "tuple"}, {"components": [{"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "player", "type": "tuple"}, {"name": "manaCost", "type": "uint16"}], "name": "ability", "type": "tuple"}, {"name": "initHealth", "type": "uint16"}, {"name": "initDefence", "type": "uint16"}, {"name": "initMana", "type": "uint16"}, {"name": "speed", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "", "type": "tuple"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "cardId", "type": "uint256"}, {"components": [{"name": "name", "type": "string"}, {"components": [{"name": "name", "type": "string"}, {"components": [{"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "opponent", "type": "tuple"}, {"components": [{"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "player", "type": "tuple"}, {"name": "manaCost", "type": "uint16"}], "name": "ability", "type": "tuple"}, {"name": "initHealth", "type": "uint16"}, {"name": "initDefence", "type": "uint16"}, {"name": "initMana", "type": "uint16"}, {"name": "speed", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "indexed": false, "name": "card", "type": "tuple"}], "name": "NewCard", "type": "event"}], "evm": {"assembly": "    /* \"contracts/Cards.sol\":119:555  contract Cards is CryptoBeastsTypes {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/Cards.sol\":119:555  contract Cards is CryptoBeastsTypes {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Cards.sol\":119:555  contract Cards is CryptoBeastsTypes {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/Cards.sol\":119:555  contract Cards is CryptoBeastsTypes {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x1b6cde10\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x377b723a\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8dc10768\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x9188d312\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Cards.sol\":374:453  function cardCount() public returns (uint) {... */\n    tag_3:\n      tag_7\n      tag_8\n      jump\t// in\n    tag_7:\n      mload(0x40)\n      tag_9\n      swap2\n      swap1\n      jump(tag_10)\n    tag_9:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Cards.sol\":232:368  function createCard(Card memory card) public... */\n    tag_4:\n      tag_11\n      tag_12\n      calldatasize\n      0x04\n      jump(tag_13)\n    tag_12:\n      tag_14\n      jump\t// in\n    tag_11:\n      stop\n        /* \"contracts/Cards.sol\":206:225  Card[] public cards */\n    tag_5:\n      tag_15\n      tag_16\n      calldatasize\n      0x04\n      jump(tag_17)\n    tag_16:\n      tag_18\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_9\n      swap9\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      jump(tag_20)\n        /* \"contracts/Cards.sol\":459:553  function getCard(uint index) public returns (Card memory) {... */\n    tag_6:\n      tag_21\n      tag_22\n      calldatasize\n      0x04\n      jump(tag_17)\n    tag_22:\n      tag_23\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_9\n      swap2\n      swap1\n      jump(tag_25)\n        /* \"contracts/Cards.sol\":374:453  function cardCount() public returns (uint) {... */\n    tag_8:\n        /* \"contracts/Cards.sol\":411:415  uint */\n      0x00\n        /* \"contracts/Cards.sol\":434:446  cards.length */\n      sload\n        /* \"contracts/Cards.sol\":374:453  function cardCount() public returns (uint) {... */\n    tag_26:\n      swap1\n      jump\t// out\n        /* \"contracts/Cards.sol\":232:368  function createCard(Card memory card) public... */\n    tag_14:\n        /* \"contracts/Cards.sol\":291:302  uint cardId */\n      0x00\n        /* \"--CODEGEN--\":27:37   */\n      dup1\n      sload\n        /* \"contracts/Cards.sol\":324:325  1 */\n      0x01\n        /* \"--CODEGEN--\":23:41   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":45:68   */\n      dup1\n      dup5\n      sstore\n        /* \"contracts/Cards.sol\":305:321  cards.push(card) */\n      dup4\n      dup1\n      mstore\n      dup5\n      mload\n      dup1\n      mload\n        /* \"contracts/Cards.sol\":324:325  1 */\n      swap3\n      swap4\n        /* \"--CODEGEN--\":23:41   */\n      swap2\n      swap3\n        /* \"contracts/Cards.sol\":316:320  card */\n      dup7\n      swap3\n        /* \"contracts/Cards.sol\":305:321  cards.push(card) */\n      0x06\n      mul\n      0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\n      add\n      swap2\n      tag_29\n      swap2\n      dup4\n      swap2\n      0x20\n      add\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      pop\n      0x20\n      dup3\n      dup2\n      add\n      mload\n      dup1\n      mload\n      dup1\n      mload\n      swap2\n      swap3\n      0x01\n      dup6\n      add\n      swap3\n      tag_31\n      swap3\n      dup5\n      swap3\n      add\n      swap1\n      tag_30\n      jump\t// in\n    tag_31:\n      pop\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x02)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x04)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x06)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x08)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      pop\n      pop\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x02)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x04)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x06)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x08)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      pop\n      pop\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      pop\n      pop\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x05\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x05\n      add\n      exp(0x0100, 0x02)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x05\n      add\n      exp(0x0100, 0x04)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xa0\n      dup3\n      add\n      mload\n      dup2\n      0x05\n      add\n      exp(0x0100, 0x06)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xc0\n      dup3\n      add\n      mload\n      dup2\n      0x05\n      add\n      exp(0x0100, 0x08)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xe0\n      dup3\n      add\n      mload\n      dup2\n      0x05\n      add\n      exp(0x0100, 0x0a)\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      pop\n      pop\n        /* \"contracts/Cards.sol\":305:325  cards.push(card) - 1 */\n      sub\n        /* \"contracts/Cards.sol\":291:325  uint cardId = cards.push(card) - 1 */\n      swap1\n      pop\n        /* \"contracts/Cards.sol\":340:361  NewCard(cardId, card) */\n      0xb1b17b23cffcf729d34b26aac4faa18940cec6ac11f34c678d0bfe232b00dc81\n        /* \"contracts/Cards.sol\":348:354  cardId */\n      dup2\n        /* \"contracts/Cards.sol\":356:360  card */\n      dup4\n        /* \"contracts/Cards.sol\":340:361  NewCard(cardId, card) */\n      mload(0x40)\n      tag_32\n      swap3\n      swap2\n      swap1\n      jump(tag_33)\n    tag_32:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Cards.sol\":232:368  function createCard(Card memory card) public... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Cards.sol\":206:225  Card[] public cards */\n    tag_18:\n      0x00\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_34\n      jumpi\n      invalid\n    tag_34:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap2\n      dup3\n      swap1\n      keccak256\n      0x06\n      swap2\n      swap1\n      swap2\n      mul\n      add\n      dup1\n      sload\n      0x40\n      dup1\n      mload\n      0x02\n      0x01\n      dup5\n      and\n      iszero\n      0x0100\n      mul\n      not(0x00)\n      add\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      div\n      0x1f\n      dup2\n      add\n      dup6\n      swap1\n      div\n      dup6\n      mul\n      dup4\n      add\n      dup6\n      add\n      swap1\n      swap2\n      mstore\n      dup1\n      dup3\n      mstore\n      swap2\n      swap4\n      pop\n      swap2\n      dup4\n      swap2\n      swap1\n      dup4\n      add\n      dup3\n      dup3\n      dup1\n      iszero\n      tag_36\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_37\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_36)\n    tag_37:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_38:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_38\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_36:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      dup1\n      0x01\n      add\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_39\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_40\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_39)\n    tag_40:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_41:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_41\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_39:\n      pop\n      pop\n      pop\n      swap2\n      dup4\n      mstore\n      pop\n      pop\n      0x40\n      dup1\n      mload\n      0xa0\n      dup1\n      dup3\n      add\n      dup4\n      mstore\n      0x01\n      dup6\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup5\n      mstore\n      0x010000\n      dup1\n      dup4\n      div\n      dup3\n      and\n      0x20\n      dup7\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x0100000000\n      dup1\n      dup6\n      div\n      dup5\n      and\n      dup8\n      dup10\n      add\n      mstore\n      0x01000000000000\n      dup1\n      dup7\n      div\n      dup6\n      and\n      0x60\n      dup1\n      dup11\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      shl(0x40, 0x01)\n      swap7\n      dup8\n      swap1\n      div\n      dup7\n      and\n      0x80\n      dup1\n      dup12\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup5\n      dup13\n      add\n      swap10\n      swap1\n      swap10\n      mstore\n      dup10\n      mload\n      swap8\n      dup9\n      add\n      dup11\n      mstore\n      0x02\n      dup13\n      add\n      sload\n      dup1\n      dup8\n      and\n      dup10\n      mstore\n      dup6\n      dup2\n      div\n      dup8\n      and\n      swap5\n      dup10\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n      dup3\n      dup5\n      div\n      dup7\n      and\n      dup9\n      dup12\n      add\n      mstore\n      dup2\n      dup5\n      div\n      dup7\n      and\n      dup9\n      dup3\n      add\n      mstore\n      swap3\n      dup7\n      swap1\n      div\n      dup6\n      and\n      swap8\n      dup8\n      add\n      swap8\n      swap1\n      swap8\n      mstore\n      swap7\n      dup9\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n      0x03\n      swap1\n      swap8\n      add\n      sload\n      dup2\n      and\n      swap3\n      swap1\n      swap6\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x05\n      swap1\n      swap7\n      add\n      sload\n      swap5\n      swap6\n      dup6\n      dup5\n      and\n      swap6\n      swap5\n      dup6\n      div\n      dup5\n      and\n      swap5\n      swap3\n      dup4\n      div\n      dup5\n      and\n      swap4\n      swap2\n      dup4\n      div\n      dup3\n      and\n      swap3\n      swap1\n      dup2\n      div\n      dup3\n      and\n      swap2\n      shl(0x50, 0x01)\n      swap1\n      swap2\n      div\n      and\n      dup9\n      jump\t// out\n        /* \"contracts/Cards.sol\":459:553  function getCard(uint index) public returns (Card memory) {... */\n    tag_23:\n        /* \"contracts/Cards.sol\":504:515  Card memory */\n      tag_42\n      tag_43\n      jump\t// in\n    tag_42:\n        /* \"contracts/Cards.sol\":534:539  cards */\n      0x00\n        /* \"contracts/Cards.sol\":540:545  index */\n      dup3\n        /* \"contracts/Cards.sol\":534:546  cards[index] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_45\n      jumpi\n      invalid\n    tag_45:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/Cards.sol\":527:546  return cards[index] */\n      0x40\n      dup1\n      mload\n        /* \"contracts/Cards.sol\":534:546  cards[index] */\n      0x06\n      swap4\n      swap1\n      swap4\n      mul\n      swap1\n      swap2\n      add\n        /* \"contracts/Cards.sol\":527:546  return cards[index] */\n      dup1\n      sload\n      0x02\n      0x0100\n      0x01\n      dup4\n      and\n      iszero\n      dup2\n      mul\n      not(0x00)\n      add\n      swap1\n      swap3\n      and\n      div\n      0x1f\n      dup2\n      add\n      dup7\n      swap1\n      div\n      swap1\n      swap6\n      mul\n      dup5\n      add\n      0x0120\n      swap1\n      dup2\n      add\n      swap1\n      swap4\n      mstore\n      dup4\n      add\n      dup5\n      dup2\n      mstore\n      swap3\n      swap4\n        /* \"contracts/Cards.sol\":534:546  cards[index] */\n      swap1\n      swap3\n        /* \"contracts/Cards.sol\":527:546  return cards[index] */\n      dup5\n      swap3\n      swap1\n      swap2\n        /* \"contracts/Cards.sol\":534:546  cards[index] */\n      dup5\n      swap2\n        /* \"contracts/Cards.sol\":527:546  return cards[index] */\n      dup5\n      add\n        /* \"contracts/Cards.sol\":534:546  cards[index] */\n      dup3\n        /* \"contracts/Cards.sol\":527:546  return cards[index] */\n      dup3\n      dup1\n      iszero\n      tag_47\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_48\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_47)\n    tag_48:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_49:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_49\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_47:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_50\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_51\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_50)\n    tag_51:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_52:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_52\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_50:\n      pop\n      pop\n      pop\n      swap2\n      dup4\n      mstore\n      pop\n      pop\n      0x40\n      dup1\n      mload\n      0xa0\n      dup1\n      dup3\n      add\n      dup4\n      mstore\n      0x01\n      dup6\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup5\n      mstore\n      0x010000\n      dup1\n      dup4\n      div\n      dup3\n      and\n      0x20\n      dup1\n      dup8\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x0100000000\n      dup1\n      dup6\n      div\n      dup5\n      and\n      dup8\n      dup10\n      add\n      mstore\n      0x01000000000000\n      dup1\n      dup7\n      div\n      dup6\n      and\n      0x60\n      dup1\n      dup11\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      shl(0x40, 0x01)\n      swap7\n      dup8\n      swap1\n      div\n      dup7\n      and\n      0x80\n      dup1\n      dup12\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup5\n      dup13\n      add\n      swap10\n      swap1\n      swap10\n      mstore\n      dup10\n      mload\n      dup1\n      dup10\n      add\n      dup12\n      mstore\n      0x02\n      dup14\n      add\n      sload\n      dup1\n      dup9\n      and\n      dup3\n      mstore\n      dup7\n      dup2\n      div\n      dup9\n      and\n      dup3\n      dup8\n      add\n      mstore\n      dup5\n      dup2\n      div\n      dup9\n      and\n      dup3\n      dup14\n      add\n      mstore\n      dup4\n      dup2\n      div\n      dup9\n      and\n      dup3\n      dup5\n      add\n      mstore\n      dup9\n      swap1\n      div\n      dup8\n      and\n      dup2\n      dup12\n      add\n      mstore\n      dup11\n      dup13\n      add\n      mstore\n      0x03\n      swap1\n      swap12\n      add\n      sload\n      dup6\n      and\n      swap10\n      dup12\n      add\n      swap10\n      swap1\n      swap10\n      mstore\n      swap10\n      dup12\n      mstore\n      0x05\n      swap12\n      swap1\n      swap12\n      add\n      sload\n      dup1\n      dup4\n      and\n      swap12\n      dup12\n      add\n      swap12\n      swap1\n      swap12\n      mstore\n      dup11\n      div\n      dup2\n      and\n      swap5\n      dup10\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n      swap6\n      dup9\n      div\n      dup4\n      and\n      swap5\n      dup8\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n      swap2\n      dup7\n      div\n      dup2\n      and\n      swap2\n      dup6\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap2\n      dup5\n      div\n      dup3\n      and\n      swap1\n      dup4\n      add\n      mstore\n      shl(0x50, 0x01)\n      swap1\n      swap3\n      div\n      swap1\n      swap2\n      and\n      0xc0\n      swap1\n      swap2\n      add\n      mstore\n      swap3\n        /* \"contracts/Cards.sol\":459:553  function getCard(uint index) public returns (Card memory) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Cards.sol\":119:555  contract Cards is CryptoBeastsTypes {... */\n    tag_30:\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      0x1f\n      lt\n      tag_54\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_56)\n    tag_54:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_56\n      jumpi\n      swap2\n      dup3\n      add\n    tag_55:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_56\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_55)\n    tag_56:\n      pop\n      tag_57\n      swap3\n      swap2\n      pop\n      tag_58\n      jump\t// in\n    tag_57:\n      pop\n      swap1\n      jump\t// out\n    tag_43:\n      mload(0x40)\n      dup1\n      0x0260\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_59\n      tag_60\n      jump\t// in\n    tag_59:\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x40\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x60\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x80\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xa0\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xc0\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_58:\n      tag_26\n      swap2\n      swap1\n    tag_62:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_57\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_62)\n    tag_60:\n      mload(0x40)\n      dup1\n      0x0180\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_64\n      tag_65\n      jump\t// in\n    tag_64:\n      dup2\n      mstore\n      0x20\n      add\n      tag_66\n      tag_65\n      jump\t// in\n    tag_66:\n      dup2\n      mstore\n      0x00\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_65:\n      0x40\n      dup1\n      mload\n      0xa0\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n        /* \"--CODEGEN--\":6:440   */\n    tag_68:\n      0x00\n        /* \"--CODEGEN--\":104:107   */\n      dup3\n        /* \"--CODEGEN--\":97:101   */\n      0x1f\n        /* \"--CODEGEN--\":89:95   */\n      dup4\n        /* \"--CODEGEN--\":85:102   */\n      add\n        /* \"--CODEGEN--\":81:108   */\n      slt\n        /* \"--CODEGEN--\":71:73   */\n      tag_69\n      jumpi\n        /* \"--CODEGEN--\":122:123   */\n      0x00\n        /* \"--CODEGEN--\":119:120   */\n      dup1\n        /* \"--CODEGEN--\":112:124   */\n      revert\n        /* \"--CODEGEN--\":71:73   */\n    tag_69:\n        /* \"--CODEGEN--\":159:165   */\n      dup2\n        /* \"--CODEGEN--\":146:166   */\n      calldataload\n        /* \"--CODEGEN--\":181:242   */\n      tag_70\n        /* \"--CODEGEN--\":196:241   */\n      tag_71\n        /* \"--CODEGEN--\":234:240   */\n      dup3\n        /* \"--CODEGEN--\":196:241   */\n      jump(tag_72)\n    tag_71:\n        /* \"--CODEGEN--\":181:242   */\n      jump(tag_73)\n    tag_70:\n        /* \"--CODEGEN--\":172:242   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":262:268   */\n      dup1\n        /* \"--CODEGEN--\":255:260   */\n      dup3\n        /* \"--CODEGEN--\":248:269   */\n      mstore\n        /* \"--CODEGEN--\":298:302   */\n      0x20\n        /* \"--CODEGEN--\":290:296   */\n      dup4\n        /* \"--CODEGEN--\":286:303   */\n      add\n        /* \"--CODEGEN--\":331:335   */\n      0x20\n        /* \"--CODEGEN--\":324:329   */\n      dup4\n        /* \"--CODEGEN--\":320:336   */\n      add\n        /* \"--CODEGEN--\":366:369   */\n      dup6\n        /* \"--CODEGEN--\":357:363   */\n      dup4\n        /* \"--CODEGEN--\":352:355   */\n      dup4\n        /* \"--CODEGEN--\":348:364   */\n      add\n        /* \"--CODEGEN--\":345:370   */\n      gt\n        /* \"--CODEGEN--\":342:344   */\n      iszero\n      tag_74\n      jumpi\n        /* \"--CODEGEN--\":383:384   */\n      0x00\n        /* \"--CODEGEN--\":380:381   */\n      dup1\n        /* \"--CODEGEN--\":373:385   */\n      revert\n        /* \"--CODEGEN--\":342:344   */\n    tag_74:\n        /* \"--CODEGEN--\":393:434   */\n      tag_75\n        /* \"--CODEGEN--\":427:433   */\n      dup4\n        /* \"--CODEGEN--\":422:425   */\n      dup3\n        /* \"--CODEGEN--\":417:420   */\n      dup5\n        /* \"--CODEGEN--\":393:434   */\n      jump(tag_76)\n    tag_75:\n        /* \"--CODEGEN--\":64:440   */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":487:1397   */\n    tag_78:\n      0x00\n        /* \"--CODEGEN--\":597:602   */\n      0x0180\n        /* \"--CODEGEN--\":585:594   */\n      dup3\n        /* \"--CODEGEN--\":580:583   */\n      dup5\n        /* \"--CODEGEN--\":576:595   */\n      sub\n        /* \"--CODEGEN--\":572:603   */\n      slt\n        /* \"--CODEGEN--\":569:571   */\n      iszero\n      tag_79\n      jumpi\n        /* \"--CODEGEN--\":616:617   */\n      0x00\n        /* \"--CODEGEN--\":613:614   */\n      dup1\n        /* \"--CODEGEN--\":606:618   */\n      revert\n        /* \"--CODEGEN--\":569:571   */\n    tag_79:\n        /* \"--CODEGEN--\":634:654   */\n      tag_80\n        /* \"--CODEGEN--\":649:653   */\n      0x80\n        /* \"--CODEGEN--\":634:654   */\n      jump(tag_73)\n    tag_80:\n        /* \"--CODEGEN--\":625:654   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":704:735   */\n      dup2\n      calldataload\n        /* \"--CODEGEN--\":755:773   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":744:774   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":741:743   */\n      iszero\n      tag_81\n      jumpi\n        /* \"--CODEGEN--\":787:788   */\n      0x00\n        /* \"--CODEGEN--\":784:785   */\n      dup1\n        /* \"--CODEGEN--\":777:789   */\n      revert\n        /* \"--CODEGEN--\":741:743   */\n    tag_81:\n        /* \"--CODEGEN--\":821:876   */\n      tag_82\n        /* \"--CODEGEN--\":872:875   */\n      dup5\n        /* \"--CODEGEN--\":863:869   */\n      dup3\n        /* \"--CODEGEN--\":852:861   */\n      dup6\n        /* \"--CODEGEN--\":848:870   */\n      add\n        /* \"--CODEGEN--\":821:876   */\n      jump(tag_68)\n    tag_82:\n        /* \"--CODEGEN--\":797:877   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":942:944   */\n      0x20\n        /* \"--CODEGEN--\":975:1052   */\n      tag_83\n        /* \"--CODEGEN--\":1048:1051   */\n      dup5\n        /* \"--CODEGEN--\":1024:1046   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":975:1052   */\n      jump(tag_84)\n    tag_83:\n        /* \"--CODEGEN--\":968:972   */\n      0x20\n        /* \"--CODEGEN--\":961:966   */\n      dup4\n        /* \"--CODEGEN--\":957:973   */\n      add\n        /* \"--CODEGEN--\":950:1053   */\n      mstore\n        /* \"--CODEGEN--\":898:1064   */\n      pop\n        /* \"--CODEGEN--\":1116:1119   */\n      0xc0\n        /* \"--CODEGEN--\":1150:1227   */\n      tag_85\n        /* \"--CODEGEN--\":1223:1226   */\n      dup5\n        /* \"--CODEGEN--\":1214:1220   */\n      dup3\n        /* \"--CODEGEN--\":1203:1212   */\n      dup6\n        /* \"--CODEGEN--\":1199:1221   */\n      add\n        /* \"--CODEGEN--\":1150:1227   */\n      jump(tag_84)\n    tag_85:\n        /* \"--CODEGEN--\":1143:1147   */\n      0x40\n        /* \"--CODEGEN--\":1136:1141   */\n      dup4\n        /* \"--CODEGEN--\":1132:1148   */\n      add\n        /* \"--CODEGEN--\":1125:1228   */\n      mstore\n        /* \"--CODEGEN--\":1074:1239   */\n      pop\n        /* \"--CODEGEN--\":1293:1296   */\n      0x0160\n        /* \"--CODEGEN--\":1327:1375   */\n      tag_86\n        /* \"--CODEGEN--\":1371:1374   */\n      dup5\n        /* \"--CODEGEN--\":1362:1368   */\n      dup3\n        /* \"--CODEGEN--\":1351:1360   */\n      dup6\n        /* \"--CODEGEN--\":1347:1369   */\n      add\n        /* \"--CODEGEN--\":1327:1375   */\n      jump(tag_87)\n    tag_86:\n        /* \"--CODEGEN--\":1320:1324   */\n      0x60\n        /* \"--CODEGEN--\":1313:1318   */\n      dup4\n        /* \"--CODEGEN--\":1309:1325   */\n      add\n        /* \"--CODEGEN--\":1302:1376   */\n      mstore\n        /* \"--CODEGEN--\":1249:1387   */\n      pop\n        /* \"--CODEGEN--\":563:1397   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":1450:2363   */\n    tag_84:\n      0x00\n        /* \"--CODEGEN--\":1567:1571   */\n      0xa0\n        /* \"--CODEGEN--\":1555:1564   */\n      dup3\n        /* \"--CODEGEN--\":1550:1553   */\n      dup5\n        /* \"--CODEGEN--\":1546:1565   */\n      sub\n        /* \"--CODEGEN--\":1542:1572   */\n      slt\n        /* \"--CODEGEN--\":1539:1541   */\n      iszero\n      tag_89\n      jumpi\n        /* \"--CODEGEN--\":1585:1586   */\n      0x00\n        /* \"--CODEGEN--\":1582:1583   */\n      dup1\n        /* \"--CODEGEN--\":1575:1587   */\n      revert\n        /* \"--CODEGEN--\":1539:1541   */\n    tag_89:\n        /* \"--CODEGEN--\":1603:1623   */\n      tag_90\n        /* \"--CODEGEN--\":1618:1622   */\n      0xa0\n        /* \"--CODEGEN--\":1603:1623   */\n      jump(tag_73)\n    tag_90:\n        /* \"--CODEGEN--\":1594:1623   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":1675:1676   */\n      0x00\n        /* \"--CODEGEN--\":1706:1754   */\n      tag_91\n        /* \"--CODEGEN--\":1750:1753   */\n      dup5\n        /* \"--CODEGEN--\":1730:1739   */\n      dup5\n        /* \"--CODEGEN--\":1706:1754   */\n      jump(tag_87)\n    tag_91:\n        /* \"--CODEGEN--\":1682:1755   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":1819:1821   */\n      0x20\n        /* \"--CODEGEN--\":1852:1900   */\n      tag_92\n        /* \"--CODEGEN--\":1896:1899   */\n      dup5\n        /* \"--CODEGEN--\":1872:1894   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":1852:1900   */\n      jump(tag_87)\n    tag_92:\n        /* \"--CODEGEN--\":1845:1849   */\n      0x20\n        /* \"--CODEGEN--\":1838:1843   */\n      dup4\n        /* \"--CODEGEN--\":1834:1850   */\n      add\n        /* \"--CODEGEN--\":1827:1901   */\n      mstore\n        /* \"--CODEGEN--\":1776:1912   */\n      pop\n        /* \"--CODEGEN--\":1962:1964   */\n      0x40\n        /* \"--CODEGEN--\":1995:2043   */\n      tag_93\n        /* \"--CODEGEN--\":2039:2042   */\n      dup5\n        /* \"--CODEGEN--\":2030:2036   */\n      dup3\n        /* \"--CODEGEN--\":2019:2028   */\n      dup6\n        /* \"--CODEGEN--\":2015:2037   */\n      add\n        /* \"--CODEGEN--\":1995:2043   */\n      jump(tag_87)\n    tag_93:\n        /* \"--CODEGEN--\":1988:1992   */\n      0x40\n        /* \"--CODEGEN--\":1981:1986   */\n      dup4\n        /* \"--CODEGEN--\":1977:1993   */\n      add\n        /* \"--CODEGEN--\":1970:2044   */\n      mstore\n        /* \"--CODEGEN--\":1922:2055   */\n      pop\n        /* \"--CODEGEN--\":2107:2109   */\n      0x60\n        /* \"--CODEGEN--\":2140:2188   */\n      tag_94\n        /* \"--CODEGEN--\":2184:2187   */\n      dup5\n        /* \"--CODEGEN--\":2175:2181   */\n      dup3\n        /* \"--CODEGEN--\":2164:2173   */\n      dup6\n        /* \"--CODEGEN--\":2160:2182   */\n      add\n        /* \"--CODEGEN--\":2140:2188   */\n      jump(tag_87)\n    tag_94:\n        /* \"--CODEGEN--\":2133:2137   */\n      0x60\n        /* \"--CODEGEN--\":2126:2131   */\n      dup4\n        /* \"--CODEGEN--\":2122:2138   */\n      add\n        /* \"--CODEGEN--\":2115:2189   */\n      mstore\n        /* \"--CODEGEN--\":2065:2200   */\n      pop\n        /* \"--CODEGEN--\":2259:2262   */\n      0x80\n        /* \"--CODEGEN--\":2293:2341   */\n      tag_95\n        /* \"--CODEGEN--\":2337:2340   */\n      dup5\n        /* \"--CODEGEN--\":2328:2334   */\n      dup3\n        /* \"--CODEGEN--\":2317:2326   */\n      dup6\n        /* \"--CODEGEN--\":2313:2335   */\n      add\n        /* \"--CODEGEN--\":2293:2341   */\n      jump(tag_87)\n    tag_95:\n        /* \"--CODEGEN--\":2286:2290   */\n      0x80\n        /* \"--CODEGEN--\":2279:2284   */\n      dup4\n        /* \"--CODEGEN--\":2275:2291   */\n      add\n        /* \"--CODEGEN--\":2268:2342   */\n      mstore\n        /* \"--CODEGEN--\":2210:2353   */\n      pop\n        /* \"--CODEGEN--\":1533:2363   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":2406:3964   */\n    tag_97:\n      0x00\n        /* \"--CODEGEN--\":2517:2522   */\n      0x0100\n        /* \"--CODEGEN--\":2505:2514   */\n      dup3\n        /* \"--CODEGEN--\":2500:2503   */\n      dup5\n        /* \"--CODEGEN--\":2496:2515   */\n      sub\n        /* \"--CODEGEN--\":2492:2523   */\n      slt\n        /* \"--CODEGEN--\":2489:2491   */\n      iszero\n      tag_98\n      jumpi\n        /* \"--CODEGEN--\":2536:2537   */\n      0x00\n        /* \"--CODEGEN--\":2533:2534   */\n      dup1\n        /* \"--CODEGEN--\":2526:2538   */\n      revert\n        /* \"--CODEGEN--\":2489:2491   */\n    tag_98:\n        /* \"--CODEGEN--\":2554:2575   */\n      tag_99\n        /* \"--CODEGEN--\":2569:2574   */\n      0x0100\n        /* \"--CODEGEN--\":2554:2575   */\n      jump(tag_73)\n    tag_99:\n        /* \"--CODEGEN--\":2545:2575   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":2625:2656   */\n      dup2\n      calldataload\n        /* \"--CODEGEN--\":2676:2694   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":2665:2695   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":2662:2664   */\n      iszero\n      tag_100\n      jumpi\n        /* \"--CODEGEN--\":2708:2709   */\n      0x00\n        /* \"--CODEGEN--\":2705:2706   */\n      dup1\n        /* \"--CODEGEN--\":2698:2710   */\n      revert\n        /* \"--CODEGEN--\":2662:2664   */\n    tag_100:\n        /* \"--CODEGEN--\":2742:2797   */\n      tag_101\n        /* \"--CODEGEN--\":2793:2796   */\n      dup5\n        /* \"--CODEGEN--\":2784:2790   */\n      dup3\n        /* \"--CODEGEN--\":2773:2782   */\n      dup6\n        /* \"--CODEGEN--\":2769:2791   */\n      add\n        /* \"--CODEGEN--\":2742:2797   */\n      jump(tag_68)\n    tag_101:\n        /* \"--CODEGEN--\":2718:2798   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":2890:2892   */\n      0x20\n        /* \"--CODEGEN--\":2875:2893   */\n      dup3\n      add\n        /* \"--CODEGEN--\":2862:2894   */\n      calldataload\n        /* \"--CODEGEN--\":2914:2932   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":2903:2933   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":2900:2902   */\n      iszero\n      tag_102\n      jumpi\n        /* \"--CODEGEN--\":2946:2947   */\n      0x00\n        /* \"--CODEGEN--\":2943:2944   */\n      dup1\n        /* \"--CODEGEN--\":2936:2948   */\n      revert\n        /* \"--CODEGEN--\":2900:2902   */\n    tag_102:\n        /* \"--CODEGEN--\":2981:3051   */\n      tag_103\n        /* \"--CODEGEN--\":3047:3050   */\n      dup5\n        /* \"--CODEGEN--\":3038:3044   */\n      dup3\n        /* \"--CODEGEN--\":3027:3036   */\n      dup6\n        /* \"--CODEGEN--\":3023:3045   */\n      add\n        /* \"--CODEGEN--\":2981:3051   */\n      jump(tag_78)\n    tag_103:\n        /* \"--CODEGEN--\":2974:2978   */\n      0x20\n        /* \"--CODEGEN--\":2967:2972   */\n      dup4\n        /* \"--CODEGEN--\":2963:2979   */\n      add\n        /* \"--CODEGEN--\":2956:3052   */\n      mstore\n        /* \"--CODEGEN--\":2819:3063   */\n      pop\n        /* \"--CODEGEN--\":3119:3121   */\n      0x40\n        /* \"--CODEGEN--\":3152:3200   */\n      tag_104\n        /* \"--CODEGEN--\":3196:3199   */\n      dup5\n        /* \"--CODEGEN--\":3187:3193   */\n      dup3\n        /* \"--CODEGEN--\":3176:3185   */\n      dup6\n        /* \"--CODEGEN--\":3172:3194   */\n      add\n        /* \"--CODEGEN--\":3152:3200   */\n      jump(tag_87)\n    tag_104:\n        /* \"--CODEGEN--\":3145:3149   */\n      0x40\n        /* \"--CODEGEN--\":3138:3143   */\n      dup4\n        /* \"--CODEGEN--\":3134:3150   */\n      add\n        /* \"--CODEGEN--\":3127:3201   */\n      mstore\n        /* \"--CODEGEN--\":3073:3212   */\n      pop\n        /* \"--CODEGEN--\":3269:3271   */\n      0x60\n        /* \"--CODEGEN--\":3302:3350   */\n      tag_105\n        /* \"--CODEGEN--\":3346:3349   */\n      dup5\n        /* \"--CODEGEN--\":3337:3343   */\n      dup3\n        /* \"--CODEGEN--\":3326:3335   */\n      dup6\n        /* \"--CODEGEN--\":3322:3344   */\n      add\n        /* \"--CODEGEN--\":3302:3350   */\n      jump(tag_87)\n    tag_105:\n        /* \"--CODEGEN--\":3295:3299   */\n      0x60\n        /* \"--CODEGEN--\":3288:3293   */\n      dup4\n        /* \"--CODEGEN--\":3284:3300   */\n      add\n        /* \"--CODEGEN--\":3277:3351   */\n      mstore\n        /* \"--CODEGEN--\":3222:3362   */\n      pop\n        /* \"--CODEGEN--\":3416:3419   */\n      0x80\n        /* \"--CODEGEN--\":3450:3498   */\n      tag_106\n        /* \"--CODEGEN--\":3494:3497   */\n      dup5\n        /* \"--CODEGEN--\":3485:3491   */\n      dup3\n        /* \"--CODEGEN--\":3474:3483   */\n      dup6\n        /* \"--CODEGEN--\":3470:3492   */\n      add\n        /* \"--CODEGEN--\":3450:3498   */\n      jump(tag_87)\n    tag_106:\n        /* \"--CODEGEN--\":3443:3447   */\n      0x80\n        /* \"--CODEGEN--\":3436:3441   */\n      dup4\n        /* \"--CODEGEN--\":3432:3448   */\n      add\n        /* \"--CODEGEN--\":3425:3499   */\n      mstore\n        /* \"--CODEGEN--\":3372:3510   */\n      pop\n        /* \"--CODEGEN--\":3561:3564   */\n      0xa0\n        /* \"--CODEGEN--\":3595:3643   */\n      tag_107\n        /* \"--CODEGEN--\":3639:3642   */\n      dup5\n        /* \"--CODEGEN--\":3630:3636   */\n      dup3\n        /* \"--CODEGEN--\":3619:3628   */\n      dup6\n        /* \"--CODEGEN--\":3615:3637   */\n      add\n        /* \"--CODEGEN--\":3595:3643   */\n      jump(tag_87)\n    tag_107:\n        /* \"--CODEGEN--\":3588:3592   */\n      0xa0\n        /* \"--CODEGEN--\":3581:3586   */\n      dup4\n        /* \"--CODEGEN--\":3577:3593   */\n      add\n        /* \"--CODEGEN--\":3570:3644   */\n      mstore\n        /* \"--CODEGEN--\":3520:3655   */\n      pop\n        /* \"--CODEGEN--\":3707:3710   */\n      0xc0\n        /* \"--CODEGEN--\":3741:3789   */\n      tag_108\n        /* \"--CODEGEN--\":3785:3788   */\n      dup5\n        /* \"--CODEGEN--\":3776:3782   */\n      dup3\n        /* \"--CODEGEN--\":3765:3774   */\n      dup6\n        /* \"--CODEGEN--\":3761:3783   */\n      add\n        /* \"--CODEGEN--\":3741:3789   */\n      jump(tag_87)\n    tag_108:\n        /* \"--CODEGEN--\":3734:3738   */\n      0xc0\n        /* \"--CODEGEN--\":3727:3732   */\n      dup4\n        /* \"--CODEGEN--\":3723:3739   */\n      add\n        /* \"--CODEGEN--\":3716:3790   */\n      mstore\n        /* \"--CODEGEN--\":3665:3801   */\n      pop\n        /* \"--CODEGEN--\":3860:3863   */\n      0xe0\n        /* \"--CODEGEN--\":3894:3942   */\n      tag_109\n        /* \"--CODEGEN--\":3938:3941   */\n      dup5\n        /* \"--CODEGEN--\":3929:3935   */\n      dup3\n        /* \"--CODEGEN--\":3918:3927   */\n      dup6\n        /* \"--CODEGEN--\":3914:3936   */\n      add\n        /* \"--CODEGEN--\":3894:3942   */\n      jump(tag_87)\n    tag_109:\n        /* \"--CODEGEN--\":3887:3891   */\n      0xe0\n        /* \"--CODEGEN--\":3880:3885   */\n      dup4\n        /* \"--CODEGEN--\":3876:3892   */\n      add\n        /* \"--CODEGEN--\":3869:3943   */\n      mstore\n        /* \"--CODEGEN--\":3811:3954   */\n      pop\n        /* \"--CODEGEN--\":2483:3964   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":3971:4087   */\n    tag_87:\n      0x00\n        /* \"--CODEGEN--\":4037:4082   */\n      tag_111\n        /* \"--CODEGEN--\":4074:4080   */\n      dup3\n        /* \"--CODEGEN--\":4061:4081   */\n      calldataload\n        /* \"--CODEGEN--\":4037:4082   */\n      jump(tag_173)\n    tag_111:\n        /* \"--CODEGEN--\":4028:4082   */\n      swap4\n        /* \"--CODEGEN--\":4022:4087   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":4094:4212   */\n    tag_114:\n      0x00\n        /* \"--CODEGEN--\":4161:4207   */\n      tag_111\n        /* \"--CODEGEN--\":4199:4205   */\n      dup3\n        /* \"--CODEGEN--\":4186:4206   */\n      calldataload\n        /* \"--CODEGEN--\":4161:4207   */\n      jump(tag_26)\n        /* \"--CODEGEN--\":4219:4590   */\n    tag_13:\n      0x00\n        /* \"--CODEGEN--\":4345:4347   */\n      0x20\n        /* \"--CODEGEN--\":4333:4342   */\n      dup3\n        /* \"--CODEGEN--\":4324:4331   */\n      dup5\n        /* \"--CODEGEN--\":4320:4343   */\n      sub\n        /* \"--CODEGEN--\":4316:4348   */\n      slt\n        /* \"--CODEGEN--\":4313:4315   */\n      iszero\n      tag_118\n      jumpi\n        /* \"--CODEGEN--\":4361:4362   */\n      0x00\n        /* \"--CODEGEN--\":4358:4359   */\n      dup1\n        /* \"--CODEGEN--\":4351:4363   */\n      revert\n        /* \"--CODEGEN--\":4313:4315   */\n    tag_118:\n        /* \"--CODEGEN--\":4396:4427   */\n      dup2\n      calldataload\n        /* \"--CODEGEN--\":4447:4465   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":4436:4466   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":4433:4435   */\n      iszero\n      tag_119\n      jumpi\n        /* \"--CODEGEN--\":4479:4480   */\n      0x00\n        /* \"--CODEGEN--\":4476:4477   */\n      dup1\n        /* \"--CODEGEN--\":4469:4481   */\n      revert\n        /* \"--CODEGEN--\":4433:4435   */\n    tag_119:\n        /* \"--CODEGEN--\":4499:4574   */\n      tag_120\n        /* \"--CODEGEN--\":4566:4573   */\n      dup5\n        /* \"--CODEGEN--\":4557:4563   */\n      dup3\n        /* \"--CODEGEN--\":4546:4555   */\n      dup6\n        /* \"--CODEGEN--\":4542:4564   */\n      add\n        /* \"--CODEGEN--\":4499:4574   */\n      jump(tag_97)\n    tag_120:\n        /* \"--CODEGEN--\":4489:4574   */\n      swap5\n        /* \"--CODEGEN--\":4307:4590   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":4597:4838   */\n    tag_17:\n      0x00\n        /* \"--CODEGEN--\":4701:4703   */\n      0x20\n        /* \"--CODEGEN--\":4689:4698   */\n      dup3\n        /* \"--CODEGEN--\":4680:4687   */\n      dup5\n        /* \"--CODEGEN--\":4676:4699   */\n      sub\n        /* \"--CODEGEN--\":4672:4704   */\n      slt\n        /* \"--CODEGEN--\":4669:4671   */\n      iszero\n      tag_122\n      jumpi\n        /* \"--CODEGEN--\":4717:4718   */\n      0x00\n        /* \"--CODEGEN--\":4714:4715   */\n      dup1\n        /* \"--CODEGEN--\":4707:4719   */\n      revert\n        /* \"--CODEGEN--\":4669:4671   */\n    tag_122:\n        /* \"--CODEGEN--\":4752:4753   */\n      0x00\n        /* \"--CODEGEN--\":4769:4822   */\n      tag_120\n        /* \"--CODEGEN--\":4814:4821   */\n      dup5\n        /* \"--CODEGEN--\":4794:4803   */\n      dup5\n        /* \"--CODEGEN--\":4769:4822   */\n      jump(tag_114)\n        /* \"--CODEGEN--\":4845:5164   */\n    tag_125:\n      0x00\n        /* \"--CODEGEN--\":4943:4978   */\n      tag_126\n        /* \"--CODEGEN--\":4972:4977   */\n      dup3\n        /* \"--CODEGEN--\":4943:4978   */\n      jump(tag_127)\n    tag_126:\n        /* \"--CODEGEN--\":4990:5051   */\n      tag_128\n        /* \"--CODEGEN--\":5044:5050   */\n      dup2\n        /* \"--CODEGEN--\":5039:5042   */\n      dup6\n        /* \"--CODEGEN--\":4990:5051   */\n      jump(tag_129)\n    tag_128:\n        /* \"--CODEGEN--\":4983:5051   */\n      swap4\n      pop\n        /* \"--CODEGEN--\":5056:5108   */\n      tag_130\n        /* \"--CODEGEN--\":5101:5107   */\n      dup2\n        /* \"--CODEGEN--\":5096:5099   */\n      dup6\n        /* \"--CODEGEN--\":5089:5093   */\n      0x20\n        /* \"--CODEGEN--\":5082:5087   */\n      dup7\n        /* \"--CODEGEN--\":5078:5094   */\n      add\n        /* \"--CODEGEN--\":5056:5108   */\n      jump(tag_131)\n    tag_130:\n        /* \"--CODEGEN--\":5129:5158   */\n      tag_132\n        /* \"--CODEGEN--\":5151:5157   */\n      dup2\n        /* \"--CODEGEN--\":5129:5158   */\n      jump(tag_133)\n    tag_132:\n        /* \"--CODEGEN--\":5120:5159   */\n      swap1\n      swap4\n      add\n      swap4\n        /* \"--CODEGEN--\":4923:5164   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":5592:6573   */\n    tag_142:\n        /* \"--CODEGEN--\":5795:5817   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":5729:5734   */\n      0x0180\n        /* \"--CODEGEN--\":5830:5867   */\n      dup1\n      dup5\n      mstore\n        /* \"--CODEGEN--\":5592:6573   */\n      0x00\n      swap2\n        /* \"--CODEGEN--\":5720:5735   */\n      swap1\n      dup5\n      add\n      swap1\n        /* \"--CODEGEN--\":5882:5950   */\n      tag_143\n        /* \"--CODEGEN--\":5720:5735   */\n      dup3\n        /* \"--CODEGEN--\":5795:5817   */\n      dup3\n        /* \"--CODEGEN--\":5882:5950   */\n      jump(tag_125)\n    tag_143:\n        /* \"--CODEGEN--\":5874:5950   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":5750:5962   */\n      pop\n        /* \"--CODEGEN--\":6038:6042   */\n      0x20\n        /* \"--CODEGEN--\":6031:6036   */\n      dup4\n        /* \"--CODEGEN--\":6027:6043   */\n      add\n        /* \"--CODEGEN--\":6021:6044   */\n      mload\n        /* \"--CODEGEN--\":6050:6172   */\n      tag_144\n        /* \"--CODEGEN--\":6166:6170   */\n      0x20\n        /* \"--CODEGEN--\":6161:6164   */\n      dup7\n        /* \"--CODEGEN--\":6157:6171   */\n      add\n        /* \"--CODEGEN--\":6144:6155   */\n      dup3\n        /* \"--CODEGEN--\":6050:6172   */\n      jump(tag_145)\n    tag_144:\n        /* \"--CODEGEN--\":5972:6178   */\n      pop\n        /* \"--CODEGEN--\":6252:6256   */\n      0x40\n        /* \"--CODEGEN--\":6245:6250   */\n      dup4\n        /* \"--CODEGEN--\":6241:6257   */\n      add\n        /* \"--CODEGEN--\":6235:6258   */\n      mload\n        /* \"--CODEGEN--\":6264:6386   */\n      tag_146\n        /* \"--CODEGEN--\":6380:6384   */\n      0xc0\n        /* \"--CODEGEN--\":6375:6378   */\n      dup7\n        /* \"--CODEGEN--\":6371:6385   */\n      add\n        /* \"--CODEGEN--\":6358:6369   */\n      dup3\n        /* \"--CODEGEN--\":6264:6386   */\n      jump(tag_145)\n    tag_146:\n        /* \"--CODEGEN--\":6188:6392   */\n      pop\n        /* \"--CODEGEN--\":6468:6472   */\n      0x60\n        /* \"--CODEGEN--\":6461:6466   */\n      dup4\n        /* \"--CODEGEN--\":6457:6473   */\n      add\n        /* \"--CODEGEN--\":6451:6474   */\n      mload\n        /* \"--CODEGEN--\":6480:6541   */\n      tag_147\n        /* \"--CODEGEN--\":6534:6539   */\n      0x0160\n        /* \"--CODEGEN--\":6529:6532   */\n      dup7\n        /* \"--CODEGEN--\":6525:6540   */\n      add\n        /* \"--CODEGEN--\":6512:6523   */\n      dup3\n        /* \"--CODEGEN--\":6480:6541   */\n      jump(tag_148)\n    tag_147:\n      pop\n        /* \"--CODEGEN--\":6564:6568   */\n      swap4\n        /* \"--CODEGEN--\":5702:6573   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":7742:8674   */\n    tag_145:\n        /* \"--CODEGEN--\":7952:7974   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":7885:7889   */\n      0xa0\n        /* \"--CODEGEN--\":7876:7890   */\n      dup4\n      add\n      swap1\n        /* \"--CODEGEN--\":7980:8039   */\n      tag_156\n        /* \"--CODEGEN--\":7880:7883   */\n      dup5\n        /* \"--CODEGEN--\":7952:7974   */\n      dup3\n        /* \"--CODEGEN--\":7980:8039   */\n      jump(tag_148)\n    tag_156:\n        /* \"--CODEGEN--\":7905:8045   */\n      pop\n        /* \"--CODEGEN--\":8120:8124   */\n      0x20\n        /* \"--CODEGEN--\":8113:8118   */\n      dup3\n        /* \"--CODEGEN--\":8109:8125   */\n      add\n        /* \"--CODEGEN--\":8103:8126   */\n      mload\n        /* \"--CODEGEN--\":8132:8192   */\n      tag_157\n        /* \"--CODEGEN--\":8186:8190   */\n      0x20\n        /* \"--CODEGEN--\":8181:8184   */\n      dup6\n        /* \"--CODEGEN--\":8177:8191   */\n      add\n        /* \"--CODEGEN--\":8164:8175   */\n      dup3\n        /* \"--CODEGEN--\":8132:8192   */\n      jump(tag_148)\n    tag_157:\n        /* \"--CODEGEN--\":8055:8198   */\n      pop\n        /* \"--CODEGEN--\":8270:8274   */\n      0x40\n        /* \"--CODEGEN--\":8263:8268   */\n      dup3\n        /* \"--CODEGEN--\":8259:8275   */\n      add\n        /* \"--CODEGEN--\":8253:8276   */\n      mload\n        /* \"--CODEGEN--\":8282:8342   */\n      tag_158\n        /* \"--CODEGEN--\":8336:8340   */\n      0x40\n        /* \"--CODEGEN--\":8331:8334   */\n      dup6\n        /* \"--CODEGEN--\":8327:8341   */\n      add\n        /* \"--CODEGEN--\":8314:8325   */\n      dup3\n        /* \"--CODEGEN--\":8282:8342   */\n      jump(tag_148)\n    tag_158:\n        /* \"--CODEGEN--\":8208:8348   */\n      pop\n        /* \"--CODEGEN--\":8422:8426   */\n      0x60\n        /* \"--CODEGEN--\":8415:8420   */\n      dup3\n        /* \"--CODEGEN--\":8411:8427   */\n      add\n        /* \"--CODEGEN--\":8405:8428   */\n      mload\n        /* \"--CODEGEN--\":8434:8494   */\n      tag_159\n        /* \"--CODEGEN--\":8488:8492   */\n      0x60\n        /* \"--CODEGEN--\":8483:8486   */\n      dup6\n        /* \"--CODEGEN--\":8479:8493   */\n      add\n        /* \"--CODEGEN--\":8466:8477   */\n      dup3\n        /* \"--CODEGEN--\":8434:8494   */\n      jump(tag_148)\n    tag_159:\n        /* \"--CODEGEN--\":8358:8500   */\n      pop\n        /* \"--CODEGEN--\":8581:8585   */\n      0x80\n        /* \"--CODEGEN--\":8574:8579   */\n      dup3\n        /* \"--CODEGEN--\":8570:8586   */\n      add\n        /* \"--CODEGEN--\":8564:8587   */\n      mload\n        /* \"--CODEGEN--\":8593:8653   */\n      tag_160\n        /* \"--CODEGEN--\":8647:8651   */\n      0x80\n        /* \"--CODEGEN--\":8642:8645   */\n      dup6\n        /* \"--CODEGEN--\":8638:8652   */\n      add\n        /* \"--CODEGEN--\":8625:8636   */\n      dup3\n        /* \"--CODEGEN--\":8593:8653   */\n      jump(tag_148)\n    tag_160:\n        /* \"--CODEGEN--\":8510:8659   */\n      pop\n        /* \"--CODEGEN--\":7858:8674   */\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":8750:10340   */\n    tag_162:\n        /* \"--CODEGEN--\":8961:8983   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":8895:8900   */\n      0x0100\n        /* \"--CODEGEN--\":8996:9033   */\n      dup1\n      dup5\n      mstore\n        /* \"--CODEGEN--\":8750:10340   */\n      0x00\n      swap2\n        /* \"--CODEGEN--\":8886:8901   */\n      swap1\n      dup5\n      add\n      swap1\n        /* \"--CODEGEN--\":9048:9116   */\n      tag_163\n        /* \"--CODEGEN--\":8886:8901   */\n      dup3\n        /* \"--CODEGEN--\":8961:8983   */\n      dup3\n        /* \"--CODEGEN--\":9048:9116   */\n      jump(tag_125)\n    tag_163:\n        /* \"--CODEGEN--\":9040:9116   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":8916:9128   */\n      pop\n        /* \"--CODEGEN--\":9203:9207   */\n      0x20\n        /* \"--CODEGEN--\":9196:9201   */\n      dup4\n        /* \"--CODEGEN--\":9192:9208   */\n      add\n        /* \"--CODEGEN--\":9186:9209   */\n      mload\n        /* \"--CODEGEN--\":9255:9258   */\n      dup5\n        /* \"--CODEGEN--\":9249:9253   */\n      dup3\n        /* \"--CODEGEN--\":9245:9259   */\n      sub\n        /* \"--CODEGEN--\":9238:9242   */\n      0x20\n        /* \"--CODEGEN--\":9233:9236   */\n      dup7\n        /* \"--CODEGEN--\":9229:9243   */\n      add\n        /* \"--CODEGEN--\":9222:9260   */\n      mstore\n        /* \"--CODEGEN--\":9275:9373   */\n      tag_164\n        /* \"--CODEGEN--\":9368:9372   */\n      dup3\n        /* \"--CODEGEN--\":9355:9366   */\n      dup3\n        /* \"--CODEGEN--\":9275:9373   */\n      jump(tag_142)\n    tag_164:\n        /* \"--CODEGEN--\":9267:9373   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":9138:9385   */\n      pop\n        /* \"--CODEGEN--\":9463:9467   */\n      0x40\n        /* \"--CODEGEN--\":9456:9461   */\n      dup4\n        /* \"--CODEGEN--\":9452:9468   */\n      add\n        /* \"--CODEGEN--\":9446:9469   */\n      mload\n        /* \"--CODEGEN--\":9475:9535   */\n      tag_165\n        /* \"--CODEGEN--\":9529:9533   */\n      0x40\n        /* \"--CODEGEN--\":9524:9527   */\n      dup7\n        /* \"--CODEGEN--\":9520:9534   */\n      add\n        /* \"--CODEGEN--\":9507:9518   */\n      dup3\n        /* \"--CODEGEN--\":9475:9535   */\n      jump(tag_148)\n    tag_165:\n        /* \"--CODEGEN--\":9395:9541   */\n      pop\n        /* \"--CODEGEN--\":9620:9624   */\n      0x60\n        /* \"--CODEGEN--\":9613:9618   */\n      dup4\n        /* \"--CODEGEN--\":9609:9625   */\n      add\n        /* \"--CODEGEN--\":9603:9626   */\n      mload\n        /* \"--CODEGEN--\":9632:9692   */\n      tag_166\n        /* \"--CODEGEN--\":9686:9690   */\n      0x60\n        /* \"--CODEGEN--\":9681:9684   */\n      dup7\n        /* \"--CODEGEN--\":9677:9691   */\n      add\n        /* \"--CODEGEN--\":9664:9675   */\n      dup3\n        /* \"--CODEGEN--\":9632:9692   */\n      jump(tag_148)\n    tag_166:\n        /* \"--CODEGEN--\":9551:9698   */\n      pop\n        /* \"--CODEGEN--\":9774:9778   */\n      0x80\n        /* \"--CODEGEN--\":9767:9772   */\n      dup4\n        /* \"--CODEGEN--\":9763:9779   */\n      add\n        /* \"--CODEGEN--\":9757:9780   */\n      mload\n        /* \"--CODEGEN--\":9786:9846   */\n      tag_167\n        /* \"--CODEGEN--\":9840:9844   */\n      0x80\n        /* \"--CODEGEN--\":9835:9838   */\n      dup7\n        /* \"--CODEGEN--\":9831:9845   */\n      add\n        /* \"--CODEGEN--\":9818:9829   */\n      dup3\n        /* \"--CODEGEN--\":9786:9846   */\n      jump(tag_148)\n    tag_167:\n        /* \"--CODEGEN--\":9708:9852   */\n      pop\n        /* \"--CODEGEN--\":9925:9929   */\n      0xa0\n        /* \"--CODEGEN--\":9918:9923   */\n      dup4\n        /* \"--CODEGEN--\":9914:9930   */\n      add\n        /* \"--CODEGEN--\":9908:9931   */\n      mload\n        /* \"--CODEGEN--\":9937:9997   */\n      tag_168\n        /* \"--CODEGEN--\":9991:9995   */\n      0xa0\n        /* \"--CODEGEN--\":9986:9989   */\n      dup7\n        /* \"--CODEGEN--\":9982:9996   */\n      add\n        /* \"--CODEGEN--\":9969:9980   */\n      dup3\n        /* \"--CODEGEN--\":9937:9997   */\n      jump(tag_148)\n    tag_168:\n        /* \"--CODEGEN--\":9862:10003   */\n      pop\n        /* \"--CODEGEN--\":10077:10081   */\n      0xc0\n        /* \"--CODEGEN--\":10070:10075   */\n      dup4\n        /* \"--CODEGEN--\":10066:10082   */\n      add\n        /* \"--CODEGEN--\":10060:10083   */\n      mload\n        /* \"--CODEGEN--\":10089:10149   */\n      tag_169\n        /* \"--CODEGEN--\":10143:10147   */\n      0xc0\n        /* \"--CODEGEN--\":10138:10141   */\n      dup7\n        /* \"--CODEGEN--\":10134:10148   */\n      add\n        /* \"--CODEGEN--\":10121:10132   */\n      dup3\n        /* \"--CODEGEN--\":10089:10149   */\n      jump(tag_148)\n    tag_169:\n        /* \"--CODEGEN--\":10013:10155   */\n      pop\n        /* \"--CODEGEN--\":10236:10240   */\n      0xe0\n        /* \"--CODEGEN--\":10229:10234   */\n      dup4\n        /* \"--CODEGEN--\":10225:10241   */\n      add\n        /* \"--CODEGEN--\":10219:10242   */\n      mload\n        /* \"--CODEGEN--\":10248:10308   */\n      tag_147\n        /* \"--CODEGEN--\":10302:10306   */\n      0xe0\n        /* \"--CODEGEN--\":10297:10300   */\n      dup7\n        /* \"--CODEGEN--\":10293:10307   */\n      add\n        /* \"--CODEGEN--\":10280:10291   */\n      dup3\n        /* \"--CODEGEN--\":10347:10454   */\n    tag_148:\n        /* \"--CODEGEN--\":10418:10448   */\n      tag_172\n        /* \"--CODEGEN--\":10442:10447   */\n      dup2\n        /* \"--CODEGEN--\":10418:10448   */\n      jump(tag_173)\n    tag_172:\n        /* \"--CODEGEN--\":10413:10416   */\n      dup3\n        /* \"--CODEGEN--\":10406:10449   */\n      mstore\n        /* \"--CODEGEN--\":10400:10454   */\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":10585:10705   */\n    tag_178:\n        /* \"--CODEGEN--\":10668:10699   */\n      tag_172\n        /* \"--CODEGEN--\":10693:10698   */\n      dup2\n        /* \"--CODEGEN--\":10668:10699   */\n      jump(tag_26)\n        /* \"--CODEGEN--\":10712:11903   */\n    tag_20:\n        /* \"--CODEGEN--\":11076:11079   */\n      0x0100\n        /* \"--CODEGEN--\":11091:11138   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":11061:11080   */\n      dup2\n      add\n        /* \"--CODEGEN--\":11152:11226   */\n      tag_182\n        /* \"--CODEGEN--\":11061:11080   */\n      dup2\n        /* \"--CODEGEN--\":11212:11218   */\n      dup12\n        /* \"--CODEGEN--\":11152:11226   */\n      jump(tag_125)\n    tag_182:\n        /* \"--CODEGEN--\":11144:11226   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":11274:11283   */\n      dup2\n        /* \"--CODEGEN--\":11268:11272   */\n      dup2\n        /* \"--CODEGEN--\":11264:11284   */\n      sub\n        /* \"--CODEGEN--\":11259:11261   */\n      0x20\n        /* \"--CODEGEN--\":11248:11257   */\n      dup4\n        /* \"--CODEGEN--\":11244:11262   */\n      add\n        /* \"--CODEGEN--\":11237:11285   */\n      mstore\n        /* \"--CODEGEN--\":11299:11403   */\n      tag_183\n        /* \"--CODEGEN--\":11398:11402   */\n      dup2\n        /* \"--CODEGEN--\":11389:11395   */\n      dup11\n        /* \"--CODEGEN--\":11299:11403   */\n      jump(tag_142)\n    tag_183:\n        /* \"--CODEGEN--\":11291:11403   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":11414:11484   */\n      tag_184\n        /* \"--CODEGEN--\":11480:11482   */\n      0x40\n        /* \"--CODEGEN--\":11469:11478   */\n      dup4\n        /* \"--CODEGEN--\":11465:11483   */\n      add\n        /* \"--CODEGEN--\":11456:11462   */\n      dup10\n        /* \"--CODEGEN--\":11414:11484   */\n      jump(tag_148)\n    tag_184:\n        /* \"--CODEGEN--\":11495:11565   */\n      tag_185\n        /* \"--CODEGEN--\":11561:11563   */\n      0x60\n        /* \"--CODEGEN--\":11550:11559   */\n      dup4\n        /* \"--CODEGEN--\":11546:11564   */\n      add\n        /* \"--CODEGEN--\":11537:11543   */\n      dup9\n        /* \"--CODEGEN--\":11495:11565   */\n      jump(tag_148)\n    tag_185:\n        /* \"--CODEGEN--\":11576:11647   */\n      tag_186\n        /* \"--CODEGEN--\":11642:11645   */\n      0x80\n        /* \"--CODEGEN--\":11631:11640   */\n      dup4\n        /* \"--CODEGEN--\":11627:11646   */\n      add\n        /* \"--CODEGEN--\":11618:11624   */\n      dup8\n        /* \"--CODEGEN--\":11576:11647   */\n      jump(tag_148)\n    tag_186:\n        /* \"--CODEGEN--\":11658:11729   */\n      tag_187\n        /* \"--CODEGEN--\":11724:11727   */\n      0xa0\n        /* \"--CODEGEN--\":11713:11722   */\n      dup4\n        /* \"--CODEGEN--\":11709:11728   */\n      add\n        /* \"--CODEGEN--\":11700:11706   */\n      dup7\n        /* \"--CODEGEN--\":11658:11729   */\n      jump(tag_148)\n    tag_187:\n        /* \"--CODEGEN--\":11740:11811   */\n      tag_188\n        /* \"--CODEGEN--\":11806:11809   */\n      0xc0\n        /* \"--CODEGEN--\":11795:11804   */\n      dup4\n        /* \"--CODEGEN--\":11791:11810   */\n      add\n        /* \"--CODEGEN--\":11782:11788   */\n      dup6\n        /* \"--CODEGEN--\":11740:11811   */\n      jump(tag_148)\n    tag_188:\n        /* \"--CODEGEN--\":11822:11893   */\n      tag_189\n        /* \"--CODEGEN--\":11888:11891   */\n      0xe0\n        /* \"--CODEGEN--\":11877:11886   */\n      dup4\n        /* \"--CODEGEN--\":11873:11892   */\n      add\n        /* \"--CODEGEN--\":11864:11870   */\n      dup5\n        /* \"--CODEGEN--\":11822:11893   */\n      jump(tag_148)\n    tag_189:\n        /* \"--CODEGEN--\":11047:11903   */\n      swap10\n      swap9\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":11910:12259   */\n    tag_25:\n        /* \"--CODEGEN--\":12072:12074   */\n      0x20\n        /* \"--CODEGEN--\":12086:12133   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":12057:12075   */\n      dup2\n      add\n        /* \"--CODEGEN--\":12147:12249   */\n      tag_111\n        /* \"--CODEGEN--\":12057:12075   */\n      dup2\n        /* \"--CODEGEN--\":12235:12241   */\n      dup5\n        /* \"--CODEGEN--\":12147:12249   */\n      jump(tag_162)\n        /* \"--CODEGEN--\":12266:12479   */\n    tag_10:\n        /* \"--CODEGEN--\":12384:12386   */\n      0x20\n        /* \"--CODEGEN--\":12369:12387   */\n      dup2\n      add\n        /* \"--CODEGEN--\":12398:12469   */\n      tag_193\n        /* \"--CODEGEN--\":12373:12382   */\n      dup3\n        /* \"--CODEGEN--\":12442:12448   */\n      dup5\n        /* \"--CODEGEN--\":12398:12469   */\n      jump(tag_178)\n    tag_193:\n        /* \"--CODEGEN--\":12355:12479   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":12486:12946   */\n    tag_33:\n        /* \"--CODEGEN--\":12676:12678   */\n      0x40\n        /* \"--CODEGEN--\":12661:12679   */\n      dup2\n      add\n        /* \"--CODEGEN--\":12690:12761   */\n      tag_195\n        /* \"--CODEGEN--\":12665:12674   */\n      dup3\n        /* \"--CODEGEN--\":12734:12740   */\n      dup6\n        /* \"--CODEGEN--\":12690:12761   */\n      jump(tag_178)\n    tag_195:\n        /* \"--CODEGEN--\":12809:12818   */\n      dup2\n        /* \"--CODEGEN--\":12803:12807   */\n      dup2\n        /* \"--CODEGEN--\":12799:12819   */\n      sub\n        /* \"--CODEGEN--\":12794:12796   */\n      0x20\n        /* \"--CODEGEN--\":12783:12792   */\n      dup4\n        /* \"--CODEGEN--\":12779:12797   */\n      add\n        /* \"--CODEGEN--\":12772:12820   */\n      mstore\n        /* \"--CODEGEN--\":12834:12936   */\n      tag_120\n        /* \"--CODEGEN--\":12931:12935   */\n      dup2\n        /* \"--CODEGEN--\":12922:12928   */\n      dup5\n        /* \"--CODEGEN--\":12834:12936   */\n      jump(tag_162)\n        /* \"--CODEGEN--\":12953:13209   */\n    tag_73:\n        /* \"--CODEGEN--\":13015:13017   */\n      0x40\n        /* \"--CODEGEN--\":13009:13018   */\n      mload\n        /* \"--CODEGEN--\":13041:13058   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":13116:13134   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":13101:13135   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":13137:13159   */\n      dup3\n      dup3\n      lt\n        /* \"--CODEGEN--\":13098:13160   */\n      or\n        /* \"--CODEGEN--\":13095:13097   */\n      iszero\n      tag_198\n      jumpi\n        /* \"--CODEGEN--\":13173:13174   */\n      0x00\n        /* \"--CODEGEN--\":13170:13171   */\n      dup1\n        /* \"--CODEGEN--\":13163:13175   */\n      revert\n        /* \"--CODEGEN--\":13095:13097   */\n    tag_198:\n        /* \"--CODEGEN--\":13189:13191   */\n      0x40\n        /* \"--CODEGEN--\":13182:13204   */\n      mstore\n        /* \"--CODEGEN--\":12993:13209   */\n      swap2\n      swap1\n      pop\n      jump\n        /* \"--CODEGEN--\":13216:13471   */\n    tag_72:\n      0x00\n        /* \"--CODEGEN--\":13356:13374   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":13348:13354   */\n      dup3\n        /* \"--CODEGEN--\":13345:13375   */\n      gt\n        /* \"--CODEGEN--\":13342:13344   */\n      iszero\n      tag_200\n      jumpi\n        /* \"--CODEGEN--\":13388:13389   */\n      0x00\n        /* \"--CODEGEN--\":13385:13386   */\n      dup1\n        /* \"--CODEGEN--\":13378:13390   */\n      revert\n        /* \"--CODEGEN--\":13342:13344   */\n    tag_200:\n      pop\n        /* \"--CODEGEN--\":13461:13465   */\n      0x20\n        /* \"--CODEGEN--\":13432:13436   */\n      0x1f\n        /* \"--CODEGEN--\":13409:13426   */\n      swap2\n      swap1\n      swap2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":13405:13438   */\n      and\n        /* \"--CODEGEN--\":13451:13466   */\n      add\n      swap1\n        /* \"--CODEGEN--\":13279:13471   */\n      jump\n        /* \"--CODEGEN--\":13478:13566   */\n    tag_127:\n        /* \"--CODEGEN--\":13549:13561   */\n      mload\n      swap1\n        /* \"--CODEGEN--\":13533:13566   */\n      jump\n        /* \"--CODEGEN--\":13574:13727   */\n    tag_129:\n        /* \"--CODEGEN--\":13667:13686   */\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":13716:13720   */\n      0x20\n        /* \"--CODEGEN--\":13707:13721   */\n      add\n      swap1\n        /* \"--CODEGEN--\":13660:13727   */\n      jump\n        /* \"--CODEGEN--\":13907:13998   */\n    tag_173:\n        /* \"--CODEGEN--\":13986:13992   */\n      0xffff\n        /* \"--CODEGEN--\":13975:13993   */\n      and\n      swap1\n        /* \"--CODEGEN--\":13958:13998   */\n      jump\n        /* \"--CODEGEN--\":14276:14421   */\n    tag_76:\n        /* \"--CODEGEN--\":14357:14363   */\n      dup3\n        /* \"--CODEGEN--\":14352:14355   */\n      dup2\n        /* \"--CODEGEN--\":14347:14350   */\n      dup4\n        /* \"--CODEGEN--\":14334:14364   */\n      calldatacopy\n      pop\n        /* \"--CODEGEN--\":14413:14414   */\n      0x00\n        /* \"--CODEGEN--\":14395:14411   */\n      swap2\n      add\n        /* \"--CODEGEN--\":14388:14415   */\n      mstore\n        /* \"--CODEGEN--\":14327:14421   */\n      jump\n        /* \"--CODEGEN--\":14430:14698   */\n    tag_131:\n        /* \"--CODEGEN--\":14495:14496   */\n      0x00\n        /* \"--CODEGEN--\":14502:14603   */\n    tag_210:\n        /* \"--CODEGEN--\":14516:14522   */\n      dup4\n        /* \"--CODEGEN--\":14513:14514   */\n      dup2\n        /* \"--CODEGEN--\":14510:14523   */\n      lt\n        /* \"--CODEGEN--\":14502:14603   */\n      iszero\n      tag_212\n      jumpi\n        /* \"--CODEGEN--\":14583:14594   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":14577:14595   */\n      mload\n        /* \"--CODEGEN--\":14564:14575   */\n      dup4\n      dup3\n      add\n        /* \"--CODEGEN--\":14557:14596   */\n      mstore\n        /* \"--CODEGEN--\":14538:14540   */\n      0x20\n        /* \"--CODEGEN--\":14531:14541   */\n      add\n        /* \"--CODEGEN--\":14502:14603   */\n      jump(tag_210)\n    tag_212:\n        /* \"--CODEGEN--\":14618:14624   */\n      dup4\n        /* \"--CODEGEN--\":14615:14616   */\n      dup2\n        /* \"--CODEGEN--\":14612:14625   */\n      gt\n        /* \"--CODEGEN--\":14609:14611   */\n      iszero\n      tag_160\n      jumpi\n      pop\n      pop\n        /* \"--CODEGEN--\":14683:14684   */\n      0x00\n        /* \"--CODEGEN--\":14665:14681   */\n      swap2\n      add\n        /* \"--CODEGEN--\":14658:14685   */\n      mstore\n        /* \"--CODEGEN--\":14479:14698   */\n      jump\n        /* \"--CODEGEN--\":14706:14803   */\n    tag_133:\n        /* \"--CODEGEN--\":14794:14796   */\n      0x1f\n        /* \"--CODEGEN--\":14774:14788   */\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":14770:14798   */\n      and\n      swap1\n        /* \"--CODEGEN--\":14754:14803   */\n      jump\n\n    auxdata: 0xa265627a7a72305820d37adb01deb56f3254e7927891c1971a52071b2d0563dfae1009fe4aecc617726c6578706572696d656e74616cf50037\n}\n", "bytecode": {"linkReferences": {}, "object": "608060405234801561001057600080fd5b5061101a806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631b6cde1014610051578063377b723a1461006f5780638dc10768146100845780639188d312146100ab575b600080fd5b6100596100cb565b6040516100669190610f07565b60405180910390f35b61008261007d366004610c65565b6100d2565b005b610097610092366004610ca2565b6103ed565b604051610066989796959493929190610e73565b6100be6100b9366004610ca2565b610636565b6040516100669190610ef6565b6000545b90565b600080546001818101808455838052845180519293919286926006027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630191610120918391602001906108b1565b50602082810151805180519192600185019261013f92849201906108b1565b5060208201518160010160008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff16021790555060608201518160000160066101000a81548161ffff021916908361ffff16021790555060808201518160000160086101000a81548161ffff021916908361ffff160217905550505060408201518160020160008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff16021790555060608201518160000160066101000a81548161ffff021916908361ffff16021790555060808201518160000160086101000a81548161ffff021916908361ffff160217905550505060608201518160030160006101000a81548161ffff021916908361ffff160217905550505060408201518160050160006101000a81548161ffff021916908361ffff16021790555060608201518160050160026101000a81548161ffff021916908361ffff16021790555060808201518160050160046101000a81548161ffff021916908361ffff16021790555060a08201518160050160066101000a81548161ffff021916908361ffff16021790555060c08201518160050160086101000a81548161ffff021916908361ffff16021790555060e082015181600501600a6101000a81548161ffff021916908361ffff16021790555050500390507fb1b17b23cffcf729d34b26aac4faa18940cec6ac11f34c678d0bfe232b00dc8181836040516103e1929190610f1b565b60405180910390a15050565b600081815481106103fa57fe5b60009182526020918290206006919091020180546040805160026001841615610100026000190190931692909204601f8101859004850283018501909152808252919350918391908301828280156104935780601f1061046857610100808354040283529160200191610493565b820191906000526020600020905b81548152906001019060200180831161047657829003601f168201915b50505050509080600101604051806080016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105415780601f1061051657610100808354040283529160200191610541565b820191906000526020600020905b81548152906001019060200180831161052457829003601f168201915b50505091835250506040805160a08082018352600185015461ffff8082168452620100008083048216602086810191909152640100000000808504841687890152660100000000000080860485166060808a0191909152600160401b9687900486166080808b0191909152848c019990995289519788018a5260028c015480871689528581048716948901949094528284048616888b0152818404861688820152928690048516978701979097529688019490945260039097015481169290950191909152600590960154949585841695948504841694928304841693918304821692908104821691600160501b9091041688565b61063e61092f565b6000828154811061064b57fe5b60009182526020918290206040805160069390930290910180546002610100600183161581026000190190921604601f810186900490950284016101209081019093528301848152929390928492909184918401828280156106ee5780601f106106c3576101008083540402835291602001916106ee565b820191906000526020600020905b8154815290600101906020018083116106d157829003601f168201915b5050505050815260200160018201604051806080016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107a05780601f10610775576101008083540402835291602001916107a0565b820191906000526020600020905b81548152906001019060200180831161078357829003601f168201915b50505091835250506040805160a08082018352600185015461ffff8082168452620100008083048216602080870191909152640100000000808504841687890152660100000000000080860485166060808a0191909152600160401b9687900486166080808b0191909152848c019990995289518089018b5260028d015480881682528681048816828701528481048816828d01528381048816828401528890048716818b01528a8c01526003909b01548516998b0199909952998b5260059b909b01548083169b8b019b909b528a04811694890194909452958804831694870194909452918604811691850191909152918404821690830152600160501b90920490911660c09091015292915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108f257805160ff191683800117855561091f565b8280016001018555821561091f579182015b8281111561091f578251825591602001919060010190610904565b5061092b92915061097a565b5090565b6040518061026001604052806060815260200161094a610994565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6100cf91905b8082111561092b5760008155600101610980565b604051806101800160405280606081526020016109af6109c9565b81526020016109bc6109c9565b8152600060209091015290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b600082601f830112610a0857600080fd5b8135610a1b610a1682610f62565b610f3b565b91508082526020830160208301858383011115610a3757600080fd5b610a42838284610f9e565b50505092915050565b60006101808284031215610a5e57600080fd5b610a686080610f3b565b9050813567ffffffffffffffff811115610a8157600080fd5b610a8d848285016109f7565b8252506020610a9e84848301610ad3565b60208301525060c0610ab284828501610ad3565b604083015250610160610ac784828501610c46565b60608301525092915050565b600060a08284031215610ae557600080fd5b610aef60a0610f3b565b90506000610afd8484610c46565b8252506020610b0e84848301610c46565b6020830152506040610b2284828501610c46565b6040830152506060610b3684828501610c46565b6060830152506080610b4a84828501610c46565b60808301525092915050565b60006101008284031215610b6957600080fd5b610b74610100610f3b565b9050813567ffffffffffffffff811115610b8d57600080fd5b610b99848285016109f7565b825250602082013567ffffffffffffffff811115610bb657600080fd5b610bc284828501610a4b565b6020830152506040610bd684828501610c46565b6040830152506060610bea84828501610c46565b6060830152506080610bfe84828501610c46565b60808301525060a0610c1284828501610c46565b60a08301525060c0610c2684828501610c46565b60c08301525060e0610c3a84828501610c46565b60e08301525092915050565b6000610c528235610f97565b9392505050565b6000610c5282356100cf565b600060208284031215610c7757600080fd5b813567ffffffffffffffff811115610c8e57600080fd5b610c9a84828501610b56565b949350505050565b600060208284031215610cb457600080fd5b6000610c9a8484610c59565b6000610ccb82610f8a565b610cd58185610f8e565b9350610ce5818560208601610faa565b610cee81610fd6565b9093019392505050565b805161018080845260009190840190610d118282610cc0565b9150506020830151610d266020860182610d55565b506040830151610d3960c0860182610d55565b506060830151610d4d610160860182610e5b565b509392505050565b805160a0830190610d668482610e5b565b506020820151610d796020850182610e5b565b506040820151610d8c6040850182610e5b565b506060820151610d9f6060850182610e5b565b506080820151610db26080850182610e5b565b50505050565b805161010080845260009190840190610dd18282610cc0565b91505060208301518482036020860152610deb8282610cf8565b9150506040830151610e006040860182610e5b565b506060830151610e136060860182610e5b565b506080830151610e266080860182610e5b565b5060a0830151610e3960a0860182610e5b565b5060c0830151610e4c60c0860182610e5b565b5060e0830151610d4d60e08601825b610e6481610f97565b82525050565b610e64816100cf565b6101008082528101610e85818b610cc0565b90508181036020830152610e99818a610cf8565b9050610ea86040830189610e5b565b610eb56060830188610e5b565b610ec26080830187610e5b565b610ecf60a0830186610e5b565b610edc60c0830185610e5b565b610ee960e0830184610e5b565b9998505050505050505050565b60208082528101610c528184610db8565b60208101610f158284610e6a565b92915050565b60408101610f298285610e6a565b8181036020830152610c9a8184610db8565b60405181810167ffffffffffffffff81118282101715610f5a57600080fd5b604052919050565b600067ffffffffffffffff821115610f7957600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b61ffff1690565b82818337506000910152565b60005b83811015610fc5578181015183820152602001610fad565b83811115610db25750506000910152565b601f01601f19169056fea265627a7a72305820d37adb01deb56f3254e7927891c1971a52071b2d0563dfae1009fe4aecc617726c6578706572696d656e74616cf50037", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B6CDE10 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x377B723A EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x8DC10768 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0x9188D312 EQ PUSH2 0xAB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xF07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x82 PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0xC65 JUMP JUMPDEST PUSH2 0xD2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x97 PUSH2 0x92 CALLDATASIZE PUSH1 0x4 PUSH2 0xCA2 JUMP JUMPDEST PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE73 JUMP JUMPDEST PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0xCA2 JUMP JUMPDEST PUSH2 0x636 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x0 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP1 DUP5 SSTORE DUP4 DUP1 MSTORE DUP5 MLOAD DUP1 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 DUP7 SWAP3 PUSH1 0x6 MUL PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 ADD SWAP2 PUSH2 0x120 SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD SWAP1 PUSH2 0x8B1 JUMP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD MLOAD DUP1 MLOAD DUP1 MLOAD SWAP2 SWAP3 PUSH1 0x1 DUP6 ADD SWAP3 PUSH2 0x13F SWAP3 DUP5 SWAP3 ADD SWAP1 PUSH2 0x8B1 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x6 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x6 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x6 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0xA PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP POP SUB SWAP1 POP PUSH32 0xB1B17B23CFFCF729D34B26AAC4FAA18940CEC6AC11F34C678D0BFE232B00DC81 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0x3E1 SWAP3 SWAP2 SWAP1 PUSH2 0xF1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3FA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x6 SWAP2 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 PUSH1 0x1 DUP5 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV PUSH1 0x1F DUP2 ADD DUP6 SWAP1 DIV DUP6 MUL DUP4 ADD DUP6 ADD SWAP1 SWAP2 MSTORE DUP1 DUP3 MSTORE SWAP2 SWAP4 POP SWAP2 DUP4 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x493 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x468 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x493 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x476 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x541 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x516 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x541 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x524 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP5 MSTORE PUSH3 0x10000 DUP1 DUP4 DIV DUP3 AND PUSH1 0x20 DUP7 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x100000000 DUP1 DUP6 DIV DUP5 AND DUP8 DUP10 ADD MSTORE PUSH7 0x1000000000000 DUP1 DUP7 DIV DUP6 AND PUSH1 0x60 DUP1 DUP11 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP7 DUP8 SWAP1 DIV DUP7 AND PUSH1 0x80 DUP1 DUP12 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 DUP13 ADD SWAP10 SWAP1 SWAP10 MSTORE DUP10 MLOAD SWAP8 DUP9 ADD DUP11 MSTORE PUSH1 0x2 DUP13 ADD SLOAD DUP1 DUP8 AND DUP10 MSTORE DUP6 DUP2 DIV DUP8 AND SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP3 DUP5 DIV DUP7 AND DUP9 DUP12 ADD MSTORE DUP2 DUP5 DIV DUP7 AND DUP9 DUP3 ADD MSTORE SWAP3 DUP7 SWAP1 DIV DUP6 AND SWAP8 DUP8 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP7 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x3 SWAP1 SWAP8 ADD SLOAD DUP2 AND SWAP3 SWAP1 SWAP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 DUP6 DUP5 AND SWAP6 SWAP5 DUP6 DIV DUP5 AND SWAP5 SWAP3 DUP4 DIV DUP5 AND SWAP4 SWAP2 DUP4 DIV DUP3 AND SWAP3 SWAP1 DUP2 DIV DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x50 SHL SWAP1 SWAP2 DIV AND DUP9 JUMP JUMPDEST PUSH2 0x63E PUSH2 0x92F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x64B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0x6 SWAP4 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x2 PUSH2 0x100 PUSH1 0x1 DUP4 AND ISZERO DUP2 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP3 AND DIV PUSH1 0x1F DUP2 ADD DUP7 SWAP1 DIV SWAP1 SWAP6 MUL DUP5 ADD PUSH2 0x120 SWAP1 DUP2 ADD SWAP1 SWAP4 MSTORE DUP4 ADD DUP5 DUP2 MSTORE SWAP3 SWAP4 SWAP1 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 DUP5 SWAP2 DUP5 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x6EE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6EE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6D1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x7A0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x775 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7A0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x783 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP5 MSTORE PUSH3 0x10000 DUP1 DUP4 DIV DUP3 AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x100000000 DUP1 DUP6 DIV DUP5 AND DUP8 DUP10 ADD MSTORE PUSH7 0x1000000000000 DUP1 DUP7 DIV DUP6 AND PUSH1 0x60 DUP1 DUP11 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP7 DUP8 SWAP1 DIV DUP7 AND PUSH1 0x80 DUP1 DUP12 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 DUP13 ADD SWAP10 SWAP1 SWAP10 MSTORE DUP10 MLOAD DUP1 DUP10 ADD DUP12 MSTORE PUSH1 0x2 DUP14 ADD SLOAD DUP1 DUP9 AND DUP3 MSTORE DUP7 DUP2 DIV DUP9 AND DUP3 DUP8 ADD MSTORE DUP5 DUP2 DIV DUP9 AND DUP3 DUP14 ADD MSTORE DUP4 DUP2 DIV DUP9 AND DUP3 DUP5 ADD MSTORE DUP9 SWAP1 DIV DUP8 AND DUP2 DUP12 ADD MSTORE DUP11 DUP13 ADD MSTORE PUSH1 0x3 SWAP1 SWAP12 ADD SLOAD DUP6 AND SWAP10 DUP12 ADD SWAP10 SWAP1 SWAP10 MSTORE SWAP10 DUP12 MSTORE PUSH1 0x5 SWAP12 SWAP1 SWAP12 ADD SLOAD DUP1 DUP4 AND SWAP12 DUP12 ADD SWAP12 SWAP1 SWAP12 MSTORE DUP11 DIV DUP2 AND SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 DUP9 DIV DUP4 AND SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP7 DIV DUP2 AND SWAP2 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP5 DIV DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x50 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x8F2 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x91F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x91F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x91F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x904 JUMP JUMPDEST POP PUSH2 0x92B SWAP3 SWAP2 POP PUSH2 0x97A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x94A PUSH2 0x994 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0xCF SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x980 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9AF PUSH2 0x9C9 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9BC PUSH2 0x9C9 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA1B PUSH2 0xA16 DUP3 PUSH2 0xF62 JUMP JUMPDEST PUSH2 0xF3B JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xA37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA42 DUP4 DUP3 DUP5 PUSH2 0xF9E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA68 PUSH1 0x80 PUSH2 0xF3B JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA8D DUP5 DUP3 DUP6 ADD PUSH2 0x9F7 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xA9E DUP5 DUP5 DUP4 ADD PUSH2 0xAD3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xAB2 DUP5 DUP3 DUP6 ADD PUSH2 0xAD3 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0xAC7 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAEF PUSH1 0xA0 PUSH2 0xF3B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAFD DUP5 DUP5 PUSH2 0xC46 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xB0E DUP5 DUP5 DUP4 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xB22 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xB36 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xB4A DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB74 PUSH2 0x100 PUSH2 0xF3B JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB99 DUP5 DUP3 DUP6 ADD PUSH2 0x9F7 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBC2 DUP5 DUP3 DUP6 ADD PUSH2 0xA4B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xBD6 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xBEA DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xBFE DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xC12 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xC26 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0xC3A DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC52 DUP3 CALLDATALOAD PUSH2 0xF97 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC52 DUP3 CALLDATALOAD PUSH2 0xCF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC9A DUP5 DUP3 DUP6 ADD PUSH2 0xB56 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC9A DUP5 DUP5 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCCB DUP3 PUSH2 0xF8A JUMP JUMPDEST PUSH2 0xCD5 DUP2 DUP6 PUSH2 0xF8E JUMP JUMPDEST SWAP4 POP PUSH2 0xCE5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xFAA JUMP JUMPDEST PUSH2 0xCEE DUP2 PUSH2 0xFD6 JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x180 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0xD11 DUP3 DUP3 PUSH2 0xCC0 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0xD26 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xD55 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xD39 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0xD55 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xD4D PUSH2 0x160 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA0 DUP4 ADD SWAP1 PUSH2 0xD66 DUP5 DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xD79 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xD8C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xD9F PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xDB2 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x100 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0xDD1 DUP3 DUP3 PUSH2 0xCC0 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xDEB DUP3 DUP3 PUSH2 0xCF8 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xE00 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xE13 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0xE26 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0xE39 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0xE4C PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0xD4D PUSH1 0xE0 DUP7 ADD DUP3 JUMPDEST PUSH2 0xE64 DUP2 PUSH2 0xF97 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE64 DUP2 PUSH2 0xCF JUMP JUMPDEST PUSH2 0x100 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xE85 DUP2 DUP12 PUSH2 0xCC0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xE99 DUP2 DUP11 PUSH2 0xCF8 JUMP JUMPDEST SWAP1 POP PUSH2 0xEA8 PUSH1 0x40 DUP4 ADD DUP10 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEB5 PUSH1 0x60 DUP4 ADD DUP9 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEC2 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xECF PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEDC PUSH1 0xC0 DUP4 ADD DUP6 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEE9 PUSH1 0xE0 DUP4 ADD DUP5 PUSH2 0xE5B JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC52 DUP2 DUP5 PUSH2 0xDB8 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xF15 DUP3 DUP5 PUSH2 0xE6A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xF29 DUP3 DUP6 PUSH2 0xE6A JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC9A DUP2 DUP5 PUSH2 0xDB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFC5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xFAD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xDB2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xd3 PUSH27 0xDB01DEB56F3254E7927891C1971A52071B2D0563DFAE1009FE4AEC 0xc6 OR PUSH19 0x6C6578706572696D656E74616CF50037000000 ", "sourceMap": "119:436:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;119:436:2;;;;;;;"}, "deployedBytecode": {"linkReferences": {}, "object": "", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B6CDE10 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x377B723A EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x8DC10768 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0x9188D312 EQ PUSH2 0xAB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xF07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x82 PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0xC65 JUMP JUMPDEST PUSH2 0xD2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x97 PUSH2 0x92 CALLDATASIZE PUSH1 0x4 PUSH2 0xCA2 JUMP JUMPDEST PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE73 JUMP JUMPDEST PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0xCA2 JUMP JUMPDEST PUSH2 0x636 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x0 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP1 DUP5 SSTORE DUP4 DUP1 MSTORE DUP5 MLOAD DUP1 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 DUP7 SWAP3 PUSH1 0x6 MUL PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 ADD SWAP2 PUSH2 0x120 SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD SWAP1 PUSH2 0x8B1 JUMP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD MLOAD DUP1 MLOAD DUP1 MLOAD SWAP2 SWAP3 PUSH1 0x1 DUP6 ADD SWAP3 PUSH2 0x13F SWAP3 DUP5 SWAP3 ADD SWAP1 PUSH2 0x8B1 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x6 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x6 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x6 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0xA PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP POP SUB SWAP1 POP PUSH32 0xB1B17B23CFFCF729D34B26AAC4FAA18940CEC6AC11F34C678D0BFE232B00DC81 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0x3E1 SWAP3 SWAP2 SWAP1 PUSH2 0xF1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3FA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x6 SWAP2 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 PUSH1 0x1 DUP5 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV PUSH1 0x1F DUP2 ADD DUP6 SWAP1 DIV DUP6 MUL DUP4 ADD DUP6 ADD SWAP1 SWAP2 MSTORE DUP1 DUP3 MSTORE SWAP2 SWAP4 POP SWAP2 DUP4 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x493 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x468 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x493 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x476 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x541 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x516 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x541 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x524 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP5 MSTORE PUSH3 0x10000 DUP1 DUP4 DIV DUP3 AND PUSH1 0x20 DUP7 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x100000000 DUP1 DUP6 DIV DUP5 AND DUP8 DUP10 ADD MSTORE PUSH7 0x1000000000000 DUP1 DUP7 DIV DUP6 AND PUSH1 0x60 DUP1 DUP11 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP7 DUP8 SWAP1 DIV DUP7 AND PUSH1 0x80 DUP1 DUP12 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 DUP13 ADD SWAP10 SWAP1 SWAP10 MSTORE DUP10 MLOAD SWAP8 DUP9 ADD DUP11 MSTORE PUSH1 0x2 DUP13 ADD SLOAD DUP1 DUP8 AND DUP10 MSTORE DUP6 DUP2 DIV DUP8 AND SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP3 DUP5 DIV DUP7 AND DUP9 DUP12 ADD MSTORE DUP2 DUP5 DIV DUP7 AND DUP9 DUP3 ADD MSTORE SWAP3 DUP7 SWAP1 DIV DUP6 AND SWAP8 DUP8 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP7 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x3 SWAP1 SWAP8 ADD SLOAD DUP2 AND SWAP3 SWAP1 SWAP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 DUP6 DUP5 AND SWAP6 SWAP5 DUP6 DIV DUP5 AND SWAP5 SWAP3 DUP4 DIV DUP5 AND SWAP4 SWAP2 DUP4 DIV DUP3 AND SWAP3 SWAP1 DUP2 DIV DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x50 SHL SWAP1 SWAP2 DIV AND DUP9 JUMP JUMPDEST PUSH2 0x63E PUSH2 0x92F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x64B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0x6 SWAP4 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x2 PUSH2 0x100 PUSH1 0x1 DUP4 AND ISZERO DUP2 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP3 AND DIV PUSH1 0x1F DUP2 ADD DUP7 SWAP1 DIV SWAP1 SWAP6 MUL DUP5 ADD PUSH2 0x120 SWAP1 DUP2 ADD SWAP1 SWAP4 MSTORE DUP4 ADD DUP5 DUP2 MSTORE SWAP3 SWAP4 SWAP1 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 DUP5 SWAP2 DUP5 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x6EE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6EE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6D1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x7A0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x775 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7A0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x783 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP5 MSTORE PUSH3 0x10000 DUP1 DUP4 DIV DUP3 AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x100000000 DUP1 DUP6 DIV DUP5 AND DUP8 DUP10 ADD MSTORE PUSH7 0x1000000000000 DUP1 DUP7 DIV DUP6 AND PUSH1 0x60 DUP1 DUP11 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP7 DUP8 SWAP1 DIV DUP7 AND PUSH1 0x80 DUP1 DUP12 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 DUP13 ADD SWAP10 SWAP1 SWAP10 MSTORE DUP10 MLOAD DUP1 DUP10 ADD DUP12 MSTORE PUSH1 0x2 DUP14 ADD SLOAD DUP1 DUP9 AND DUP3 MSTORE DUP7 DUP2 DIV DUP9 AND DUP3 DUP8 ADD MSTORE DUP5 DUP2 DIV DUP9 AND DUP3 DUP14 ADD MSTORE DUP4 DUP2 DIV DUP9 AND DUP3 DUP5 ADD MSTORE DUP9 SWAP1 DIV DUP8 AND DUP2 DUP12 ADD MSTORE DUP11 DUP13 ADD MSTORE PUSH1 0x3 SWAP1 SWAP12 ADD SLOAD DUP6 AND SWAP10 DUP12 ADD SWAP10 SWAP1 SWAP10 MSTORE SWAP10 DUP12 MSTORE PUSH1 0x5 SWAP12 SWAP1 SWAP12 ADD SLOAD DUP1 DUP4 AND SWAP12 DUP12 ADD SWAP12 SWAP1 SWAP12 MSTORE DUP11 DIV DUP2 AND SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 DUP9 DIV DUP4 AND SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP7 DIV DUP2 AND SWAP2 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP5 DIV DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x50 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x8F2 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x91F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x91F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x91F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x904 JUMP JUMPDEST POP PUSH2 0x92B SWAP3 SWAP2 POP PUSH2 0x97A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x94A PUSH2 0x994 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0xCF SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x980 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9AF PUSH2 0x9C9 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9BC PUSH2 0x9C9 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA1B PUSH2 0xA16 DUP3 PUSH2 0xF62 JUMP JUMPDEST PUSH2 0xF3B JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xA37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA42 DUP4 DUP3 DUP5 PUSH2 0xF9E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA68 PUSH1 0x80 PUSH2 0xF3B JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA8D DUP5 DUP3 DUP6 ADD PUSH2 0x9F7 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xA9E DUP5 DUP5 DUP4 ADD PUSH2 0xAD3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xAB2 DUP5 DUP3 DUP6 ADD PUSH2 0xAD3 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0xAC7 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAEF PUSH1 0xA0 PUSH2 0xF3B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAFD DUP5 DUP5 PUSH2 0xC46 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xB0E DUP5 DUP5 DUP4 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xB22 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xB36 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xB4A DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB74 PUSH2 0x100 PUSH2 0xF3B JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB99 DUP5 DUP3 DUP6 ADD PUSH2 0x9F7 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBC2 DUP5 DUP3 DUP6 ADD PUSH2 0xA4B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xBD6 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xBEA DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xBFE DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xC12 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xC26 DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0xC3A DUP5 DUP3 DUP6 ADD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC52 DUP3 CALLDATALOAD PUSH2 0xF97 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC52 DUP3 CALLDATALOAD PUSH2 0xCF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC9A DUP5 DUP3 DUP6 ADD PUSH2 0xB56 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC9A DUP5 DUP5 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCCB DUP3 PUSH2 0xF8A JUMP JUMPDEST PUSH2 0xCD5 DUP2 DUP6 PUSH2 0xF8E JUMP JUMPDEST SWAP4 POP PUSH2 0xCE5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xFAA JUMP JUMPDEST PUSH2 0xCEE DUP2 PUSH2 0xFD6 JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x180 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0xD11 DUP3 DUP3 PUSH2 0xCC0 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0xD26 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xD55 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xD39 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0xD55 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xD4D PUSH2 0x160 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA0 DUP4 ADD SWAP1 PUSH2 0xD66 DUP5 DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xD79 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xD8C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xD9F PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xDB2 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x100 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0xDD1 DUP3 DUP3 PUSH2 0xCC0 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xDEB DUP3 DUP3 PUSH2 0xCF8 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xE00 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xE13 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0xE26 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0xE39 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0xE4C PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0xE5B JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0xD4D PUSH1 0xE0 DUP7 ADD DUP3 JUMPDEST PUSH2 0xE64 DUP2 PUSH2 0xF97 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE64 DUP2 PUSH2 0xCF JUMP JUMPDEST PUSH2 0x100 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xE85 DUP2 DUP12 PUSH2 0xCC0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xE99 DUP2 DUP11 PUSH2 0xCF8 JUMP JUMPDEST SWAP1 POP PUSH2 0xEA8 PUSH1 0x40 DUP4 ADD DUP10 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEB5 PUSH1 0x60 DUP4 ADD DUP9 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEC2 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xECF PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEDC PUSH1 0xC0 DUP4 ADD DUP6 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEE9 PUSH1 0xE0 DUP4 ADD DUP5 PUSH2 0xE5B JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC52 DUP2 DUP5 PUSH2 0xDB8 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xF15 DUP3 DUP5 PUSH2 0xE6A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xF29 DUP3 DUP6 PUSH2 0xE6A JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC9A DUP2 DUP5 PUSH2 0xDB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFC5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xFAD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xDB2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xd3 PUSH27 0xDB01DEB56F3254E7927891C1971A52071B2D0563DFAE1009FE4AEC 0xc6 OR PUSH19 0x6C6578706572696D656E74616CF50037000000 ", "sourceMap": "119:436:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;119:436:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;374:79;;;:::i;:::-;;;;;;;;;;;;;;;;232:136;;;;;;;;;:::i;:::-;;206:19;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;459:94;;;;;;;;;:::i;:::-;;;;;;;;374:79;411:4;434:12;374:79;;:::o;232:136::-;291:11;27:10:-1;;324:1:2;23:18:-1;;;45:23;;;305:16:2;;;;;;;324:1;;23:18:-1;;316:4:2;;305:16;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;305:16:2;;;;;;;;;;;;;;;;;;;;;;:::io;206:19::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;206:19:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;206:19:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;206:19:2;;;-1:-1:-1;;206:19:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;206:19:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;206:19:2;;;;;:::o;459:94::-;504:11;;:::i;:::-;534:5;540;534:12;;;;;;;;;;;;;;;;;527:19;;;534:12;;;;;;;;527:19;;;;;;;;;;-1:-1:-1;;527:19:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;534:12;;527:19;;;;534:12;;527:19;;534:12;527:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;527:19:2;;;-1:-1:-1;;527:19:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;527:19:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;527:19:2;;;;;;;;;;;;459:94;-1:-1:-1;;459:94:2:o;119:436::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;119:436:2;;;-1:-1:-1;119:436:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;119:436:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6:434:-1:-;;104:3;97:4;89:6;85:17;81:27;71:2;;122:1;119;112:12;71:2;159:6;146:20;181:61;196:45;234:6;196:45;;;181:61;;;172:70;;262:6;255:5;248:21;298:4;290:6;286:17;331:4;324:5;320:16;366:3;357:6;352:3;348:16;345:25;342:2;;;383:1;380;373:12;342:2;393:41;427:6;422:3;417;393:41;;;64:376;;;;;;;;487:910;;597:5;585:9;580:3;576:19;572:31;569:2;;;616:1;613;606:12;569:2;634:20;649:4;634:20;;;625:29;-1:-1;704:31;;755:18;744:30;;741:2;;;787:1;784;777:12;741:2;821:55;872:3;863:6;852:9;848:22;821:55;;;797:80;;-1:-1;942:2;975:77;1048:3;1024:22;;;975:77;;;968:4;961:5;957:16;950:103;898:166;1116:3;1150:77;1223:3;1214:6;1203:9;1199:22;1150:77;;;1143:4;1136:5;1132:16;1125:103;1074:165;1293:3;1327:48;1371:3;1362:6;1351:9;1347:22;1327:48;;;1320:4;1313:5;1309:16;1302:74;1249:138;563:834;;;;;1450:913;;1567:4;1555:9;1550:3;1546:19;1542:30;1539:2;;;1585:1;1582;1575:12;1539:2;1603:20;1618:4;1603:20;;;1594:29;-1:-1;1675:1;1706:48;1750:3;1730:9;1706:48;;;1682:73;;-1:-1;1819:2;1852:48;1896:3;1872:22;;;1852:48;;;1845:4;1838:5;1834:16;1827:74;1776:136;1962:2;1995:48;2039:3;2030:6;2019:9;2015:22;1995:48;;;1988:4;1981:5;1977:16;1970:74;1922:133;2107:2;2140:48;2184:3;2175:6;2164:9;2160:22;2140:48;;;2133:4;2126:5;2122:16;2115:74;2065:135;2259:3;2293:48;2337:3;2328:6;2317:9;2313:22;2293:48;;;2286:4;2279:5;2275:16;2268:74;2210:143;1533:830;;;;;2406:1558;;2517:5;2505:9;2500:3;2496:19;2492:31;2489:2;;;2536:1;2533;2526:12;2489:2;2554:21;2569:5;2554:21;;;2545:30;-1:-1;2625:31;;2676:18;2665:30;;2662:2;;;2708:1;2705;2698:12;2662:2;2742:55;2793:3;2784:6;2773:9;2769:22;2742:55;;;2718:80;;-1:-1;2890:2;2875:18;;2862:32;2914:18;2903:30;;2900:2;;;2946:1;2943;2936:12;2900:2;2981:70;3047:3;3038:6;3027:9;3023:22;2981:70;;;2974:4;2967:5;2963:16;2956:96;2819:244;3119:2;3152:48;3196:3;3187:6;3176:9;3172:22;3152:48;;;3145:4;3138:5;3134:16;3127:74;3073:139;3269:2;3302:48;3346:3;3337:6;3326:9;3322:22;3302:48;;;3295:4;3288:5;3284:16;3277:74;3222:140;3416:3;3450:48;3494:3;3485:6;3474:9;3470:22;3450:48;;;3443:4;3436:5;3432:16;3425:74;3372:138;3561:3;3595:48;3639:3;3630:6;3619:9;3615:22;3595:48;;;3588:4;3581:5;3577:16;3570:74;3520:135;3707:3;3741:48;3785:3;3776:6;3765:9;3761:22;3741:48;;;3734:4;3727:5;3723:16;3716:74;3665:136;3860:3;3894:48;3938:3;3929:6;3918:9;3914:22;3894:48;;;3887:4;3880:5;3876:16;3869:74;3811:143;2483:1481;;;;;3971:116;;4037:45;4074:6;4061:20;4037:45;;;4028:54;4022:65;-1:-1;;;4022:65;4094:118;;4161:46;4199:6;4186:20;4161:46;;4219:371;;4345:2;4333:9;4324:7;4320:23;4316:32;4313:2;;;4361:1;4358;4351:12;4313:2;4396:31;;4447:18;4436:30;;4433:2;;;4479:1;4476;4469:12;4433:2;4499:75;4566:7;4557:6;4546:9;4542:22;4499:75;;;4489:85;4307:283;-1:-1;;;;4307:283;4597:241;;4701:2;4689:9;4680:7;4676:23;4672:32;4669:2;;;4717:1;4714;4707:12;4669:2;4752:1;4769:53;4814:7;4794:9;4769:53;;4845:319;;4943:35;4972:5;4943:35;;;4990:61;5044:6;5039:3;4990:61;;;4983:68;;5056:52;5101:6;5096:3;5089:4;5082:5;5078:16;5056:52;;;5129:29;5151:6;5129:29;;;5120:39;;;;4923:241;-1:-1;;;4923:241;5592:981;5795:22;;5729:5;5830:37;;;5592:981;;5720:15;;;;5882:68;5720:15;5795:22;5882:68;;;5874:76;;5750:212;6038:4;6031:5;6027:16;6021:23;6050:122;6166:4;6161:3;6157:14;6144:11;6050:122;;;5972:206;6252:4;6245:5;6241:16;6235:23;6264:122;6380:4;6375:3;6371:14;6358:11;6264:122;;;6188:204;6468:4;6461:5;6457:16;6451:23;6480:61;6534:5;6529:3;6525:15;6512:11;6480:61;;;-1:-1;6564:4;5702:871;-1:-1;;;5702:871;7742:932;7952:22;;7885:4;7876:14;;;7980:59;7880:3;7952:22;7980:59;;;7905:140;8120:4;8113:5;8109:16;8103:23;8132:60;8186:4;8181:3;8177:14;8164:11;8132:60;;;8055:143;8270:4;8263:5;8259:16;8253:23;8282:60;8336:4;8331:3;8327:14;8314:11;8282:60;;;8208:140;8422:4;8415:5;8411:16;8405:23;8434:60;8488:4;8483:3;8479:14;8466:11;8434:60;;;8358:142;8581:4;8574:5;8570:16;8564:23;8593:60;8647:4;8642:3;8638:14;8625:11;8593:60;;;8510:149;7858:816;;;;8750:1590;8961:22;;8895:5;8996:37;;;8750:1590;;8886:15;;;;9048:68;8886:15;8961:22;9048:68;;;9040:76;;8916:212;9203:4;9196:5;9192:16;9186:23;9255:3;9249:4;9245:14;9238:4;9233:3;9229:14;9222:38;9275:98;9368:4;9355:11;9275:98;;;9267:106;;9138:247;9463:4;9456:5;9452:16;9446:23;9475:60;9529:4;9524:3;9520:14;9507:11;9475:60;;;9395:146;9620:4;9613:5;9609:16;9603:23;9632:60;9686:4;9681:3;9677:14;9664:11;9632:60;;;9551:147;9774:4;9767:5;9763:16;9757:23;9786:60;9840:4;9835:3;9831:14;9818:11;9786:60;;;9708:144;9925:4;9918:5;9914:16;9908:23;9937:60;9991:4;9986:3;9982:14;9969:11;9937:60;;;9862:141;10077:4;10070:5;10066:16;10060:23;10089:60;10143:4;10138:3;10134:14;10121:11;10089:60;;;10013:142;10236:4;10229:5;10225:16;10219:23;10248:60;10302:4;10297:3;10293:14;10280:11;10347:107;10418:30;10442:5;10418:30;;;10413:3;10406:43;10400:54;;;10585:120;10668:31;10693:5;10668:31;;10712:1191;11076:3;11091:47;;;11061:19;;11152:74;11061:19;11212:6;11152:74;;;11144:82;;11274:9;11268:4;11264:20;11259:2;11248:9;11244:18;11237:48;11299:104;11398:4;11389:6;11299:104;;;11291:112;;11414:70;11480:2;11469:9;11465:18;11456:6;11414:70;;;11495;11561:2;11550:9;11546:18;11537:6;11495:70;;;11576:71;11642:3;11631:9;11627:19;11618:6;11576:71;;;11658;11724:3;11713:9;11709:19;11700:6;11658:71;;;11740;11806:3;11795:9;11791:19;11782:6;11740:71;;;11822;11888:3;11877:9;11873:19;11864:6;11822:71;;;11047:856;;;;;;;;;;;;11910:349;12072:2;12086:47;;;12057:18;;12147:102;12057:18;12235:6;12147:102;;12266:213;12384:2;12369:18;;12398:71;12373:9;12442:6;12398:71;;;12355:124;;;;;12486:460;12676:2;12661:18;;12690:71;12665:9;12734:6;12690:71;;;12809:9;12803:4;12799:20;12794:2;12783:9;12779:18;12772:48;12834:102;12931:4;12922:6;12834:102;;12953:256;13015:2;13009:9;13041:17;;;13116:18;13101:34;;13137:22;;;13098:62;13095:2;;;13173:1;13170;13163:12;13095:2;13189;13182:22;12993:216;;-1:-1;12993:216;13216:255;;13356:18;13348:6;13345:30;13342:2;;;13388:1;13385;13378:12;13342:2;-1:-1;13461:4;13432;13409:17;;;;-1:-1;;13405:33;13451:15;;13279:192;13478:88;13549:12;;13533:33;13574:153;13667:19;;;13716:4;13707:14;;13660:67;13907:91;13986:6;13975:18;;13958:40;14276:145;14357:6;14352:3;14347;14334:30;-1:-1;14413:1;14395:16;;14388:27;14327:94;14430:268;14495:1;14502:101;14516:6;14513:1;14510:13;14502:101;;;14583:11;;;14577:18;14564:11;;;14557:39;14538:2;14531:10;14502:101;;;14618:6;14615:1;14612:13;14609:2;;;-1:-1;;14683:1;14665:16;;14658:27;14479:219;14706:97;14794:2;14774:14;-1:-1;;14770:28;;14754:49"}}}}, "contracts/Challenge.sol": {"Challenge": {"abi": [{"constant": true, "inputs": [], "name": "challenger", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [], "name": "challenge", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [], "name": "cancel", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "challenger", "type": "address"}], "name": "Challenge", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "challenger", "type": "address"}], "name": "Cancel", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "challenger", "type": "address"}, {"indexed": false, "name": "acceptor", "type": "address"}], "name": "Accept", "type": "event"}], "evm": {"assembly": "    /* \"contracts/Challenge.sol\":26:741  contract Challenge {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Challenge.sol\":88:89  0 */\n  0x00\n    /* \"contracts/Challenge.sol\":52:90  address public challenger = address(0) */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  swap1\n  sstore\n    /* \"contracts/Challenge.sol\":26:741  contract Challenge {... */\n  callvalue\n    /* \"--CODEGEN--\":5:7   */\n  dup1\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/Challenge.sol\":26:741  contract Challenge {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Challenge.sol\":26:741  contract Challenge {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/Challenge.sol\":26:741  contract Challenge {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x534db0e2\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xd2ef7398\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xea8a1af0\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Challenge.sol\":52:90  address public challenger = address(0) */\n    tag_3:\n      tag_6\n      tag_7\n      jump\t// in\n    tag_6:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/Challenge.sol\":233:616  function challenge() public {... */\n    tag_4:\n      tag_8\n      tag_9\n      jump\t// in\n    tag_8:\n      stop\n        /* \"contracts/Challenge.sol\":622:739  function cancel() public {... */\n    tag_5:\n      tag_8\n      tag_11\n      jump\t// in\n        /* \"contracts/Challenge.sol\":52:90  address public challenger = address(0) */\n    tag_7:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n        /* \"contracts/Challenge.sol\":233:616  function challenge() public {... */\n    tag_9:\n        /* \"contracts/Challenge.sol\":322:332  challenger */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"contracts/Challenge.sol\":336:346  msg.sender */\n      caller\n        /* \"contracts/Challenge.sol\":322:346  challenger != msg.sender */\n      eq\n      iszero\n        /* \"contracts/Challenge.sol\":314:370  require(challenger != msg.sender, 'Already challenging') */\n      tag_13\n      jumpi\n      0x40\n      dup1\n      mload\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      0x416c7265616479206368616c6c656e67696e6700000000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_13:\n        /* \"contracts/Challenge.sol\":407:408  0 */\n      0x00\n        /* \"contracts/Challenge.sol\":385:395  challenger */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/Challenge.sol\":381:610  if (challenger == address(0)) {... */\n      tag_14\n      jumpi\n        /* \"contracts/Challenge.sol\":425:435  challenger */\n      0x00\n        /* \"contracts/Challenge.sol\":425:448  challenger = msg.sender */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n        /* \"contracts/Challenge.sol\":438:448  msg.sender */\n      caller\n        /* \"contracts/Challenge.sol\":425:448  challenger = msg.sender */\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/Challenge.sol\":467:488  Challenge(msg.sender) */\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      0xc21b87340588bdc78634253d4b0c2c02f475010edc0dc0c201bb0db913fa51a0\n      swap2\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      log1\n        /* \"contracts/Challenge.sol\":381:610  if (challenger == address(0)) {... */\n      jump(tag_15)\n    tag_14:\n        /* \"contracts/Challenge.sol\":539:549  challenger */\n      sload(0x00)\n        /* \"contracts/Challenge.sol\":532:562  Accept(challenger, msg.sender) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Challenge.sol\":539:549  challenger */\n      swap1\n      swap3\n      and\n        /* \"contracts/Challenge.sol\":532:562  Accept(challenger, msg.sender) */\n      dup3\n      mstore\n        /* \"contracts/Challenge.sol\":551:561  msg.sender */\n      caller\n        /* \"contracts/Challenge.sol\":532:562  Accept(challenger, msg.sender) */\n      0x20\n      dup4\n      add\n      mstore\n      dup1\n      mload\n      0x4bd6f5a2cc7d567108836dec2c45aacc8ac6b2a1d7a32ad262065b1c74e69680\n      swap3\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log1\n        /* \"contracts/Challenge.sol\":597:598  0 */\n      0x00\n        /* \"contracts/Challenge.sol\":576:599  challenger = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"contracts/Challenge.sol\":381:610  if (challenger == address(0)) {... */\n    tag_15:\n        /* \"contracts/Challenge.sol\":233:616  function challenge() public {... */\n      jump\t// out\n        /* \"contracts/Challenge.sol\":622:739  function cancel() public {... */\n    tag_11:\n        /* \"contracts/Challenge.sol\":665:675  challenger */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"contracts/Challenge.sol\":679:689  msg.sender */\n      caller\n        /* \"contracts/Challenge.sol\":665:689  challenger == msg.sender */\n      eq\n        /* \"contracts/Challenge.sol\":657:690  require(challenger == msg.sender) */\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n        /* \"contracts/Challenge.sol\":714:732  Cancel(msg.sender) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/Challenge.sol\":721:731  msg.sender */\n      caller\n        /* \"contracts/Challenge.sol\":714:732  Cancel(msg.sender) */\n      dup2\n      mstore\n      swap1\n      mload\n      0xdfae2e44eee3429afab9409ee9f946d11d84e8eee5d3c81525197a2925b0ceb9\n      swap2\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      log1\n        /* \"contracts/Challenge.sol\":622:739  function cancel() public {... */\n      jump\t// out\n\n    auxdata: 0xa165627a7a7230582076bce7e8fb48cebedfc55eef8eb9592d351c24a6df01306131654d2297560a570029\n}\n", "bytecode": {"linkReferences": {}, "object": "6080604052600080546001600160a01b031916905534801561002057600080fd5b5061021b806100306000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063534db0e214610046578063d2ef73981461006a578063ea8a1af014610074575b600080fd5b61004e61007c565b604080516001600160a01b039092168252519081900360200190f35b61007261008b565b005b6100726101a3565b6000546001600160a01b031681565b6000546001600160a01b03163314156100ee5760408051600160e51b62461bcd02815260206004820152601360248201527f416c7265616479206368616c6c656e67696e6700000000000000000000000000604482015290519081900360640190fd5b6000546001600160a01b031661014a57600080546001600160a01b0319163390811790915560408051918252517fc21b87340588bdc78634253d4b0c2c02f475010edc0dc0c201bb0db913fa51a09181900360200190a16101a1565b600054604080516001600160a01b03909216825233602083015280517f4bd6f5a2cc7d567108836dec2c45aacc8ac6b2a1d7a32ad262065b1c74e696809281900390910190a1600080546001600160a01b03191690555b565b6000546001600160a01b031633146101ba57600080fd5b6040805133815290517fdfae2e44eee3429afab9409ee9f946d11d84e8eee5d3c81525197a2925b0ceb99181900360200190a156fea165627a7a7230582076bce7e8fb48cebedfc55eef8eb9592d351c24a6df01306131654d2297560a570029", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B DUP1 PUSH2 0x30 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x534DB0E2 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xD2EF7398 EQ PUSH2 0x6A JUMPI DUP1 PUSH4 0xEA8A1AF0 EQ PUSH2 0x74 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x7C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x72 PUSH2 0x8B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x72 PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0xEE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C7265616479206368616C6C656E67696E6700000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD PUSH32 0xC21B87340588BDC78634253D4B0C2C02F475010EDC0DC0C201BB0DB913FA51A0 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x4BD6F5A2CC7D567108836DEC2C45AACC8AC6B2A1D7A32AD262065B1C74E69680 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE SWAP1 MLOAD PUSH32 0xDFAE2E44EEE3429AFAB9409EE9F946D11D84E8EEE5D3C81525197A2925B0CEB9 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH23 0xBCE7E8FB48CEBEDFC55EEF8EB9592D351C24A6DF013061 BALANCE PUSH6 0x4D2297560A57 STOP 0x29 ", "sourceMap": "26:715:3:-;;;88:1;52:38;;-1:-1:-1;;;;;;52:38:3;;;26:715;5:2:-1;;;;30:1;27;20:12;5:2;26:715:3;;;;;;;"}, "deployedBytecode": {"linkReferences": {}, "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c8063534db0e214610046578063d2ef73981461006a578063ea8a1af014610074575b600080fd5b61004e61007c565b604080516001600160a01b039092168252519081900360200190f35b61007261008b565b005b6100726101a3565b6000546001600160a01b031681565b6000546001600160a01b03163314156100ee5760408051600160e51b62461bcd02815260206004820152601360248201527f416c7265616479206368616c6c656e67696e6700000000000000000000000000604482015290519081900360640190fd5b6000546001600160a01b031661014a57600080546001600160a01b0319163390811790915560408051918252517fc21b87340588bdc78634253d4b0c2c02f475010edc0dc0c201bb0db913fa51a09181900360200190a16101a1565b600054604080516001600160a01b03909216825233602083015280517f4bd6f5a2cc7d567108836dec2c45aacc8ac6b2a1d7a32ad262065b1c74e696809281900390910190a1600080546001600160a01b03191690555b565b6000546001600160a01b031633146101ba57600080fd5b6040805133815290517fdfae2e44eee3429afab9409ee9f946d11d84e8eee5d3c81525197a2925b0ceb99181900360200190a156fea165627a7a7230582076bce7e8fb48cebedfc55eef8eb9592d351c24a6df01306131654d2297560a570029", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x534DB0E2 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xD2EF7398 EQ PUSH2 0x6A JUMPI DUP1 PUSH4 0xEA8A1AF0 EQ PUSH2 0x74 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x7C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x72 PUSH2 0x8B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x72 PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0xEE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C7265616479206368616C6C656E67696E6700000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD PUSH32 0xC21B87340588BDC78634253D4B0C2C02F475010EDC0DC0C201BB0DB913FA51A0 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x4BD6F5A2CC7D567108836DEC2C45AACC8AC6B2A1D7A32AD262065B1C74E69680 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE SWAP1 MLOAD PUSH32 0xDFAE2E44EEE3429AFAB9409EE9F946D11D84E8EEE5D3C81525197A2925B0CEB9 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH23 0xBCE7E8FB48CEBEDFC55EEF8EB9592D351C24A6DF013061 BALANCE PUSH6 0x4D2297560A57 STOP 0x29 ", "sourceMap": "26:715:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:715:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;52:38;;;:::i;:::-;;;;-1:-1:-1;;;;;52:38:3;;;;;;;;;;;;;;233:383;;;:::i;:::-;;622:117;;;:::i;52:38::-;;;-1:-1:-1;;;;;52:38:3;;:::o;233:383::-;322:10;;-1:-1:-1;;;;;322:10:3;336;322:24;;314:56;;;;;-1:-1:-1;;;;;314:56:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;407:1;385:10;-1:-1:-1;;;;;385:10:3;381:229;;425:10;:23;;-1:-1:-1;;;;;;425:23:3;438:10;425:23;;;;;;467:21;;;;;;;;;;;;;;;;381:229;;;539:10;;532:30;;;-1:-1:-1;;;;;539:10:3;;;532:30;;551:10;532:30;;;;;;;;;;;;;;;;597:1;576:23;;-1:-1:-1;;;;;;576:23:3;;;381:229;233:383::o;622:117::-;665:10;;-1:-1:-1;;;;;665:10:3;679;665:24;657:33;;;;;;714:18;;;721:10;714:18;;;;;;;;;;;;;622:117::o"}}}}, "contracts/CryptoBeastsTypes.sol": {"CryptoBeastsTypes": {"abi": [], "evm": {"assembly": "    /* \"contracts/CryptoBeastsTypes.sol\":2:620  contract CryptoBeastsTypes {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/CryptoBeastsTypes.sol\":2:620  contract CryptoBeastsTypes {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/CryptoBeastsTypes.sol\":2:620  contract CryptoBeastsTypes {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa165627a7a72305820eb03d4f4ae3cd53dd271c6280a19c7b69481c1095f7c81dee77328fb2ee150610029\n}\n", "bytecode": {"linkReferences": {}, "object": "6080604052348015600f57600080fd5b50603580601d6000396000f3fe6080604052600080fdfea165627a7a72305820eb03d4f4ae3cd53dd271c6280a19c7b69481c1095f7c81dee77328fb2ee150610029", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xeb SUB 0xd4 DELEGATECALL 0xae EXTCODECOPY 0xd5 RETURNDATASIZE 0xd2 PUSH18 0xC6280A19C7B69481C1095F7C81DEE77328FB 0x2e 0xe1 POP PUSH2 0x29 ", "sourceMap": "2:618:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2:618:4;;;;;;;"}, "deployedBytecode": {"linkReferences": {}, "object": "6080604052600080fdfea165627a7a72305820eb03d4f4ae3cd53dd271c6280a19c7b69481c1095f7c81dee77328fb2ee150610029", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xeb SUB 0xd4 DELEGATECALL 0xae EXTCODECOPY 0xd5 RETURNDATASIZE 0xd2 PUSH18 0xC6280A19C7B69481C1095F7C81DEE77328FB 0x2e 0xe1 POP PUSH2 0x29 ", "sourceMap": "2:618:4:-;;;;;"}}}}, "contracts/MathUtils.sol": {"MathUtils": {"abi": [], "evm": {"assembly": "    /* \"contracts/MathUtils.sol\":25:339  library MathUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/MathUtils.sol\":25:339  library MathUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa165627a7a72305820cb0baa04457b1618ce11353c7322be3334980da5ff701df521e278c97bf091720029\n}\n", "bytecode": {"linkReferences": {}, "object": "604c6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820cb0baa04457b1618ce11353c7322be3334980da5ff701df521e278c97bf091720029", "opcodes": "PUSH1 0x4C PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xcb SIGNEXTEND 0xaa DIV GASLIMIT PUSH28 0x1618CE11353C7322BE3334980DA5FF701DF521E278C97BF091720029 ", "sourceMap": "25:314:5:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"}, "deployedBytecode": {"linkReferences": {}, "object": "73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820cb0baa04457b1618ce11353c7322be3334980da5ff701df521e278c97bf091720029", "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xcb SIGNEXTEND 0xaa DIV GASLIMIT PUSH28 0x1618CE11353C7322BE3334980DA5FF701DF521E278C97BF091720029 ", "sourceMap": "25:314:5:-;;;;;;;;"}}}}, "contracts/Migrations.sol": {"Migrations": {"abi": [{"constant": false, "inputs": [{"name": "new_address", "type": "address"}], "name": "upgrade", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "last_completed_migration", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "owner", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "completed", "type": "uint256"}], "name": "setCompleted", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}], "evm": {"assembly": "    /* \"contracts/Migrations.sol\":34:514  contract Migrations {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Migrations.sol\":123:173  constructor() public {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n  pop\n    /* \"contracts/Migrations.sol\":150:155  owner */\n  0x00\n    /* \"contracts/Migrations.sol\":150:168  owner = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"contracts/Migrations.sol\":158:168  msg.sender */\n  caller\n    /* \"contracts/Migrations.sol\":150:168  owner = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/Migrations.sol\":34:514  contract Migrations {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Migrations.sol\":34:514  contract Migrations {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/Migrations.sol\":34:514  contract Migrations {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x0900f010\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x445df0ac\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xfdacd576\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Migrations.sol\":347:512  function upgrade(address new_address) public restricted {... */\n    tag_3:\n      tag_7\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_8\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_8:\n      pop\n        /* \"contracts/Migrations.sol\":347:512  function upgrade(address new_address) public restricted {... */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_9\n      jump\t// in\n    tag_7:\n      stop\n        /* \"contracts/Migrations.sol\":82:118  uint public last_completed_migration */\n    tag_4:\n      tag_10\n      tag_11\n      jump\t// in\n    tag_10:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/Migrations.sol\":58:78  address public owner */\n    tag_5:\n      tag_12\n      tag_13\n      jump\t// in\n    tag_12:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/Migrations.sol\":240:343  function setCompleted(uint completed) public restricted {... */\n    tag_6:\n      tag_7\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_15\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_15:\n      pop\n        /* \"contracts/Migrations.sol\":240:343  function setCompleted(uint completed) public restricted {... */\n      calldataload\n      tag_16\n      jump\t// in\n        /* \"contracts/Migrations.sol\":347:512  function upgrade(address new_address) public restricted {... */\n    tag_9:\n        /* \"contracts/Migrations.sol\":223:228  owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"contracts/Migrations.sol\":209:219  msg.sender */\n      caller\n        /* \"contracts/Migrations.sol\":209:228  msg.sender == owner */\n      eq\n        /* \"contracts/Migrations.sol\":205:231  if (msg.sender == owner) _ */\n      iszero\n      tag_18\n      jumpi\n        /* \"contracts/Migrations.sol\":409:428  Migrations upgraded */\n      0x00\n        /* \"contracts/Migrations.sol\":442:453  new_address */\n      dup2\n        /* \"contracts/Migrations.sol\":409:454  Migrations upgraded = Migrations(new_address) */\n      swap1\n      pop\n        /* \"contracts/Migrations.sol\":460:468  upgraded */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Migrations.sol\":460:481  upgraded.setCompleted */\n      and\n      0xfdacd576\n        /* \"contracts/Migrations.sol\":482:506  last_completed_migration */\n      sload(0x01)\n        /* \"contracts/Migrations.sol\":460:507  upgraded.setCompleted(last_completed_migration) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_20\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_20:\n        /* \"contracts/Migrations.sol\":460:507  upgraded.setCompleted(last_completed_migration) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_21\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_21:\n        /* \"contracts/Migrations.sol\":460:507  upgraded.setCompleted(last_completed_migration) */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Migrations.sol\":230:231  _ */\n      pop\n        /* \"contracts/Migrations.sol\":205:231  if (msg.sender == owner) _ */\n    tag_18:\n        /* \"contracts/Migrations.sol\":347:512  function upgrade(address new_address) public restricted {... */\n      pop\n      jump\t// out\n        /* \"contracts/Migrations.sol\":82:118  uint public last_completed_migration */\n    tag_11:\n      sload(0x01)\n      dup2\n      jump\t// out\n        /* \"contracts/Migrations.sol\":58:78  address public owner */\n    tag_13:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n        /* \"contracts/Migrations.sol\":240:343  function setCompleted(uint completed) public restricted {... */\n    tag_16:\n        /* \"contracts/Migrations.sol\":223:228  owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"contracts/Migrations.sol\":209:219  msg.sender */\n      caller\n        /* \"contracts/Migrations.sol\":209:228  msg.sender == owner */\n      eq\n        /* \"contracts/Migrations.sol\":205:231  if (msg.sender == owner) _ */\n      iszero\n      tag_18\n      jumpi\n        /* \"contracts/Migrations.sol\":302:326  last_completed_migration */\n      0x01\n        /* \"contracts/Migrations.sol\":302:338  last_completed_migration = completed */\n      sstore\n        /* \"contracts/Migrations.sol\":240:343  function setCompleted(uint completed) public restricted {... */\n      jump\t// out\n\n    auxdata: 0xa165627a7a72305820a428e6b18278456ecc1fb820d79bb3887fd516c6c97e3d0cb45d4dc8ac6627020029\n}\n", "bytecode": {"linkReferences": {}, "object": "608060405234801561001057600080fd5b50600080546001600160a01b031916331790556101aa806100326000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630900f01014610051578063445df0ac146100795780638da5cb5b14610093578063fdacd576146100b7575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100d4565b005b610081610151565b60408051918252519081900360200190f35b61009b610157565b604080516001600160a01b039092168252519081900360200190f35b610077600480360360208110156100cd57600080fd5b5035610166565b6000546001600160a01b031633141561014e576000819050806001600160a01b031663fdacd5766001546040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561013457600080fd5b505af1158015610148573d6000803e3d6000fd5b50505050505b50565b60015481565b6000546001600160a01b031681565b6000546001600160a01b031633141561014e5760015556fea165627a7a72305820a428e6b18278456ecc1fb820d79bb3887fd516c6c97e3d0cb45d4dc8ac6627020029", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x1AA DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x900F010 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x445DF0AC EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x93 JUMPI DUP1 PUSH4 0xFDACD576 EQ PUSH2 0xB7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x77 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x81 PUSH2 0x151 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x9B PUSH2 0x157 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x166 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP2 SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFDACD576 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x148 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x14E JUMPI PUSH1 0x1 SSTORE JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 LOG4 0x28 0xe6 0xb1 DUP3 PUSH25 0x456ECC1FB820D79BB3887FD516C6C97E3D0CB45D4DC8AC6627 MUL STOP 0x29 ", "sourceMap": "34:480:6:-;;;123:50;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;150:5:6;:18;;-1:-1:-1;;;;;;150:18:6;158:10;150:18;;;34:480;;;;;;"}, "deployedBytecode": {"linkReferences": {}, "object": "608060405234801561001057600080fd5b506004361061004c5760003560e01c80630900f01014610051578063445df0ac146100795780638da5cb5b14610093578063fdacd576146100b7575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100d4565b005b610081610151565b60408051918252519081900360200190f35b61009b610157565b604080516001600160a01b039092168252519081900360200190f35b610077600480360360208110156100cd57600080fd5b5035610166565b6000546001600160a01b031633141561014e576000819050806001600160a01b031663fdacd5766001546040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561013457600080fd5b505af1158015610148573d6000803e3d6000fd5b50505050505b50565b60015481565b6000546001600160a01b031681565b6000546001600160a01b031633141561014e5760015556fea165627a7a72305820a428e6b18278456ecc1fb820d79bb3887fd516c6c97e3d0cb45d4dc8ac6627020029", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x900F010 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x445DF0AC EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x93 JUMPI DUP1 PUSH4 0xFDACD576 EQ PUSH2 0xB7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x77 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x81 PUSH2 0x151 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x9B PUSH2 0x157 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x166 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP2 SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFDACD576 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x148 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x14E JUMPI PUSH1 0x1 SSTORE JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 LOG4 0x28 0xe6 0xb1 DUP3 PUSH25 0x456ECC1FB820D79BB3887FD516C6C97E3D0CB45D4DC8AC6627 MUL STOP 0x29 ", "sourceMap": "34:480:6:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34:480:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;347:165;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;347:165:6;-1:-1:-1;;;;;347:165:6;;:::i;:::-;;82:36;;;:::i;:::-;;;;;;;;;;;;;;;;58:20;;;:::i;:::-;;;;-1:-1:-1;;;;;58:20:6;;;;;;;;;;;;;;240:103;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;240:103:6;;:::i;347:165::-;223:5;;-1:-1:-1;;;;;223:5:6;209:10;:19;205:26;;;409:19;442:11;409:45;;460:8;-1:-1:-1;;;;;460:21:6;;482:24;;460:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;460:47:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;460:47:6;;;;230:1;205:26;347:165;:::o;82:36::-;;;;:::o;58:20::-;;;-1:-1:-1;;;;;58:20:6;;:::o;240:103::-;223:5;;-1:-1:-1;;;;;223:5:6;209:10;:19;205:26;;;302:24;:36;240:103::o"}}}}, "contracts/PlayerCardsPick.sol": {"PlayerCardsPick": {"abi": [{"constant": true, "inputs": [], "name": "playersTurn", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayersCurrentCardNumber", "outputs": [{"name": "", "type": "uint8"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "desiredCards", "type": "uint256[5]"}], "name": "pickPayerCards", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "playerCards", "type": "tuple[]"}], "name": "calcMaxSpeed", "outputs": [{"name": "", "type": "uint16"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "player2", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayerDeck", "outputs": [{"components": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "playerCards", "type": "tuple[]"}, {"name": "currentCard", "type": "uint8"}], "name": "", "type": "tuple"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "player1", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "cardsPicked", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "address"}], "name": "playerDecks", "outputs": [{"name": "currentCard", "type": "uint8"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayerCurrentCard", "outputs": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "", "type": "tuple"}], "payable": false, "stateMutability": "view", "type": "function"}, {"inputs": [{"name": "_player1", "type": "address"}, {"name": "_player2", "type": "address"}, {"name": "cardsAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "desiredCards", "type": "uint256[5]"}, {"indexed": false, "name": "pickedCards", "type": "uint256[3]"}], "name": "PickPayerCards", "type": "event"}], "evm": {"assembly": "    /* \"contracts/PlayerCardsPick.sol\":154:3742  contract PlayerCardsPick is CryptoBeastsTypes {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/PlayerCardsPick.sol\":673:859  constructor(address _player1, address _player2, address cardsAddress) public {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/PlayerCardsPick.sol\":673:859  constructor(address _player1, address _player2, address cardsAddress) public {... */\n  pop\n  mload(0x40)\n  0x60\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  dup1\n  0x40\n  mstore\n  tag_2\n  swap2\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_3)\ntag_2:\n    /* \"contracts/PlayerCardsPick.sol\":760:767  player1 */\n  0x01\n    /* \"contracts/PlayerCardsPick.sol\":760:778  player1 = _player1 */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap5\n  dup6\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/PlayerCardsPick.sol\":788:795  player2 */\n  0x02\n    /* \"contracts/PlayerCardsPick.sol\":788:806  player2 = _player2 */\n  dup1\n  sload\n  swap4\n  dup6\n  and\n  swap4\n  dup3\n  and\n  swap4\n  swap1\n  swap4\n  or\n  swap1\n  swap3\n  sstore\n    /* \"contracts/PlayerCardsPick.sol\":760:767  player1 */\n  0x00\n    /* \"contracts/PlayerCardsPick.sol\":817:852  cardsContract = Cards(cardsAddress) */\n  dup1\n  sload\n  swap2\n  swap1\n  swap4\n  and\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/PlayerCardsPick.sol\":154:3742  contract PlayerCardsPick is CryptoBeastsTypes {... */\n  jump(tag_19)\n    /* \"--CODEGEN--\":5:127   */\ntag_8:\n  0x00\n    /* \"--CODEGEN--\":83:122   */\n  tag_9\n    /* \"--CODEGEN--\":114:120   */\n  dup3\n    /* \"--CODEGEN--\":108:121   */\n  mload\n    /* \"--CODEGEN--\":83:122   */\n  jump(tag_10)\ntag_9:\n    /* \"--CODEGEN--\":74:122   */\n  swap4\n    /* \"--CODEGEN--\":68:127   */\n  swap3\n  pop\n  pop\n  pop\n  jump\n    /* \"--CODEGEN--\":134:669   */\ntag_3:\n  0x00\n  dup1\n  0x00\n    /* \"--CODEGEN--\":283:285   */\n  0x60\n    /* \"--CODEGEN--\":271:280   */\n  dup5\n    /* \"--CODEGEN--\":262:269   */\n  dup7\n    /* \"--CODEGEN--\":258:281   */\n  sub\n    /* \"--CODEGEN--\":254:286   */\n  slt\n    /* \"--CODEGEN--\":251:253   */\n  iszero\n  tag_12\n  jumpi\n    /* \"--CODEGEN--\":299:300   */\n  0x00\n    /* \"--CODEGEN--\":296:297   */\n  dup1\n    /* \"--CODEGEN--\":289:301   */\n  revert\n    /* \"--CODEGEN--\":251:253   */\ntag_12:\n    /* \"--CODEGEN--\":334:335   */\n  0x00\n    /* \"--CODEGEN--\":351:415   */\n  tag_13\n    /* \"--CODEGEN--\":407:414   */\n  dup7\n    /* \"--CODEGEN--\":387:396   */\n  dup7\n    /* \"--CODEGEN--\":351:415   */\n  jump(tag_8)\ntag_13:\n    /* \"--CODEGEN--\":341:415   */\n  swap4\n  pop\n    /* \"--CODEGEN--\":313:421   */\n  pop\n    /* \"--CODEGEN--\":452:454   */\n  0x20\n    /* \"--CODEGEN--\":470:534   */\n  tag_14\n    /* \"--CODEGEN--\":526:533   */\n  dup7\n    /* \"--CODEGEN--\":517:523   */\n  dup3\n    /* \"--CODEGEN--\":506:515   */\n  dup8\n    /* \"--CODEGEN--\":502:524   */\n  add\n    /* \"--CODEGEN--\":470:534   */\n  jump(tag_8)\ntag_14:\n    /* \"--CODEGEN--\":460:534   */\n  swap3\n  pop\n    /* \"--CODEGEN--\":431:540   */\n  pop\n    /* \"--CODEGEN--\":571:573   */\n  0x40\n    /* \"--CODEGEN--\":589:653   */\n  tag_15\n    /* \"--CODEGEN--\":645:652   */\n  dup7\n    /* \"--CODEGEN--\":636:642   */\n  dup3\n    /* \"--CODEGEN--\":625:634   */\n  dup8\n    /* \"--CODEGEN--\":621:643   */\n  add\n    /* \"--CODEGEN--\":589:653   */\n  jump(tag_8)\ntag_15:\n    /* \"--CODEGEN--\":579:653   */\n  swap2\n  pop\n    /* \"--CODEGEN--\":550:659   */\n  pop\n    /* \"--CODEGEN--\":245:669   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\n    /* \"--CODEGEN--\":676:781   */\ntag_10:\n  0x00\n    /* \"--CODEGEN--\":745:776   */\n  tag_17\n    /* \"--CODEGEN--\":770:775   */\n  dup3\n    /* \"--CODEGEN--\":745:776   */\n  jump(tag_18)\ntag_17:\n    /* \"--CODEGEN--\":734:776   */\n  swap3\n    /* \"--CODEGEN--\":728:781   */\n  swap2\n  pop\n  pop\n  jump\n    /* \"--CODEGEN--\":788:916   */\ntag_18:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"--CODEGEN--\":857:911   */\n  and\n  swap1\n    /* \"--CODEGEN--\":840:916   */\n  jump\ntag_19:\n    /* \"contracts/PlayerCardsPick.sol\":154:3742  contract PlayerCardsPick is CryptoBeastsTypes {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/PlayerCardsPick.sol\":154:3742  contract PlayerCardsPick is CryptoBeastsTypes {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/PlayerCardsPick.sol\":154:3742  contract PlayerCardsPick is CryptoBeastsTypes {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xc0d35449\n      gt\n      tag_13\n      jumpi\n      dup1\n      0xc0d35449\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xd30895e4\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xd7eb798c\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xe4b6c992\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xfe145fbd\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_13:\n      dup1\n      0x06880689\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2af1e2f8\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x48373963\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x4ed61446\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x59a5f12d\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/PlayerCardsPick.sol\":640:666  address public playersTurn */\n    tag_3:\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_17)\n    tag_16:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/PlayerCardsPick.sol\":1507:1643  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n    tag_4:\n      tag_18\n      tag_19\n      calldatasize\n      0x04\n      jump(tag_20)\n    tag_19:\n      tag_21\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_23)\n        /* \"contracts/PlayerCardsPick.sol\":1777:2840  function pickPayerCards(uint[5] memory desiredCards) public {... */\n    tag_5:\n      tag_24\n      tag_25\n      calldatasize\n      0x04\n      jump(tag_26)\n    tag_25:\n      tag_27\n      jump\t// in\n    tag_24:\n      stop\n        /* \"contracts/PlayerCardsPick.sol\":3358:3740  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n    tag_6:\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      jump(tag_30)\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_33)\n        /* \"contracts/PlayerCardsPick.sol\":527:549  address public player2 */\n    tag_7:\n      tag_14\n      tag_35\n      jump\t// in\n        /* \"contracts/PlayerCardsPick.sol\":1649:1771  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n    tag_8:\n      tag_37\n      tag_38\n      calldatasize\n      0x04\n      jump(tag_20)\n    tag_38:\n      tag_39\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_41)\n        /* \"contracts/PlayerCardsPick.sol\":499:521  address public player1 */\n    tag_9:\n      tag_14\n      tag_43\n      jump\t// in\n        /* \"contracts/PlayerCardsPick.sol\":611:634  bool public cardsPicked */\n    tag_10:\n      tag_45\n      tag_46\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_48)\n        /* \"contracts/PlayerCardsPick.sol\":555:605  mapping (address => PlayerDeck) public playerDecks */\n    tag_11:\n      tag_18\n      tag_50\n      calldatasize\n      0x04\n      jump(tag_20)\n    tag_50:\n      tag_51\n      jump\t// in\n        /* \"contracts/PlayerCardsPick.sol\":1286:1501  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n    tag_12:\n      tag_53\n      tag_54\n      calldatasize\n      0x04\n      jump(tag_20)\n    tag_54:\n      tag_55\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_57)\n        /* \"contracts/PlayerCardsPick.sol\":640:666  address public playersTurn */\n    tag_15:\n      sload(0x04)\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":1507:1643  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n    tag_21:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":1605:1624  playerDecks[player] */\n      and\n        /* \"contracts/PlayerCardsPick.sol\":1581:1586  uint8 */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":1605:1624  playerDecks[player] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1605:1616  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":1605:1624  playerDecks[player] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1605:1636  playerDecks[player].currentCard */\n      0x01\n      add\n      sload\n      0xff\n      and\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":1507:1643  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":1777:2840  function pickPayerCards(uint[5] memory desiredCards) public {... */\n    tag_27:\n        /* \"contracts/PlayerCardsPick.sol\":1895:1905  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsPick.sol\":1848:1880  PlayerCard[] storage playerCards */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":1883:1906  playerDecks[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1883:1894  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":1883:1906  playerDecks[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1936:1954  playerCards.length */\n      dup1\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":1936:1959  playerCards.length == 0 */\n      iszero\n        /* \"contracts/PlayerCardsPick.sol\":1928:2001  require(playerCards.length == 0, 'Player has already picked their cards') */\n      tag_60\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_61\n      swap1\n      jump(tag_62)\n    tag_61:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_60:\n        /* \"contracts/PlayerCardsPick.sol\":2016:2023  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsPick.sol\":2027:2037  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsPick.sol\":2016:2037  player1 == msg.sender */\n      eq\n        /* \"contracts/PlayerCardsPick.sol\":2012:2409  if (player1 == msg.sender) {... */\n      iszero\n      tag_63\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2069:2076  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsPick.sol\":2099:2100  0 */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":2057:2077  playerDecks[player2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2057:2068  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":2057:2077  playerDecks[player2] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":2057:2096  playerDecks[player2].playerCards.length */\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":2057:2100  playerDecks[player2].playerCards.length > 0 */\n      iszero\n        /* \"contracts/PlayerCardsPick.sol\":2053:2153  if (playerDecks[player2].playerCards.length > 0) {... */\n      tag_64\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2120:2131  cardsPicked */\n      0x04\n        /* \"contracts/PlayerCardsPick.sol\":2120:2138  cardsPicked = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/PlayerCardsPick.sol\":2134:2138  true */\n      0x01\n        /* \"contracts/PlayerCardsPick.sol\":2120:2138  cardsPicked = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsPick.sol\":2053:2153  if (playerDecks[player2].playerCards.length > 0) {... */\n    tag_64:\n        /* \"contracts/PlayerCardsPick.sol\":2012:2409  if (player1 == msg.sender) {... */\n      jump(tag_68)\n    tag_63:\n        /* \"contracts/PlayerCardsPick.sol\":2181:2188  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsPick.sol\":2192:2202  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsPick.sol\":2181:2202  player2 == msg.sender */\n      eq\n        /* \"contracts/PlayerCardsPick.sol\":2177:2409  if (player2 == msg.sender) {... */\n      iszero\n      tag_66\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2234:2241  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsPick.sol\":2264:2265  0 */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":2222:2242  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2222:2233  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":2222:2242  playerDecks[player1] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":2222:2261  playerDecks[player1].playerCards.length */\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":2222:2265  playerDecks[player1].playerCards.length > 0 */\n      iszero\n        /* \"contracts/PlayerCardsPick.sol\":2218:2318  if (playerDecks[player1].playerCards.length > 0) {... */\n      tag_64\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2285:2296  cardsPicked */\n      0x04\n        /* \"contracts/PlayerCardsPick.sol\":2285:2303  cardsPicked = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/PlayerCardsPick.sol\":2299:2303  true */\n      0x01\n        /* \"contracts/PlayerCardsPick.sol\":2285:2303  cardsPicked = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsPick.sol\":2177:2409  if (player2 == msg.sender) {... */\n      jump(tag_68)\n    tag_66:\n        /* \"contracts/PlayerCardsPick.sol\":2348:2398  revert('Transaction sender must be player 1 or 2') */\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_61\n      swap1\n      jump(tag_70)\n        /* \"contracts/PlayerCardsPick.sol\":2177:2409  if (player2 == msg.sender) {... */\n    tag_68:\n        /* \"contracts/PlayerCardsPick.sol\":2419:2451  uint[3] memory pickedCardNumbers */\n      tag_71\n      tag_72\n      jump\t// in\n    tag_71:\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":2419:2542  uint[3] memory pickedCardNumbers = [... */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2468:2483  desiredCards[0] */\n      dup4\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":2419:2542  uint[3] memory pickedCardNumbers = [... */\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2468:2483  desiredCards[0] */\n      0x20\n        /* \"contracts/PlayerCardsPick.sol\":2497:2512  desiredCards[1] */\n      dup1\n      dup6\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":2419:2542  uint[3] memory pickedCardNumbers = [... */\n      swap1\n      dup3\n      add\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2526:2541  desiredCards[2] */\n      dup4\n      dup3\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":2419:2542  uint[3] memory pickedCardNumbers = [... */\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":2553:2597  _setPlayerCard(playerCards, desiredCards[0]) */\n      tag_76\n        /* \"contracts/PlayerCardsPick.sol\":2568:2579  playerCards */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":2468:2483  desiredCards[0] */\n      dup5\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":2581:2596  desiredCards[0] */\n    tag_77:\n      0x20\n      mul\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":2553:2567  _setPlayerCard */\n      tag_78\n        /* \"contracts/PlayerCardsPick.sol\":2553:2597  _setPlayerCard(playerCards, desiredCards[0]) */\n      jump\t// in\n    tag_76:\n        /* \"contracts/PlayerCardsPick.sol\":2607:2651  _setPlayerCard(playerCards, desiredCards[1]) */\n      tag_79\n        /* \"contracts/PlayerCardsPick.sol\":2622:2633  playerCards */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":2635:2647  desiredCards */\n      dup5\n        /* \"contracts/PlayerCardsPick.sol\":2648:2649  1 */\n      0x01\n        /* \"contracts/PlayerCardsPick.sol\":2635:2650  desiredCards[1] */\n      jump(tag_77)\n        /* \"contracts/PlayerCardsPick.sol\":2607:2651  _setPlayerCard(playerCards, desiredCards[1]) */\n    tag_79:\n        /* \"contracts/PlayerCardsPick.sol\":2661:2705  _setPlayerCard(playerCards, desiredCards[2]) */\n      tag_81\n        /* \"contracts/PlayerCardsPick.sol\":2676:2687  playerCards */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":2689:2701  desiredCards */\n      dup5\n        /* \"contracts/PlayerCardsPick.sol\":2702:2703  2 */\n      0x02\n        /* \"contracts/PlayerCardsPick.sol\":2689:2704  desiredCards[2] */\n      jump(tag_77)\n        /* \"contracts/PlayerCardsPick.sol\":2661:2705  _setPlayerCard(playerCards, desiredCards[2]) */\n    tag_81:\n        /* \"contracts/PlayerCardsPick.sol\":2721:2768  PickPayerCards(desiredCards, pickedCardNumbers) */\n      0x48ca02657a8acb3a062f53bf24ca611bb25d8108f29f5e3c5e468080a44dca5d\n        /* \"contracts/PlayerCardsPick.sol\":2736:2748  desiredCards */\n      dup4\n        /* \"contracts/PlayerCardsPick.sol\":2750:2767  pickedCardNumbers */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":2721:2768  PickPayerCards(desiredCards, pickedCardNumbers) */\n      mload(0x40)\n      tag_83\n      swap3\n      swap2\n      swap1\n      jump(tag_84)\n    tag_83:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/PlayerCardsPick.sol\":2783:2794  cardsPicked */\n      and(0xff, sload(0x04))\n        /* \"contracts/PlayerCardsPick.sol\":2779:2834  if (cardsPicked) {... */\n      iszero\n      tag_86\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":2810:2823  startBattle() */\n      tag_86\n        /* \"contracts/PlayerCardsPick.sol\":2810:2821  startBattle */\n      tag_87\n        /* \"contracts/PlayerCardsPick.sol\":2810:2823  startBattle() */\n      jump\t// in\n    tag_86:\n        /* \"contracts/PlayerCardsPick.sol\":1777:2840  function pickPayerCards(uint[5] memory desiredCards) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":3358:3740  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n    tag_31:\n        /* \"contracts/PlayerCardsPick.sol\":3429:3435  uint16 */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/PlayerCardsPick.sol\":3478:3708  for (uint i=0; i<playerCards.length; i++) {... */\n    tag_89:\n        /* \"contracts/PlayerCardsPick.sol\":3495:3506  playerCards */\n      dup4\n        /* \"contracts/PlayerCardsPick.sol\":3495:3513  playerCards.length */\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":3493:3494  i */\n      dup2\n        /* \"contracts/PlayerCardsPick.sol\":3493:3513  i<playerCards.length */\n      lt\n        /* \"contracts/PlayerCardsPick.sol\":3478:3708  for (uint i=0; i<playerCards.length; i++) {... */\n      iszero\n      tag_90\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":3535:3551  uint16 cardSpeed */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":3554:3567  cardsContract */\n      dup1\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":3576:3590  playerCards[i] */\n      dup6\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":3554:3567  cardsContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3554:3575  cardsContract.getCard */\n      0x9188d312\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3576:3587  playerCards */\n      dup8\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3588:3589  i */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3576:3590  playerCards[i] */\n      dup2\n      lt\n      tag_92\n      jumpi\n      invalid\n    tag_92:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":3576:3597  playerCards[i].cardId */\n      0x00\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_93\n      swap2\n      swap1\n      jump(tag_94)\n    tag_93:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_95\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_95:\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_96\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_96:\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":3554:3598  cardsContract.getCard(playerCards[i].cardId) */\n      tag_97\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_98)\n    tag_97:\n        /* \"contracts/PlayerCardsPick.sol\":3554:3604  cardsContract.getCard(playerCards[i].cardId).speed */\n      0xa0\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":3535:3604  uint16 cardSpeed = cardsContract.getCard(playerCards[i].cardId).speed */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3635:3643  maxSpeed */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":3623:3643  cardSpeed > maxSpeed */\n      0xffff\n      and\n        /* \"contracts/PlayerCardsPick.sol\":3623:3632  cardSpeed */\n      dup2\n        /* \"contracts/PlayerCardsPick.sol\":3623:3643  cardSpeed > maxSpeed */\n      0xffff\n      and\n      gt\n        /* \"contracts/PlayerCardsPick.sol\":3619:3698  if (cardSpeed > maxSpeed) {... */\n      iszero\n      tag_99\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":3674:3683  cardSpeed */\n      dup1\n        /* \"contracts/PlayerCardsPick.sol\":3663:3683  maxSpeed = cardSpeed */\n      swap3\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3619:3698  if (cardSpeed > maxSpeed) {... */\n    tag_99:\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3515:3518  i++ */\n      0x01\n      add\n        /* \"contracts/PlayerCardsPick.sol\":3478:3708  for (uint i=0; i<playerCards.length; i++) {... */\n      jump(tag_89)\n    tag_90:\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3725:3733  maxSpeed */\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":3358:3740  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":527:549  address public player2 */\n    tag_35:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":1649:1771  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n    tag_39:\n        /* \"contracts/PlayerCardsPick.sol\":1709:1726  PlayerDeck memory */\n      tag_100\n      tag_101\n      jump\t// in\n    tag_100:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":1745:1764  playerDecks[player] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1745:1756  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":1745:1764  playerDecks[player] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1738:1764  return playerDecks[player] */\n      dup2\n      mload\n      dup2\n      sload\n      0x60\n      swap5\n      dup2\n      mul\n      dup3\n      add\n      dup6\n      add\n      dup5\n      mstore\n      swap3\n      dup2\n      add\n      dup4\n      dup2\n      mstore\n      swap1\n      swap5\n        /* \"contracts/PlayerCardsPick.sol\":1745:1764  playerDecks[player] */\n      swap2\n      swap4\n        /* \"contracts/PlayerCardsPick.sol\":1738:1764  return playerDecks[player] */\n      dup6\n      swap4\n      swap2\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":1745:1764  playerDecks[player] */\n      dup6\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":1738:1764  return playerDecks[player] */\n      swap2\n      dup6\n      add\n    tag_103:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_104\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x0100000000\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_103)\n    tag_104:\n      pop\n      pop\n      pop\n      swap1\n      dup3\n      mstore\n      pop\n      0x01\n      swap2\n      swap1\n      swap2\n      add\n      sload\n      0xff\n      and\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":1649:1771  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":499:521  address public player1 */\n    tag_43:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":611:634  bool public cardsPicked */\n    tag_46:\n      and(0xff, sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":555:605  mapping (address => PlayerDeck) public playerDecks */\n    tag_51:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      0x01\n      add\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":1286:1501  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n    tag_55:\n        /* \"contracts/PlayerCardsPick.sol\":1353:1370  PlayerCard memory */\n      tag_106\n      tag_107\n      jump\t// in\n    tag_106:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":1402:1421  playerDecks[player] */\n      dup3\n      and\n        /* \"contracts/PlayerCardsPick.sol\":1383:1399  uint8 deckNumber */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":1402:1421  playerDecks[player] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1402:1413  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":1402:1421  playerDecks[player] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1402:1433  playerDecks[player].currentCard */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":1451:1494  playerDecks[player].playerCards[deckNumber] */\n      dup2\n      sload\n        /* \"contracts/PlayerCardsPick.sol\":1402:1433  playerDecks[player].currentCard */\n      0xff\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/PlayerCardsPick.sol\":1402:1421  playerDecks[player] */\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":1402:1433  playerDecks[player].currentCard */\n      dup3\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":1451:1494  playerDecks[player].playerCards[deckNumber] */\n      dup2\n      lt\n      tag_109\n      jumpi\n      invalid\n    tag_109:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":1444:1494  return playerDecks[player].playerCards[deckNumber] */\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1451:1494  playerDecks[player].playerCards[deckNumber] */\n      0x02\n      swap1\n      swap4\n      mul\n      swap1\n      swap2\n      add\n        /* \"contracts/PlayerCardsPick.sol\":1444:1494  return playerDecks[player].playerCards[deckNumber] */\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      swap5\n      dup5\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n      0x010000\n      dup2\n      div\n      dup5\n      and\n      swap2\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x0100000000\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup4\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup4\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup3\n      add\n      mstore\n      swap2\n      pop\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":1286:1501  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":865:1280  function _setPlayerCard(PlayerCard[] storage playerCards, uint cardId) internal {... */\n    tag_78:\n        /* \"contracts/PlayerCardsPick.sol\":956:972  Card memory card */\n      tag_112\n      tag_113\n      jump\t// in\n    tag_112:\n        /* \"contracts/PlayerCardsPick.sol\":975:988  cardsContract */\n      sload(0x00)\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      mload(0x40)\n      mul(0x48c46989, shl(0xe1, 0x01))\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":975:988  cardsContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":975:996  cardsContract.getCard */\n      0x9188d312\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      tag_114\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":997:1003  cardId */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      0x04\n      add\n      jump(tag_94)\n    tag_114:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_115\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_115:\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_116\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_116:\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":975:1004  cardsContract.getCard(cardId) */\n      tag_117\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_98)\n    tag_117:\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      0x40\n      dup1\n      mload\n      0xc0\n      dup1\n      dup3\n      add\n      dup4\n      mstore\n      swap5\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1094:1109  card.initHealth */\n      dup2\n      dup4\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      0xffff\n      swap1\n      dup2\n      and\n      0x20\n      dup1\n      dup5\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1132:1148  card.initDefence */\n      0x60\n      dup1\n      dup8\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      dup5\n      and\n      swap6\n      dup6\n      add\n      swap6\n      dup7\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1168:1181  card.initMana */\n      0x80\n      dup1\n      dup9\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      dup6\n      and\n      swap2\n      dup7\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1203:1214  card.attack */\n      swap9\n      dup8\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      dup5\n      and\n      swap9\n      dup6\n      add\n      swap9\n      dup10\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":1243:1261  card.specialAttack */\n      0xe0\n      swap1\n      swap7\n      add\n      mload\n        /* \"contracts/PlayerCardsPick.sol\":1033:1272  PlayerCard({... */\n      dup4\n      and\n      0xa0\n      dup6\n      add\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":27:37   */\n      dup10\n      sload\n        /* \"--CODEGEN--\":39:40   */\n      0x01\n        /* \"--CODEGEN--\":23:41   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":45:68   */\n      dup13\n      sstore\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":1015:1273  playerCards.push( PlayerCard({... */\n      swap12\n      dup13\n      mstore\n      swap3\n      swap1\n      swap11\n      keccak256\n      swap5\n      mload\n      0x02\n      swap1\n      swap11\n      mul\n      swap1\n      swap5\n      add\n      swap9\n      dup10\n      sstore\n      swap1\n      mload\n      swap8\n      add\n      dup1\n      sload\n      swap4\n      mload\n      swap5\n      mload\n      swap7\n      mload\n      swap3\n      mload\n      dup3\n      and\n      shl(0x40, 0x01)\n      mul\n      not(0xffff0000000000000000)\n      swap4\n      dup4\n      and\n      shl(0x30, 0x01)\n      mul\n      not(0xffff000000000000)\n      swap9\n      dup5\n      and\n      0x0100000000\n      mul\n      not(0xffff00000000)\n      swap8\n      dup6\n      and\n      0x010000\n      mul\n      not(0xffff0000)\n      swap12\n      swap1\n      swap6\n      and\n      not(0xffff)\n      swap1\n      swap8\n      and\n      swap7\n      swap1\n      swap7\n      or\n      swap10\n      swap1\n      swap10\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap5\n      swap1\n      swap5\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap5\n      swap1\n      swap5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap3\n      swap1\n      swap3\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":865:1280  function _setPlayerCard(PlayerCard[] storage playerCards, uint cardId) internal {... */\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":2916:3352  function startBattle() internal {... */\n    tag_87:\n        /* \"contracts/PlayerCardsPick.sol\":2966:2977  cardsPicked */\n      and(0xff, sload(0x04))\n        /* \"contracts/PlayerCardsPick.sol\":2958:3026  require(cardsPicked, 'Both players have to have picked their cards') */\n      tag_120\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_61\n      swap1\n      jump(tag_122)\n    tag_120:\n        /* \"contracts/PlayerCardsPick.sol\":3087:3094  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsPick.sol\":3037:3059  uint16 player1MaxSpeed */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":3075:3095  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":3075:3086  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":3075:3095  playerDecks[player1] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":3062:3108  calcMaxSpeed(playerDecks[player1].playerCards) */\n      dup1\n      sload\n      dup3\n      mload\n      dup2\n      dup6\n      mul\n      dup2\n      add\n      dup6\n      add\n      swap1\n      swap4\n      mstore\n      dup1\n      dup4\n      mstore\n      tag_123\n      swap4\n        /* \"contracts/PlayerCardsPick.sol\":3037:3059  uint16 player1MaxSpeed */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3062:3108  calcMaxSpeed(playerDecks[player1].playerCards) */\n      dup5\n      add\n    tag_124:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_125\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x0100000000\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_124)\n    tag_125:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3062:3074  calcMaxSpeed */\n      tag_31\n        /* \"contracts/PlayerCardsPick.sol\":3062:3108  calcMaxSpeed(playerDecks[player1].playerCards) */\n      jump\t// in\n    tag_123:\n        /* \"contracts/PlayerCardsPick.sol\":3168:3175  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsPick.sol\":3118:3140  uint16 player2MaxSpeed */\n      0x00\n        /* \"contracts/PlayerCardsPick.sol\":3156:3176  playerDecks[player2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":3156:3167  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsPick.sol\":3156:3176  playerDecks[player2] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsPick.sol\":3143:3189  calcMaxSpeed(playerDecks[player2].playerCards) */\n      dup1\n      sload\n      dup3\n      mload\n      dup2\n      dup6\n      mul\n      dup2\n      add\n      dup6\n      add\n      swap1\n      swap4\n      mstore\n      dup1\n      dup4\n      mstore\n        /* \"contracts/PlayerCardsPick.sol\":3037:3108  uint16 player1MaxSpeed = calcMaxSpeed(playerDecks[player1].playerCards) */\n      swap5\n      swap6\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3118:3140  uint16 player2MaxSpeed */\n      swap3\n      swap4\n        /* \"contracts/PlayerCardsPick.sol\":3143:3189  calcMaxSpeed(playerDecks[player2].playerCards) */\n      tag_127\n      swap4\n      swap2\n      swap3\n        /* \"contracts/PlayerCardsPick.sol\":3118:3140  uint16 player2MaxSpeed */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsPick.sol\":3143:3189  calcMaxSpeed(playerDecks[player2].playerCards) */\n      dup5\n      add\n      dup3\n      iszero\n      tag_125\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x0100000000\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_124)\n    tag_127:\n        /* \"contracts/PlayerCardsPick.sol\":3118:3189  uint16 player2MaxSpeed = calcMaxSpeed(playerDecks[player2].playerCards) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":3223:3238  player2MaxSpeed */\n      dup1\n        /* \"contracts/PlayerCardsPick.sol\":3204:3238  player1MaxSpeed >= player2MaxSpeed */\n      0xffff\n      and\n        /* \"contracts/PlayerCardsPick.sol\":3204:3219  player1MaxSpeed */\n      dup3\n        /* \"contracts/PlayerCardsPick.sol\":3204:3238  player1MaxSpeed >= player2MaxSpeed */\n      0xffff\n      and\n      lt\n        /* \"contracts/PlayerCardsPick.sol\":3200:3346  if (player1MaxSpeed >= player2MaxSpeed) {... */\n      tag_131\n      jumpi\n        /* \"contracts/PlayerCardsPick.sol\":3268:3275  player1 */\n      sload(0x01)\n        /* \"contracts/PlayerCardsPick.sol\":3254:3265  playersTurn */\n      0x04\n        /* \"contracts/PlayerCardsPick.sol\":3254:3275  playersTurn = player1 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":3268:3275  player1 */\n      swap1\n      swap3\n      and\n      0x0100\n        /* \"contracts/PlayerCardsPick.sol\":3254:3275  playersTurn = player1 */\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsPick.sol\":3200:3346  if (player1MaxSpeed >= player2MaxSpeed) {... */\n      jump(tag_132)\n    tag_131:\n        /* \"contracts/PlayerCardsPick.sol\":3328:3335  player2 */\n      sload(0x02)\n        /* \"contracts/PlayerCardsPick.sol\":3314:3325  playersTurn */\n      0x04\n        /* \"contracts/PlayerCardsPick.sol\":3314:3335  playersTurn = player2 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsPick.sol\":3328:3335  player2 */\n      swap1\n      swap3\n      and\n      0x0100\n        /* \"contracts/PlayerCardsPick.sol\":3314:3335  playersTurn = player2 */\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsPick.sol\":3200:3346  if (player1MaxSpeed >= player2MaxSpeed) {... */\n    tag_132:\n        /* \"contracts/PlayerCardsPick.sol\":2916:3352  function startBattle() internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsPick.sol\":154:3742  contract PlayerCardsPick is CryptoBeastsTypes {... */\n    tag_72:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x03\n      swap1\n        /* \"--CODEGEN--\":29:31   */\n      0x20\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:32   */\n      mul\n        /* \"--CODEGEN--\":117:121   */\n      dup1\n        /* \"--CODEGEN--\":105:115   */\n      codesize\n        /* \"--CODEGEN--\":97:103   */\n      dup4\n        /* \"--CODEGEN--\":88:122   */\n      codecopy\n      pop\n        /* \"contracts/PlayerCardsPick.sol\":154:3742  contract PlayerCardsPick is CryptoBeastsTypes {... */\n      swap2\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_101:\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x60\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_107:\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0xa0\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n    tag_113:\n      mload(0x40)\n      dup1\n      0x0260\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_133\n      tag_134\n      jump\t// in\n    tag_133:\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x40\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x60\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x80\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xa0\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xc0\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_134:\n      mload(0x40)\n      dup1\n      0x0180\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_135\n      tag_136\n      jump\t// in\n    tag_135:\n      dup2\n      mstore\n      0x20\n      add\n      tag_137\n      tag_136\n      jump\t// in\n    tag_137:\n      dup2\n      mstore\n      0x00\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_136:\n      0x40\n      dup1\n      mload\n      0xa0\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n        /* \"--CODEGEN--\":5:123   */\n    tag_139:\n      0x00\n        /* \"--CODEGEN--\":72:118   */\n      tag_140\n        /* \"--CODEGEN--\":110:116   */\n      dup3\n        /* \"--CODEGEN--\":97:117   */\n      calldataload\n        /* \"--CODEGEN--\":72:118   */\n      jump(tag_252)\n    tag_140:\n        /* \"--CODEGEN--\":63:118   */\n      swap4\n        /* \"--CODEGEN--\":57:123   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":174:953   */\n    tag_143:\n      0x00\n        /* \"--CODEGEN--\":315:318   */\n      dup3\n        /* \"--CODEGEN--\":308:312   */\n      0x1f\n        /* \"--CODEGEN--\":300:306   */\n      dup4\n        /* \"--CODEGEN--\":296:313   */\n      add\n        /* \"--CODEGEN--\":292:319   */\n      slt\n        /* \"--CODEGEN--\":282:284   */\n      tag_144\n      jumpi\n        /* \"--CODEGEN--\":333:334   */\n      0x00\n        /* \"--CODEGEN--\":330:331   */\n      dup1\n        /* \"--CODEGEN--\":323:335   */\n      revert\n        /* \"--CODEGEN--\":282:284   */\n    tag_144:\n        /* \"--CODEGEN--\":370:376   */\n      dup2\n        /* \"--CODEGEN--\":357:377   */\n      calldataload\n        /* \"--CODEGEN--\":392:496   */\n      tag_145\n        /* \"--CODEGEN--\":407:495   */\n      tag_146\n        /* \"--CODEGEN--\":488:494   */\n      dup3\n        /* \"--CODEGEN--\":407:495   */\n      jump(tag_147)\n    tag_146:\n        /* \"--CODEGEN--\":392:496   */\n      jump(tag_148)\n    tag_145:\n        /* \"--CODEGEN--\":383:496   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":513:518   */\n      dup2\n        /* \"--CODEGEN--\":538:544   */\n      dup2\n        /* \"--CODEGEN--\":531:536   */\n      dup4\n        /* \"--CODEGEN--\":524:545   */\n      mstore\n        /* \"--CODEGEN--\":568:572   */\n      0x20\n        /* \"--CODEGEN--\":560:566   */\n      dup5\n        /* \"--CODEGEN--\":556:573   */\n      add\n        /* \"--CODEGEN--\":546:573   */\n      swap4\n      pop\n        /* \"--CODEGEN--\":590:594   */\n      0x20\n        /* \"--CODEGEN--\":585:588   */\n      dup2\n        /* \"--CODEGEN--\":581:595   */\n      add\n        /* \"--CODEGEN--\":574:595   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":643:649   */\n      dup4\n        /* \"--CODEGEN--\":690:693   */\n      dup6\n        /* \"--CODEGEN--\":682:686   */\n      0xc0\n        /* \"--CODEGEN--\":674:680   */\n      dup5\n        /* \"--CODEGEN--\":670:687   */\n      mul\n        /* \"--CODEGEN--\":665:668   */\n      dup3\n        /* \"--CODEGEN--\":661:688   */\n      add\n        /* \"--CODEGEN--\":658:694   */\n      gt\n        /* \"--CODEGEN--\":655:657   */\n      iszero\n      tag_149\n      jumpi\n        /* \"--CODEGEN--\":707:708   */\n      0x00\n        /* \"--CODEGEN--\":704:705   */\n      dup1\n        /* \"--CODEGEN--\":697:709   */\n      revert\n        /* \"--CODEGEN--\":655:657   */\n    tag_149:\n        /* \"--CODEGEN--\":732:733   */\n      0x00\n        /* \"--CODEGEN--\":717:947   */\n    tag_150:\n        /* \"--CODEGEN--\":742:748   */\n      dup4\n        /* \"--CODEGEN--\":739:740   */\n      dup2\n        /* \"--CODEGEN--\":736:749   */\n      lt\n        /* \"--CODEGEN--\":717:947   */\n      iszero\n      tag_152\n      jumpi\n        /* \"--CODEGEN--\":800:803   */\n      dup2\n        /* \"--CODEGEN--\":822:883   */\n      tag_153\n        /* \"--CODEGEN--\":879:882   */\n      dup9\n        /* \"--CODEGEN--\":867:877   */\n      dup3\n        /* \"--CODEGEN--\":822:883   */\n      jump(tag_154)\n    tag_153:\n        /* \"--CODEGEN--\":810:884   */\n      dup5\n      mstore\n      pop\n        /* \"--CODEGEN--\":907:911   */\n      0x20\n        /* \"--CODEGEN--\":898:912   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"--CODEGEN--\":935:939   */\n      0xc0\n        /* \"--CODEGEN--\":926:940   */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n        /* \"--CODEGEN--\":764:765   */\n      0x01\n        /* \"--CODEGEN--\":757:766   */\n      add\n        /* \"--CODEGEN--\":717:947   */\n      jump(tag_150)\n    tag_152:\n        /* \"--CODEGEN--\":721:735   */\n      pop\n        /* \"--CODEGEN--\":275:953   */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":980:1595   */\n    tag_156:\n      0x00\n        /* \"--CODEGEN--\":1095:1098   */\n      dup3\n        /* \"--CODEGEN--\":1088:1092   */\n      0x1f\n        /* \"--CODEGEN--\":1080:1086   */\n      dup4\n        /* \"--CODEGEN--\":1076:1093   */\n      add\n        /* \"--CODEGEN--\":1072:1099   */\n      slt\n        /* \"--CODEGEN--\":1062:1064   */\n      tag_157\n      jumpi\n        /* \"--CODEGEN--\":1113:1114   */\n      0x00\n        /* \"--CODEGEN--\":1110:1111   */\n      dup1\n        /* \"--CODEGEN--\":1103:1115   */\n      revert\n        /* \"--CODEGEN--\":1062:1064   */\n    tag_157:\n        /* \"--CODEGEN--\":1137:1140   */\n      0x05\n        /* \"--CODEGEN--\":1155:1233   */\n      tag_158\n        /* \"--CODEGEN--\":1170:1232   */\n      tag_146\n        /* \"--CODEGEN--\":1225:1231   */\n      dup3\n        /* \"--CODEGEN--\":1170:1232   */\n      jump(tag_160)\n        /* \"--CODEGEN--\":1155:1233   */\n    tag_158:\n        /* \"--CODEGEN--\":1146:1233   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":1250:1255   */\n      dup2\n        /* \"--CODEGEN--\":1309:1315   */\n      dup4\n        /* \"--CODEGEN--\":1356:1359   */\n      dup6\n        /* \"--CODEGEN--\":1348:1352   */\n      0x20\n        /* \"--CODEGEN--\":1340:1346   */\n      dup5\n        /* \"--CODEGEN--\":1336:1353   */\n      mul\n        /* \"--CODEGEN--\":1331:1334   */\n      dup3\n        /* \"--CODEGEN--\":1327:1354   */\n      add\n        /* \"--CODEGEN--\":1324:1360   */\n      gt\n        /* \"--CODEGEN--\":1321:1323   */\n      iszero\n      tag_161\n      jumpi\n        /* \"--CODEGEN--\":1373:1374   */\n      0x00\n        /* \"--CODEGEN--\":1370:1371   */\n      dup1\n        /* \"--CODEGEN--\":1363:1375   */\n      revert\n        /* \"--CODEGEN--\":1321:1323   */\n    tag_161:\n        /* \"--CODEGEN--\":1398:1399   */\n      0x00\n        /* \"--CODEGEN--\":1383:1589   */\n    tag_162:\n        /* \"--CODEGEN--\":1408:1414   */\n      dup4\n        /* \"--CODEGEN--\":1405:1406   */\n      dup2\n        /* \"--CODEGEN--\":1402:1415   */\n      lt\n        /* \"--CODEGEN--\":1383:1589   */\n      iszero\n      tag_152\n      jumpi\n        /* \"--CODEGEN--\":1466:1469   */\n      dup2\n        /* \"--CODEGEN--\":1488:1525   */\n      tag_165\n        /* \"--CODEGEN--\":1521:1524   */\n      dup9\n        /* \"--CODEGEN--\":1509:1519   */\n      dup3\n        /* \"--CODEGEN--\":1488:1525   */\n      jump(tag_166)\n    tag_165:\n        /* \"--CODEGEN--\":1476:1526   */\n      dup5\n      mstore\n      pop\n        /* \"--CODEGEN--\":1549:1553   */\n      0x20\n        /* \"--CODEGEN--\":1540:1554   */\n      swap3\n      dup4\n      add\n      swap3\n        /* \"--CODEGEN--\":1568:1582   */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n        /* \"--CODEGEN--\":1430:1431   */\n      0x01\n        /* \"--CODEGEN--\":1423:1432   */\n      add\n        /* \"--CODEGEN--\":1383:1589   */\n      jump(tag_162)\n        /* \"--CODEGEN--\":1604:2040   */\n    tag_168:\n      0x00\n        /* \"--CODEGEN--\":1713:1716   */\n      dup3\n        /* \"--CODEGEN--\":1706:1710   */\n      0x1f\n        /* \"--CODEGEN--\":1698:1704   */\n      dup4\n        /* \"--CODEGEN--\":1694:1711   */\n      add\n        /* \"--CODEGEN--\":1690:1717   */\n      slt\n        /* \"--CODEGEN--\":1680:1682   */\n      tag_169\n      jumpi\n        /* \"--CODEGEN--\":1731:1732   */\n      0x00\n        /* \"--CODEGEN--\":1728:1729   */\n      dup1\n        /* \"--CODEGEN--\":1721:1733   */\n      revert\n        /* \"--CODEGEN--\":1680:1682   */\n    tag_169:\n        /* \"--CODEGEN--\":1761:1767   */\n      dup2\n        /* \"--CODEGEN--\":1755:1768   */\n      mload\n        /* \"--CODEGEN--\":1783:1844   */\n      tag_170\n        /* \"--CODEGEN--\":1798:1843   */\n      tag_146\n        /* \"--CODEGEN--\":1836:1842   */\n      dup3\n        /* \"--CODEGEN--\":1798:1843   */\n      jump(tag_172)\n        /* \"--CODEGEN--\":1783:1844   */\n    tag_170:\n        /* \"--CODEGEN--\":1774:1844   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":1864:1870   */\n      dup1\n        /* \"--CODEGEN--\":1857:1862   */\n      dup3\n        /* \"--CODEGEN--\":1850:1871   */\n      mstore\n        /* \"--CODEGEN--\":1900:1904   */\n      0x20\n        /* \"--CODEGEN--\":1892:1898   */\n      dup4\n        /* \"--CODEGEN--\":1888:1905   */\n      add\n        /* \"--CODEGEN--\":1933:1937   */\n      0x20\n        /* \"--CODEGEN--\":1926:1931   */\n      dup4\n        /* \"--CODEGEN--\":1922:1938   */\n      add\n        /* \"--CODEGEN--\":1968:1971   */\n      dup6\n        /* \"--CODEGEN--\":1959:1965   */\n      dup4\n        /* \"--CODEGEN--\":1954:1957   */\n      dup4\n        /* \"--CODEGEN--\":1950:1966   */\n      add\n        /* \"--CODEGEN--\":1947:1972   */\n      gt\n        /* \"--CODEGEN--\":1944:1946   */\n      iszero\n      tag_173\n      jumpi\n        /* \"--CODEGEN--\":1985:1986   */\n      0x00\n        /* \"--CODEGEN--\":1982:1983   */\n      dup1\n        /* \"--CODEGEN--\":1975:1987   */\n      revert\n        /* \"--CODEGEN--\":1944:1946   */\n    tag_173:\n        /* \"--CODEGEN--\":1995:2034   */\n      tag_174\n        /* \"--CODEGEN--\":2027:2033   */\n      dup4\n        /* \"--CODEGEN--\":2022:2025   */\n      dup3\n        /* \"--CODEGEN--\":2017:2020   */\n      dup5\n        /* \"--CODEGEN--\":1995:2034   */\n      jump(tag_175)\n    tag_174:\n        /* \"--CODEGEN--\":1673:2040   */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":2087:3045   */\n    tag_177:\n      0x00\n        /* \"--CODEGEN--\":2208:2213   */\n      0x0180\n        /* \"--CODEGEN--\":2196:2205   */\n      dup3\n        /* \"--CODEGEN--\":2191:2194   */\n      dup5\n        /* \"--CODEGEN--\":2187:2206   */\n      sub\n        /* \"--CODEGEN--\":2183:2214   */\n      slt\n        /* \"--CODEGEN--\":2180:2182   */\n      iszero\n      tag_178\n      jumpi\n        /* \"--CODEGEN--\":2227:2228   */\n      0x00\n        /* \"--CODEGEN--\":2224:2225   */\n      dup1\n        /* \"--CODEGEN--\":2217:2229   */\n      revert\n        /* \"--CODEGEN--\":2180:2182   */\n    tag_178:\n        /* \"--CODEGEN--\":2245:2265   */\n      tag_179\n        /* \"--CODEGEN--\":2260:2264   */\n      0x80\n        /* \"--CODEGEN--\":2245:2265   */\n      jump(tag_148)\n    tag_179:\n        /* \"--CODEGEN--\":2315:2339   */\n      dup3\n      mload\n        /* \"--CODEGEN--\":2236:2265   */\n      swap1\n      swap2\n      pop\n        /* \"--CODEGEN--\":2359:2377   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":2348:2378   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":2345:2347   */\n      iszero\n      tag_180\n      jumpi\n        /* \"--CODEGEN--\":2391:2392   */\n      0x00\n        /* \"--CODEGEN--\":2388:2389   */\n      dup1\n        /* \"--CODEGEN--\":2381:2393   */\n      revert\n        /* \"--CODEGEN--\":2345:2347   */\n    tag_180:\n        /* \"--CODEGEN--\":2425:2491   */\n      tag_181\n        /* \"--CODEGEN--\":2487:2490   */\n      dup5\n        /* \"--CODEGEN--\":2478:2484   */\n      dup3\n        /* \"--CODEGEN--\":2467:2476   */\n      dup6\n        /* \"--CODEGEN--\":2463:2485   */\n      add\n        /* \"--CODEGEN--\":2425:2491   */\n      jump(tag_168)\n    tag_181:\n        /* \"--CODEGEN--\":2401:2492   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":2557:2559   */\n      0x20\n        /* \"--CODEGEN--\":2590:2678   */\n      tag_182\n        /* \"--CODEGEN--\":2674:2677   */\n      dup5\n        /* \"--CODEGEN--\":2650:2672   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":2590:2678   */\n      jump(tag_183)\n    tag_182:\n        /* \"--CODEGEN--\":2583:2587   */\n      0x20\n        /* \"--CODEGEN--\":2576:2581   */\n      dup4\n        /* \"--CODEGEN--\":2572:2588   */\n      add\n        /* \"--CODEGEN--\":2565:2679   */\n      mstore\n        /* \"--CODEGEN--\":2513:2690   */\n      pop\n        /* \"--CODEGEN--\":2742:2745   */\n      0xc0\n        /* \"--CODEGEN--\":2776:2864   */\n      tag_184\n        /* \"--CODEGEN--\":2860:2863   */\n      dup5\n        /* \"--CODEGEN--\":2851:2857   */\n      dup3\n        /* \"--CODEGEN--\":2840:2849   */\n      dup6\n        /* \"--CODEGEN--\":2836:2858   */\n      add\n        /* \"--CODEGEN--\":2776:2864   */\n      jump(tag_183)\n    tag_184:\n        /* \"--CODEGEN--\":2769:2773   */\n      0x40\n        /* \"--CODEGEN--\":2762:2767   */\n      dup4\n        /* \"--CODEGEN--\":2758:2774   */\n      add\n        /* \"--CODEGEN--\":2751:2865   */\n      mstore\n        /* \"--CODEGEN--\":2700:2876   */\n      pop\n        /* \"--CODEGEN--\":2930:2933   */\n      0x0160\n        /* \"--CODEGEN--\":2964:3023   */\n      tag_185\n        /* \"--CODEGEN--\":3019:3022   */\n      dup5\n        /* \"--CODEGEN--\":3010:3016   */\n      dup3\n        /* \"--CODEGEN--\":2999:3008   */\n      dup6\n        /* \"--CODEGEN--\":2995:3017   */\n      add\n        /* \"--CODEGEN--\":2964:3023   */\n      jump(tag_186)\n    tag_185:\n        /* \"--CODEGEN--\":2957:2961   */\n      0x60\n        /* \"--CODEGEN--\":2950:2955   */\n      dup4\n        /* \"--CODEGEN--\":2946:2962   */\n      add\n        /* \"--CODEGEN--\":2939:3024   */\n      mstore\n        /* \"--CODEGEN--\":2886:3035   */\n      pop\n        /* \"--CODEGEN--\":2174:3045   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":3098:4077   */\n    tag_183:\n      0x00\n        /* \"--CODEGEN--\":3226:3230   */\n      0xa0\n        /* \"--CODEGEN--\":3214:3223   */\n      dup3\n        /* \"--CODEGEN--\":3209:3212   */\n      dup5\n        /* \"--CODEGEN--\":3205:3224   */\n      sub\n        /* \"--CODEGEN--\":3201:3231   */\n      slt\n        /* \"--CODEGEN--\":3198:3200   */\n      iszero\n      tag_188\n      jumpi\n        /* \"--CODEGEN--\":3244:3245   */\n      0x00\n        /* \"--CODEGEN--\":3241:3242   */\n      dup1\n        /* \"--CODEGEN--\":3234:3246   */\n      revert\n        /* \"--CODEGEN--\":3198:3200   */\n    tag_188:\n        /* \"--CODEGEN--\":3262:3282   */\n      tag_189\n        /* \"--CODEGEN--\":3277:3281   */\n      0xa0\n        /* \"--CODEGEN--\":3262:3282   */\n      jump(tag_148)\n    tag_189:\n        /* \"--CODEGEN--\":3253:3282   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":3334:3335   */\n      0x00\n        /* \"--CODEGEN--\":3365:3424   */\n      tag_190\n        /* \"--CODEGEN--\":3420:3423   */\n      dup5\n        /* \"--CODEGEN--\":3400:3409   */\n      dup5\n        /* \"--CODEGEN--\":3365:3424   */\n      jump(tag_186)\n    tag_190:\n        /* \"--CODEGEN--\":3341:3425   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":3489:3491   */\n      0x20\n        /* \"--CODEGEN--\":3522:3581   */\n      tag_191\n        /* \"--CODEGEN--\":3577:3580   */\n      dup5\n        /* \"--CODEGEN--\":3553:3575   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":3522:3581   */\n      jump(tag_186)\n    tag_191:\n        /* \"--CODEGEN--\":3515:3519   */\n      0x20\n        /* \"--CODEGEN--\":3508:3513   */\n      dup4\n        /* \"--CODEGEN--\":3504:3520   */\n      add\n        /* \"--CODEGEN--\":3497:3582   */\n      mstore\n        /* \"--CODEGEN--\":3446:3593   */\n      pop\n        /* \"--CODEGEN--\":3643:3645   */\n      0x40\n        /* \"--CODEGEN--\":3676:3735   */\n      tag_192\n        /* \"--CODEGEN--\":3731:3734   */\n      dup5\n        /* \"--CODEGEN--\":3722:3728   */\n      dup3\n        /* \"--CODEGEN--\":3711:3720   */\n      dup6\n        /* \"--CODEGEN--\":3707:3729   */\n      add\n        /* \"--CODEGEN--\":3676:3735   */\n      jump(tag_186)\n    tag_192:\n        /* \"--CODEGEN--\":3669:3673   */\n      0x40\n        /* \"--CODEGEN--\":3662:3667   */\n      dup4\n        /* \"--CODEGEN--\":3658:3674   */\n      add\n        /* \"--CODEGEN--\":3651:3736   */\n      mstore\n        /* \"--CODEGEN--\":3603:3747   */\n      pop\n        /* \"--CODEGEN--\":3799:3801   */\n      0x60\n        /* \"--CODEGEN--\":3832:3891   */\n      tag_193\n        /* \"--CODEGEN--\":3887:3890   */\n      dup5\n        /* \"--CODEGEN--\":3878:3884   */\n      dup3\n        /* \"--CODEGEN--\":3867:3876   */\n      dup6\n        /* \"--CODEGEN--\":3863:3885   */\n      add\n        /* \"--CODEGEN--\":3832:3891   */\n      jump(tag_186)\n    tag_193:\n        /* \"--CODEGEN--\":3825:3829   */\n      0x60\n        /* \"--CODEGEN--\":3818:3823   */\n      dup4\n        /* \"--CODEGEN--\":3814:3830   */\n      add\n        /* \"--CODEGEN--\":3807:3892   */\n      mstore\n        /* \"--CODEGEN--\":3757:3903   */\n      pop\n        /* \"--CODEGEN--\":3962:3965   */\n      0x80\n        /* \"--CODEGEN--\":3996:4055   */\n      tag_194\n        /* \"--CODEGEN--\":4051:4054   */\n      dup5\n        /* \"--CODEGEN--\":4042:4048   */\n      dup3\n        /* \"--CODEGEN--\":4031:4040   */\n      dup6\n        /* \"--CODEGEN--\":4027:4049   */\n      add\n        /* \"--CODEGEN--\":3996:4055   */\n      jump(tag_186)\n    tag_194:\n        /* \"--CODEGEN--\":3989:3993   */\n      0x80\n        /* \"--CODEGEN--\":3982:3987   */\n      dup4\n        /* \"--CODEGEN--\":3978:3994   */\n      add\n        /* \"--CODEGEN--\":3971:4056   */\n      mstore\n        /* \"--CODEGEN--\":3913:4067   */\n      pop\n        /* \"--CODEGEN--\":3192:4077   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":4120:5763   */\n    tag_196:\n      0x00\n        /* \"--CODEGEN--\":4242:4247   */\n      0x0100\n        /* \"--CODEGEN--\":4230:4239   */\n      dup3\n        /* \"--CODEGEN--\":4225:4228   */\n      dup5\n        /* \"--CODEGEN--\":4221:4240   */\n      sub\n        /* \"--CODEGEN--\":4217:4248   */\n      slt\n        /* \"--CODEGEN--\":4214:4216   */\n      iszero\n      tag_197\n      jumpi\n        /* \"--CODEGEN--\":4261:4262   */\n      0x00\n        /* \"--CODEGEN--\":4258:4259   */\n      dup1\n        /* \"--CODEGEN--\":4251:4263   */\n      revert\n        /* \"--CODEGEN--\":4214:4216   */\n    tag_197:\n        /* \"--CODEGEN--\":4279:4300   */\n      tag_198\n        /* \"--CODEGEN--\":4294:4299   */\n      0x0100\n        /* \"--CODEGEN--\":4279:4300   */\n      jump(tag_148)\n    tag_198:\n        /* \"--CODEGEN--\":4350:4374   */\n      dup3\n      mload\n        /* \"--CODEGEN--\":4270:4300   */\n      swap1\n      swap2\n      pop\n        /* \"--CODEGEN--\":4394:4412   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":4383:4413   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":4380:4382   */\n      iszero\n      tag_199\n      jumpi\n        /* \"--CODEGEN--\":4426:4427   */\n      0x00\n        /* \"--CODEGEN--\":4423:4424   */\n      dup1\n        /* \"--CODEGEN--\":4416:4428   */\n      revert\n        /* \"--CODEGEN--\":4380:4382   */\n    tag_199:\n        /* \"--CODEGEN--\":4460:4526   */\n      tag_200\n        /* \"--CODEGEN--\":4522:4525   */\n      dup5\n        /* \"--CODEGEN--\":4513:4519   */\n      dup3\n        /* \"--CODEGEN--\":4502:4511   */\n      dup6\n        /* \"--CODEGEN--\":4498:4520   */\n      add\n        /* \"--CODEGEN--\":4460:4526   */\n      jump(tag_168)\n    tag_200:\n        /* \"--CODEGEN--\":4436:4527   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":4612:4614   */\n      0x20\n        /* \"--CODEGEN--\":4597:4615   */\n      dup3\n      add\n        /* \"--CODEGEN--\":4591:4616   */\n      mload\n        /* \"--CODEGEN--\":4636:4654   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":4625:4655   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":4622:4624   */\n      iszero\n      tag_201\n      jumpi\n        /* \"--CODEGEN--\":4668:4669   */\n      0x00\n        /* \"--CODEGEN--\":4665:4666   */\n      dup1\n        /* \"--CODEGEN--\":4658:4670   */\n      revert\n        /* \"--CODEGEN--\":4622:4624   */\n    tag_201:\n        /* \"--CODEGEN--\":4703:4784   */\n      tag_202\n        /* \"--CODEGEN--\":4780:4783   */\n      dup5\n        /* \"--CODEGEN--\":4771:4777   */\n      dup3\n        /* \"--CODEGEN--\":4760:4769   */\n      dup6\n        /* \"--CODEGEN--\":4756:4778   */\n      add\n        /* \"--CODEGEN--\":4703:4784   */\n      jump(tag_177)\n    tag_202:\n        /* \"--CODEGEN--\":4696:4700   */\n      0x20\n        /* \"--CODEGEN--\":4689:4694   */\n      dup4\n        /* \"--CODEGEN--\":4685:4701   */\n      add\n        /* \"--CODEGEN--\":4678:4785   */\n      mstore\n        /* \"--CODEGEN--\":4548:4796   */\n      pop\n        /* \"--CODEGEN--\":4852:4854   */\n      0x40\n        /* \"--CODEGEN--\":4885:4944   */\n      tag_203\n        /* \"--CODEGEN--\":4940:4943   */\n      dup5\n        /* \"--CODEGEN--\":4931:4937   */\n      dup3\n        /* \"--CODEGEN--\":4920:4929   */\n      dup6\n        /* \"--CODEGEN--\":4916:4938   */\n      add\n        /* \"--CODEGEN--\":4885:4944   */\n      jump(tag_186)\n    tag_203:\n        /* \"--CODEGEN--\":4878:4882   */\n      0x40\n        /* \"--CODEGEN--\":4871:4876   */\n      dup4\n        /* \"--CODEGEN--\":4867:4883   */\n      add\n        /* \"--CODEGEN--\":4860:4945   */\n      mstore\n        /* \"--CODEGEN--\":4806:4956   */\n      pop\n        /* \"--CODEGEN--\":5013:5015   */\n      0x60\n        /* \"--CODEGEN--\":5046:5105   */\n      tag_204\n        /* \"--CODEGEN--\":5101:5104   */\n      dup5\n        /* \"--CODEGEN--\":5092:5098   */\n      dup3\n        /* \"--CODEGEN--\":5081:5090   */\n      dup6\n        /* \"--CODEGEN--\":5077:5099   */\n      add\n        /* \"--CODEGEN--\":5046:5105   */\n      jump(tag_186)\n    tag_204:\n        /* \"--CODEGEN--\":5039:5043   */\n      0x60\n        /* \"--CODEGEN--\":5032:5037   */\n      dup4\n        /* \"--CODEGEN--\":5028:5044   */\n      add\n        /* \"--CODEGEN--\":5021:5106   */\n      mstore\n        /* \"--CODEGEN--\":4966:5117   */\n      pop\n        /* \"--CODEGEN--\":5171:5174   */\n      0x80\n        /* \"--CODEGEN--\":5205:5264   */\n      tag_205\n        /* \"--CODEGEN--\":5260:5263   */\n      dup5\n        /* \"--CODEGEN--\":5251:5257   */\n      dup3\n        /* \"--CODEGEN--\":5240:5249   */\n      dup6\n        /* \"--CODEGEN--\":5236:5258   */\n      add\n        /* \"--CODEGEN--\":5205:5264   */\n      jump(tag_186)\n    tag_205:\n        /* \"--CODEGEN--\":5198:5202   */\n      0x80\n        /* \"--CODEGEN--\":5191:5196   */\n      dup4\n        /* \"--CODEGEN--\":5187:5203   */\n      add\n        /* \"--CODEGEN--\":5180:5265   */\n      mstore\n        /* \"--CODEGEN--\":5127:5276   */\n      pop\n        /* \"--CODEGEN--\":5327:5330   */\n      0xa0\n        /* \"--CODEGEN--\":5361:5420   */\n      tag_206\n        /* \"--CODEGEN--\":5416:5419   */\n      dup5\n        /* \"--CODEGEN--\":5407:5413   */\n      dup3\n        /* \"--CODEGEN--\":5396:5405   */\n      dup6\n        /* \"--CODEGEN--\":5392:5414   */\n      add\n        /* \"--CODEGEN--\":5361:5420   */\n      jump(tag_186)\n    tag_206:\n        /* \"--CODEGEN--\":5354:5358   */\n      0xa0\n        /* \"--CODEGEN--\":5347:5352   */\n      dup4\n        /* \"--CODEGEN--\":5343:5359   */\n      add\n        /* \"--CODEGEN--\":5336:5421   */\n      mstore\n        /* \"--CODEGEN--\":5286:5432   */\n      pop\n        /* \"--CODEGEN--\":5484:5487   */\n      0xc0\n        /* \"--CODEGEN--\":5518:5577   */\n      tag_207\n        /* \"--CODEGEN--\":5573:5576   */\n      dup5\n        /* \"--CODEGEN--\":5564:5570   */\n      dup3\n        /* \"--CODEGEN--\":5553:5562   */\n      dup6\n        /* \"--CODEGEN--\":5549:5571   */\n      add\n        /* \"--CODEGEN--\":5518:5577   */\n      jump(tag_186)\n    tag_207:\n        /* \"--CODEGEN--\":5511:5515   */\n      0xc0\n        /* \"--CODEGEN--\":5504:5509   */\n      dup4\n        /* \"--CODEGEN--\":5500:5516   */\n      add\n        /* \"--CODEGEN--\":5493:5578   */\n      mstore\n        /* \"--CODEGEN--\":5442:5589   */\n      pop\n        /* \"--CODEGEN--\":5648:5651   */\n      0xe0\n        /* \"--CODEGEN--\":5682:5741   */\n      tag_208\n        /* \"--CODEGEN--\":5737:5740   */\n      dup5\n        /* \"--CODEGEN--\":5728:5734   */\n      dup3\n        /* \"--CODEGEN--\":5717:5726   */\n      dup6\n        /* \"--CODEGEN--\":5713:5735   */\n      add\n        /* \"--CODEGEN--\":5682:5741   */\n      jump(tag_186)\n    tag_208:\n        /* \"--CODEGEN--\":5675:5679   */\n      0xe0\n        /* \"--CODEGEN--\":5668:5673   */\n      dup4\n        /* \"--CODEGEN--\":5664:5680   */\n      add\n        /* \"--CODEGEN--\":5657:5742   */\n      mstore\n        /* \"--CODEGEN--\":5599:5753   */\n      pop\n        /* \"--CODEGEN--\":4208:5763   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":5810:6866   */\n    tag_154:\n      0x00\n        /* \"--CODEGEN--\":5923:5927   */\n      0xc0\n        /* \"--CODEGEN--\":5911:5920   */\n      dup3\n        /* \"--CODEGEN--\":5906:5909   */\n      dup5\n        /* \"--CODEGEN--\":5902:5921   */\n      sub\n        /* \"--CODEGEN--\":5898:5928   */\n      slt\n        /* \"--CODEGEN--\":5895:5897   */\n      iszero\n      tag_210\n      jumpi\n        /* \"--CODEGEN--\":5941:5942   */\n      0x00\n        /* \"--CODEGEN--\":5938:5939   */\n      dup1\n        /* \"--CODEGEN--\":5931:5943   */\n      revert\n        /* \"--CODEGEN--\":5895:5897   */\n    tag_210:\n        /* \"--CODEGEN--\":5959:5979   */\n      tag_211\n        /* \"--CODEGEN--\":5974:5978   */\n      0xc0\n        /* \"--CODEGEN--\":5959:5979   */\n      jump(tag_148)\n    tag_211:\n        /* \"--CODEGEN--\":5950:5979   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":6031:6032   */\n      0x00\n        /* \"--CODEGEN--\":6062:6111   */\n      tag_212\n        /* \"--CODEGEN--\":6107:6110   */\n      dup5\n        /* \"--CODEGEN--\":6087:6096   */\n      dup5\n        /* \"--CODEGEN--\":6062:6111   */\n      jump(tag_166)\n    tag_212:\n        /* \"--CODEGEN--\":6038:6112   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":6175:6177   */\n      0x20\n        /* \"--CODEGEN--\":6208:6256   */\n      tag_213\n        /* \"--CODEGEN--\":6252:6255   */\n      dup5\n        /* \"--CODEGEN--\":6228:6250   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":6208:6256   */\n      jump(tag_214)\n    tag_213:\n        /* \"--CODEGEN--\":6201:6205   */\n      0x20\n        /* \"--CODEGEN--\":6194:6199   */\n      dup4\n        /* \"--CODEGEN--\":6190:6206   */\n      add\n        /* \"--CODEGEN--\":6183:6257   */\n      mstore\n        /* \"--CODEGEN--\":6133:6268   */\n      pop\n        /* \"--CODEGEN--\":6321:6323   */\n      0x40\n        /* \"--CODEGEN--\":6354:6402   */\n      tag_215\n        /* \"--CODEGEN--\":6398:6401   */\n      dup5\n        /* \"--CODEGEN--\":6389:6395   */\n      dup3\n        /* \"--CODEGEN--\":6378:6387   */\n      dup6\n        /* \"--CODEGEN--\":6374:6396   */\n      add\n        /* \"--CODEGEN--\":6354:6402   */\n      jump(tag_214)\n    tag_215:\n        /* \"--CODEGEN--\":6347:6351   */\n      0x40\n        /* \"--CODEGEN--\":6340:6345   */\n      dup4\n        /* \"--CODEGEN--\":6336:6352   */\n      add\n        /* \"--CODEGEN--\":6329:6403   */\n      mstore\n        /* \"--CODEGEN--\":6278:6414   */\n      pop\n        /* \"--CODEGEN--\":6464:6466   */\n      0x60\n        /* \"--CODEGEN--\":6497:6545   */\n      tag_216\n        /* \"--CODEGEN--\":6541:6544   */\n      dup5\n        /* \"--CODEGEN--\":6532:6538   */\n      dup3\n        /* \"--CODEGEN--\":6521:6530   */\n      dup6\n        /* \"--CODEGEN--\":6517:6539   */\n      add\n        /* \"--CODEGEN--\":6497:6545   */\n      jump(tag_214)\n    tag_216:\n        /* \"--CODEGEN--\":6490:6494   */\n      0x60\n        /* \"--CODEGEN--\":6483:6488   */\n      dup4\n        /* \"--CODEGEN--\":6479:6495   */\n      add\n        /* \"--CODEGEN--\":6472:6546   */\n      mstore\n        /* \"--CODEGEN--\":6424:6557   */\n      pop\n        /* \"--CODEGEN--\":6609:6612   */\n      0x80\n        /* \"--CODEGEN--\":6643:6691   */\n      tag_217\n        /* \"--CODEGEN--\":6687:6690   */\n      dup5\n        /* \"--CODEGEN--\":6678:6684   */\n      dup3\n        /* \"--CODEGEN--\":6667:6676   */\n      dup6\n        /* \"--CODEGEN--\":6663:6685   */\n      add\n        /* \"--CODEGEN--\":6643:6691   */\n      jump(tag_214)\n    tag_217:\n        /* \"--CODEGEN--\":6636:6640   */\n      0x80\n        /* \"--CODEGEN--\":6629:6634   */\n      dup4\n        /* \"--CODEGEN--\":6625:6641   */\n      add\n        /* \"--CODEGEN--\":6618:6692   */\n      mstore\n        /* \"--CODEGEN--\":6567:6703   */\n      pop\n        /* \"--CODEGEN--\":6762:6765   */\n      0xa0\n        /* \"--CODEGEN--\":6796:6844   */\n      tag_218\n        /* \"--CODEGEN--\":6840:6843   */\n      dup5\n        /* \"--CODEGEN--\":6831:6837   */\n      dup3\n        /* \"--CODEGEN--\":6820:6829   */\n      dup6\n        /* \"--CODEGEN--\":6816:6838   */\n      add\n        /* \"--CODEGEN--\":6796:6844   */\n      jump(tag_214)\n    tag_218:\n        /* \"--CODEGEN--\":6789:6793   */\n      0xa0\n        /* \"--CODEGEN--\":6782:6787   */\n      dup4\n        /* \"--CODEGEN--\":6778:6794   */\n      add\n        /* \"--CODEGEN--\":6771:6845   */\n      mstore\n        /* \"--CODEGEN--\":6713:6856   */\n      pop\n        /* \"--CODEGEN--\":5889:6866   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":6873:6989   */\n    tag_214:\n      0x00\n        /* \"--CODEGEN--\":6939:6984   */\n      tag_140\n        /* \"--CODEGEN--\":6976:6982   */\n      dup3\n        /* \"--CODEGEN--\":6963:6983   */\n      calldataload\n        /* \"--CODEGEN--\":6939:6984   */\n      jump(tag_332)\n        /* \"--CODEGEN--\":6996:7116   */\n    tag_186:\n      0x00\n        /* \"--CODEGEN--\":7073:7111   */\n      tag_140\n        /* \"--CODEGEN--\":7103:7109   */\n      dup3\n        /* \"--CODEGEN--\":7097:7110   */\n      mload\n        /* \"--CODEGEN--\":7073:7111   */\n      jump(tag_332)\n        /* \"--CODEGEN--\":7123:7241   */\n    tag_166:\n      0x00\n        /* \"--CODEGEN--\":7190:7236   */\n      tag_140\n        /* \"--CODEGEN--\":7228:7234   */\n      dup3\n        /* \"--CODEGEN--\":7215:7235   */\n      calldataload\n        /* \"--CODEGEN--\":7190:7236   */\n      jump(tag_274)\n        /* \"--CODEGEN--\":7248:7489   */\n    tag_20:\n      0x00\n        /* \"--CODEGEN--\":7352:7354   */\n      0x20\n        /* \"--CODEGEN--\":7340:7349   */\n      dup3\n        /* \"--CODEGEN--\":7331:7338   */\n      dup5\n        /* \"--CODEGEN--\":7327:7350   */\n      sub\n        /* \"--CODEGEN--\":7323:7355   */\n      slt\n        /* \"--CODEGEN--\":7320:7322   */\n      iszero\n      tag_228\n      jumpi\n        /* \"--CODEGEN--\":7368:7369   */\n      0x00\n        /* \"--CODEGEN--\":7365:7366   */\n      dup1\n        /* \"--CODEGEN--\":7358:7370   */\n      revert\n        /* \"--CODEGEN--\":7320:7322   */\n    tag_228:\n        /* \"--CODEGEN--\":7403:7404   */\n      0x00\n        /* \"--CODEGEN--\":7420:7473   */\n      tag_229\n        /* \"--CODEGEN--\":7465:7472   */\n      dup5\n        /* \"--CODEGEN--\":7445:7454   */\n      dup5\n        /* \"--CODEGEN--\":7420:7473   */\n      jump(tag_139)\n    tag_229:\n        /* \"--CODEGEN--\":7410:7473   */\n      swap5\n        /* \"--CODEGEN--\":7314:7489   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":7496:7921   */\n    tag_30:\n      0x00\n        /* \"--CODEGEN--\":7649:7651   */\n      0x20\n        /* \"--CODEGEN--\":7637:7646   */\n      dup3\n        /* \"--CODEGEN--\":7628:7635   */\n      dup5\n        /* \"--CODEGEN--\":7624:7647   */\n      sub\n        /* \"--CODEGEN--\":7620:7652   */\n      slt\n        /* \"--CODEGEN--\":7617:7619   */\n      iszero\n      tag_231\n      jumpi\n        /* \"--CODEGEN--\":7665:7666   */\n      0x00\n        /* \"--CODEGEN--\":7662:7663   */\n      dup1\n        /* \"--CODEGEN--\":7655:7667   */\n      revert\n        /* \"--CODEGEN--\":7617:7619   */\n    tag_231:\n        /* \"--CODEGEN--\":7700:7731   */\n      dup2\n      calldataload\n        /* \"--CODEGEN--\":7751:7769   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":7740:7770   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":7737:7739   */\n      iszero\n      tag_232\n      jumpi\n        /* \"--CODEGEN--\":7783:7784   */\n      0x00\n        /* \"--CODEGEN--\":7780:7781   */\n      dup1\n        /* \"--CODEGEN--\":7773:7785   */\n      revert\n        /* \"--CODEGEN--\":7737:7739   */\n    tag_232:\n        /* \"--CODEGEN--\":7803:7905   */\n      tag_229\n        /* \"--CODEGEN--\":7897:7904   */\n      dup5\n        /* \"--CODEGEN--\":7888:7894   */\n      dup3\n        /* \"--CODEGEN--\":7877:7886   */\n      dup6\n        /* \"--CODEGEN--\":7873:7895   */\n      add\n        /* \"--CODEGEN--\":7803:7905   */\n      jump(tag_143)\n        /* \"--CODEGEN--\":7928:8216   */\n    tag_26:\n      0x00\n        /* \"--CODEGEN--\":8055:8058   */\n      0xa0\n        /* \"--CODEGEN--\":8043:8052   */\n      dup3\n        /* \"--CODEGEN--\":8034:8041   */\n      dup5\n        /* \"--CODEGEN--\":8030:8053   */\n      sub\n        /* \"--CODEGEN--\":8026:8059   */\n      slt\n        /* \"--CODEGEN--\":8023:8025   */\n      iszero\n      tag_235\n      jumpi\n        /* \"--CODEGEN--\":8072:8073   */\n      0x00\n        /* \"--CODEGEN--\":8069:8070   */\n      dup1\n        /* \"--CODEGEN--\":8062:8074   */\n      revert\n        /* \"--CODEGEN--\":8023:8025   */\n    tag_235:\n        /* \"--CODEGEN--\":8107:8108   */\n      0x00\n        /* \"--CODEGEN--\":8124:8200   */\n      tag_229\n        /* \"--CODEGEN--\":8192:8199   */\n      dup5\n        /* \"--CODEGEN--\":8172:8181   */\n      dup5\n        /* \"--CODEGEN--\":8124:8200   */\n      jump(tag_156)\n        /* \"--CODEGEN--\":8223:8609   */\n    tag_98:\n      0x00\n        /* \"--CODEGEN--\":8360:8362   */\n      0x20\n        /* \"--CODEGEN--\":8348:8357   */\n      dup3\n        /* \"--CODEGEN--\":8339:8346   */\n      dup5\n        /* \"--CODEGEN--\":8335:8358   */\n      sub\n        /* \"--CODEGEN--\":8331:8363   */\n      slt\n        /* \"--CODEGEN--\":8328:8330   */\n      iszero\n      tag_238\n      jumpi\n        /* \"--CODEGEN--\":8376:8377   */\n      0x00\n        /* \"--CODEGEN--\":8373:8374   */\n      dup1\n        /* \"--CODEGEN--\":8366:8378   */\n      revert\n        /* \"--CODEGEN--\":8328:8330   */\n    tag_238:\n        /* \"--CODEGEN--\":8411:8435   */\n      dup2\n      mload\n        /* \"--CODEGEN--\":8455:8473   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":8444:8474   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":8441:8443   */\n      iszero\n      tag_239\n      jumpi\n        /* \"--CODEGEN--\":8487:8488   */\n      0x00\n        /* \"--CODEGEN--\":8484:8485   */\n      dup1\n        /* \"--CODEGEN--\":8477:8489   */\n      revert\n        /* \"--CODEGEN--\":8441:8443   */\n    tag_239:\n        /* \"--CODEGEN--\":8507:8593   */\n      tag_229\n        /* \"--CODEGEN--\":8585:8592   */\n      dup5\n        /* \"--CODEGEN--\":8576:8582   */\n      dup3\n        /* \"--CODEGEN--\":8565:8574   */\n      dup6\n        /* \"--CODEGEN--\":8561:8583   */\n      add\n        /* \"--CODEGEN--\":8507:8593   */\n      jump(tag_196)\n        /* \"--CODEGEN--\":8617:8890   */\n    tag_242:\n      0x00\n        /* \"--CODEGEN--\":8752:8850   */\n      tag_243\n        /* \"--CODEGEN--\":8846:8849   */\n      dup4\n        /* \"--CODEGEN--\":8838:8844   */\n      dup4\n        /* \"--CODEGEN--\":8752:8850   */\n      jump(tag_310)\n    tag_243:\n      pop\n      pop\n        /* \"--CODEGEN--\":8879:8883   */\n      0xc0\n        /* \"--CODEGEN--\":8870:8884   */\n      add\n      swap1\n        /* \"--CODEGEN--\":8745:8890   */\n      jump\n        /* \"--CODEGEN--\":8899:9072   */\n    tag_246:\n      0x00\n        /* \"--CODEGEN--\":8986:9032   */\n      tag_247\n        /* \"--CODEGEN--\":9028:9031   */\n      dup4\n        /* \"--CODEGEN--\":9020:9026   */\n      dup4\n        /* \"--CODEGEN--\":8986:9032   */\n      jump(tag_248)\n    tag_247:\n      pop\n      pop\n        /* \"--CODEGEN--\":9061:9065   */\n      0x20\n        /* \"--CODEGEN--\":9052:9066   */\n      add\n      swap1\n        /* \"--CODEGEN--\":8979:9072   */\n      jump\n        /* \"--CODEGEN--\":9080:9200   */\n    tag_250:\n        /* \"--CODEGEN--\":9163:9194   */\n      tag_251\n        /* \"--CODEGEN--\":9188:9193   */\n      dup2\n        /* \"--CODEGEN--\":9163:9194   */\n      jump(tag_252)\n    tag_251:\n        /* \"--CODEGEN--\":9158:9161   */\n      dup3\n        /* \"--CODEGEN--\":9151:9195   */\n      mstore\n        /* \"--CODEGEN--\":9145:9200   */\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":9290:10067   */\n    tag_254:\n      0x00\n        /* \"--CODEGEN--\":9469:9543   */\n      tag_255\n        /* \"--CODEGEN--\":9537:9542   */\n      dup3\n        /* \"--CODEGEN--\":9469:9543   */\n      jump(tag_256)\n    tag_255:\n        /* \"--CODEGEN--\":9556:9656   */\n      tag_257\n        /* \"--CODEGEN--\":9649:9655   */\n      dup2\n        /* \"--CODEGEN--\":9644:9647   */\n      dup6\n        /* \"--CODEGEN--\":9556:9656   */\n      jump(tag_258)\n    tag_257:\n        /* \"--CODEGEN--\":9549:9656   */\n      swap4\n      pop\n        /* \"--CODEGEN--\":9676:9752   */\n      tag_259\n        /* \"--CODEGEN--\":9746:9751   */\n      dup4\n        /* \"--CODEGEN--\":9676:9752   */\n      jump(tag_260)\n    tag_259:\n        /* \"--CODEGEN--\":9773:9774   */\n      0x00\n        /* \"--CODEGEN--\":9758:10045   */\n    tag_261:\n        /* \"--CODEGEN--\":9783:9789   */\n      dup3\n        /* \"--CODEGEN--\":9780:9781   */\n      dup2\n        /* \"--CODEGEN--\":9777:9790   */\n      lt\n        /* \"--CODEGEN--\":9758:10045   */\n      iszero\n      tag_263\n      jumpi\n        /* \"--CODEGEN--\":9830:9941   */\n      tag_264\n        /* \"--CODEGEN--\":9937:9940   */\n      dup7\n        /* \"--CODEGEN--\":9928:9934   */\n      dup4\n        /* \"--CODEGEN--\":9922:9935   */\n      mload\n        /* \"--CODEGEN--\":9830:9941   */\n      jump(tag_242)\n    tag_264:\n        /* \"--CODEGEN--\":9823:9941   */\n      swap6\n      pop\n        /* \"--CODEGEN--\":9958:10038   */\n      tag_265\n        /* \"--CODEGEN--\":10031:10037   */\n      dup3\n        /* \"--CODEGEN--\":9958:10038   */\n      jump(tag_260)\n    tag_265:\n        /* \"--CODEGEN--\":9948:10038   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":9805:9806   */\n      0x01\n        /* \"--CODEGEN--\":9798:9807   */\n      add\n        /* \"--CODEGEN--\":9758:10045   */\n      jump(tag_261)\n    tag_263:\n      pop\n        /* \"--CODEGEN--\":10058:10061   */\n      swap4\n      swap5\n        /* \"--CODEGEN--\":9448:10067   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":10108:10699   */\n    tag_268:\n        /* \"--CODEGEN--\":10241:10293   */\n      tag_269\n        /* \"--CODEGEN--\":10287:10292   */\n      dup2\n        /* \"--CODEGEN--\":10241:10293   */\n      jump(tag_270)\n    tag_269:\n        /* \"--CODEGEN--\":10306:10390   */\n      tag_271\n        /* \"--CODEGEN--\":10383:10389   */\n      dup2\n        /* \"--CODEGEN--\":10378:10381   */\n      dup5\n        /* \"--CODEGEN--\":10306:10390   */\n      jump(tag_272)\n    tag_271:\n        /* \"--CODEGEN--\":10299:10390   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":10410:10464   */\n      tag_273\n        /* \"--CODEGEN--\":10458:10463   */\n      dup3\n        /* \"--CODEGEN--\":10410:10464   */\n      jump(tag_274)\n    tag_273:\n        /* \"--CODEGEN--\":10485:10486   */\n      0x00\n        /* \"--CODEGEN--\":10470:10687   */\n    tag_275:\n        /* \"--CODEGEN--\":10495:10501   */\n      dup3\n        /* \"--CODEGEN--\":10492:10493   */\n      dup2\n        /* \"--CODEGEN--\":10489:10502   */\n      lt\n        /* \"--CODEGEN--\":10470:10687   */\n      iszero\n      tag_277\n      jumpi\n        /* \"--CODEGEN--\":10542:10605   */\n      tag_278\n        /* \"--CODEGEN--\":10601:10604   */\n      dup6\n        /* \"--CODEGEN--\":10592:10598   */\n      dup4\n        /* \"--CODEGEN--\":10586:10599   */\n      mload\n        /* \"--CODEGEN--\":10542:10605   */\n      jump(tag_246)\n    tag_278:\n        /* \"--CODEGEN--\":10535:10605   */\n      swap5\n      pop\n        /* \"--CODEGEN--\":10622:10680   */\n      tag_279\n        /* \"--CODEGEN--\":10673:10679   */\n      dup3\n        /* \"--CODEGEN--\":10622:10680   */\n      jump(tag_260)\n    tag_279:\n        /* \"--CODEGEN--\":10612:10680   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":10517:10518   */\n      0x01\n        /* \"--CODEGEN--\":10510:10519   */\n      add\n        /* \"--CODEGEN--\":10470:10687   */\n      jump(tag_275)\n    tag_277:\n        /* \"--CODEGEN--\":10474:10488   */\n      pop\n        /* \"--CODEGEN--\":10220:10699   */\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":10740:11331   */\n    tag_282:\n        /* \"--CODEGEN--\":10873:10925   */\n      tag_283\n        /* \"--CODEGEN--\":10919:10924   */\n      dup2\n        /* \"--CODEGEN--\":10873:10925   */\n      jump(tag_284)\n    tag_283:\n        /* \"--CODEGEN--\":10938:11022   */\n      tag_285\n        /* \"--CODEGEN--\":11015:11021   */\n      dup2\n        /* \"--CODEGEN--\":11010:11013   */\n      dup5\n        /* \"--CODEGEN--\":10938:11022   */\n      jump(tag_272)\n    tag_285:\n        /* \"--CODEGEN--\":10931:11022   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":11042:11096   */\n      tag_287\n        /* \"--CODEGEN--\":11090:11095   */\n      dup3\n        /* \"--CODEGEN--\":11042:11096   */\n      jump(tag_274)\n    tag_287:\n        /* \"--CODEGEN--\":11117:11118   */\n      0x00\n        /* \"--CODEGEN--\":11102:11319   */\n    tag_289:\n        /* \"--CODEGEN--\":11127:11133   */\n      dup3\n        /* \"--CODEGEN--\":11124:11125   */\n      dup2\n        /* \"--CODEGEN--\":11121:11134   */\n      lt\n        /* \"--CODEGEN--\":11102:11319   */\n      iszero\n      tag_277\n      jumpi\n        /* \"--CODEGEN--\":11174:11237   */\n      tag_292\n        /* \"--CODEGEN--\":11233:11236   */\n      dup6\n        /* \"--CODEGEN--\":11224:11230   */\n      dup4\n        /* \"--CODEGEN--\":11218:11231   */\n      mload\n        /* \"--CODEGEN--\":11174:11237   */\n      jump(tag_246)\n    tag_292:\n        /* \"--CODEGEN--\":11167:11237   */\n      swap5\n      pop\n        /* \"--CODEGEN--\":11254:11312   */\n      tag_293\n        /* \"--CODEGEN--\":11305:11311   */\n      dup3\n        /* \"--CODEGEN--\":11254:11312   */\n      jump(tag_260)\n    tag_293:\n        /* \"--CODEGEN--\":11244:11312   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":11149:11150   */\n      0x01\n        /* \"--CODEGEN--\":11142:11151   */\n      add\n        /* \"--CODEGEN--\":11102:11319   */\n      jump(tag_289)\n        /* \"--CODEGEN--\":11339:11450   */\n    tag_296:\n        /* \"--CODEGEN--\":11416:11444   */\n      tag_251\n        /* \"--CODEGEN--\":11438:11443   */\n      dup2\n        /* \"--CODEGEN--\":11416:11444   */\n      jump(tag_298)\n        /* \"--CODEGEN--\":11458:11923   */\n    tag_300:\n      0x00\n        /* \"--CODEGEN--\":11618:11685   */\n      tag_301\n        /* \"--CODEGEN--\":11682:11684   */\n      0x2c\n        /* \"--CODEGEN--\":11677:11680   */\n      dup4\n        /* \"--CODEGEN--\":11618:11685   */\n      jump(tag_258)\n    tag_301:\n        /* \"--CODEGEN--\":11718:11784   */\n      0x426f746820706c6179657273206861766520746f2068617665207069636b6564\n        /* \"--CODEGEN--\":11698:11785   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":11819:11885   */\n      0x2074686569722063617264730000000000000000000000000000000000000000\n        /* \"--CODEGEN--\":11814:11816   */\n      0x20\n        /* \"--CODEGEN--\":11805:11817   */\n      dup3\n      add\n        /* \"--CODEGEN--\":11798:11886   */\n      mstore\n        /* \"--CODEGEN--\":11914:11916   */\n      0x40\n        /* \"--CODEGEN--\":11905:11917   */\n      add\n      swap3\n        /* \"--CODEGEN--\":11604:11923   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":11932:12397   */\n    tag_304:\n      0x00\n        /* \"--CODEGEN--\":12092:12159   */\n      tag_305\n        /* \"--CODEGEN--\":12156:12158   */\n      0x25\n        /* \"--CODEGEN--\":12151:12154   */\n      dup4\n        /* \"--CODEGEN--\":12092:12159   */\n      jump(tag_258)\n    tag_305:\n        /* \"--CODEGEN--\":12192:12258   */\n      0x506c617965722068617320616c7265616479207069636b656420746865697220\n        /* \"--CODEGEN--\":12172:12259   */\n      dup2\n      mstore\n      mul(0x6361726473, shl(0xd8, 0x01))\n        /* \"--CODEGEN--\":12288:12290   */\n      0x20\n        /* \"--CODEGEN--\":12279:12291   */\n      dup3\n      add\n        /* \"--CODEGEN--\":12272:12360   */\n      mstore\n        /* \"--CODEGEN--\":12388:12390   */\n      0x40\n        /* \"--CODEGEN--\":12379:12391   */\n      add\n      swap3\n        /* \"--CODEGEN--\":12078:12397   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":12406:12871   */\n    tag_307:\n      0x00\n        /* \"--CODEGEN--\":12566:12633   */\n      tag_308\n        /* \"--CODEGEN--\":12630:12632   */\n      0x28\n        /* \"--CODEGEN--\":12625:12628   */\n      dup4\n        /* \"--CODEGEN--\":12566:12633   */\n      jump(tag_258)\n    tag_308:\n        /* \"--CODEGEN--\":12666:12732   */\n      0x5472616e73616374696f6e2073656e646572206d75737420626520706c617965\n        /* \"--CODEGEN--\":12646:12733   */\n      dup2\n      mstore\n      mul(0x3910189037b91019, shl(0xc1, 0x01))\n        /* \"--CODEGEN--\":12762:12764   */\n      0x20\n        /* \"--CODEGEN--\":12753:12765   */\n      dup3\n      add\n        /* \"--CODEGEN--\":12746:12834   */\n      mstore\n        /* \"--CODEGEN--\":12862:12864   */\n      0x40\n        /* \"--CODEGEN--\":12853:12865   */\n      add\n      swap3\n        /* \"--CODEGEN--\":12552:12871   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":12956:14048   */\n    tag_310:\n        /* \"--CODEGEN--\":13172:13194   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":13105:13109   */\n      0xc0\n        /* \"--CODEGEN--\":13096:13110   */\n      dup4\n      add\n      swap1\n        /* \"--CODEGEN--\":13200:13261   */\n      tag_311\n        /* \"--CODEGEN--\":13100:13103   */\n      dup5\n        /* \"--CODEGEN--\":13172:13194   */\n      dup3\n        /* \"--CODEGEN--\":13200:13261   */\n      jump(tag_248)\n    tag_311:\n        /* \"--CODEGEN--\":13125:13267   */\n      pop\n        /* \"--CODEGEN--\":13341:13345   */\n      0x20\n        /* \"--CODEGEN--\":13334:13339   */\n      dup3\n        /* \"--CODEGEN--\":13330:13346   */\n      add\n        /* \"--CODEGEN--\":13324:13347   */\n      mload\n        /* \"--CODEGEN--\":13353:13413   */\n      tag_312\n        /* \"--CODEGEN--\":13407:13411   */\n      0x20\n        /* \"--CODEGEN--\":13402:13405   */\n      dup6\n        /* \"--CODEGEN--\":13398:13412   */\n      add\n        /* \"--CODEGEN--\":13385:13396   */\n      dup3\n        /* \"--CODEGEN--\":13353:13413   */\n      jump(tag_313)\n    tag_312:\n        /* \"--CODEGEN--\":13277:13419   */\n      pop\n        /* \"--CODEGEN--\":13494:13498   */\n      0x40\n        /* \"--CODEGEN--\":13487:13492   */\n      dup3\n        /* \"--CODEGEN--\":13483:13499   */\n      add\n        /* \"--CODEGEN--\":13477:13500   */\n      mload\n        /* \"--CODEGEN--\":13506:13566   */\n      tag_314\n        /* \"--CODEGEN--\":13560:13564   */\n      0x40\n        /* \"--CODEGEN--\":13555:13558   */\n      dup6\n        /* \"--CODEGEN--\":13551:13565   */\n      add\n        /* \"--CODEGEN--\":13538:13549   */\n      dup3\n        /* \"--CODEGEN--\":13506:13566   */\n      jump(tag_313)\n    tag_314:\n        /* \"--CODEGEN--\":13429:13572   */\n      pop\n        /* \"--CODEGEN--\":13644:13648   */\n      0x60\n        /* \"--CODEGEN--\":13637:13642   */\n      dup3\n        /* \"--CODEGEN--\":13633:13649   */\n      add\n        /* \"--CODEGEN--\":13627:13650   */\n      mload\n        /* \"--CODEGEN--\":13656:13716   */\n      tag_315\n        /* \"--CODEGEN--\":13710:13714   */\n      0x60\n        /* \"--CODEGEN--\":13705:13708   */\n      dup6\n        /* \"--CODEGEN--\":13701:13715   */\n      add\n        /* \"--CODEGEN--\":13688:13699   */\n      dup3\n        /* \"--CODEGEN--\":13656:13716   */\n      jump(tag_313)\n    tag_315:\n        /* \"--CODEGEN--\":13582:13722   */\n      pop\n        /* \"--CODEGEN--\":13796:13800   */\n      0x80\n        /* \"--CODEGEN--\":13789:13794   */\n      dup3\n        /* \"--CODEGEN--\":13785:13801   */\n      add\n        /* \"--CODEGEN--\":13779:13802   */\n      mload\n        /* \"--CODEGEN--\":13808:13868   */\n      tag_316\n        /* \"--CODEGEN--\":13862:13866   */\n      0x80\n        /* \"--CODEGEN--\":13857:13860   */\n      dup6\n        /* \"--CODEGEN--\":13853:13867   */\n      add\n        /* \"--CODEGEN--\":13840:13851   */\n      dup3\n        /* \"--CODEGEN--\":13808:13868   */\n      jump(tag_313)\n    tag_316:\n        /* \"--CODEGEN--\":13732:13874   */\n      pop\n        /* \"--CODEGEN--\":13955:13959   */\n      0xa0\n        /* \"--CODEGEN--\":13948:13953   */\n      dup3\n        /* \"--CODEGEN--\":13944:13960   */\n      add\n        /* \"--CODEGEN--\":13938:13961   */\n      mload\n        /* \"--CODEGEN--\":13967:14027   */\n      tag_317\n        /* \"--CODEGEN--\":14021:14025   */\n      0xa0\n        /* \"--CODEGEN--\":14016:14019   */\n      dup6\n        /* \"--CODEGEN--\":14012:14026   */\n      add\n        /* \"--CODEGEN--\":13999:14010   */\n      dup3\n        /* \"--CODEGEN--\":13967:14027   */\n      jump(tag_313)\n    tag_317:\n        /* \"--CODEGEN--\":13884:14033   */\n      pop\n        /* \"--CODEGEN--\":13078:14048   */\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":15294:15949   */\n    tag_326:\n        /* \"--CODEGEN--\":15523:15545   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":15451:15455   */\n      0x40\n        /* \"--CODEGEN--\":15558:15595   */\n      dup1\n      dup5\n      mstore\n        /* \"--CODEGEN--\":15294:15949   */\n      0x00\n      swap2\n        /* \"--CODEGEN--\":15442:15456   */\n      swap1\n      dup5\n      add\n      swap1\n        /* \"--CODEGEN--\":15610:15756   */\n      tag_327\n        /* \"--CODEGEN--\":15442:15456   */\n      dup3\n        /* \"--CODEGEN--\":15523:15545   */\n      dup3\n        /* \"--CODEGEN--\":15610:15756   */\n      jump(tag_254)\n    tag_327:\n        /* \"--CODEGEN--\":15602:15756   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":15471:15768   */\n      pop\n        /* \"--CODEGEN--\":15847:15851   */\n      0x20\n        /* \"--CODEGEN--\":15840:15845   */\n      dup4\n        /* \"--CODEGEN--\":15836:15852   */\n      add\n        /* \"--CODEGEN--\":15830:15853   */\n      mload\n        /* \"--CODEGEN--\":15859:15917   */\n      tag_328\n        /* \"--CODEGEN--\":15911:15915   */\n      0x20\n        /* \"--CODEGEN--\":15906:15909   */\n      dup7\n        /* \"--CODEGEN--\":15902:15916   */\n      add\n        /* \"--CODEGEN--\":15889:15900   */\n      dup3\n        /* \"--CODEGEN--\":15859:15917   */\n      jump(tag_329)\n    tag_328:\n      pop\n        /* \"--CODEGEN--\":15940:15944   */\n      swap4\n        /* \"--CODEGEN--\":15424:15949   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":15956:16063   */\n    tag_313:\n        /* \"--CODEGEN--\":16027:16057   */\n      tag_251\n        /* \"--CODEGEN--\":16051:16056   */\n      dup2\n        /* \"--CODEGEN--\":16027:16057   */\n      jump(tag_332)\n        /* \"--CODEGEN--\":16194:16304   */\n    tag_248:\n        /* \"--CODEGEN--\":16267:16298   */\n      tag_251\n        /* \"--CODEGEN--\":16292:16297   */\n      dup2\n        /* \"--CODEGEN--\":16267:16298   */\n      jump(tag_274)\n        /* \"--CODEGEN--\":16438:16542   */\n    tag_329:\n        /* \"--CODEGEN--\":16507:16536   */\n      tag_251\n        /* \"--CODEGEN--\":16530:16535   */\n      dup2\n        /* \"--CODEGEN--\":16507:16536   */\n      jump(tag_344)\n        /* \"--CODEGEN--\":16670:16883   */\n    tag_17:\n        /* \"--CODEGEN--\":16788:16790   */\n      0x20\n        /* \"--CODEGEN--\":16773:16791   */\n      dup2\n      add\n        /* \"--CODEGEN--\":16802:16873   */\n      tag_349\n        /* \"--CODEGEN--\":16777:16786   */\n      dup3\n        /* \"--CODEGEN--\":16846:16852   */\n      dup5\n        /* \"--CODEGEN--\":16802:16873   */\n      jump(tag_250)\n    tag_349:\n        /* \"--CODEGEN--\":16759:16883   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":16890:17400   */\n    tag_84:\n        /* \"--CODEGEN--\":17128:17131   */\n      0x0100\n        /* \"--CODEGEN--\":17113:17132   */\n      dup2\n      add\n        /* \"--CODEGEN--\":17143:17260   */\n      tag_351\n        /* \"--CODEGEN--\":17117:17126   */\n      dup3\n        /* \"--CODEGEN--\":17233:17239   */\n      dup6\n        /* \"--CODEGEN--\":17143:17260   */\n      jump(tag_282)\n    tag_351:\n        /* \"--CODEGEN--\":17271:17390   */\n      tag_140\n        /* \"--CODEGEN--\":17385:17388   */\n      0xa0\n        /* \"--CODEGEN--\":17374:17383   */\n      dup4\n        /* \"--CODEGEN--\":17370:17389   */\n      add\n        /* \"--CODEGEN--\":17361:17367   */\n      dup5\n        /* \"--CODEGEN--\":17271:17390   */\n      jump(tag_268)\n        /* \"--CODEGEN--\":17407:17608   */\n    tag_48:\n        /* \"--CODEGEN--\":17519:17521   */\n      0x20\n        /* \"--CODEGEN--\":17504:17522   */\n      dup2\n      add\n        /* \"--CODEGEN--\":17533:17598   */\n      tag_349\n        /* \"--CODEGEN--\":17508:17517   */\n      dup3\n        /* \"--CODEGEN--\":17571:17577   */\n      dup5\n        /* \"--CODEGEN--\":17533:17598   */\n      jump(tag_296)\n        /* \"--CODEGEN--\":17615:18022   */\n    tag_122:\n        /* \"--CODEGEN--\":17806:17808   */\n      0x20\n        /* \"--CODEGEN--\":17820:17867   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":17791:17809   */\n      dup2\n      add\n        /* \"--CODEGEN--\":17881:18012   */\n      tag_349\n        /* \"--CODEGEN--\":17791:17809   */\n      dup2\n        /* \"--CODEGEN--\":17881:18012   */\n      jump(tag_300)\n        /* \"--CODEGEN--\":18029:18436   */\n    tag_62:\n        /* \"--CODEGEN--\":18220:18222   */\n      0x20\n        /* \"--CODEGEN--\":18234:18281   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":18205:18223   */\n      dup2\n      add\n        /* \"--CODEGEN--\":18295:18426   */\n      tag_349\n        /* \"--CODEGEN--\":18205:18223   */\n      dup2\n        /* \"--CODEGEN--\":18295:18426   */\n      jump(tag_304)\n        /* \"--CODEGEN--\":18443:18850   */\n    tag_70:\n        /* \"--CODEGEN--\":18634:18636   */\n      0x20\n        /* \"--CODEGEN--\":18648:18695   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":18619:18637   */\n      dup2\n      add\n        /* \"--CODEGEN--\":18709:18840   */\n      tag_349\n        /* \"--CODEGEN--\":18619:18637   */\n      dup2\n        /* \"--CODEGEN--\":18709:18840   */\n      jump(tag_307)\n        /* \"--CODEGEN--\":18857:19183   */\n    tag_57:\n        /* \"--CODEGEN--\":19031:19034   */\n      0xc0\n        /* \"--CODEGEN--\":19016:19035   */\n      dup2\n      add\n        /* \"--CODEGEN--\":19046:19173   */\n      tag_349\n        /* \"--CODEGEN--\":19020:19029   */\n      dup3\n        /* \"--CODEGEN--\":19146:19152   */\n      dup5\n        /* \"--CODEGEN--\":19046:19173   */\n      jump(tag_310)\n        /* \"--CODEGEN--\":19190:19563   */\n    tag_41:\n        /* \"--CODEGEN--\":19364:19366   */\n      0x20\n        /* \"--CODEGEN--\":19378:19425   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":19349:19367   */\n      dup2\n      add\n        /* \"--CODEGEN--\":19439:19553   */\n      tag_140\n        /* \"--CODEGEN--\":19349:19367   */\n      dup2\n        /* \"--CODEGEN--\":19539:19545   */\n      dup5\n        /* \"--CODEGEN--\":19439:19553   */\n      jump(tag_326)\n        /* \"--CODEGEN--\":19570:19779   */\n    tag_33:\n        /* \"--CODEGEN--\":19686:19688   */\n      0x20\n        /* \"--CODEGEN--\":19671:19689   */\n      dup2\n      add\n        /* \"--CODEGEN--\":19700:19769   */\n      tag_349\n        /* \"--CODEGEN--\":19675:19684   */\n      dup3\n        /* \"--CODEGEN--\":19742:19748   */\n      dup5\n        /* \"--CODEGEN--\":19700:19769   */\n      jump(tag_313)\n        /* \"--CODEGEN--\":19786:19999   */\n    tag_94:\n        /* \"--CODEGEN--\":19904:19906   */\n      0x20\n        /* \"--CODEGEN--\":19889:19907   */\n      dup2\n      add\n        /* \"--CODEGEN--\":19918:19989   */\n      tag_349\n        /* \"--CODEGEN--\":19893:19902   */\n      dup3\n        /* \"--CODEGEN--\":19962:19968   */\n      dup5\n        /* \"--CODEGEN--\":19918:19989   */\n      jump(tag_248)\n        /* \"--CODEGEN--\":20006:20211   */\n    tag_23:\n        /* \"--CODEGEN--\":20120:20122   */\n      0x20\n        /* \"--CODEGEN--\":20105:20123   */\n      dup2\n      add\n        /* \"--CODEGEN--\":20134:20201   */\n      tag_349\n        /* \"--CODEGEN--\":20109:20118   */\n      dup3\n        /* \"--CODEGEN--\":20174:20180   */\n      dup5\n        /* \"--CODEGEN--\":20134:20201   */\n      jump(tag_329)\n        /* \"--CODEGEN--\":20218:20474   */\n    tag_148:\n        /* \"--CODEGEN--\":20280:20282   */\n      0x40\n        /* \"--CODEGEN--\":20274:20283   */\n      mload\n        /* \"--CODEGEN--\":20306:20323   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":20381:20399   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":20366:20400   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":20402:20424   */\n      dup3\n      dup3\n      lt\n        /* \"--CODEGEN--\":20363:20425   */\n      or\n        /* \"--CODEGEN--\":20360:20362   */\n      iszero\n      tag_372\n      jumpi\n        /* \"--CODEGEN--\":20438:20439   */\n      0x00\n        /* \"--CODEGEN--\":20435:20436   */\n      dup1\n        /* \"--CODEGEN--\":20428:20440   */\n      revert\n        /* \"--CODEGEN--\":20360:20362   */\n    tag_372:\n        /* \"--CODEGEN--\":20454:20456   */\n      0x40\n        /* \"--CODEGEN--\":20447:20469   */\n      mstore\n        /* \"--CODEGEN--\":20258:20474   */\n      swap2\n      swap1\n      pop\n      jump\n        /* \"--CODEGEN--\":20481:20763   */\n    tag_147:\n      0x00\n        /* \"--CODEGEN--\":20664:20682   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":20656:20662   */\n      dup3\n        /* \"--CODEGEN--\":20653:20683   */\n      gt\n        /* \"--CODEGEN--\":20650:20652   */\n      iszero\n      tag_374\n      jumpi\n        /* \"--CODEGEN--\":20696:20697   */\n      0x00\n        /* \"--CODEGEN--\":20693:20694   */\n      dup1\n        /* \"--CODEGEN--\":20686:20698   */\n      revert\n        /* \"--CODEGEN--\":20650:20652   */\n    tag_374:\n      pop\n        /* \"--CODEGEN--\":20725:20729   */\n      0x20\n        /* \"--CODEGEN--\":20713:20730   */\n      swap1\n      dup2\n      mul\n        /* \"--CODEGEN--\":20743:20758   */\n      add\n      swap1\n        /* \"--CODEGEN--\":20587:20763   */\n      jump\n        /* \"--CODEGEN--\":20770:21003   */\n    tag_160:\n      0x00\n        /* \"--CODEGEN--\":20927:20945   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":20919:20925   */\n      dup3\n        /* \"--CODEGEN--\":20916:20946   */\n      gt\n        /* \"--CODEGEN--\":20913:20915   */\n      iszero\n      tag_376\n      jumpi\n        /* \"--CODEGEN--\":20959:20960   */\n      0x00\n        /* \"--CODEGEN--\":20956:20957   */\n      dup1\n        /* \"--CODEGEN--\":20949:20961   */\n      revert\n        /* \"--CODEGEN--\":20913:20915   */\n    tag_376:\n      pop\n        /* \"--CODEGEN--\":20988:20992   */\n      0x20\n        /* \"--CODEGEN--\":20976:20993   */\n      mul\n      swap1\n        /* \"--CODEGEN--\":20850:21003   */\n      jump\n        /* \"--CODEGEN--\":21010:21265   */\n    tag_172:\n      0x00\n        /* \"--CODEGEN--\":21150:21168   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":21142:21148   */\n      dup3\n        /* \"--CODEGEN--\":21139:21169   */\n      gt\n        /* \"--CODEGEN--\":21136:21138   */\n      iszero\n      tag_378\n      jumpi\n        /* \"--CODEGEN--\":21182:21183   */\n      0x00\n        /* \"--CODEGEN--\":21179:21180   */\n      dup1\n        /* \"--CODEGEN--\":21172:21184   */\n      revert\n        /* \"--CODEGEN--\":21136:21138   */\n    tag_378:\n      pop\n        /* \"--CODEGEN--\":21255:21259   */\n      0x20\n        /* \"--CODEGEN--\":21226:21230   */\n      0x1f\n        /* \"--CODEGEN--\":21203:21220   */\n      swap2\n      swap1\n      swap2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":21199:21232   */\n      and\n        /* \"--CODEGEN--\":21245:21260   */\n      add\n      swap1\n        /* \"--CODEGEN--\":21073:21265   */\n      jump\n        /* \"--CODEGEN--\":21274:21415   */\n    tag_260:\n        /* \"--CODEGEN--\":21403:21407   */\n      0x20\n        /* \"--CODEGEN--\":21391:21408   */\n      add\n      swap1\n        /* \"--CODEGEN--\":21372:21415   */\n      jump\n        /* \"--CODEGEN--\":21426:21534   */\n    tag_274:\n        /* \"--CODEGEN--\":21521:21527   */\n      swap1\n        /* \"--CODEGEN--\":21502:21534   */\n      jump\n        /* \"--CODEGEN--\":21662:21789   */\n    tag_256:\n        /* \"--CODEGEN--\":21772:21784   */\n      mload\n      swap1\n        /* \"--CODEGEN--\":21756:21789   */\n      jump\n        /* \"--CODEGEN--\":21796:21892   */\n    tag_270:\n      pop\n        /* \"--CODEGEN--\":21884:21887   */\n      0x03\n      swap1\n        /* \"--CODEGEN--\":21868:21892   */\n      jump\n        /* \"--CODEGEN--\":21899:21995   */\n    tag_284:\n      pop\n        /* \"--CODEGEN--\":21987:21990   */\n      0x05\n      swap1\n        /* \"--CODEGEN--\":21971:21995   */\n      jump\n        /* \"--CODEGEN--\":22412:22604   */\n    tag_258:\n        /* \"--CODEGEN--\":22544:22563   */\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":22593:22597   */\n      0x20\n        /* \"--CODEGEN--\":22584:22598   */\n      add\n      swap1\n        /* \"--CODEGEN--\":22537:22604   */\n      jump\n        /* \"--CODEGEN--\":22613:22753   */\n    tag_272:\n        /* \"--CODEGEN--\":22744:22747   */\n      swap2\n        /* \"--CODEGEN--\":22722:22753   */\n      swap1\n      pop\n      jump\n        /* \"--CODEGEN--\":23082:23187   */\n    tag_252:\n      0x00\n        /* \"--CODEGEN--\":23151:23182   */\n      tag_349\n        /* \"--CODEGEN--\":23176:23181   */\n      dup3\n        /* \"--CODEGEN--\":23151:23182   */\n      jump(tag_394)\n        /* \"--CODEGEN--\":23194:23286   */\n    tag_298:\n        /* \"--CODEGEN--\":23267:23280   */\n      iszero\n        /* \"--CODEGEN--\":23260:23281   */\n      iszero\n      swap1\n        /* \"--CODEGEN--\":23243:23286   */\n      jump\n        /* \"--CODEGEN--\":23293:23384   */\n    tag_332:\n        /* \"--CODEGEN--\":23372:23378   */\n      0xffff\n        /* \"--CODEGEN--\":23361:23379   */\n      and\n      swap1\n        /* \"--CODEGEN--\":23344:23384   */\n      jump\n        /* \"--CODEGEN--\":23391:23519   */\n    tag_394:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":23460:23514   */\n      and\n      swap1\n        /* \"--CODEGEN--\":23443:23519   */\n      jump\n        /* \"--CODEGEN--\":23612:23700   */\n    tag_344:\n        /* \"--CODEGEN--\":23690:23694   */\n      0xff\n        /* \"--CODEGEN--\":23679:23695   */\n      and\n      swap1\n        /* \"--CODEGEN--\":23662:23700   */\n      jump\n        /* \"--CODEGEN--\":24139:24407   */\n    tag_175:\n        /* \"--CODEGEN--\":24204:24205   */\n      0x00\n        /* \"--CODEGEN--\":24211:24312   */\n    tag_407:\n        /* \"--CODEGEN--\":24225:24231   */\n      dup4\n        /* \"--CODEGEN--\":24222:24223   */\n      dup2\n        /* \"--CODEGEN--\":24219:24232   */\n      lt\n        /* \"--CODEGEN--\":24211:24312   */\n      iszero\n      tag_409\n      jumpi\n        /* \"--CODEGEN--\":24292:24303   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":24286:24304   */\n      mload\n        /* \"--CODEGEN--\":24273:24284   */\n      dup4\n      dup3\n      add\n        /* \"--CODEGEN--\":24266:24305   */\n      mstore\n        /* \"--CODEGEN--\":24247:24249   */\n      0x20\n        /* \"--CODEGEN--\":24240:24250   */\n      add\n        /* \"--CODEGEN--\":24211:24312   */\n      jump(tag_407)\n    tag_409:\n        /* \"--CODEGEN--\":24327:24333   */\n      dup4\n        /* \"--CODEGEN--\":24324:24325   */\n      dup2\n        /* \"--CODEGEN--\":24321:24334   */\n      gt\n        /* \"--CODEGEN--\":24318:24320   */\n      iszero\n      tag_317\n      jumpi\n      pop\n      pop\n        /* \"--CODEGEN--\":24392:24393   */\n      0x00\n        /* \"--CODEGEN--\":24374:24390   */\n      swap2\n      add\n        /* \"--CODEGEN--\":24367:24394   */\n      mstore\n        /* \"--CODEGEN--\":24188:24407   */\n      jump\n\n    auxdata: 0xa265627a7a72305820a74f27e51d8a0ef9fafcefd231e0381c32a2e08e7ca4601dd4d188099d9dfcb96c6578706572696d656e74616cf50037\n}\n", "bytecode": {"linkReferences": {}, "object": "60806040523480156200001157600080fd5b506040516060806200154683398101806040526200003391908101906200008b565b600180546001600160a01b039485166001600160a01b031991821617909155600280549385169382169390931790925560008054919093169116179055620000fe565b6000620000848251620000df565b9392505050565b600080600060608486031215620000a157600080fd5b6000620000af868662000076565b9350506020620000c28682870162000076565b9250506040620000d58682870162000076565b9150509250925092565b6000620000ec82620000f2565b92915050565b6001600160a01b031690565b611438806200010e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c0d3544911610066578063c0d354491461011e578063d30895e41461013e578063d7eb798c14610146578063e4b6c9921461015b578063fe145fbd1461016e5761009e565b806306880689146100a35780632af1e2f8146100c157806348373963146100e15780634ed61446146100f657806359a5f12d14610116575b600080fd5b6100ab61018e565b6040516100b8919061123d565b60405180910390f35b6100d46100cf366004610ea5565b6101a2565b6040516100b891906112e6565b6100f46100ef366004610f00565b6101c3565b005b610109610104366004610ecb565b61034a565b6040516100b891906112ca565b6100ab610424565b61013161012c366004610ea5565b610433565b6040516100b891906112b9565b6100ab610516565b61014e610525565b6040516100b8919061126d565b6100d4610169366004610ea5565b61052e565b61018161017c366004610ea5565b610546565b6040516100b891906112ab565b60045461010090046001600160a01b031681565b6001600160a01b031660009081526003602052604090206001015460ff1690565b3360009081526003602052604090208054156101fd57604051600160e51b62461bcd0281526004016101f49061128b565b60405180910390fd5b6001546001600160a01b0316331415610243576002546001600160a01b03166000908152600360205260409020541561023e576004805460ff191660011790555b6102a3565b6002546001600160a01b0316331415610288576001546001600160a01b03166000908152600360205260409020541561023e576004805460ff191660011790556102a3565b604051600160e51b62461bcd0281526004016101f49061129b565b6102ab610990565b5060408051606081018252835181526020808501519082015283820151918101919091526102e1828460005b60200201516105f3565b6102ed828460016102d7565b6102f9828460026102d7565b7f48ca02657a8acb3a062f53bf24ca611bb25d8108f29f5e3c5e468080a44dca5d838260405161032a929190611251565b60405180910390a160045460ff161561034557610345610783565b505050565b600080805b835181101561041d576000805485516001600160a01b0390911690639188d3129087908590811061037c57fe5b6020026020010151600001516040518263ffffffff1660e01b81526004016103a491906112d8565b600060405180830381600087803b1580156103be57600080fd5b505af11580156103d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fa9190810190610f1e565b60a0015190508261ffff168161ffff161115610414578092505b5060010161034f565b5092915050565b6002546001600160a01b031681565b61043b6109ae565b6001600160a01b0382166000908152600360209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b828210156104f95760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352640100000000810483166060850152600160301b810483166080850152600160401b900490911660a08301529083529092019101610479565b505050908252506001919091015460ff1660209091015292915050565b6001546001600160a01b031681565b60045460ff1681565b60036020526000908152604090206001015460ff1681565b61054e6109c6565b6001600160a01b03821660009081526003602052604090206001810154815460ff90911691908290811061057e57fe5b60009182526020918290206040805160c0810182526002909302909101805483526001015461ffff80821694840194909452620100008104841691830191909152640100000000810483166060830152600160301b810483166080830152600160401b900490911660a0820152915050919050565b6105fb6109fb565b600054604051600160e11b6348c469890281526001600160a01b0390911690639188d3129061062e9085906004016112d8565b600060405180830381600087803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106849190810190610f1e565b6040805160c080820183529481528183015161ffff90811660208084019182526060808701518416958501958652608080880151851691860191825298870151841698850198895260e090960151831660a08501908152895460018181018c5560009b8c5292909a2094516002909a0290940198895590519701805493519451965192518216600160401b0269ffff000000000000000019938316600160301b0267ffff000000000000199884166401000000000265ffff0000000019978516620100000263ffff0000199b90951661ffff19909716969096179990991692909217949094169290921794909416949094179290921692909217905550565b60045460ff166107a857604051600160e51b62461bcd0281526004016101f49061127b565b6001546001600160a01b03166000908152600360209081526040808320805482518185028101850190935280835261086893859084015b8282101561085f5760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352640100000000810483166060850152600160301b810483166080850152600160401b900490911660a083015290835290920191016107df565b5050505061034a565b6002546001600160a01b031660009081526003602090815260408083208054825181850281018501909352808352949550929361092393919285908401821561085f5760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352640100000000810483166060850152600160301b810483166080850152600160401b900490911660a083015290835290920191016107df565b90508061ffff168261ffff161061096257600154600480546001600160a01b0390921661010002610100600160a81b031990921691909117905561098c565b600254600480546001600160a01b0390921661010002610100600160a81b03199092169190911790555b5050565b60405180606001604052806003906020820280388339509192915050565b60408051808201909152606081526000602082015290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60405180610260016040528060608152602001610a16610a46565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b60405180610180016040528060608152602001610a61610a7b565b8152602001610a6e610a7b565b8152600060209091015290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6000610ab582356113a9565b9392505050565b600082601f830112610acd57600080fd5b8135610ae0610adb8261131b565b6112f4565b915081818352602084019350602081019050838560c0840282011115610b0557600080fd5b60005b83811015610b335781610b1b8882610dea565b84525060209092019160c09190910190600101610b08565b5050505092915050565b600082601f830112610b4e57600080fd5b6005610b5c610adb8261133c565b91508183856020840282011115610b7257600080fd5b60005b83811015610b335781610b888882610e99565b8452506020928301929190910190600101610b75565b600082601f830112610baf57600080fd5b8151610bbd610adb8261135a565b91508082526020830160208301858383011115610bd957600080fd5b610be48382846113d2565b50505092915050565b60006101808284031215610c0057600080fd5b610c0a60806112f4565b825190915067ffffffffffffffff811115610c2457600080fd5b610c3084828501610b9e565b8252506020610c4184848301610c76565b60208301525060c0610c5584828501610c76565b604083015250610160610c6a84828501610e8d565b60608301525092915050565b600060a08284031215610c8857600080fd5b610c9260a06112f4565b90506000610ca08484610e8d565b8252506020610cb184848301610e8d565b6020830152506040610cc584828501610e8d565b6040830152506060610cd984828501610e8d565b6060830152506080610ced84828501610e8d565b60808301525092915050565b60006101008284031215610d0c57600080fd5b610d176101006112f4565b825190915067ffffffffffffffff811115610d3157600080fd5b610d3d84828501610b9e565b825250602082015167ffffffffffffffff811115610d5a57600080fd5b610d6684828501610bed565b6020830152506040610d7a84828501610e8d565b6040830152506060610d8e84828501610e8d565b6060830152506080610da284828501610e8d565b60808301525060a0610db684828501610e8d565b60a08301525060c0610dca84828501610e8d565b60c08301525060e0610dde84828501610e8d565b60e08301525092915050565b600060c08284031215610dfc57600080fd5b610e0660c06112f4565b90506000610e148484610e99565b8252506020610e2584848301610e81565b6020830152506040610e3984828501610e81565b6040830152506060610e4d84828501610e81565b6060830152506080610e6184828501610e81565b60808301525060a0610e7584828501610e81565b60a08301525092915050565b6000610ab582356113b9565b6000610ab582516113b9565b6000610ab58235611388565b600060208284031215610eb757600080fd5b6000610ec38484610aa9565b949350505050565b600060208284031215610edd57600080fd5b813567ffffffffffffffff811115610ef457600080fd5b610ec384828501610abc565b600060a08284031215610f1257600080fd5b6000610ec38484610b3d565b600060208284031215610f3057600080fd5b815167ffffffffffffffff811115610f4757600080fd5b610ec384828501610cf9565b6000610f5f8383611177565b505060c00190565b6000610f73838361122b565b505060200190565b610f84816113a9565b82525050565b6000610f958261138b565b610f9f818561139b565b9350610faa83611382565b60005b82811015610fd557610fc0868351610f53565b9550610fcb82611382565b9150600101610fad565b5093949350505050565b610fe88161138f565b610ff281846113a4565b9250610ffd82611388565b60005b8281101561102857611013858351610f67565b945061101e82611382565b9150600101611000565b5050505050565b61103881611395565b61104281846113a4565b925061104d82611388565b60005b8281101561102857611063858351610f67565b945061106e82611382565b9150600101611050565b610f84816113b4565b600061108e602c8361139b565b7f426f746820706c6179657273206861766520746f2068617665207069636b656481527f2074686569722063617264730000000000000000000000000000000000000000602082015260400192915050565b60006110ed60258361139b565b7f506c617965722068617320616c7265616479207069636b6564207468656972208152600160d81b64636172647302602082015260400192915050565b600061113760288361139b565b7f5472616e73616374696f6e2073656e646572206d75737420626520706c6179658152600160c11b673910189037b9101902602082015260400192915050565b805160c0830190611188848261122b565b50602082015161119b6020850182611222565b5060408201516111ae6040850182611222565b5060608201516111c16060850182611222565b5060808201516111d46080850182611222565b5060a08201516111e760a0850182611222565b50505050565b80516040808452600091908401906112058282610f8a565b915050602083015161121a6020860182611234565b509392505050565b610f84816113b9565b610f8481611388565b610f84816113cc565b6020810161124b8284610f7b565b92915050565b6101008101611260828561102f565b610ab560a0830184610fdf565b6020810161124b8284611078565b6020808252810161124b81611081565b6020808252810161124b816110e0565b6020808252810161124b8161112a565b60c0810161124b8284611177565b60208082528101610ab581846111ed565b6020810161124b8284611222565b6020810161124b828461122b565b6020810161124b8284611234565b60405181810167ffffffffffffffff8111828210171561131357600080fd5b604052919050565b600067ffffffffffffffff82111561133257600080fd5b5060209081020190565b600067ffffffffffffffff82111561135357600080fd5b5060200290565b600067ffffffffffffffff82111561137157600080fd5b506020601f91909101601f19160190565b60200190565b90565b5190565b50600390565b50600590565b90815260200190565b919050565b600061124b826113c0565b151590565b61ffff1690565b6001600160a01b031690565b60ff1690565b60005b838110156113ed5781810151838201526020016113d5565b838111156111e7575050600091015256fea265627a7a72305820a74f27e51d8a0ef9fafcefd231e0381c32a2e08e7ca4601dd4d188099d9dfcb96c6578706572696d656e74616cf50037", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x60 DUP1 PUSH3 0x1546 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x33 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x8B JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP4 DUP6 AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH3 0xFE JUMP JUMPDEST PUSH1 0x0 PUSH3 0x84 DUP3 MLOAD PUSH3 0xDF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0xA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xAF DUP7 DUP7 PUSH3 0x76 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0xC2 DUP7 DUP3 DUP8 ADD PUSH3 0x76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0xD5 DUP7 DUP3 DUP8 ADD PUSH3 0x76 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xEC DUP3 PUSH3 0xF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1438 DUP1 PUSH3 0x10E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC0D35449 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC0D35449 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0xD30895E4 EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xD7EB798C EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xE4B6C992 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xFE145FBD EQ PUSH2 0x16E JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x6880689 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x2AF1E2F8 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x48373963 EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x4ED61446 EQ PUSH2 0xF6 JUMPI DUP1 PUSH4 0x59A5F12D EQ PUSH2 0x116 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x18E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x123D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD4 PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x1A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x12E6 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0xF00 JUMP JUMPDEST PUSH2 0x1C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x109 PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0xECB JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH2 0xAB PUSH2 0x424 JUMP JUMPDEST PUSH2 0x131 PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x433 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0xAB PUSH2 0x516 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x525 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x126D JUMP JUMPDEST PUSH2 0xD4 PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x52E JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x12AB JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x1FD JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x128B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x243 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x23E JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x288 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x23E JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x129B JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x990 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP4 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD SWAP1 DUP3 ADD MSTORE DUP4 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x2E1 DUP3 DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x5F3 JUMP JUMPDEST PUSH2 0x2ED DUP3 DUP5 PUSH1 0x1 PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x2F9 DUP3 DUP5 PUSH1 0x2 PUSH2 0x2D7 JUMP JUMPDEST PUSH32 0x48CA02657A8ACB3A062F53BF24CA611BB25D8108F29F5E3C5E468080A44DCA5D DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x32A SWAP3 SWAP2 SWAP1 PUSH2 0x1251 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x345 JUMPI PUSH2 0x345 PUSH2 0x783 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x41D JUMPI PUSH1 0x0 DUP1 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x37C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP2 SWAP1 PUSH2 0x12D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3FA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF1E JUMP JUMPDEST PUSH1 0xA0 ADD MLOAD SWAP1 POP DUP3 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x414 JUMPI DUP1 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x34F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x43B PUSH2 0x9AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP2 SLOAD PUSH1 0x60 SWAP5 DUP2 MUL DUP3 ADD DUP6 ADD DUP5 MSTORE SWAP3 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP5 SWAP2 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 DUP6 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x4F9 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x479 JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x54E PUSH2 0x9C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0x57E JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH3 0x10000 DUP2 DIV DUP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5FB PUSH2 0x9FB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 PUSH2 0x62E SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x12D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x65C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x684 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF1E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE SWAP5 DUP2 MSTORE DUP2 DUP4 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP5 AND SWAP6 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP1 DUP9 ADD MLOAD DUP6 AND SWAP2 DUP7 ADD SWAP2 DUP3 MSTORE SWAP9 DUP8 ADD MLOAD DUP5 AND SWAP9 DUP6 ADD SWAP9 DUP10 MSTORE PUSH1 0xE0 SWAP1 SWAP7 ADD MLOAD DUP4 AND PUSH1 0xA0 DUP6 ADD SWAP1 DUP2 MSTORE DUP10 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP13 SSTORE PUSH1 0x0 SWAP12 DUP13 MSTORE SWAP3 SWAP1 SWAP11 KECCAK256 SWAP5 MLOAD PUSH1 0x2 SWAP1 SWAP11 MUL SWAP1 SWAP5 ADD SWAP9 DUP10 SSTORE SWAP1 MLOAD SWAP8 ADD DUP1 SLOAD SWAP4 MLOAD SWAP5 MLOAD SWAP7 MLOAD SWAP3 MLOAD DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH10 0xFFFF0000000000000000 NOT SWAP4 DUP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH8 0xFFFF000000000000 NOT SWAP9 DUP5 AND PUSH5 0x100000000 MUL PUSH6 0xFFFF00000000 NOT SWAP8 DUP6 AND PUSH3 0x10000 MUL PUSH4 0xFFFF0000 NOT SWAP12 SWAP1 SWAP6 AND PUSH2 0xFFFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP10 SWAP1 SWAP10 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP5 SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0x7A8 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x127B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH2 0x868 SWAP4 DUP6 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x7DF JUMP JUMPDEST POP POP POP POP PUSH2 0x34A JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP5 SWAP6 POP SWAP3 SWAP4 PUSH2 0x923 SWAP4 SWAP2 SWAP3 DUP6 SWAP1 DUP5 ADD DUP3 ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x7DF JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND LT PUSH2 0x962 JUMPI PUSH1 0x1 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x98C JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA16 PUSH2 0xA46 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA61 PUSH2 0xA7B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA6E PUSH2 0xA7B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP3 CALLDATALOAD PUSH2 0x13A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xACD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAE0 PUSH2 0xADB DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH2 0x12F4 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0xC0 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xB05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB33 JUMPI DUP2 PUSH2 0xB1B DUP9 DUP3 PUSH2 0xDEA JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xC0 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB08 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0xB5C PUSH2 0xADB DUP3 PUSH2 0x133C JUMP JUMPDEST SWAP2 POP DUP2 DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xB72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB33 JUMPI DUP2 PUSH2 0xB88 DUP9 DUP3 PUSH2 0xE99 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBBD PUSH2 0xADB DUP3 PUSH2 0x135A JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBE4 DUP4 DUP3 DUP5 PUSH2 0x13D2 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC0A PUSH1 0x80 PUSH2 0x12F4 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC30 DUP5 DUP3 DUP6 ADD PUSH2 0xB9E JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xC41 DUP5 DUP5 DUP4 ADD PUSH2 0xC76 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xC55 DUP5 DUP3 DUP6 ADD PUSH2 0xC76 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0xC6A DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC92 PUSH1 0xA0 PUSH2 0x12F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCA0 DUP5 DUP5 PUSH2 0xE8D JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xCB1 DUP5 DUP5 DUP4 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xCC5 DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xCD9 DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xCED DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD17 PUSH2 0x100 PUSH2 0x12F4 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3D DUP5 DUP3 DUP6 ADD PUSH2 0xB9E JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD66 DUP5 DUP3 DUP6 ADD PUSH2 0xBED JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xD7A DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xD8E DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xDA2 DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xDB6 DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xDCA DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0xDDE DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE06 PUSH1 0xC0 PUSH2 0x12F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE14 DUP5 DUP5 PUSH2 0xE99 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xE25 DUP5 DUP5 DUP4 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xE39 DUP5 DUP3 DUP6 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xE4D DUP5 DUP3 DUP6 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xE61 DUP5 DUP3 DUP6 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xE75 DUP5 DUP3 DUP6 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP3 CALLDATALOAD PUSH2 0x13B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP3 MLOAD PUSH2 0x13B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP3 CALLDATALOAD PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEC3 DUP5 DUP5 PUSH2 0xAA9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEC3 DUP5 DUP3 DUP6 ADD PUSH2 0xABC JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEC3 DUP5 DUP5 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEC3 DUP5 DUP3 DUP6 ADD PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF5F DUP4 DUP4 PUSH2 0x1177 JUMP JUMPDEST POP POP PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF73 DUP4 DUP4 PUSH2 0x122B JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x13A9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF95 DUP3 PUSH2 0x138B JUMP JUMPDEST PUSH2 0xF9F DUP2 DUP6 PUSH2 0x139B JUMP JUMPDEST SWAP4 POP PUSH2 0xFAA DUP4 PUSH2 0x1382 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xFD5 JUMPI PUSH2 0xFC0 DUP7 DUP4 MLOAD PUSH2 0xF53 JUMP JUMPDEST SWAP6 POP PUSH2 0xFCB DUP3 PUSH2 0x1382 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xFAD JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xFE8 DUP2 PUSH2 0x138F JUMP JUMPDEST PUSH2 0xFF2 DUP2 DUP5 PUSH2 0x13A4 JUMP JUMPDEST SWAP3 POP PUSH2 0xFFD DUP3 PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1028 JUMPI PUSH2 0x1013 DUP6 DUP4 MLOAD PUSH2 0xF67 JUMP JUMPDEST SWAP5 POP PUSH2 0x101E DUP3 PUSH2 0x1382 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1000 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1395 JUMP JUMPDEST PUSH2 0x1042 DUP2 DUP5 PUSH2 0x13A4 JUMP JUMPDEST SWAP3 POP PUSH2 0x104D DUP3 PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1028 JUMPI PUSH2 0x1063 DUP6 DUP4 MLOAD PUSH2 0xF67 JUMP JUMPDEST SWAP5 POP PUSH2 0x106E DUP3 PUSH2 0x1382 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1050 JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x13B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108E PUSH1 0x2C DUP4 PUSH2 0x139B JUMP JUMPDEST PUSH32 0x426F746820706C6179657273206861766520746F2068617665207069636B6564 DUP2 MSTORE PUSH32 0x2074686569722063617264730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10ED PUSH1 0x25 DUP4 PUSH2 0x139B JUMP JUMPDEST PUSH32 0x506C617965722068617320616C7265616479207069636B656420746865697220 DUP2 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL PUSH5 0x6361726473 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1137 PUSH1 0x28 DUP4 PUSH2 0x139B JUMP JUMPDEST PUSH32 0x5472616E73616374696F6E2073656E646572206D75737420626520706C617965 DUP2 MSTORE PUSH1 0x1 PUSH1 0xC1 SHL PUSH8 0x3910189037B91019 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1188 DUP5 DUP3 PUSH2 0x122B JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x119B PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x11AE PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x11C1 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x11D4 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x11E7 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1205 DUP3 DUP3 PUSH2 0xF8A JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x121A PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1234 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x1388 JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x13CC JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0xF7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x1260 DUP3 DUP6 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xAB5 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xFDF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x1078 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x124B DUP2 PUSH2 0x1081 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x124B DUP2 PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x124B DUP2 PUSH2 0x112A JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xAB5 DUP2 DUP5 PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x1222 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x122B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x1234 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x3 SWAP1 JUMP JUMPDEST POP PUSH1 0x5 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x124B DUP3 PUSH2 0x13C0 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13ED JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x13D5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x11E7 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xa7 0x4f 0x27 0xe5 SAR DUP11 0xe 0xf9 STATICCALL 0xfc 0xef 0xd2 BALANCE 0xe0 CODESIZE SHR ORIGIN LOG2 0xe0 DUP15 PUSH29 0xA4601DD4D188099D9DFCB96C6578706572696D656E74616CF500370000 ", "sourceMap": "154:3588:7:-;;;673:186;8:9:-1;5:2;;;30:1;27;20:12;5:2;673:186:7;;;;;;;;;;;;;;;;;;;;;;760:7;:18;;-1:-1:-1;;;;;760:18:7;;;-1:-1:-1;;;;;;760:18:7;;;;;;;788:7;:18;;;;;;;;;;;;;;;760:7;817:35;;;;;;;;;;;154:3588;;5:122:-1;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:535;;;;283:2;271:9;262:7;258:23;254:32;251:2;;;299:1;296;289:12;251:2;334:1;351:64;407:7;387:9;351:64;;;341:74;;313:108;452:2;470:64;526:7;517:6;506:9;502:22;470:64;;;460:74;;431:109;571:2;589:64;645:7;636:6;625:9;621:22;589:64;;;579:74;;550:109;245:424;;;;;;676:105;;745:31;770:5;745:31;;;734:42;728:53;-1:-1;;728:53;788:128;-1:-1;;;;;857:54;;840:76;;154:3588:7;;;;;;"}, "deployedBytecode": {"linkReferences": {}, "object": "608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c0d3544911610066578063c0d354491461011e578063d30895e41461013e578063d7eb798c14610146578063e4b6c9921461015b578063fe145fbd1461016e5761009e565b806306880689146100a35780632af1e2f8146100c157806348373963146100e15780634ed61446146100f657806359a5f12d14610116575b600080fd5b6100ab61018e565b6040516100b8919061123d565b60405180910390f35b6100d46100cf366004610ea5565b6101a2565b6040516100b891906112e6565b6100f46100ef366004610f00565b6101c3565b005b610109610104366004610ecb565b61034a565b6040516100b891906112ca565b6100ab610424565b61013161012c366004610ea5565b610433565b6040516100b891906112b9565b6100ab610516565b61014e610525565b6040516100b8919061126d565b6100d4610169366004610ea5565b61052e565b61018161017c366004610ea5565b610546565b6040516100b891906112ab565b60045461010090046001600160a01b031681565b6001600160a01b031660009081526003602052604090206001015460ff1690565b3360009081526003602052604090208054156101fd57604051600160e51b62461bcd0281526004016101f49061128b565b60405180910390fd5b6001546001600160a01b0316331415610243576002546001600160a01b03166000908152600360205260409020541561023e576004805460ff191660011790555b6102a3565b6002546001600160a01b0316331415610288576001546001600160a01b03166000908152600360205260409020541561023e576004805460ff191660011790556102a3565b604051600160e51b62461bcd0281526004016101f49061129b565b6102ab610990565b5060408051606081018252835181526020808501519082015283820151918101919091526102e1828460005b60200201516105f3565b6102ed828460016102d7565b6102f9828460026102d7565b7f48ca02657a8acb3a062f53bf24ca611bb25d8108f29f5e3c5e468080a44dca5d838260405161032a929190611251565b60405180910390a160045460ff161561034557610345610783565b505050565b600080805b835181101561041d576000805485516001600160a01b0390911690639188d3129087908590811061037c57fe5b6020026020010151600001516040518263ffffffff1660e01b81526004016103a491906112d8565b600060405180830381600087803b1580156103be57600080fd5b505af11580156103d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fa9190810190610f1e565b60a0015190508261ffff168161ffff161115610414578092505b5060010161034f565b5092915050565b6002546001600160a01b031681565b61043b6109ae565b6001600160a01b0382166000908152600360209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b828210156104f95760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352640100000000810483166060850152600160301b810483166080850152600160401b900490911660a08301529083529092019101610479565b505050908252506001919091015460ff1660209091015292915050565b6001546001600160a01b031681565b60045460ff1681565b60036020526000908152604090206001015460ff1681565b61054e6109c6565b6001600160a01b03821660009081526003602052604090206001810154815460ff90911691908290811061057e57fe5b60009182526020918290206040805160c0810182526002909302909101805483526001015461ffff80821694840194909452620100008104841691830191909152640100000000810483166060830152600160301b810483166080830152600160401b900490911660a0820152915050919050565b6105fb6109fb565b600054604051600160e11b6348c469890281526001600160a01b0390911690639188d3129061062e9085906004016112d8565b600060405180830381600087803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106849190810190610f1e565b6040805160c080820183529481528183015161ffff90811660208084019182526060808701518416958501958652608080880151851691860191825298870151841698850198895260e090960151831660a08501908152895460018181018c5560009b8c5292909a2094516002909a0290940198895590519701805493519451965192518216600160401b0269ffff000000000000000019938316600160301b0267ffff000000000000199884166401000000000265ffff0000000019978516620100000263ffff0000199b90951661ffff19909716969096179990991692909217949094169290921794909416949094179290921692909217905550565b60045460ff166107a857604051600160e51b62461bcd0281526004016101f49061127b565b6001546001600160a01b03166000908152600360209081526040808320805482518185028101850190935280835261086893859084015b8282101561085f5760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352640100000000810483166060850152600160301b810483166080850152600160401b900490911660a083015290835290920191016107df565b5050505061034a565b6002546001600160a01b031660009081526003602090815260408083208054825181850281018501909352808352949550929361092393919285908401821561085f5760008481526020908190206040805160c081018252600286029092018054835260019081015461ffff80821685870152620100008204811693850193909352640100000000810483166060850152600160301b810483166080850152600160401b900490911660a083015290835290920191016107df565b90508061ffff168261ffff161061096257600154600480546001600160a01b0390921661010002610100600160a81b031990921691909117905561098c565b600254600480546001600160a01b0390921661010002610100600160a81b03199092169190911790555b5050565b60405180606001604052806003906020820280388339509192915050565b60408051808201909152606081526000602082015290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60405180610260016040528060608152602001610a16610a46565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b60405180610180016040528060608152602001610a61610a7b565b8152602001610a6e610a7b565b8152600060209091015290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6000610ab582356113a9565b9392505050565b600082601f830112610acd57600080fd5b8135610ae0610adb8261131b565b6112f4565b915081818352602084019350602081019050838560c0840282011115610b0557600080fd5b60005b83811015610b335781610b1b8882610dea565b84525060209092019160c09190910190600101610b08565b5050505092915050565b600082601f830112610b4e57600080fd5b6005610b5c610adb8261133c565b91508183856020840282011115610b7257600080fd5b60005b83811015610b335781610b888882610e99565b8452506020928301929190910190600101610b75565b600082601f830112610baf57600080fd5b8151610bbd610adb8261135a565b91508082526020830160208301858383011115610bd957600080fd5b610be48382846113d2565b50505092915050565b60006101808284031215610c0057600080fd5b610c0a60806112f4565b825190915067ffffffffffffffff811115610c2457600080fd5b610c3084828501610b9e565b8252506020610c4184848301610c76565b60208301525060c0610c5584828501610c76565b604083015250610160610c6a84828501610e8d565b60608301525092915050565b600060a08284031215610c8857600080fd5b610c9260a06112f4565b90506000610ca08484610e8d565b8252506020610cb184848301610e8d565b6020830152506040610cc584828501610e8d565b6040830152506060610cd984828501610e8d565b6060830152506080610ced84828501610e8d565b60808301525092915050565b60006101008284031215610d0c57600080fd5b610d176101006112f4565b825190915067ffffffffffffffff811115610d3157600080fd5b610d3d84828501610b9e565b825250602082015167ffffffffffffffff811115610d5a57600080fd5b610d6684828501610bed565b6020830152506040610d7a84828501610e8d565b6040830152506060610d8e84828501610e8d565b6060830152506080610da284828501610e8d565b60808301525060a0610db684828501610e8d565b60a08301525060c0610dca84828501610e8d565b60c08301525060e0610dde84828501610e8d565b60e08301525092915050565b600060c08284031215610dfc57600080fd5b610e0660c06112f4565b90506000610e148484610e99565b8252506020610e2584848301610e81565b6020830152506040610e3984828501610e81565b6040830152506060610e4d84828501610e81565b6060830152506080610e6184828501610e81565b60808301525060a0610e7584828501610e81565b60a08301525092915050565b6000610ab582356113b9565b6000610ab582516113b9565b6000610ab58235611388565b600060208284031215610eb757600080fd5b6000610ec38484610aa9565b949350505050565b600060208284031215610edd57600080fd5b813567ffffffffffffffff811115610ef457600080fd5b610ec384828501610abc565b600060a08284031215610f1257600080fd5b6000610ec38484610b3d565b600060208284031215610f3057600080fd5b815167ffffffffffffffff811115610f4757600080fd5b610ec384828501610cf9565b6000610f5f8383611177565b505060c00190565b6000610f73838361122b565b505060200190565b610f84816113a9565b82525050565b6000610f958261138b565b610f9f818561139b565b9350610faa83611382565b60005b82811015610fd557610fc0868351610f53565b9550610fcb82611382565b9150600101610fad565b5093949350505050565b610fe88161138f565b610ff281846113a4565b9250610ffd82611388565b60005b8281101561102857611013858351610f67565b945061101e82611382565b9150600101611000565b5050505050565b61103881611395565b61104281846113a4565b925061104d82611388565b60005b8281101561102857611063858351610f67565b945061106e82611382565b9150600101611050565b610f84816113b4565b600061108e602c8361139b565b7f426f746820706c6179657273206861766520746f2068617665207069636b656481527f2074686569722063617264730000000000000000000000000000000000000000602082015260400192915050565b60006110ed60258361139b565b7f506c617965722068617320616c7265616479207069636b6564207468656972208152600160d81b64636172647302602082015260400192915050565b600061113760288361139b565b7f5472616e73616374696f6e2073656e646572206d75737420626520706c6179658152600160c11b673910189037b9101902602082015260400192915050565b805160c0830190611188848261122b565b50602082015161119b6020850182611222565b5060408201516111ae6040850182611222565b5060608201516111c16060850182611222565b5060808201516111d46080850182611222565b5060a08201516111e760a0850182611222565b50505050565b80516040808452600091908401906112058282610f8a565b915050602083015161121a6020860182611234565b509392505050565b610f84816113b9565b610f8481611388565b610f84816113cc565b6020810161124b8284610f7b565b92915050565b6101008101611260828561102f565b610ab560a0830184610fdf565b6020810161124b8284611078565b6020808252810161124b81611081565b6020808252810161124b816110e0565b6020808252810161124b8161112a565b60c0810161124b8284611177565b60208082528101610ab581846111ed565b6020810161124b8284611222565b6020810161124b828461122b565b6020810161124b8284611234565b60405181810167ffffffffffffffff8111828210171561131357600080fd5b604052919050565b600067ffffffffffffffff82111561133257600080fd5b5060209081020190565b600067ffffffffffffffff82111561135357600080fd5b5060200290565b600067ffffffffffffffff82111561137157600080fd5b506020601f91909101601f19160190565b60200190565b90565b5190565b50600390565b50600590565b90815260200190565b919050565b600061124b826113c0565b151590565b61ffff1690565b6001600160a01b031690565b60ff1690565b60005b838110156113ed5781810151838201526020016113d5565b838111156111e7575050600091015256fea265627a7a72305820a74f27e51d8a0ef9fafcefd231e0381c32a2e08e7ca4601dd4d188099d9dfcb96c6578706572696d656e74616cf50037", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC0D35449 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC0D35449 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0xD30895E4 EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xD7EB798C EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xE4B6C992 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xFE145FBD EQ PUSH2 0x16E JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x6880689 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x2AF1E2F8 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x48373963 EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x4ED61446 EQ PUSH2 0xF6 JUMPI DUP1 PUSH4 0x59A5F12D EQ PUSH2 0x116 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x18E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x123D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD4 PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x1A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x12E6 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0xF00 JUMP JUMPDEST PUSH2 0x1C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x109 PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0xECB JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH2 0xAB PUSH2 0x424 JUMP JUMPDEST PUSH2 0x131 PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x433 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0xAB PUSH2 0x516 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x525 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x126D JUMP JUMPDEST PUSH2 0xD4 PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x52E JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x12AB JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x1FD JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x128B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x243 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x23E JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x288 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x23E JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x129B JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x990 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP4 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD SWAP1 DUP3 ADD MSTORE DUP4 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x2E1 DUP3 DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x5F3 JUMP JUMPDEST PUSH2 0x2ED DUP3 DUP5 PUSH1 0x1 PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x2F9 DUP3 DUP5 PUSH1 0x2 PUSH2 0x2D7 JUMP JUMPDEST PUSH32 0x48CA02657A8ACB3A062F53BF24CA611BB25D8108F29F5E3C5E468080A44DCA5D DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x32A SWAP3 SWAP2 SWAP1 PUSH2 0x1251 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x345 JUMPI PUSH2 0x345 PUSH2 0x783 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x41D JUMPI PUSH1 0x0 DUP1 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x37C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A4 SWAP2 SWAP1 PUSH2 0x12D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3FA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF1E JUMP JUMPDEST PUSH1 0xA0 ADD MLOAD SWAP1 POP DUP3 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x414 JUMPI DUP1 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x34F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x43B PUSH2 0x9AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP2 SLOAD PUSH1 0x60 SWAP5 DUP2 MUL DUP3 ADD DUP6 ADD DUP5 MSTORE SWAP3 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP5 SWAP2 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 DUP6 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x4F9 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x479 JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x54E PUSH2 0x9C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0x57E JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH3 0x10000 DUP2 DIV DUP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5FB PUSH2 0x9FB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 PUSH2 0x62E SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x12D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x65C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x684 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF1E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE SWAP5 DUP2 MSTORE DUP2 DUP4 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP5 AND SWAP6 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP1 DUP9 ADD MLOAD DUP6 AND SWAP2 DUP7 ADD SWAP2 DUP3 MSTORE SWAP9 DUP8 ADD MLOAD DUP5 AND SWAP9 DUP6 ADD SWAP9 DUP10 MSTORE PUSH1 0xE0 SWAP1 SWAP7 ADD MLOAD DUP4 AND PUSH1 0xA0 DUP6 ADD SWAP1 DUP2 MSTORE DUP10 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP13 SSTORE PUSH1 0x0 SWAP12 DUP13 MSTORE SWAP3 SWAP1 SWAP11 KECCAK256 SWAP5 MLOAD PUSH1 0x2 SWAP1 SWAP11 MUL SWAP1 SWAP5 ADD SWAP9 DUP10 SSTORE SWAP1 MLOAD SWAP8 ADD DUP1 SLOAD SWAP4 MLOAD SWAP5 MLOAD SWAP7 MLOAD SWAP3 MLOAD DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH10 0xFFFF0000000000000000 NOT SWAP4 DUP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH8 0xFFFF000000000000 NOT SWAP9 DUP5 AND PUSH5 0x100000000 MUL PUSH6 0xFFFF00000000 NOT SWAP8 DUP6 AND PUSH3 0x10000 MUL PUSH4 0xFFFF0000 NOT SWAP12 SWAP1 SWAP6 AND PUSH2 0xFFFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP10 SWAP1 SWAP10 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP5 SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0x7A8 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x127B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH2 0x868 SWAP4 DUP6 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x7DF JUMP JUMPDEST POP POP POP POP PUSH2 0x34A JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP5 SWAP6 POP SWAP3 SWAP4 PUSH2 0x923 SWAP4 SWAP2 SWAP3 DUP6 SWAP1 DUP5 ADD DUP3 ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x7DF JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND LT PUSH2 0x962 JUMPI PUSH1 0x1 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x98C JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA16 PUSH2 0xA46 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA61 PUSH2 0xA7B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA6E PUSH2 0xA7B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP3 CALLDATALOAD PUSH2 0x13A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xACD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAE0 PUSH2 0xADB DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH2 0x12F4 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0xC0 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xB05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB33 JUMPI DUP2 PUSH2 0xB1B DUP9 DUP3 PUSH2 0xDEA JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xC0 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB08 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0xB5C PUSH2 0xADB DUP3 PUSH2 0x133C JUMP JUMPDEST SWAP2 POP DUP2 DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xB72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB33 JUMPI DUP2 PUSH2 0xB88 DUP9 DUP3 PUSH2 0xE99 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBBD PUSH2 0xADB DUP3 PUSH2 0x135A JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBE4 DUP4 DUP3 DUP5 PUSH2 0x13D2 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC0A PUSH1 0x80 PUSH2 0x12F4 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC30 DUP5 DUP3 DUP6 ADD PUSH2 0xB9E JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xC41 DUP5 DUP5 DUP4 ADD PUSH2 0xC76 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xC55 DUP5 DUP3 DUP6 ADD PUSH2 0xC76 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0xC6A DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC92 PUSH1 0xA0 PUSH2 0x12F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCA0 DUP5 DUP5 PUSH2 0xE8D JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xCB1 DUP5 DUP5 DUP4 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xCC5 DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xCD9 DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xCED DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD17 PUSH2 0x100 PUSH2 0x12F4 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3D DUP5 DUP3 DUP6 ADD PUSH2 0xB9E JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD66 DUP5 DUP3 DUP6 ADD PUSH2 0xBED JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xD7A DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xD8E DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xDA2 DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xDB6 DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xDCA DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0xDDE DUP5 DUP3 DUP6 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE06 PUSH1 0xC0 PUSH2 0x12F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE14 DUP5 DUP5 PUSH2 0xE99 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xE25 DUP5 DUP5 DUP4 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xE39 DUP5 DUP3 DUP6 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xE4D DUP5 DUP3 DUP6 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xE61 DUP5 DUP3 DUP6 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xE75 DUP5 DUP3 DUP6 ADD PUSH2 0xE81 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP3 CALLDATALOAD PUSH2 0x13B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP3 MLOAD PUSH2 0x13B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP3 CALLDATALOAD PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEC3 DUP5 DUP5 PUSH2 0xAA9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEC3 DUP5 DUP3 DUP6 ADD PUSH2 0xABC JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEC3 DUP5 DUP5 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEC3 DUP5 DUP3 DUP6 ADD PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF5F DUP4 DUP4 PUSH2 0x1177 JUMP JUMPDEST POP POP PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF73 DUP4 DUP4 PUSH2 0x122B JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x13A9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF95 DUP3 PUSH2 0x138B JUMP JUMPDEST PUSH2 0xF9F DUP2 DUP6 PUSH2 0x139B JUMP JUMPDEST SWAP4 POP PUSH2 0xFAA DUP4 PUSH2 0x1382 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xFD5 JUMPI PUSH2 0xFC0 DUP7 DUP4 MLOAD PUSH2 0xF53 JUMP JUMPDEST SWAP6 POP PUSH2 0xFCB DUP3 PUSH2 0x1382 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xFAD JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xFE8 DUP2 PUSH2 0x138F JUMP JUMPDEST PUSH2 0xFF2 DUP2 DUP5 PUSH2 0x13A4 JUMP JUMPDEST SWAP3 POP PUSH2 0xFFD DUP3 PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1028 JUMPI PUSH2 0x1013 DUP6 DUP4 MLOAD PUSH2 0xF67 JUMP JUMPDEST SWAP5 POP PUSH2 0x101E DUP3 PUSH2 0x1382 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1000 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1395 JUMP JUMPDEST PUSH2 0x1042 DUP2 DUP5 PUSH2 0x13A4 JUMP JUMPDEST SWAP3 POP PUSH2 0x104D DUP3 PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1028 JUMPI PUSH2 0x1063 DUP6 DUP4 MLOAD PUSH2 0xF67 JUMP JUMPDEST SWAP5 POP PUSH2 0x106E DUP3 PUSH2 0x1382 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1050 JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x13B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108E PUSH1 0x2C DUP4 PUSH2 0x139B JUMP JUMPDEST PUSH32 0x426F746820706C6179657273206861766520746F2068617665207069636B6564 DUP2 MSTORE PUSH32 0x2074686569722063617264730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10ED PUSH1 0x25 DUP4 PUSH2 0x139B JUMP JUMPDEST PUSH32 0x506C617965722068617320616C7265616479207069636B656420746865697220 DUP2 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL PUSH5 0x6361726473 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1137 PUSH1 0x28 DUP4 PUSH2 0x139B JUMP JUMPDEST PUSH32 0x5472616E73616374696F6E2073656E646572206D75737420626520706C617965 DUP2 MSTORE PUSH1 0x1 PUSH1 0xC1 SHL PUSH8 0x3910189037B91019 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x1188 DUP5 DUP3 PUSH2 0x122B JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x119B PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x11AE PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x11C1 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x11D4 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x11E7 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1222 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1205 DUP3 DUP3 PUSH2 0xF8A JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x121A PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1234 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x1388 JUMP JUMPDEST PUSH2 0xF84 DUP2 PUSH2 0x13CC JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0xF7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x1260 DUP3 DUP6 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xAB5 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xFDF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x1078 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x124B DUP2 PUSH2 0x1081 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x124B DUP2 PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x124B DUP2 PUSH2 0x112A JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xAB5 DUP2 DUP5 PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x1222 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x122B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x124B DUP3 DUP5 PUSH2 0x1234 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x3 SWAP1 JUMP JUMPDEST POP PUSH1 0x5 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x124B DUP3 PUSH2 0x13C0 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13ED JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x13D5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x11E7 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xa7 0x4f 0x27 0xe5 SAR DUP11 0xe 0xf9 STATICCALL 0xfc 0xef 0xd2 BALANCE 0xe0 CODESIZE SHR ORIGIN LOG2 0xe0 DUP15 PUSH29 0xA4601DD4D188099D9DFCB96C6578706572696D656E74616CF500370000 ", "sourceMap": "154:3588:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;154:3588:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;640:26;;;:::i;:::-;;;;;;;;;;;;;;;;1507:136;;;;;;;;;:::i;:::-;;;;;;;;1777:1063;;;;;;;;;:::i;:::-;;3358:382;;;;;;;;;:::i;:::-;;;;;;;;527:22;;;:::i;1649:122::-;;;;;;;;;:::i;:::-;;;;;;;;499:22;;;:::i;611:23::-;;;:::i;:::-;;;;;;;;555:50;;;;;;;;;:::i;1286:215::-;;;;;;;;;:::i;:::-;;;;;;;;640:26;;;;;;-1:-1:-1;;;;;640:26:7;;:::o;1507:136::-;-1:-1:-1;;;;;1605:19:7;1581:5;1605:19;;;:11;:19;;;;;:31;;;;;;1507:136::o;1777:1063::-;1895:10;1848:32;1883:23;;;:11;:23;;;;;1936:18;;:23;1928:73;;;;-1:-1:-1;;;;;1928:73:7;;;;;;;;;;;;;;;;;2016:7;;-1:-1:-1;;;;;2016:7:7;2027:10;2016:21;2012:397;;;2069:7;;-1:-1:-1;;;;;2069:7:7;2099:1;2057:20;;;:11;:20;;;;;:39;:43;2053:100;;2120:11;:18;;-1:-1:-1;;2120:18:7;2134:4;2120:18;;;2053:100;2012:397;;;2181:7;;-1:-1:-1;;;;;2181:7:7;2192:10;2181:21;2177:232;;;2234:7;;-1:-1:-1;;;;;2234:7:7;2264:1;2222:20;;;:11;:20;;;;;:39;:43;2218:100;;2285:11;:18;;-1:-1:-1;;2285:18:7;2299:4;2285:18;;;2177:232;;;2348:50;;-1:-1:-1;;;;;2348:50:7;;;;;;;;2177:232;2419:32;;:::i;:::-;-1:-1:-1;2419:123:7;;;;;;;;2468:15;;2419:123;;2468:15;2497;;;;2419:123;;;;2526:15;;;;2419:123;;;;;;;2553:44;2568:11;2468:15;-1:-1:-1;2581:15:7;;;;;2553:14;:44::i;:::-;2607;2622:11;2635:12;2648:1;2635:15;;2607:44;2661;2676:11;2689:12;2702:1;2689:15;;2661:44;2721:47;2736:12;2750:17;2721:47;;;;;;;;;;;;;;;;2783:11;;;;2779:55;;;2810:13;:11;:13::i;:::-;1777:1063;;;:::o;3358:382::-;3429:6;;;3478:230;3495:11;:18;3493:1;:20;3478:230;;;3535:16;3554:13;;3576:14;;-1:-1:-1;;;;;3554:13:7;;;;:21;;3576:11;;3588:1;;3576:14;;;;;;;;;;;;:21;;;3554:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3554:44:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3554:44:7;;;;;;39:16:-1;36:1;17:17;2:54;101:4;3554:44:7;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;3554:44:7;;;;;;;;;:50;;;3535:69;;3635:8;3623:20;;:9;:20;;;3619:79;;;3674:9;3663:20;;3619:79;-1:-1:-1;3515:3:7;;3478:230;;;-1:-1:-1;3725:8:7;3358:382;-1:-1:-1;;3358:382:7:o;527:22::-;;;-1:-1:-1;;;;;527:22:7;;:::o;1649:122::-;1709:17;;:::i;:::-;-1:-1:-1;;;;;1745:19:7;;;;;;:11;:19;;;;;;;;1738:26;;;;;;;;;;;;;;;;;;;;;;1745:19;;1738:26;;;;1745:19;;1738:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1738:26:7;;;;;;;;-1:-1:-1;;;1738:26:7;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1738:26:7;;;-1:-1:-1;1738:26:7;;;;;;;;;;;;;;1649:122;-1:-1:-1;;1649:122:7:o;499:22::-;;;-1:-1:-1;;;;;499:22:7;;:::o;611:23::-;;;;;;:::o;555:50::-;;;;;;;;;;;;;;;;;:::o;1286:215::-;1353:17;;:::i;:::-;-1:-1:-1;;;;;1402:19:7;;1383:16;1402:19;;;:11;:19;;;;;:31;;;;1451:43;;1402:31;;;;;:19;:31;;1451:43;;;;;;;;;;;;;;;1444:50;;;;;;;;1451:43;;;;;;;1444:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1444:50:7;;;;;;;;-1:-1:-1;;;1444:50:7;;;;;;;;;;-1:-1:-1;;1286:215:7;;;:::o;865:415::-;956:16;;:::i;:::-;975:13;;:29;;-1:-1:-1;;;;;975:29:7;;-1:-1:-1;;;;;975:13:7;;;;:21;;:29;;997:6;;975:29;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;975:29:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;975:29:7;;;;;;39:16:-1;36:1;17:17;2:54;101:4;975:29:7;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;975:29:7;;;;;;;;;1033:239;;;;;;;;;;;;1094:15;;;;1033:239;;;;;;;;;;;1132:16;;;;;1033:239;;;;;;;;1168:13;;;;;1033:239;;;;;;;;1203:11;;;;1033:239;;;;;;;;1243:18;;;;;1033:239;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;-1:-1;1015:258:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1015:258:7;-1:-1:-1;;1015:258:7;;;-1:-1:-1;;;1015:258:7;-1:-1:-1;;1015:258:7;;;;;-1:-1:-1;;1015:258:7;;;;;-1:-1:-1;;1015:258:7;;;;-1:-1:-1;;1015:258:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;865:415:7:o;2916:436::-;2966:11;;;;2958:68;;;;-1:-1:-1;;;;;2958:68:7;;;;;;;;;3087:7;;-1:-1:-1;;;;;3087:7:7;3037:22;3075:20;;;:11;:20;;;;;;;;3062:46;;;;;;;;;;;;;;;;;;;3037:22;;3062:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3062:46:7;;;;;;;;-1:-1:-1;;;3062:46:7;;;;;;;;;;;;;;;;;;;;;;;;:12;:46::i;:::-;3168:7;;-1:-1:-1;;;;;3168:7:7;3118:22;3156:20;;;:11;:20;;;;;;;;3143:46;;;;;;;;;;;;;;;;;3037:71;;-1:-1:-1;3118:22:7;;3143:46;;;;3118:22;;3143:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3143:46:7;;;;;;;;-1:-1:-1;;;3143:46:7;;;;;;;;;;;;;;;;;;;;3118:71;;3223:15;3204:34;;:15;:34;;;3200:146;;3268:7;;3254:11;:21;;-1:-1:-1;;;;;3268:7:7;;;;3254:21;-1:-1:-1;;;;;;3254:21:7;;;;;;;;;3200:146;;;3328:7;;3314:11;:21;;-1:-1:-1;;;;;3328:7:7;;;;3314:21;-1:-1:-1;;;;;;3314:21:7;;;;;;;;;3200:146;2916:436;;:::o;154:3588::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;154:3588:7;;;-1:-1:-1;;154:3588:7:o;:::-;;;;;;;;;;;;;-1:-1:-1;154:3588:7;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;154:3588:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;154:3588:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;174:779;;315:3;308:4;300:6;296:17;292:27;282:2;;333:1;330;323:12;282:2;370:6;357:20;392:104;407:88;488:6;407:88;;;392:104;;;383:113;;513:5;538:6;531:5;524:21;568:4;560:6;556:17;546:27;;590:4;585:3;581:14;574:21;;643:6;690:3;682:4;674:6;670:17;665:3;661:27;658:36;655:2;;;707:1;704;697:12;655:2;732:1;717:230;742:6;739:1;736:13;717:230;;;800:3;822:61;879:3;867:10;822:61;;;810:74;;-1:-1;907:4;898:14;;;;935:4;926:14;;;;;764:1;757:9;717:230;;;721:14;275:678;;;;;;;;980:615;;1095:3;1088:4;1080:6;1076:17;1072:27;1062:2;;1113:1;1110;1103:12;1062:2;1137:3;1155:78;1170:62;1225:6;1170:62;;1155:78;1146:87;;1250:5;1309:6;1356:3;1348:4;1340:6;1336:17;1331:3;1327:27;1324:36;1321:2;;;1373:1;1370;1363:12;1321:2;1398:1;1383:206;1408:6;1405:1;1402:13;1383:206;;;1466:3;1488:37;1521:3;1509:10;1488:37;;;1476:50;;-1:-1;1549:4;1540:14;;;;1568;;;;;1430:1;1423:9;1383:206;;1604:436;;1713:3;1706:4;1698:6;1694:17;1690:27;1680:2;;1731:1;1728;1721:12;1680:2;1761:6;1755:13;1783:61;1798:45;1836:6;1798:45;;1783:61;1774:70;;1864:6;1857:5;1850:21;1900:4;1892:6;1888:17;1933:4;1926:5;1922:16;1968:3;1959:6;1954:3;1950:16;1947:25;1944:2;;;1985:1;1982;1975:12;1944:2;1995:39;2027:6;2022:3;2017;1995:39;;;1673:367;;;;;;;;2087:958;;2208:5;2196:9;2191:3;2187:19;2183:31;2180:2;;;2227:1;2224;2217:12;2180:2;2245:20;2260:4;2245:20;;;2315:24;;2236:29;;-1:-1;2359:18;2348:30;;2345:2;;;2391:1;2388;2381:12;2345:2;2425:66;2487:3;2478:6;2467:9;2463:22;2425:66;;;2401:91;;-1:-1;2557:2;2590:88;2674:3;2650:22;;;2590:88;;;2583:4;2576:5;2572:16;2565:114;2513:177;2742:3;2776:88;2860:3;2851:6;2840:9;2836:22;2776:88;;;2769:4;2762:5;2758:16;2751:114;2700:176;2930:3;2964:59;3019:3;3010:6;2999:9;2995:22;2964:59;;;2957:4;2950:5;2946:16;2939:85;2886:149;2174:871;;;;;3098:979;;3226:4;3214:9;3209:3;3205:19;3201:30;3198:2;;;3244:1;3241;3234:12;3198:2;3262:20;3277:4;3262:20;;;3253:29;-1:-1;3334:1;3365:59;3420:3;3400:9;3365:59;;;3341:84;;-1:-1;3489:2;3522:59;3577:3;3553:22;;;3522:59;;;3515:4;3508:5;3504:16;3497:85;3446:147;3643:2;3676:59;3731:3;3722:6;3711:9;3707:22;3676:59;;;3669:4;3662:5;3658:16;3651:85;3603:144;3799:2;3832:59;3887:3;3878:6;3867:9;3863:22;3832:59;;;3825:4;3818:5;3814:16;3807:85;3757:146;3962:3;3996:59;4051:3;4042:6;4031:9;4027:22;3996:59;;;3989:4;3982:5;3978:16;3971:85;3913:154;3192:885;;;;;4120:1643;;4242:5;4230:9;4225:3;4221:19;4217:31;4214:2;;;4261:1;4258;4251:12;4214:2;4279:21;4294:5;4279:21;;;4350:24;;4270:30;;-1:-1;4394:18;4383:30;;4380:2;;;4426:1;4423;4416:12;4380:2;4460:66;4522:3;4513:6;4502:9;4498:22;4460:66;;;4436:91;;-1:-1;4612:2;4597:18;;4591:25;4636:18;4625:30;;4622:2;;;4668:1;4665;4658:12;4622:2;4703:81;4780:3;4771:6;4760:9;4756:22;4703:81;;;4696:4;4689:5;4685:16;4678:107;4548:248;4852:2;4885:59;4940:3;4931:6;4920:9;4916:22;4885:59;;;4878:4;4871:5;4867:16;4860:85;4806:150;5013:2;5046:59;5101:3;5092:6;5081:9;5077:22;5046:59;;;5039:4;5032:5;5028:16;5021:85;4966:151;5171:3;5205:59;5260:3;5251:6;5240:9;5236:22;5205:59;;;5198:4;5191:5;5187:16;5180:85;5127:149;5327:3;5361:59;5416:3;5407:6;5396:9;5392:22;5361:59;;;5354:4;5347:5;5343:16;5336:85;5286:146;5484:3;5518:59;5573:3;5564:6;5553:9;5549:22;5518:59;;;5511:4;5504:5;5500:16;5493:85;5442:147;5648:3;5682:59;5737:3;5728:6;5717:9;5713:22;5682:59;;;5675:4;5668:5;5664:16;5657:85;5599:154;4208:1555;;;;;5810:1056;;5923:4;5911:9;5906:3;5902:19;5898:30;5895:2;;;5941:1;5938;5931:12;5895:2;5959:20;5974:4;5959:20;;;5950:29;-1:-1;6031:1;6062:49;6107:3;6087:9;6062:49;;;6038:74;;-1:-1;6175:2;6208:48;6252:3;6228:22;;;6208:48;;;6201:4;6194:5;6190:16;6183:74;6133:135;6321:2;6354:48;6398:3;6389:6;6378:9;6374:22;6354:48;;;6347:4;6340:5;6336:16;6329:74;6278:136;6464:2;6497:48;6541:3;6532:6;6521:9;6517:22;6497:48;;;6490:4;6483:5;6479:16;6472:74;6424:133;6609:3;6643:48;6687:3;6678:6;6667:9;6663:22;6643:48;;;6636:4;6629:5;6625:16;6618:74;6567:136;6762:3;6796:48;6840:3;6831:6;6820:9;6816:22;6796:48;;;6789:4;6782:5;6778:16;6771:74;6713:143;5889:977;;;;;6873:116;;6939:45;6976:6;6963:20;6939:45;;6996:120;;7073:38;7103:6;7097:13;7073:38;;7123:118;;7190:46;7228:6;7215:20;7190:46;;7248:241;;7352:2;7340:9;7331:7;7327:23;7323:32;7320:2;;;7368:1;7365;7358:12;7320:2;7403:1;7420:53;7465:7;7445:9;7420:53;;;7410:63;7314:175;-1:-1;;;;7314:175;7496:425;;7649:2;7637:9;7628:7;7624:23;7620:32;7617:2;;;7665:1;7662;7655:12;7617:2;7700:31;;7751:18;7740:30;;7737:2;;;7783:1;7780;7773:12;7737:2;7803:102;7897:7;7888:6;7877:9;7873:22;7803:102;;7928:288;;8055:3;8043:9;8034:7;8030:23;8026:33;8023:2;;;8072:1;8069;8062:12;8023:2;8107:1;8124:76;8192:7;8172:9;8124:76;;8223:386;;8360:2;8348:9;8339:7;8335:23;8331:32;8328:2;;;8376:1;8373;8366:12;8328:2;8411:24;;8455:18;8444:30;;8441:2;;;8487:1;8484;8477:12;8441:2;8507:86;8585:7;8576:6;8565:9;8561:22;8507:86;;8617:273;;8752:98;8846:3;8838:6;8752:98;;;-1:-1;;8879:4;8870:14;;8745:145;8899:173;;8986:46;9028:3;9020:6;8986:46;;;-1:-1;;9061:4;9052:14;;8979:93;9080:120;9163:31;9188:5;9163:31;;;9158:3;9151:44;9145:55;;;9290:777;;9469:74;9537:5;9469:74;;;9556:100;9649:6;9644:3;9556:100;;;9549:107;;9676:76;9746:5;9676:76;;;9773:1;9758:287;9783:6;9780:1;9777:13;9758:287;;;9830:111;9937:3;9928:6;9922:13;9830:111;;;9823:118;;9958:80;10031:6;9958:80;;;9948:90;-1:-1;9805:1;9798:9;9758:287;;;-1:-1;10058:3;;9448:619;-1:-1;;;;9448:619;10108:591;10241:52;10287:5;10241:52;;;10306:84;10383:6;10378:3;10306:84;;;10299:91;;10410:54;10458:5;10410:54;;;10485:1;10470:217;10495:6;10492:1;10489:13;10470:217;;;10542:63;10601:3;10592:6;10586:13;10542:63;;;10535:70;;10622:58;10673:6;10622:58;;;10612:68;-1:-1;10517:1;10510:9;10470:217;;;10474:14;10220:479;;;;;10740:591;10873:52;10919:5;10873:52;;;10938:84;11015:6;11010:3;10938:84;;;10931:91;;11042:54;11090:5;11042:54;;;11117:1;11102:217;11127:6;11124:1;11121:13;11102:217;;;11174:63;11233:3;11224:6;11218:13;11174:63;;;11167:70;;11254:58;11305:6;11254:58;;;11244:68;-1:-1;11149:1;11142:9;11102:217;;11339:111;11416:28;11438:5;11416:28;;11458:465;;11618:67;11682:2;11677:3;11618:67;;;11718:66;11698:87;;11819:66;11814:2;11805:12;;11798:88;11914:2;11905:12;;11604:319;-1:-1;;11604:319;11932:465;;12092:67;12156:2;12151:3;12092:67;;;12192:66;12172:87;;-1:-1;;;;;12288:2;12279:12;;12272:88;12388:2;12379:12;;12078:319;-1:-1;;12078:319;12406:465;;12566:67;12630:2;12625:3;12566:67;;;12666:66;12646:87;;-1:-1;;;;;12762:2;12753:12;;12746:88;12862:2;12853:12;;12552:319;-1:-1;;12552:319;12956:1092;13172:22;;13105:4;13096:14;;;13200:61;13100:3;13172:22;13200:61;;;13125:142;13341:4;13334:5;13330:16;13324:23;13353:60;13407:4;13402:3;13398:14;13385:11;13353:60;;;13277:142;13494:4;13487:5;13483:16;13477:23;13506:60;13560:4;13555:3;13551:14;13538:11;13506:60;;;13429:143;13644:4;13637:5;13633:16;13627:23;13656:60;13710:4;13705:3;13701:14;13688:11;13656:60;;;13582:140;13796:4;13789:5;13785:16;13779:23;13808:60;13862:4;13857:3;13853:14;13840:11;13808:60;;;13732:142;13955:4;13948:5;13944:16;13938:23;13967:60;14021:4;14016:3;14012:14;13999:11;13967:60;;;13884:149;13078:970;;;;15294:655;15523:22;;15451:4;15558:37;;;15294:655;;15442:14;;;;15610:146;15442:14;15523:22;15610:146;;;15602:154;;15471:297;15847:4;15840:5;15836:16;15830:23;15859:58;15911:4;15906:3;15902:14;15889:11;15859:58;;;-1:-1;15940:4;15424:525;-1:-1;;;15424:525;15956:107;16027:30;16051:5;16027:30;;16194:110;16267:31;16292:5;16267:31;;16438:104;16507:29;16530:5;16507:29;;16670:213;16788:2;16773:18;;16802:71;16777:9;16846:6;16802:71;;;16759:124;;;;;16890:510;17128:3;17113:19;;17143:117;17117:9;17233:6;17143:117;;;17271:119;17385:3;17374:9;17370:19;17361:6;17271:119;;17407:201;17519:2;17504:18;;17533:65;17508:9;17571:6;17533:65;;17615:407;17806:2;17820:47;;;17791:18;;17881:131;17791:18;17881:131;;18029:407;18220:2;18234:47;;;18205:18;;18295:131;18205:18;18295:131;;18443:407;18634:2;18648:47;;;18619:18;;18709:131;18619:18;18709:131;;18857:326;19031:3;19016:19;;19046:127;19020:9;19146:6;19046:127;;19190:373;19364:2;19378:47;;;19349:18;;19439:114;19349:18;19539:6;19439:114;;19570:209;19686:2;19671:18;;19700:69;19675:9;19742:6;19700:69;;19786:213;19904:2;19889:18;;19918:71;19893:9;19962:6;19918:71;;20006:205;20120:2;20105:18;;20134:67;20109:9;20174:6;20134:67;;20218:256;20280:2;20274:9;20306:17;;;20381:18;20366:34;;20402:22;;;20363:62;20360:2;;;20438:1;20435;20428:12;20360:2;20454;20447:22;20258:216;;-1:-1;20258:216;20481:282;;20664:18;20656:6;20653:30;20650:2;;;20696:1;20693;20686:12;20650:2;-1:-1;20725:4;20713:17;;;20743:15;;20587:176;20770:233;;20927:18;20919:6;20916:30;20913:2;;;20959:1;20956;20949:12;20913:2;-1:-1;20988:4;20976:17;;20850:153;21010:255;;21150:18;21142:6;21139:30;21136:2;;;21182:1;21179;21172:12;21136:2;-1:-1;21255:4;21226;21203:17;;;;-1:-1;;21199:33;21245:15;;21073:192;21274:141;21403:4;21391:17;;21372:43;21426:108;21521:6;21502:32;21662:127;21772:12;;21756:33;21796:96;-1:-1;21884:3;;21868:24;21899:96;-1:-1;21987:3;;21971:24;22412:192;22544:19;;;22593:4;22584:14;;22537:67;22613:140;22744:3;22722:31;-1:-1;22722:31;23082:105;;23151:31;23176:5;23151:31;;23194:92;23267:13;23260:21;;23243:43;23293:91;23372:6;23361:18;;23344:40;23391:128;-1:-1;;;;;23460:54;;23443:76;23612:88;23690:4;23679:16;;23662:38;24139:268;24204:1;24211:101;24225:6;24222:1;24219:13;24211:101;;;24292:11;;;24286:18;24273:11;;;24266:39;24247:2;24240:10;24211:101;;;24327:6;24324:1;24321:13;24318:2;;;-1:-1;;24392:1;24374:16;;24367:27;24188:219"}}}}, "contracts/PlayerCardsRandom.sol": {"PlayerCardsRandom": {"abi": [{"constant": true, "inputs": [], "name": "playersTurn", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayersCurrentCardNumber", "outputs": [{"name": "", "type": "uint8"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "desiredCards", "type": "uint256[5]"}], "name": "pickPayerCards", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "playerCards", "type": "tuple[]"}], "name": "calcMaxSpeed", "outputs": [{"name": "", "type": "uint16"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "player2", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayerDeck", "outputs": [{"components": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "playerCards", "type": "tuple[]"}, {"name": "currentCard", "type": "uint8"}], "name": "", "type": "tuple"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "player1", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "cardsPicked", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "address"}], "name": "playerDecks", "outputs": [{"name": "currentCard", "type": "uint8"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "player", "type": "address"}], "name": "getPlayerCurrentCard", "outputs": [{"components": [{"name": "cardId", "type": "uint256"}, {"name": "health", "type": "uint16"}, {"name": "defence", "type": "uint16"}, {"name": "mana", "type": "uint16"}, {"name": "attack", "type": "uint16"}, {"name": "specialAttack", "type": "uint16"}], "name": "", "type": "tuple"}], "payable": false, "stateMutability": "view", "type": "function"}, {"inputs": [{"name": "_player1", "type": "address"}, {"name": "_player2", "type": "address"}, {"name": "cardsAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "desiredCards", "type": "uint256[5]"}, {"indexed": false, "name": "pickedCards", "type": "uint256[3]"}], "name": "PickPayerCards", "type": "event"}], "evm": {"assembly": "    /* \"contracts/PlayerCardsRandom.sol\":154:4952  contract PlayerCardsRandom is CryptoBeastsTypes {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/PlayerCardsRandom.sol\":675:861  constructor(address _player1, address _player2, address cardsAddress) public {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/PlayerCardsRandom.sol\":675:861  constructor(address _player1, address _player2, address cardsAddress) public {... */\n  pop\n  mload(0x40)\n  0x60\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  dup1\n  0x40\n  mstore\n  tag_2\n  swap2\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_3)\ntag_2:\n    /* \"contracts/PlayerCardsRandom.sol\":762:769  player1 */\n  0x01\n    /* \"contracts/PlayerCardsRandom.sol\":762:780  player1 = _player1 */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap5\n  dup6\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/PlayerCardsRandom.sol\":790:797  player2 */\n  0x02\n    /* \"contracts/PlayerCardsRandom.sol\":790:808  player2 = _player2 */\n  dup1\n  sload\n  swap4\n  dup6\n  and\n  swap4\n  dup3\n  and\n  swap4\n  swap1\n  swap4\n  or\n  swap1\n  swap3\n  sstore\n    /* \"contracts/PlayerCardsRandom.sol\":762:769  player1 */\n  0x00\n    /* \"contracts/PlayerCardsRandom.sol\":819:854  cardsContract = Cards(cardsAddress) */\n  dup1\n  sload\n  swap2\n  swap1\n  swap4\n  and\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/PlayerCardsRandom.sol\":154:4952  contract PlayerCardsRandom is CryptoBeastsTypes {... */\n  jump(tag_19)\n    /* \"--CODEGEN--\":5:127   */\ntag_8:\n  0x00\n    /* \"--CODEGEN--\":83:122   */\n  tag_9\n    /* \"--CODEGEN--\":114:120   */\n  dup3\n    /* \"--CODEGEN--\":108:121   */\n  mload\n    /* \"--CODEGEN--\":83:122   */\n  jump(tag_10)\ntag_9:\n    /* \"--CODEGEN--\":74:122   */\n  swap4\n    /* \"--CODEGEN--\":68:127   */\n  swap3\n  pop\n  pop\n  pop\n  jump\n    /* \"--CODEGEN--\":134:669   */\ntag_3:\n  0x00\n  dup1\n  0x00\n    /* \"--CODEGEN--\":283:285   */\n  0x60\n    /* \"--CODEGEN--\":271:280   */\n  dup5\n    /* \"--CODEGEN--\":262:269   */\n  dup7\n    /* \"--CODEGEN--\":258:281   */\n  sub\n    /* \"--CODEGEN--\":254:286   */\n  slt\n    /* \"--CODEGEN--\":251:253   */\n  iszero\n  tag_12\n  jumpi\n    /* \"--CODEGEN--\":299:300   */\n  0x00\n    /* \"--CODEGEN--\":296:297   */\n  dup1\n    /* \"--CODEGEN--\":289:301   */\n  revert\n    /* \"--CODEGEN--\":251:253   */\ntag_12:\n    /* \"--CODEGEN--\":334:335   */\n  0x00\n    /* \"--CODEGEN--\":351:415   */\n  tag_13\n    /* \"--CODEGEN--\":407:414   */\n  dup7\n    /* \"--CODEGEN--\":387:396   */\n  dup7\n    /* \"--CODEGEN--\":351:415   */\n  jump(tag_8)\ntag_13:\n    /* \"--CODEGEN--\":341:415   */\n  swap4\n  pop\n    /* \"--CODEGEN--\":313:421   */\n  pop\n    /* \"--CODEGEN--\":452:454   */\n  0x20\n    /* \"--CODEGEN--\":470:534   */\n  tag_14\n    /* \"--CODEGEN--\":526:533   */\n  dup7\n    /* \"--CODEGEN--\":517:523   */\n  dup3\n    /* \"--CODEGEN--\":506:515   */\n  dup8\n    /* \"--CODEGEN--\":502:524   */\n  add\n    /* \"--CODEGEN--\":470:534   */\n  jump(tag_8)\ntag_14:\n    /* \"--CODEGEN--\":460:534   */\n  swap3\n  pop\n    /* \"--CODEGEN--\":431:540   */\n  pop\n    /* \"--CODEGEN--\":571:573   */\n  0x40\n    /* \"--CODEGEN--\":589:653   */\n  tag_15\n    /* \"--CODEGEN--\":645:652   */\n  dup7\n    /* \"--CODEGEN--\":636:642   */\n  dup3\n    /* \"--CODEGEN--\":625:634   */\n  dup8\n    /* \"--CODEGEN--\":621:643   */\n  add\n    /* \"--CODEGEN--\":589:653   */\n  jump(tag_8)\ntag_15:\n    /* \"--CODEGEN--\":579:653   */\n  swap2\n  pop\n    /* \"--CODEGEN--\":550:659   */\n  pop\n    /* \"--CODEGEN--\":245:669   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\n    /* \"--CODEGEN--\":676:781   */\ntag_10:\n  0x00\n    /* \"--CODEGEN--\":745:776   */\n  tag_17\n    /* \"--CODEGEN--\":770:775   */\n  dup3\n    /* \"--CODEGEN--\":745:776   */\n  jump(tag_18)\ntag_17:\n    /* \"--CODEGEN--\":734:776   */\n  swap3\n    /* \"--CODEGEN--\":728:781   */\n  swap2\n  pop\n  pop\n  jump\n    /* \"--CODEGEN--\":788:916   */\ntag_18:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"--CODEGEN--\":857:911   */\n  and\n  swap1\n    /* \"--CODEGEN--\":840:916   */\n  jump\ntag_19:\n    /* \"contracts/PlayerCardsRandom.sol\":154:4952  contract PlayerCardsRandom is CryptoBeastsTypes {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/PlayerCardsRandom.sol\":154:4952  contract PlayerCardsRandom is CryptoBeastsTypes {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/PlayerCardsRandom.sol\":154:4952  contract PlayerCardsRandom is CryptoBeastsTypes {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xc0d35449\n      gt\n      tag_13\n      jumpi\n      dup1\n      0xc0d35449\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xd30895e4\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xd7eb798c\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xe4b6c992\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xfe145fbd\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_13:\n      dup1\n      0x06880689\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2af1e2f8\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x48373963\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x4ed61446\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x59a5f12d\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/PlayerCardsRandom.sol\":642:668  address public playersTurn */\n    tag_3:\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_17)\n    tag_16:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/PlayerCardsRandom.sol\":1887:2023  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n    tag_4:\n      tag_18\n      tag_19\n      calldatasize\n      0x04\n      jump(tag_20)\n    tag_19:\n      tag_21\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_23)\n        /* \"contracts/PlayerCardsRandom.sol\":2029:3922  function pickPayerCards(uint[5] memory desiredCards) public {... */\n    tag_5:\n      tag_24\n      tag_25\n      calldatasize\n      0x04\n      jump(tag_26)\n    tag_25:\n      tag_27\n      jump\t// in\n    tag_24:\n      stop\n        /* \"contracts/PlayerCardsRandom.sol\":4440:4822  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n    tag_6:\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      jump(tag_30)\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_33)\n        /* \"contracts/PlayerCardsRandom.sol\":529:551  address public player2 */\n    tag_7:\n      tag_14\n      tag_35\n      jump\t// in\n        /* \"contracts/PlayerCardsRandom.sol\":4828:4950  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n    tag_8:\n      tag_37\n      tag_38\n      calldatasize\n      0x04\n      jump(tag_20)\n    tag_38:\n      tag_39\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_41)\n        /* \"contracts/PlayerCardsRandom.sol\":501:523  address public player1 */\n    tag_9:\n      tag_14\n      tag_43\n      jump\t// in\n        /* \"contracts/PlayerCardsRandom.sol\":613:636  bool public cardsPicked */\n    tag_10:\n      tag_45\n      tag_46\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_48)\n        /* \"contracts/PlayerCardsRandom.sol\":557:607  mapping (address => PlayerDeck) public playerDecks */\n    tag_11:\n      tag_18\n      tag_50\n      calldatasize\n      0x04\n      jump(tag_20)\n    tag_50:\n      tag_51\n      jump\t// in\n        /* \"contracts/PlayerCardsRandom.sol\":1666:1881  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n    tag_12:\n      tag_53\n      tag_54\n      calldatasize\n      0x04\n      jump(tag_20)\n    tag_54:\n      tag_55\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      jump(tag_57)\n        /* \"contracts/PlayerCardsRandom.sol\":642:668  address public playersTurn */\n    tag_15:\n      sload(0x04)\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":1887:2023  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n    tag_21:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":1985:2004  playerDecks[player] */\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":1961:1966  uint8 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":1985:2004  playerDecks[player] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1985:1996  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":1985:2004  playerDecks[player] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":1985:2016  playerDecks[player].currentCard */\n      0x01\n      add\n      sload\n      0xff\n      and\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1887:2023  function getPlayersCurrentCardNumber(address player) public view returns (uint8) {... */\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":2029:3922  function pickPayerCards(uint[5] memory desiredCards) public {... */\n    tag_27:\n        /* \"contracts/PlayerCardsRandom.sol\":2147:2157  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsRandom.sol\":2100:2132  PlayerCard[] storage playerCards */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2135:2158  playerDecks[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":2135:2146  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":2135:2158  playerDecks[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":2188:2206  playerCards.length */\n      dup1\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":2188:2211  playerCards.length == 0 */\n      iszero\n        /* \"contracts/PlayerCardsRandom.sol\":2180:2253  require(playerCards.length == 0, 'Player has already picked their cards') */\n      tag_60\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_61\n      swap1\n      jump(tag_62)\n    tag_61:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_60:\n        /* \"contracts/PlayerCardsRandom.sol\":2268:2275  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsRandom.sol\":2279:2289  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsRandom.sol\":2268:2289  player1 == msg.sender */\n      eq\n        /* \"contracts/PlayerCardsRandom.sol\":2264:2661  if (player1 == msg.sender) {... */\n      iszero\n      tag_63\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":2321:2328  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsRandom.sol\":2351:2352  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2329  playerDecks[player2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2320  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2329  playerDecks[player2] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2348  playerDecks[player2].playerCards.length */\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":2309:2352  playerDecks[player2].playerCards.length > 0 */\n      iszero\n        /* \"contracts/PlayerCardsRandom.sol\":2305:2405  if (playerDecks[player2].playerCards.length > 0) {... */\n      tag_64\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":2372:2383  cardsPicked */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":2372:2390  cardsPicked = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":2386:2390  true */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":2372:2390  cardsPicked = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsRandom.sol\":2305:2405  if (playerDecks[player2].playerCards.length > 0) {... */\n    tag_64:\n        /* \"contracts/PlayerCardsRandom.sol\":2264:2661  if (player1 == msg.sender) {... */\n      jump(tag_68)\n    tag_63:\n        /* \"contracts/PlayerCardsRandom.sol\":2433:2440  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsRandom.sol\":2444:2454  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsRandom.sol\":2433:2454  player2 == msg.sender */\n      eq\n        /* \"contracts/PlayerCardsRandom.sol\":2429:2661  if (player2 == msg.sender) {... */\n      iszero\n      tag_66\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":2486:2493  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsRandom.sol\":2516:2517  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2494  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2485  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2494  playerDecks[player1] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2513  playerDecks[player1].playerCards.length */\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":2474:2517  playerDecks[player1].playerCards.length > 0 */\n      iszero\n        /* \"contracts/PlayerCardsRandom.sol\":2470:2570  if (playerDecks[player1].playerCards.length > 0) {... */\n      tag_64\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":2537:2548  cardsPicked */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":2537:2555  cardsPicked = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":2551:2555  true */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":2537:2555  cardsPicked = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsRandom.sol\":2429:2661  if (player2 == msg.sender) {... */\n      jump(tag_68)\n    tag_66:\n        /* \"contracts/PlayerCardsRandom.sol\":2600:2650  revert('Transaction sender must be player 1 or 2') */\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_61\n      swap1\n      jump(tag_70)\n        /* \"contracts/PlayerCardsRandom.sol\":2429:2661  if (player2 == msg.sender) {... */\n    tag_68:\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2703  uint[3] memory pickedCardNumbers */\n      tag_71\n      tag_72\n      jump\t// in\n    tag_71:\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2721  uint[3] memory pickedCardNumbers = [uint(0), 0, 0] */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":2712:2713  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2721  uint[3] memory pickedCardNumbers = [uint(0), 0, 0] */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":2716:2717  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2721  uint[3] memory pickedCardNumbers = [uint(0), 0, 0] */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":2719:2720  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2671:2721  uint[3] memory pickedCardNumbers = [uint(0), 0, 0] */\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":2761:2777  uint randomPick1 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2780:2799  _randomNumber(5, 1) */\n      tag_73\n        /* \"contracts/PlayerCardsRandom.sol\":2794:2795  5 */\n      0x05\n        /* \"contracts/PlayerCardsRandom.sol\":2797:2798  1 */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":2780:2793  _randomNumber */\n      tag_74\n        /* \"contracts/PlayerCardsRandom.sol\":2780:2799  _randomNumber(5, 1) */\n      jump\t// in\n    tag_73:\n        /* \"contracts/PlayerCardsRandom.sol\":2761:2799  uint randomPick1 = _randomNumber(5, 1) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":2809:2863  _setPlayerCard(playerCards, desiredCards[randomPick1]) */\n      tag_75\n        /* \"contracts/PlayerCardsRandom.sol\":2824:2835  playerCards */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":2837:2849  desiredCards */\n      dup6\n        /* \"contracts/PlayerCardsRandom.sol\":2850:2861  randomPick1 */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":2837:2862  desiredCards[randomPick1] */\n      0x05\n      dup2\n      lt\n      tag_76\n      jumpi\n      invalid\n    tag_76:\n      0x20\n      mul\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":2809:2823  _setPlayerCard */\n      tag_77\n        /* \"contracts/PlayerCardsRandom.sol\":2809:2863  _setPlayerCard(playerCards, desiredCards[randomPick1]) */\n      jump\t// in\n    tag_75:\n        /* \"contracts/PlayerCardsRandom.sol\":2896:2907  playerCards */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":2908:2909  0 */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":2896:2910  playerCards[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_78\n      jumpi\n      invalid\n    tag_78:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      keccak256\n      0x02\n      swap2\n      dup3\n      mul\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":2896:2917  playerCards[0].cardId */\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":2873:2917  pickedCardNumbers[0] = playerCards[0].cardId */\n      dup5\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":3073:3093  _randomNumber(10, 2) */\n      tag_81\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3087:3089  10 */\n      0x0a\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3073:3086  _randomNumber */\n      tag_74\n        /* \"contracts/PlayerCardsRandom.sol\":3073:3093  _randomNumber(10, 2) */\n      jump\t// in\n    tag_81:\n        /* \"contracts/PlayerCardsRandom.sol\":3054:3093  uint randomPick2 = _randomNumber(10, 2) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3202:3213  randomPick2 */\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":3187:3198  randomPick1 */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":3187:3213  randomPick1 == randomPick2 */\n      eq\n        /* \"contracts/PlayerCardsRandom.sol\":3187:3244  randomPick1 == randomPick2 ||... */\n      dup1\n      tag_82\n      jumpi\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3243:3244  4 */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":3229:3240  randomPick2 */\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":3229:3244  randomPick2 > 4 */\n      gt\n        /* \"contracts/PlayerCardsRandom.sol\":3187:3244  randomPick1 == randomPick2 ||... */\n    tag_82:\n        /* \"contracts/PlayerCardsRandom.sol\":3183:3551  if (randomPick1 == randomPick2 ||... */\n      iszero\n      tag_83\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":3274:3321  _randomNumber(cardsContract.cardCount() - 1, 2) */\n      tag_84\n        /* \"contracts/PlayerCardsRandom.sol\":3316:3317  1 */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3301  cardsContract */\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3311  cardsContract.cardCount */\n      and\n      0x1b6cde10\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3313  cardsContract.cardCount() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_85\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_85:\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3313  cardsContract.cardCount() */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_86\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_86:\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3313  cardsContract.cardCount() */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"--CODEGEN--\":97:106   */\n      not\n        /* \"--CODEGEN--\":90:94   */\n      0x1f\n        /* \"--CODEGEN--\":84:88   */\n      dup3\n        /* \"--CODEGEN--\":80:95   */\n      add\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":69:74   */\n      dup3\n        /* \"--CODEGEN--\":65:108   */\n      add\n        /* \"--CODEGEN--\":126:132   */\n      dup1\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"--CODEGEN--\":0:138   */\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3313  cardsContract.cardCount() */\n      tag_87\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_88)\n    tag_87:\n        /* \"contracts/PlayerCardsRandom.sol\":3288:3317  cardsContract.cardCount() - 1 */\n      sub\n        /* \"contracts/PlayerCardsRandom.sol\":3319:3320  2 */\n      0x02\n        /* \"contracts/PlayerCardsRandom.sol\":3274:3287  _randomNumber */\n      tag_74\n        /* \"contracts/PlayerCardsRandom.sol\":3274:3321  _randomNumber(cardsContract.cardCount() - 1, 2) */\n      jump\t// in\n    tag_84:\n        /* \"contracts/PlayerCardsRandom.sol\":3260:3321  randomPick2 = _randomNumber(cardsContract.cardCount() - 1, 2) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3364:3404  _setPlayerCard(playerCards, randomPick2) */\n      tag_89\n        /* \"contracts/PlayerCardsRandom.sol\":3379:3390  playerCards */\n      dup5\n        /* \"contracts/PlayerCardsRandom.sol\":3392:3403  randomPick2 */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":3364:3378  _setPlayerCard */\n      tag_77\n        /* \"contracts/PlayerCardsRandom.sol\":3364:3404  _setPlayerCard(playerCards, randomPick2) */\n      jump\t// in\n    tag_89:\n        /* \"contracts/PlayerCardsRandom.sol\":3183:3551  if (randomPick1 == randomPick2 ||... */\n      jump(tag_91)\n    tag_83:\n        /* \"contracts/PlayerCardsRandom.sol\":3486:3540  _setPlayerCard(playerCards, desiredCards[randomPick2]) */\n      tag_91\n        /* \"contracts/PlayerCardsRandom.sol\":3501:3512  playerCards */\n      dup5\n        /* \"contracts/PlayerCardsRandom.sol\":3514:3526  desiredCards */\n      dup7\n        /* \"contracts/PlayerCardsRandom.sol\":3527:3538  randomPick2 */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":3514:3539  desiredCards[randomPick2] */\n      0x05\n      dup2\n      lt\n      tag_76\n      jumpi\n      invalid\n        /* \"contracts/PlayerCardsRandom.sol\":3486:3540  _setPlayerCard(playerCards, desiredCards[randomPick2]) */\n    tag_91:\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3595  playerCards */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":3596:3597  1 */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3598  playerCards[1] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_93\n      jumpi\n      invalid\n    tag_93:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      0x02\n      swap1\n      swap3\n      mul\n      swap1\n      swap2\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3605  playerCards[1].cardId */\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":3561:3581  pickedCardNumbers[1] */\n      dup6\n      dup3\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":3561:3605  pickedCardNumbers[1] = playerCards[1].cardId */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3662  cardsContract */\n      dup2\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      0x40\n      dup1\n      mload\n      mul(0x01b6cde1, shl(0xe4, 0x01))\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":3635:3682  _randomNumber(cardsContract.cardCount() - 1, 3) */\n      tag_96\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":3579:3580  1 */\n      0x01\n      swap4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3662  cardsContract */\n      and\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3672  cardsContract.cardCount */\n      0x1b6cde10\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      0x04\n      dup1\n      dup4\n      add\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3598  playerCards[1] */\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":3584:3598  playerCards[1] */\n      dup10\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3662  cardsContract */\n      dup8\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":5:7   */\n      dup1\n      iszero\n      tag_97\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_97:\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_98\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_98:\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"--CODEGEN--\":97:106   */\n      not\n        /* \"--CODEGEN--\":90:94   */\n      0x1f\n        /* \"--CODEGEN--\":84:88   */\n      dup3\n        /* \"--CODEGEN--\":80:95   */\n      add\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":69:74   */\n      dup3\n        /* \"--CODEGEN--\":65:108   */\n      add\n        /* \"--CODEGEN--\":126:132   */\n      dup1\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"--CODEGEN--\":0:138   */\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3674  cardsContract.cardCount() */\n      tag_99\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_88)\n    tag_99:\n        /* \"contracts/PlayerCardsRandom.sol\":3649:3678  cardsContract.cardCount() - 1 */\n      sub\n        /* \"contracts/PlayerCardsRandom.sol\":3680:3681  3 */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":3635:3648  _randomNumber */\n      tag_74\n        /* \"contracts/PlayerCardsRandom.sol\":3635:3682  _randomNumber(cardsContract.cardCount() - 1, 3) */\n      jump\t// in\n    tag_96:\n        /* \"contracts/PlayerCardsRandom.sol\":3616:3682  uint randomPick3 = _randomNumber(cardsContract.cardCount() - 1, 3) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":3692:3732  _setPlayerCard(playerCards, randomPick3) */\n      tag_100\n        /* \"contracts/PlayerCardsRandom.sol\":3707:3718  playerCards */\n      dup6\n        /* \"contracts/PlayerCardsRandom.sol\":3720:3731  randomPick3 */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":3692:3706  _setPlayerCard */\n      tag_77\n        /* \"contracts/PlayerCardsRandom.sol\":3692:3732  _setPlayerCard(playerCards, randomPick3) */\n      jump\t// in\n    tag_100:\n        /* \"contracts/PlayerCardsRandom.sol\":3766:3777  playerCards */\n      dup5\n        /* \"contracts/PlayerCardsRandom.sol\":3778:3779  2 */\n      0x02\n        /* \"contracts/PlayerCardsRandom.sol\":3766:3780  playerCards[2] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_101\n      jumpi\n      invalid\n    tag_101:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      0x02\n      swap2\n      dup3\n      mul\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":3766:3787  playerCards[2].cardId */\n      sload\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3743:3760  pickedCardNumbers */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3743:3763  pickedCardNumbers[2] */\n      0x20\n      mul\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":3743:3787  pickedCardNumbers[2] = playerCards[2].cardId */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":3803:3850  PickPayerCards(desiredCards, pickedCardNumbers) */\n      mload(0x40)\n      0x48ca02657a8acb3a062f53bf24ca611bb25d8108f29f5e3c5e468080a44dca5d\n      swap1\n      tag_104\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3818:3830  desiredCards */\n      dup9\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3832:3849  pickedCardNumbers */\n      dup8\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":3803:3850  PickPayerCards(desiredCards, pickedCardNumbers) */\n      jump(tag_105)\n    tag_104:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/PlayerCardsRandom.sol\":3865:3876  cardsPicked */\n      and(0xff, sload(0x04))\n        /* \"contracts/PlayerCardsRandom.sol\":3861:3916  if (cardsPicked) {... */\n      iszero\n      tag_107\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":3892:3905  startBattle() */\n      tag_107\n        /* \"contracts/PlayerCardsRandom.sol\":3892:3903  startBattle */\n      tag_108\n        /* \"contracts/PlayerCardsRandom.sol\":3892:3905  startBattle() */\n      jump\t// in\n    tag_107:\n        /* \"contracts/PlayerCardsRandom.sol\":2029:3922  function pickPayerCards(uint[5] memory desiredCards) public {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":4440:4822  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n    tag_31:\n        /* \"contracts/PlayerCardsRandom.sol\":4511:4517  uint16 */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":4560:4790  for (uint i=0; i<playerCards.length; i++) {... */\n    tag_110:\n        /* \"contracts/PlayerCardsRandom.sol\":4577:4588  playerCards */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":4577:4595  playerCards.length */\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":4575:4576  i */\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":4575:4595  i<playerCards.length */\n      lt\n        /* \"contracts/PlayerCardsRandom.sol\":4560:4790  for (uint i=0; i<playerCards.length; i++) {... */\n      iszero\n      tag_111\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":4617:4633  uint16 cardSpeed */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4649  cardsContract */\n      dup1\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":4658:4672  playerCards[i] */\n      dup6\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4649  cardsContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4657  cardsContract.getCard */\n      0x9188d312\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4658:4669  playerCards */\n      dup8\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4670:4671  i */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4658:4672  playerCards[i] */\n      dup2\n      lt\n      tag_113\n      jumpi\n      invalid\n    tag_113:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":4658:4679  playerCards[i].cardId */\n      0x00\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_114\n      swap2\n      swap1\n      jump(tag_115)\n    tag_114:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_116\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_116:\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_117\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_117:\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4680  cardsContract.getCard(playerCards[i].cardId) */\n      tag_118\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_119)\n    tag_118:\n        /* \"contracts/PlayerCardsRandom.sol\":4636:4686  cardsContract.getCard(playerCards[i].cardId).speed */\n      0xa0\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":4617:4686  uint16 cardSpeed = cardsContract.getCard(playerCards[i].cardId).speed */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4717:4725  maxSpeed */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":4705:4725  cardSpeed > maxSpeed */\n      0xffff\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":4705:4714  cardSpeed */\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":4705:4725  cardSpeed > maxSpeed */\n      0xffff\n      and\n      gt\n        /* \"contracts/PlayerCardsRandom.sol\":4701:4780  if (cardSpeed > maxSpeed) {... */\n      iszero\n      tag_120\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":4756:4765  cardSpeed */\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":4745:4765  maxSpeed = cardSpeed */\n      swap3\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4701:4780  if (cardSpeed > maxSpeed) {... */\n    tag_120:\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4597:4600  i++ */\n      0x01\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":4560:4790  for (uint i=0; i<playerCards.length; i++) {... */\n      jump(tag_110)\n    tag_111:\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4807:4815  maxSpeed */\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4440:4822  function calcMaxSpeed(PlayerCard[] memory playerCards) public returns (uint16) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":529:551  address public player2 */\n    tag_35:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":4828:4950  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n    tag_39:\n        /* \"contracts/PlayerCardsRandom.sol\":4888:4905  PlayerDeck memory */\n      tag_121\n      tag_122\n      jump\t// in\n    tag_121:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4943  playerDecks[player] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4935  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4943  playerDecks[player] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":4917:4943  return playerDecks[player] */\n      dup2\n      mload\n      dup2\n      sload\n      0x60\n      swap5\n      dup2\n      mul\n      dup3\n      add\n      dup6\n      add\n      dup5\n      mstore\n      swap3\n      dup2\n      add\n      dup4\n      dup2\n      mstore\n      swap1\n      swap5\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4943  playerDecks[player] */\n      swap2\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":4917:4943  return playerDecks[player] */\n      dup6\n      swap4\n      swap2\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4924:4943  playerDecks[player] */\n      dup6\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4917:4943  return playerDecks[player] */\n      swap2\n      dup6\n      add\n    tag_124:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_125\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x0100000000\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_124)\n    tag_125:\n      pop\n      pop\n      pop\n      swap1\n      dup3\n      mstore\n      pop\n      0x01\n      swap2\n      swap1\n      swap2\n      add\n      sload\n      0xff\n      and\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4828:4950  function getPlayerDeck(address player) public view returns (PlayerDeck memory) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":501:523  address public player1 */\n    tag_43:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":613:636  bool public cardsPicked */\n    tag_46:\n      and(0xff, sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":557:607  mapping (address => PlayerDeck) public playerDecks */\n    tag_51:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      0x01\n      add\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":1666:1881  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n    tag_55:\n        /* \"contracts/PlayerCardsRandom.sol\":1733:1750  PlayerCard memory */\n      tag_127\n      tag_128\n      jump\t// in\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1801  playerDecks[player] */\n      dup3\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":1763:1779  uint8 deckNumber */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1801  playerDecks[player] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1793  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1801  playerDecks[player] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1813  playerDecks[player].currentCard */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":1831:1874  playerDecks[player].playerCards[deckNumber] */\n      dup2\n      sload\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1813  playerDecks[player].currentCard */\n      0xff\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1801  playerDecks[player] */\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1782:1813  playerDecks[player].currentCard */\n      dup3\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1831:1874  playerDecks[player].playerCards[deckNumber] */\n      dup2\n      lt\n      tag_130\n      jumpi\n      invalid\n    tag_130:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":1824:1874  return playerDecks[player].playerCards[deckNumber] */\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1831:1874  playerDecks[player].playerCards[deckNumber] */\n      0x02\n      swap1\n      swap4\n      mul\n      swap1\n      swap2\n      add\n        /* \"contracts/PlayerCardsRandom.sol\":1824:1874  return playerDecks[player].playerCards[deckNumber] */\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      swap5\n      dup5\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n      0x010000\n      dup2\n      div\n      dup5\n      and\n      swap2\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x0100000000\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup4\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup4\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup3\n      add\n      mstore\n      swap2\n      pop\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":1666:1881  function getPlayerCurrentCard(address player) public view returns (PlayerCard memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":867:1239  function _randomNumber(uint numberOfPicks, uint8 pickNumber) private view returns (uint) {... */\n    tag_74:\n        /* \"contracts/PlayerCardsRandom.sol\":950:954  uint */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":967:976  uint rand */\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":1062:1072  pickNumber */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":1119:1120  1 */\n      0x01\n        /* \"contracts/PlayerCardsRandom.sol\":1104:1116  block.number */\n      number\n        /* \"contracts/PlayerCardsRandom.sol\":1104:1120  block.number - 1 */\n      sub\n        /* \"contracts/PlayerCardsRandom.sol\":1094:1121  blockhash(block.number - 1) */\n      blockhash\n        /* \"contracts/PlayerCardsRandom.sol\":1143:1153  msg.sender */\n      caller\n        /* \"contracts/PlayerCardsRandom.sol\":1024:1171  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_133\n      swap4\n      swap3\n      swap2\n      swap1\n      jump(tag_134)\n    tag_133:\n      mload(0x40)\n        /* \"--CODEGEN--\":49:53   */\n      0x20\n        /* \"--CODEGEN--\":39:46   */\n      dup2\n        /* \"--CODEGEN--\":30:37   */\n      dup4\n        /* \"--CODEGEN--\":26:47   */\n      sub\n        /* \"--CODEGEN--\":22:54   */\n      sub\n        /* \"--CODEGEN--\":13:20   */\n      dup2\n        /* \"--CODEGEN--\":6:55   */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1024:1171  abi.encodePacked(... */\n      swap1\n      0x40\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":997:1185  keccak256(... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":979:1195  uint(... */\n      0x00\n      shr\n        /* \"contracts/PlayerCardsRandom.sol\":967:1195  uint rand = uint(... */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":1219:1232  numberOfPicks */\n      dup4\n        /* \"contracts/PlayerCardsRandom.sol\":1212:1216  rand */\n      dup2\n        /* \"contracts/PlayerCardsRandom.sol\":1212:1232  rand % numberOfPicks */\n      dup2\n      tag_135\n      jumpi\n      invalid\n    tag_135:\n      mod\n        /* \"contracts/PlayerCardsRandom.sol\":1205:1232  return rand % numberOfPicks */\n      swap2\n      pop\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":867:1239  function _randomNumber(uint numberOfPicks, uint8 pickNumber) private view returns (uint) {... */\n    tag_132:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":1245:1660  function _setPlayerCard(PlayerCard[] storage playerCards, uint cardId) internal {... */\n    tag_77:\n        /* \"contracts/PlayerCardsRandom.sol\":1336:1352  Card memory card */\n      tag_137\n      tag_138\n      jump\t// in\n    tag_137:\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1368  cardsContract */\n      sload(0x00)\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      mload(0x40)\n      mul(0x48c46989, shl(0xe1, 0x01))\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1368  cardsContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1376  cardsContract.getCard */\n      0x9188d312\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      tag_139\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1377:1383  cardId */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      0x04\n      add\n      jump(tag_115)\n    tag_139:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_140\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_140:\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_141\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_141:\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":39:55   */\n      returndatasize\n        /* \"--CODEGEN--\":36:37   */\n      0x00\n        /* \"--CODEGEN--\":17:34   */\n      dup3\n        /* \"--CODEGEN--\":2:56   */\n      returndatacopy\n        /* \"--CODEGEN--\":101:105   */\n      0x1f\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      returndatasize\n        /* \"--CODEGEN--\":80:95   */\n      swap1\n      dup2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":76:107   */\n      and\n        /* \"--CODEGEN--\":65:108   */\n      dup3\n      add\n        /* \"--CODEGEN--\":120:124   */\n      0x40\n        /* \"--CODEGEN--\":113:133   */\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1355:1384  cardsContract.getCard(cardId) */\n      tag_142\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      jump(tag_119)\n    tag_142:\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      0x40\n      dup1\n      mload\n      0xc0\n      dup1\n      dup3\n      add\n      dup4\n      mstore\n      swap5\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1474:1489  card.initHealth */\n      dup2\n      dup4\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      0xffff\n      swap1\n      dup2\n      and\n      0x20\n      dup1\n      dup5\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1512:1528  card.initDefence */\n      0x60\n      dup1\n      dup8\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      dup5\n      and\n      swap6\n      dup6\n      add\n      swap6\n      dup7\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1548:1561  card.initMana */\n      0x80\n      dup1\n      dup9\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      dup6\n      and\n      swap2\n      dup7\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1583:1594  card.attack */\n      swap9\n      dup8\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      dup5\n      and\n      swap9\n      dup6\n      add\n      swap9\n      dup10\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":1623:1641  card.specialAttack */\n      0xe0\n      swap1\n      swap7\n      add\n      mload\n        /* \"contracts/PlayerCardsRandom.sol\":1413:1652  PlayerCard({... */\n      dup4\n      and\n      0xa0\n      dup6\n      add\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":27:37   */\n      dup10\n      sload\n        /* \"--CODEGEN--\":39:40   */\n      0x01\n        /* \"--CODEGEN--\":23:41   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":45:68   */\n      dup13\n      sstore\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":1395:1653  playerCards.push( PlayerCard({... */\n      swap12\n      dup13\n      mstore\n      swap3\n      swap1\n      swap11\n      keccak256\n      swap5\n      mload\n      0x02\n      swap1\n      swap11\n      mul\n      swap1\n      swap5\n      add\n      swap9\n      dup10\n      sstore\n      swap1\n      mload\n      swap8\n      add\n      dup1\n      sload\n      swap4\n      mload\n      swap5\n      mload\n      swap7\n      mload\n      swap3\n      mload\n      dup3\n      and\n      shl(0x40, 0x01)\n      mul\n      not(0xffff0000000000000000)\n      swap4\n      dup4\n      and\n      shl(0x30, 0x01)\n      mul\n      not(0xffff000000000000)\n      swap9\n      dup5\n      and\n      0x0100000000\n      mul\n      not(0xffff00000000)\n      swap8\n      dup6\n      and\n      0x010000\n      mul\n      not(0xffff0000)\n      swap12\n      swap1\n      swap6\n      and\n      not(0xffff)\n      swap1\n      swap8\n      and\n      swap7\n      swap1\n      swap7\n      or\n      swap10\n      swap1\n      swap10\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap5\n      swap1\n      swap5\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap5\n      swap1\n      swap5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap3\n      swap1\n      swap3\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":1245:1660  function _setPlayerCard(PlayerCard[] storage playerCards, uint cardId) internal {... */\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":3998:4434  function startBattle() internal {... */\n    tag_108:\n        /* \"contracts/PlayerCardsRandom.sol\":4048:4059  cardsPicked */\n      and(0xff, sload(0x04))\n        /* \"contracts/PlayerCardsRandom.sol\":4040:4108  require(cardsPicked, 'Both players have to have picked their cards') */\n      tag_145\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, shl(0xe5, 0x01))\n      dup2\n      mstore\n      0x04\n      add\n      tag_61\n      swap1\n      jump(tag_147)\n    tag_145:\n        /* \"contracts/PlayerCardsRandom.sol\":4169:4176  player1 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/PlayerCardsRandom.sol\":4119:4141  uint16 player1MaxSpeed */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":4157:4177  playerDecks[player1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4157:4168  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":4157:4177  playerDecks[player1] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":4144:4190  calcMaxSpeed(playerDecks[player1].playerCards) */\n      dup1\n      sload\n      dup3\n      mload\n      dup2\n      dup6\n      mul\n      dup2\n      add\n      dup6\n      add\n      swap1\n      swap4\n      mstore\n      dup1\n      dup4\n      mstore\n      tag_148\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":4119:4141  uint16 player1MaxSpeed */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4144:4190  calcMaxSpeed(playerDecks[player1].playerCards) */\n      dup5\n      add\n    tag_149:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_150\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x0100000000\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_149)\n    tag_150:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4144:4156  calcMaxSpeed */\n      tag_31\n        /* \"contracts/PlayerCardsRandom.sol\":4144:4190  calcMaxSpeed(playerDecks[player1].playerCards) */\n      jump\t// in\n    tag_148:\n        /* \"contracts/PlayerCardsRandom.sol\":4250:4257  player2 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/PlayerCardsRandom.sol\":4200:4222  uint16 player2MaxSpeed */\n      0x00\n        /* \"contracts/PlayerCardsRandom.sol\":4238:4258  playerDecks[player2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4238:4249  playerDecks */\n      0x03\n        /* \"contracts/PlayerCardsRandom.sol\":4238:4258  playerDecks[player2] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/PlayerCardsRandom.sol\":4225:4271  calcMaxSpeed(playerDecks[player2].playerCards) */\n      dup1\n      sload\n      dup3\n      mload\n      dup2\n      dup6\n      mul\n      dup2\n      add\n      dup6\n      add\n      swap1\n      swap4\n      mstore\n      dup1\n      dup4\n      mstore\n        /* \"contracts/PlayerCardsRandom.sol\":4119:4190  uint16 player1MaxSpeed = calcMaxSpeed(playerDecks[player1].playerCards) */\n      swap5\n      swap6\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4200:4222  uint16 player2MaxSpeed */\n      swap3\n      swap4\n        /* \"contracts/PlayerCardsRandom.sol\":4225:4271  calcMaxSpeed(playerDecks[player2].playerCards) */\n      tag_152\n      swap4\n      swap2\n      swap3\n        /* \"contracts/PlayerCardsRandom.sol\":4200:4222  uint16 player2MaxSpeed */\n      dup6\n      swap1\n        /* \"contracts/PlayerCardsRandom.sol\":4225:4271  calcMaxSpeed(playerDecks[player2].playerCards) */\n      dup5\n      add\n      dup3\n      iszero\n      tag_150\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x02\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      dup4\n      mstore\n      0x01\n      swap1\n      dup2\n      add\n      sload\n      0xffff\n      dup1\n      dup3\n      and\n      dup6\n      dup8\n      add\n      mstore\n      0x010000\n      dup3\n      div\n      dup2\n      and\n      swap4\n      dup6\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x0100000000\n      dup2\n      div\n      dup4\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x30, 0x01)\n      dup2\n      div\n      dup4\n      and\n      0x80\n      dup6\n      add\n      mstore\n      shl(0x40, 0x01)\n      swap1\n      div\n      swap1\n      swap2\n      and\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_149)\n    tag_152:\n        /* \"contracts/PlayerCardsRandom.sol\":4200:4271  uint16 player2MaxSpeed = calcMaxSpeed(playerDecks[player2].playerCards) */\n      swap1\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":4305:4320  player2MaxSpeed */\n      dup1\n        /* \"contracts/PlayerCardsRandom.sol\":4286:4320  player1MaxSpeed >= player2MaxSpeed */\n      0xffff\n      and\n        /* \"contracts/PlayerCardsRandom.sol\":4286:4301  player1MaxSpeed */\n      dup3\n        /* \"contracts/PlayerCardsRandom.sol\":4286:4320  player1MaxSpeed >= player2MaxSpeed */\n      0xffff\n      and\n      lt\n        /* \"contracts/PlayerCardsRandom.sol\":4282:4428  if (player1MaxSpeed >= player2MaxSpeed) {... */\n      tag_156\n      jumpi\n        /* \"contracts/PlayerCardsRandom.sol\":4350:4357  player1 */\n      sload(0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4336:4347  playersTurn */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":4336:4357  playersTurn = player1 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4350:4357  player1 */\n      swap1\n      swap3\n      and\n      0x0100\n        /* \"contracts/PlayerCardsRandom.sol\":4336:4357  playersTurn = player1 */\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsRandom.sol\":4282:4428  if (player1MaxSpeed >= player2MaxSpeed) {... */\n      jump(tag_157)\n    tag_156:\n        /* \"contracts/PlayerCardsRandom.sol\":4410:4417  player2 */\n      sload(0x02)\n        /* \"contracts/PlayerCardsRandom.sol\":4396:4407  playersTurn */\n      0x04\n        /* \"contracts/PlayerCardsRandom.sol\":4396:4417  playersTurn = player2 */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/PlayerCardsRandom.sol\":4410:4417  player2 */\n      swap1\n      swap3\n      and\n      0x0100\n        /* \"contracts/PlayerCardsRandom.sol\":4396:4417  playersTurn = player2 */\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/PlayerCardsRandom.sol\":4282:4428  if (player1MaxSpeed >= player2MaxSpeed) {... */\n    tag_157:\n        /* \"contracts/PlayerCardsRandom.sol\":3998:4434  function startBattle() internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/PlayerCardsRandom.sol\":154:4952  contract PlayerCardsRandom is CryptoBeastsTypes {... */\n    tag_72:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x03\n      swap1\n        /* \"--CODEGEN--\":29:31   */\n      0x20\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:32   */\n      mul\n        /* \"--CODEGEN--\":117:121   */\n      dup1\n        /* \"--CODEGEN--\":105:115   */\n      codesize\n        /* \"--CODEGEN--\":97:103   */\n      dup4\n        /* \"--CODEGEN--\":88:122   */\n      codecopy\n      pop\n        /* \"contracts/PlayerCardsRandom.sol\":154:4952  contract PlayerCardsRandom is CryptoBeastsTypes {... */\n      swap2\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_122:\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x60\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_128:\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0xa0\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n    tag_138:\n      mload(0x40)\n      dup1\n      0x0260\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_158\n      tag_159\n      jump\t// in\n    tag_158:\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x40\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x60\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x80\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xa0\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0xc0\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_159:\n      mload(0x40)\n      dup1\n      0x0180\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      tag_160\n      tag_161\n      jump\t// in\n    tag_160:\n      dup2\n      mstore\n      0x20\n      add\n      tag_162\n      tag_161\n      jump\t// in\n    tag_162:\n      dup2\n      mstore\n      0x00\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap1\n      jump\t// out\n    tag_161:\n      0x40\n      dup1\n      mload\n      0xa0\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n        /* \"--CODEGEN--\":5:123   */\n    tag_164:\n      0x00\n        /* \"--CODEGEN--\":72:118   */\n      tag_165\n        /* \"--CODEGEN--\":110:116   */\n      dup3\n        /* \"--CODEGEN--\":97:117   */\n      calldataload\n        /* \"--CODEGEN--\":72:118   */\n      jump(tag_289)\n    tag_165:\n        /* \"--CODEGEN--\":63:118   */\n      swap4\n        /* \"--CODEGEN--\":57:123   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":176:955   */\n    tag_168:\n      0x00\n        /* \"--CODEGEN--\":317:320   */\n      dup3\n        /* \"--CODEGEN--\":310:314   */\n      0x1f\n        /* \"--CODEGEN--\":302:308   */\n      dup4\n        /* \"--CODEGEN--\":298:315   */\n      add\n        /* \"--CODEGEN--\":294:321   */\n      slt\n        /* \"--CODEGEN--\":284:286   */\n      tag_169\n      jumpi\n        /* \"--CODEGEN--\":335:336   */\n      0x00\n        /* \"--CODEGEN--\":332:333   */\n      dup1\n        /* \"--CODEGEN--\":325:337   */\n      revert\n        /* \"--CODEGEN--\":284:286   */\n    tag_169:\n        /* \"--CODEGEN--\":372:378   */\n      dup2\n        /* \"--CODEGEN--\":359:379   */\n      calldataload\n        /* \"--CODEGEN--\":394:498   */\n      tag_170\n        /* \"--CODEGEN--\":409:497   */\n      tag_171\n        /* \"--CODEGEN--\":490:496   */\n      dup3\n        /* \"--CODEGEN--\":409:497   */\n      jump(tag_172)\n    tag_171:\n        /* \"--CODEGEN--\":394:498   */\n      jump(tag_173)\n    tag_170:\n        /* \"--CODEGEN--\":385:498   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":515:520   */\n      dup2\n        /* \"--CODEGEN--\":540:546   */\n      dup2\n        /* \"--CODEGEN--\":533:538   */\n      dup4\n        /* \"--CODEGEN--\":526:547   */\n      mstore\n        /* \"--CODEGEN--\":570:574   */\n      0x20\n        /* \"--CODEGEN--\":562:568   */\n      dup5\n        /* \"--CODEGEN--\":558:575   */\n      add\n        /* \"--CODEGEN--\":548:575   */\n      swap4\n      pop\n        /* \"--CODEGEN--\":592:596   */\n      0x20\n        /* \"--CODEGEN--\":587:590   */\n      dup2\n        /* \"--CODEGEN--\":583:597   */\n      add\n        /* \"--CODEGEN--\":576:597   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":645:651   */\n      dup4\n        /* \"--CODEGEN--\":692:695   */\n      dup6\n        /* \"--CODEGEN--\":684:688   */\n      0xc0\n        /* \"--CODEGEN--\":676:682   */\n      dup5\n        /* \"--CODEGEN--\":672:689   */\n      mul\n        /* \"--CODEGEN--\":667:670   */\n      dup3\n        /* \"--CODEGEN--\":663:690   */\n      add\n        /* \"--CODEGEN--\":660:696   */\n      gt\n        /* \"--CODEGEN--\":657:659   */\n      iszero\n      tag_174\n      jumpi\n        /* \"--CODEGEN--\":709:710   */\n      0x00\n        /* \"--CODEGEN--\":706:707   */\n      dup1\n        /* \"--CODEGEN--\":699:711   */\n      revert\n        /* \"--CODEGEN--\":657:659   */\n    tag_174:\n        /* \"--CODEGEN--\":734:735   */\n      0x00\n        /* \"--CODEGEN--\":719:949   */\n    tag_175:\n        /* \"--CODEGEN--\":744:750   */\n      dup4\n        /* \"--CODEGEN--\":741:742   */\n      dup2\n        /* \"--CODEGEN--\":738:751   */\n      lt\n        /* \"--CODEGEN--\":719:949   */\n      iszero\n      tag_177\n      jumpi\n        /* \"--CODEGEN--\":802:805   */\n      dup2\n        /* \"--CODEGEN--\":824:885   */\n      tag_178\n        /* \"--CODEGEN--\":881:884   */\n      dup9\n        /* \"--CODEGEN--\":869:879   */\n      dup3\n        /* \"--CODEGEN--\":824:885   */\n      jump(tag_179)\n    tag_178:\n        /* \"--CODEGEN--\":812:886   */\n      dup5\n      mstore\n      pop\n        /* \"--CODEGEN--\":909:913   */\n      0x20\n        /* \"--CODEGEN--\":900:914   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"--CODEGEN--\":937:941   */\n      0xc0\n        /* \"--CODEGEN--\":928:942   */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n        /* \"--CODEGEN--\":766:767   */\n      0x01\n        /* \"--CODEGEN--\":759:768   */\n      add\n        /* \"--CODEGEN--\":719:949   */\n      jump(tag_175)\n    tag_177:\n        /* \"--CODEGEN--\":723:737   */\n      pop\n        /* \"--CODEGEN--\":277:955   */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":982:1597   */\n    tag_181:\n      0x00\n        /* \"--CODEGEN--\":1097:1100   */\n      dup3\n        /* \"--CODEGEN--\":1090:1094   */\n      0x1f\n        /* \"--CODEGEN--\":1082:1088   */\n      dup4\n        /* \"--CODEGEN--\":1078:1095   */\n      add\n        /* \"--CODEGEN--\":1074:1101   */\n      slt\n        /* \"--CODEGEN--\":1064:1066   */\n      tag_182\n      jumpi\n        /* \"--CODEGEN--\":1115:1116   */\n      0x00\n        /* \"--CODEGEN--\":1112:1113   */\n      dup1\n        /* \"--CODEGEN--\":1105:1117   */\n      revert\n        /* \"--CODEGEN--\":1064:1066   */\n    tag_182:\n        /* \"--CODEGEN--\":1139:1142   */\n      0x05\n        /* \"--CODEGEN--\":1157:1235   */\n      tag_183\n        /* \"--CODEGEN--\":1172:1234   */\n      tag_171\n        /* \"--CODEGEN--\":1227:1233   */\n      dup3\n        /* \"--CODEGEN--\":1172:1234   */\n      jump(tag_185)\n        /* \"--CODEGEN--\":1157:1235   */\n    tag_183:\n        /* \"--CODEGEN--\":1148:1235   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":1252:1257   */\n      dup2\n        /* \"--CODEGEN--\":1311:1317   */\n      dup4\n        /* \"--CODEGEN--\":1358:1361   */\n      dup6\n        /* \"--CODEGEN--\":1350:1354   */\n      0x20\n        /* \"--CODEGEN--\":1342:1348   */\n      dup5\n        /* \"--CODEGEN--\":1338:1355   */\n      mul\n        /* \"--CODEGEN--\":1333:1336   */\n      dup3\n        /* \"--CODEGEN--\":1329:1356   */\n      add\n        /* \"--CODEGEN--\":1326:1362   */\n      gt\n        /* \"--CODEGEN--\":1323:1325   */\n      iszero\n      tag_186\n      jumpi\n        /* \"--CODEGEN--\":1375:1376   */\n      0x00\n        /* \"--CODEGEN--\":1372:1373   */\n      dup1\n        /* \"--CODEGEN--\":1365:1377   */\n      revert\n        /* \"--CODEGEN--\":1323:1325   */\n    tag_186:\n        /* \"--CODEGEN--\":1400:1401   */\n      0x00\n        /* \"--CODEGEN--\":1385:1591   */\n    tag_187:\n        /* \"--CODEGEN--\":1410:1416   */\n      dup4\n        /* \"--CODEGEN--\":1407:1408   */\n      dup2\n        /* \"--CODEGEN--\":1404:1417   */\n      lt\n        /* \"--CODEGEN--\":1385:1591   */\n      iszero\n      tag_177\n      jumpi\n        /* \"--CODEGEN--\":1468:1471   */\n      dup2\n        /* \"--CODEGEN--\":1490:1527   */\n      tag_190\n        /* \"--CODEGEN--\":1523:1526   */\n      dup9\n        /* \"--CODEGEN--\":1511:1521   */\n      dup3\n        /* \"--CODEGEN--\":1490:1527   */\n      jump(tag_191)\n    tag_190:\n        /* \"--CODEGEN--\":1478:1528   */\n      dup5\n      mstore\n      pop\n        /* \"--CODEGEN--\":1551:1555   */\n      0x20\n        /* \"--CODEGEN--\":1542:1556   */\n      swap3\n      dup4\n      add\n      swap3\n        /* \"--CODEGEN--\":1570:1584   */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n        /* \"--CODEGEN--\":1432:1433   */\n      0x01\n        /* \"--CODEGEN--\":1425:1434   */\n      add\n        /* \"--CODEGEN--\":1385:1591   */\n      jump(tag_187)\n        /* \"--CODEGEN--\":1606:2042   */\n    tag_193:\n      0x00\n        /* \"--CODEGEN--\":1715:1718   */\n      dup3\n        /* \"--CODEGEN--\":1708:1712   */\n      0x1f\n        /* \"--CODEGEN--\":1700:1706   */\n      dup4\n        /* \"--CODEGEN--\":1696:1713   */\n      add\n        /* \"--CODEGEN--\":1692:1719   */\n      slt\n        /* \"--CODEGEN--\":1682:1684   */\n      tag_194\n      jumpi\n        /* \"--CODEGEN--\":1733:1734   */\n      0x00\n        /* \"--CODEGEN--\":1730:1731   */\n      dup1\n        /* \"--CODEGEN--\":1723:1735   */\n      revert\n        /* \"--CODEGEN--\":1682:1684   */\n    tag_194:\n        /* \"--CODEGEN--\":1763:1769   */\n      dup2\n        /* \"--CODEGEN--\":1757:1770   */\n      mload\n        /* \"--CODEGEN--\":1785:1846   */\n      tag_195\n        /* \"--CODEGEN--\":1800:1845   */\n      tag_171\n        /* \"--CODEGEN--\":1838:1844   */\n      dup3\n        /* \"--CODEGEN--\":1800:1845   */\n      jump(tag_197)\n        /* \"--CODEGEN--\":1785:1846   */\n    tag_195:\n        /* \"--CODEGEN--\":1776:1846   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":1866:1872   */\n      dup1\n        /* \"--CODEGEN--\":1859:1864   */\n      dup3\n        /* \"--CODEGEN--\":1852:1873   */\n      mstore\n        /* \"--CODEGEN--\":1902:1906   */\n      0x20\n        /* \"--CODEGEN--\":1894:1900   */\n      dup4\n        /* \"--CODEGEN--\":1890:1907   */\n      add\n        /* \"--CODEGEN--\":1935:1939   */\n      0x20\n        /* \"--CODEGEN--\":1928:1933   */\n      dup4\n        /* \"--CODEGEN--\":1924:1940   */\n      add\n        /* \"--CODEGEN--\":1970:1973   */\n      dup6\n        /* \"--CODEGEN--\":1961:1967   */\n      dup4\n        /* \"--CODEGEN--\":1956:1959   */\n      dup4\n        /* \"--CODEGEN--\":1952:1968   */\n      add\n        /* \"--CODEGEN--\":1949:1974   */\n      gt\n        /* \"--CODEGEN--\":1946:1948   */\n      iszero\n      tag_198\n      jumpi\n        /* \"--CODEGEN--\":1987:1988   */\n      0x00\n        /* \"--CODEGEN--\":1984:1985   */\n      dup1\n        /* \"--CODEGEN--\":1977:1989   */\n      revert\n        /* \"--CODEGEN--\":1946:1948   */\n    tag_198:\n        /* \"--CODEGEN--\":1997:2036   */\n      tag_199\n        /* \"--CODEGEN--\":2029:2035   */\n      dup4\n        /* \"--CODEGEN--\":2024:2027   */\n      dup3\n        /* \"--CODEGEN--\":2019:2022   */\n      dup5\n        /* \"--CODEGEN--\":1997:2036   */\n      jump(tag_200)\n    tag_199:\n        /* \"--CODEGEN--\":1675:2042   */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":2089:3047   */\n    tag_202:\n      0x00\n        /* \"--CODEGEN--\":2210:2215   */\n      0x0180\n        /* \"--CODEGEN--\":2198:2207   */\n      dup3\n        /* \"--CODEGEN--\":2193:2196   */\n      dup5\n        /* \"--CODEGEN--\":2189:2208   */\n      sub\n        /* \"--CODEGEN--\":2185:2216   */\n      slt\n        /* \"--CODEGEN--\":2182:2184   */\n      iszero\n      tag_203\n      jumpi\n        /* \"--CODEGEN--\":2229:2230   */\n      0x00\n        /* \"--CODEGEN--\":2226:2227   */\n      dup1\n        /* \"--CODEGEN--\":2219:2231   */\n      revert\n        /* \"--CODEGEN--\":2182:2184   */\n    tag_203:\n        /* \"--CODEGEN--\":2247:2267   */\n      tag_204\n        /* \"--CODEGEN--\":2262:2266   */\n      0x80\n        /* \"--CODEGEN--\":2247:2267   */\n      jump(tag_173)\n    tag_204:\n        /* \"--CODEGEN--\":2317:2341   */\n      dup3\n      mload\n        /* \"--CODEGEN--\":2238:2267   */\n      swap1\n      swap2\n      pop\n        /* \"--CODEGEN--\":2361:2379   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":2350:2380   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":2347:2349   */\n      iszero\n      tag_205\n      jumpi\n        /* \"--CODEGEN--\":2393:2394   */\n      0x00\n        /* \"--CODEGEN--\":2390:2391   */\n      dup1\n        /* \"--CODEGEN--\":2383:2395   */\n      revert\n        /* \"--CODEGEN--\":2347:2349   */\n    tag_205:\n        /* \"--CODEGEN--\":2427:2493   */\n      tag_206\n        /* \"--CODEGEN--\":2489:2492   */\n      dup5\n        /* \"--CODEGEN--\":2480:2486   */\n      dup3\n        /* \"--CODEGEN--\":2469:2478   */\n      dup6\n        /* \"--CODEGEN--\":2465:2487   */\n      add\n        /* \"--CODEGEN--\":2427:2493   */\n      jump(tag_193)\n    tag_206:\n        /* \"--CODEGEN--\":2403:2494   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":2559:2561   */\n      0x20\n        /* \"--CODEGEN--\":2592:2680   */\n      tag_207\n        /* \"--CODEGEN--\":2676:2679   */\n      dup5\n        /* \"--CODEGEN--\":2652:2674   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":2592:2680   */\n      jump(tag_208)\n    tag_207:\n        /* \"--CODEGEN--\":2585:2589   */\n      0x20\n        /* \"--CODEGEN--\":2578:2583   */\n      dup4\n        /* \"--CODEGEN--\":2574:2590   */\n      add\n        /* \"--CODEGEN--\":2567:2681   */\n      mstore\n        /* \"--CODEGEN--\":2515:2692   */\n      pop\n        /* \"--CODEGEN--\":2744:2747   */\n      0xc0\n        /* \"--CODEGEN--\":2778:2866   */\n      tag_209\n        /* \"--CODEGEN--\":2862:2865   */\n      dup5\n        /* \"--CODEGEN--\":2853:2859   */\n      dup3\n        /* \"--CODEGEN--\":2842:2851   */\n      dup6\n        /* \"--CODEGEN--\":2838:2860   */\n      add\n        /* \"--CODEGEN--\":2778:2866   */\n      jump(tag_208)\n    tag_209:\n        /* \"--CODEGEN--\":2771:2775   */\n      0x40\n        /* \"--CODEGEN--\":2764:2769   */\n      dup4\n        /* \"--CODEGEN--\":2760:2776   */\n      add\n        /* \"--CODEGEN--\":2753:2867   */\n      mstore\n        /* \"--CODEGEN--\":2702:2878   */\n      pop\n        /* \"--CODEGEN--\":2932:2935   */\n      0x0160\n        /* \"--CODEGEN--\":2966:3025   */\n      tag_210\n        /* \"--CODEGEN--\":3021:3024   */\n      dup5\n        /* \"--CODEGEN--\":3012:3018   */\n      dup3\n        /* \"--CODEGEN--\":3001:3010   */\n      dup6\n        /* \"--CODEGEN--\":2997:3019   */\n      add\n        /* \"--CODEGEN--\":2966:3025   */\n      jump(tag_211)\n    tag_210:\n        /* \"--CODEGEN--\":2959:2963   */\n      0x60\n        /* \"--CODEGEN--\":2952:2957   */\n      dup4\n        /* \"--CODEGEN--\":2948:2964   */\n      add\n        /* \"--CODEGEN--\":2941:3026   */\n      mstore\n        /* \"--CODEGEN--\":2888:3037   */\n      pop\n        /* \"--CODEGEN--\":2176:3047   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":3100:4079   */\n    tag_208:\n      0x00\n        /* \"--CODEGEN--\":3228:3232   */\n      0xa0\n        /* \"--CODEGEN--\":3216:3225   */\n      dup3\n        /* \"--CODEGEN--\":3211:3214   */\n      dup5\n        /* \"--CODEGEN--\":3207:3226   */\n      sub\n        /* \"--CODEGEN--\":3203:3233   */\n      slt\n        /* \"--CODEGEN--\":3200:3202   */\n      iszero\n      tag_213\n      jumpi\n        /* \"--CODEGEN--\":3246:3247   */\n      0x00\n        /* \"--CODEGEN--\":3243:3244   */\n      dup1\n        /* \"--CODEGEN--\":3236:3248   */\n      revert\n        /* \"--CODEGEN--\":3200:3202   */\n    tag_213:\n        /* \"--CODEGEN--\":3264:3284   */\n      tag_214\n        /* \"--CODEGEN--\":3279:3283   */\n      0xa0\n        /* \"--CODEGEN--\":3264:3284   */\n      jump(tag_173)\n    tag_214:\n        /* \"--CODEGEN--\":3255:3284   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":3336:3337   */\n      0x00\n        /* \"--CODEGEN--\":3367:3426   */\n      tag_215\n        /* \"--CODEGEN--\":3422:3425   */\n      dup5\n        /* \"--CODEGEN--\":3402:3411   */\n      dup5\n        /* \"--CODEGEN--\":3367:3426   */\n      jump(tag_211)\n    tag_215:\n        /* \"--CODEGEN--\":3343:3427   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":3491:3493   */\n      0x20\n        /* \"--CODEGEN--\":3524:3583   */\n      tag_216\n        /* \"--CODEGEN--\":3579:3582   */\n      dup5\n        /* \"--CODEGEN--\":3555:3577   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":3524:3583   */\n      jump(tag_211)\n    tag_216:\n        /* \"--CODEGEN--\":3517:3521   */\n      0x20\n        /* \"--CODEGEN--\":3510:3515   */\n      dup4\n        /* \"--CODEGEN--\":3506:3522   */\n      add\n        /* \"--CODEGEN--\":3499:3584   */\n      mstore\n        /* \"--CODEGEN--\":3448:3595   */\n      pop\n        /* \"--CODEGEN--\":3645:3647   */\n      0x40\n        /* \"--CODEGEN--\":3678:3737   */\n      tag_217\n        /* \"--CODEGEN--\":3733:3736   */\n      dup5\n        /* \"--CODEGEN--\":3724:3730   */\n      dup3\n        /* \"--CODEGEN--\":3713:3722   */\n      dup6\n        /* \"--CODEGEN--\":3709:3731   */\n      add\n        /* \"--CODEGEN--\":3678:3737   */\n      jump(tag_211)\n    tag_217:\n        /* \"--CODEGEN--\":3671:3675   */\n      0x40\n        /* \"--CODEGEN--\":3664:3669   */\n      dup4\n        /* \"--CODEGEN--\":3660:3676   */\n      add\n        /* \"--CODEGEN--\":3653:3738   */\n      mstore\n        /* \"--CODEGEN--\":3605:3749   */\n      pop\n        /* \"--CODEGEN--\":3801:3803   */\n      0x60\n        /* \"--CODEGEN--\":3834:3893   */\n      tag_218\n        /* \"--CODEGEN--\":3889:3892   */\n      dup5\n        /* \"--CODEGEN--\":3880:3886   */\n      dup3\n        /* \"--CODEGEN--\":3869:3878   */\n      dup6\n        /* \"--CODEGEN--\":3865:3887   */\n      add\n        /* \"--CODEGEN--\":3834:3893   */\n      jump(tag_211)\n    tag_218:\n        /* \"--CODEGEN--\":3827:3831   */\n      0x60\n        /* \"--CODEGEN--\":3820:3825   */\n      dup4\n        /* \"--CODEGEN--\":3816:3832   */\n      add\n        /* \"--CODEGEN--\":3809:3894   */\n      mstore\n        /* \"--CODEGEN--\":3759:3905   */\n      pop\n        /* \"--CODEGEN--\":3964:3967   */\n      0x80\n        /* \"--CODEGEN--\":3998:4057   */\n      tag_219\n        /* \"--CODEGEN--\":4053:4056   */\n      dup5\n        /* \"--CODEGEN--\":4044:4050   */\n      dup3\n        /* \"--CODEGEN--\":4033:4042   */\n      dup6\n        /* \"--CODEGEN--\":4029:4051   */\n      add\n        /* \"--CODEGEN--\":3998:4057   */\n      jump(tag_211)\n    tag_219:\n        /* \"--CODEGEN--\":3991:3995   */\n      0x80\n        /* \"--CODEGEN--\":3984:3989   */\n      dup4\n        /* \"--CODEGEN--\":3980:3996   */\n      add\n        /* \"--CODEGEN--\":3973:4058   */\n      mstore\n        /* \"--CODEGEN--\":3915:4069   */\n      pop\n        /* \"--CODEGEN--\":3194:4079   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":4122:5765   */\n    tag_221:\n      0x00\n        /* \"--CODEGEN--\":4244:4249   */\n      0x0100\n        /* \"--CODEGEN--\":4232:4241   */\n      dup3\n        /* \"--CODEGEN--\":4227:4230   */\n      dup5\n        /* \"--CODEGEN--\":4223:4242   */\n      sub\n        /* \"--CODEGEN--\":4219:4250   */\n      slt\n        /* \"--CODEGEN--\":4216:4218   */\n      iszero\n      tag_222\n      jumpi\n        /* \"--CODEGEN--\":4263:4264   */\n      0x00\n        /* \"--CODEGEN--\":4260:4261   */\n      dup1\n        /* \"--CODEGEN--\":4253:4265   */\n      revert\n        /* \"--CODEGEN--\":4216:4218   */\n    tag_222:\n        /* \"--CODEGEN--\":4281:4302   */\n      tag_223\n        /* \"--CODEGEN--\":4296:4301   */\n      0x0100\n        /* \"--CODEGEN--\":4281:4302   */\n      jump(tag_173)\n    tag_223:\n        /* \"--CODEGEN--\":4352:4376   */\n      dup3\n      mload\n        /* \"--CODEGEN--\":4272:4302   */\n      swap1\n      swap2\n      pop\n        /* \"--CODEGEN--\":4396:4414   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":4385:4415   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":4382:4384   */\n      iszero\n      tag_224\n      jumpi\n        /* \"--CODEGEN--\":4428:4429   */\n      0x00\n        /* \"--CODEGEN--\":4425:4426   */\n      dup1\n        /* \"--CODEGEN--\":4418:4430   */\n      revert\n        /* \"--CODEGEN--\":4382:4384   */\n    tag_224:\n        /* \"--CODEGEN--\":4462:4528   */\n      tag_225\n        /* \"--CODEGEN--\":4524:4527   */\n      dup5\n        /* \"--CODEGEN--\":4515:4521   */\n      dup3\n        /* \"--CODEGEN--\":4504:4513   */\n      dup6\n        /* \"--CODEGEN--\":4500:4522   */\n      add\n        /* \"--CODEGEN--\":4462:4528   */\n      jump(tag_193)\n    tag_225:\n        /* \"--CODEGEN--\":4438:4529   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":4614:4616   */\n      0x20\n        /* \"--CODEGEN--\":4599:4617   */\n      dup3\n      add\n        /* \"--CODEGEN--\":4593:4618   */\n      mload\n        /* \"--CODEGEN--\":4638:4656   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":4627:4657   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":4624:4626   */\n      iszero\n      tag_226\n      jumpi\n        /* \"--CODEGEN--\":4670:4671   */\n      0x00\n        /* \"--CODEGEN--\":4667:4668   */\n      dup1\n        /* \"--CODEGEN--\":4660:4672   */\n      revert\n        /* \"--CODEGEN--\":4624:4626   */\n    tag_226:\n        /* \"--CODEGEN--\":4705:4786   */\n      tag_227\n        /* \"--CODEGEN--\":4782:4785   */\n      dup5\n        /* \"--CODEGEN--\":4773:4779   */\n      dup3\n        /* \"--CODEGEN--\":4762:4771   */\n      dup6\n        /* \"--CODEGEN--\":4758:4780   */\n      add\n        /* \"--CODEGEN--\":4705:4786   */\n      jump(tag_202)\n    tag_227:\n        /* \"--CODEGEN--\":4698:4702   */\n      0x20\n        /* \"--CODEGEN--\":4691:4696   */\n      dup4\n        /* \"--CODEGEN--\":4687:4703   */\n      add\n        /* \"--CODEGEN--\":4680:4787   */\n      mstore\n        /* \"--CODEGEN--\":4550:4798   */\n      pop\n        /* \"--CODEGEN--\":4854:4856   */\n      0x40\n        /* \"--CODEGEN--\":4887:4946   */\n      tag_228\n        /* \"--CODEGEN--\":4942:4945   */\n      dup5\n        /* \"--CODEGEN--\":4933:4939   */\n      dup3\n        /* \"--CODEGEN--\":4922:4931   */\n      dup6\n        /* \"--CODEGEN--\":4918:4940   */\n      add\n        /* \"--CODEGEN--\":4887:4946   */\n      jump(tag_211)\n    tag_228:\n        /* \"--CODEGEN--\":4880:4884   */\n      0x40\n        /* \"--CODEGEN--\":4873:4878   */\n      dup4\n        /* \"--CODEGEN--\":4869:4885   */\n      add\n        /* \"--CODEGEN--\":4862:4947   */\n      mstore\n        /* \"--CODEGEN--\":4808:4958   */\n      pop\n        /* \"--CODEGEN--\":5015:5017   */\n      0x60\n        /* \"--CODEGEN--\":5048:5107   */\n      tag_229\n        /* \"--CODEGEN--\":5103:5106   */\n      dup5\n        /* \"--CODEGEN--\":5094:5100   */\n      dup3\n        /* \"--CODEGEN--\":5083:5092   */\n      dup6\n        /* \"--CODEGEN--\":5079:5101   */\n      add\n        /* \"--CODEGEN--\":5048:5107   */\n      jump(tag_211)\n    tag_229:\n        /* \"--CODEGEN--\":5041:5045   */\n      0x60\n        /* \"--CODEGEN--\":5034:5039   */\n      dup4\n        /* \"--CODEGEN--\":5030:5046   */\n      add\n        /* \"--CODEGEN--\":5023:5108   */\n      mstore\n        /* \"--CODEGEN--\":4968:5119   */\n      pop\n        /* \"--CODEGEN--\":5173:5176   */\n      0x80\n        /* \"--CODEGEN--\":5207:5266   */\n      tag_230\n        /* \"--CODEGEN--\":5262:5265   */\n      dup5\n        /* \"--CODEGEN--\":5253:5259   */\n      dup3\n        /* \"--CODEGEN--\":5242:5251   */\n      dup6\n        /* \"--CODEGEN--\":5238:5260   */\n      add\n        /* \"--CODEGEN--\":5207:5266   */\n      jump(tag_211)\n    tag_230:\n        /* \"--CODEGEN--\":5200:5204   */\n      0x80\n        /* \"--CODEGEN--\":5193:5198   */\n      dup4\n        /* \"--CODEGEN--\":5189:5205   */\n      add\n        /* \"--CODEGEN--\":5182:5267   */\n      mstore\n        /* \"--CODEGEN--\":5129:5278   */\n      pop\n        /* \"--CODEGEN--\":5329:5332   */\n      0xa0\n        /* \"--CODEGEN--\":5363:5422   */\n      tag_231\n        /* \"--CODEGEN--\":5418:5421   */\n      dup5\n        /* \"--CODEGEN--\":5409:5415   */\n      dup3\n        /* \"--CODEGEN--\":5398:5407   */\n      dup6\n        /* \"--CODEGEN--\":5394:5416   */\n      add\n        /* \"--CODEGEN--\":5363:5422   */\n      jump(tag_211)\n    tag_231:\n        /* \"--CODEGEN--\":5356:5360   */\n      0xa0\n        /* \"--CODEGEN--\":5349:5354   */\n      dup4\n        /* \"--CODEGEN--\":5345:5361   */\n      add\n        /* \"--CODEGEN--\":5338:5423   */\n      mstore\n        /* \"--CODEGEN--\":5288:5434   */\n      pop\n        /* \"--CODEGEN--\":5486:5489   */\n      0xc0\n        /* \"--CODEGEN--\":5520:5579   */\n      tag_232\n        /* \"--CODEGEN--\":5575:5578   */\n      dup5\n        /* \"--CODEGEN--\":5566:5572   */\n      dup3\n        /* \"--CODEGEN--\":5555:5564   */\n      dup6\n        /* \"--CODEGEN--\":5551:5573   */\n      add\n        /* \"--CODEGEN--\":5520:5579   */\n      jump(tag_211)\n    tag_232:\n        /* \"--CODEGEN--\":5513:5517   */\n      0xc0\n        /* \"--CODEGEN--\":5506:5511   */\n      dup4\n        /* \"--CODEGEN--\":5502:5518   */\n      add\n        /* \"--CODEGEN--\":5495:5580   */\n      mstore\n        /* \"--CODEGEN--\":5444:5591   */\n      pop\n        /* \"--CODEGEN--\":5650:5653   */\n      0xe0\n        /* \"--CODEGEN--\":5684:5743   */\n      tag_233\n        /* \"--CODEGEN--\":5739:5742   */\n      dup5\n        /* \"--CODEGEN--\":5730:5736   */\n      dup3\n        /* \"--CODEGEN--\":5719:5728   */\n      dup6\n        /* \"--CODEGEN--\":5715:5737   */\n      add\n        /* \"--CODEGEN--\":5684:5743   */\n      jump(tag_211)\n    tag_233:\n        /* \"--CODEGEN--\":5677:5681   */\n      0xe0\n        /* \"--CODEGEN--\":5670:5675   */\n      dup4\n        /* \"--CODEGEN--\":5666:5682   */\n      add\n        /* \"--CODEGEN--\":5659:5744   */\n      mstore\n        /* \"--CODEGEN--\":5601:5755   */\n      pop\n        /* \"--CODEGEN--\":4210:5765   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":5814:6870   */\n    tag_179:\n      0x00\n        /* \"--CODEGEN--\":5927:5931   */\n      0xc0\n        /* \"--CODEGEN--\":5915:5924   */\n      dup3\n        /* \"--CODEGEN--\":5910:5913   */\n      dup5\n        /* \"--CODEGEN--\":5906:5925   */\n      sub\n        /* \"--CODEGEN--\":5902:5932   */\n      slt\n        /* \"--CODEGEN--\":5899:5901   */\n      iszero\n      tag_235\n      jumpi\n        /* \"--CODEGEN--\":5945:5946   */\n      0x00\n        /* \"--CODEGEN--\":5942:5943   */\n      dup1\n        /* \"--CODEGEN--\":5935:5947   */\n      revert\n        /* \"--CODEGEN--\":5899:5901   */\n    tag_235:\n        /* \"--CODEGEN--\":5963:5983   */\n      tag_236\n        /* \"--CODEGEN--\":5978:5982   */\n      0xc0\n        /* \"--CODEGEN--\":5963:5983   */\n      jump(tag_173)\n    tag_236:\n        /* \"--CODEGEN--\":5954:5983   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":6035:6036   */\n      0x00\n        /* \"--CODEGEN--\":6066:6115   */\n      tag_237\n        /* \"--CODEGEN--\":6111:6114   */\n      dup5\n        /* \"--CODEGEN--\":6091:6100   */\n      dup5\n        /* \"--CODEGEN--\":6066:6115   */\n      jump(tag_191)\n    tag_237:\n        /* \"--CODEGEN--\":6042:6116   */\n      dup3\n      mstore\n      pop\n        /* \"--CODEGEN--\":6179:6181   */\n      0x20\n        /* \"--CODEGEN--\":6212:6260   */\n      tag_238\n        /* \"--CODEGEN--\":6256:6259   */\n      dup5\n        /* \"--CODEGEN--\":6232:6254   */\n      dup5\n      dup4\n      add\n        /* \"--CODEGEN--\":6212:6260   */\n      jump(tag_239)\n    tag_238:\n        /* \"--CODEGEN--\":6205:6209   */\n      0x20\n        /* \"--CODEGEN--\":6198:6203   */\n      dup4\n        /* \"--CODEGEN--\":6194:6210   */\n      add\n        /* \"--CODEGEN--\":6187:6261   */\n      mstore\n        /* \"--CODEGEN--\":6137:6272   */\n      pop\n        /* \"--CODEGEN--\":6325:6327   */\n      0x40\n        /* \"--CODEGEN--\":6358:6406   */\n      tag_240\n        /* \"--CODEGEN--\":6402:6405   */\n      dup5\n        /* \"--CODEGEN--\":6393:6399   */\n      dup3\n        /* \"--CODEGEN--\":6382:6391   */\n      dup6\n        /* \"--CODEGEN--\":6378:6400   */\n      add\n        /* \"--CODEGEN--\":6358:6406   */\n      jump(tag_239)\n    tag_240:\n        /* \"--CODEGEN--\":6351:6355   */\n      0x40\n        /* \"--CODEGEN--\":6344:6349   */\n      dup4\n        /* \"--CODEGEN--\":6340:6356   */\n      add\n        /* \"--CODEGEN--\":6333:6407   */\n      mstore\n        /* \"--CODEGEN--\":6282:6418   */\n      pop\n        /* \"--CODEGEN--\":6468:6470   */\n      0x60\n        /* \"--CODEGEN--\":6501:6549   */\n      tag_241\n        /* \"--CODEGEN--\":6545:6548   */\n      dup5\n        /* \"--CODEGEN--\":6536:6542   */\n      dup3\n        /* \"--CODEGEN--\":6525:6534   */\n      dup6\n        /* \"--CODEGEN--\":6521:6543   */\n      add\n        /* \"--CODEGEN--\":6501:6549   */\n      jump(tag_239)\n    tag_241:\n        /* \"--CODEGEN--\":6494:6498   */\n      0x60\n        /* \"--CODEGEN--\":6487:6492   */\n      dup4\n        /* \"--CODEGEN--\":6483:6499   */\n      add\n        /* \"--CODEGEN--\":6476:6550   */\n      mstore\n        /* \"--CODEGEN--\":6428:6561   */\n      pop\n        /* \"--CODEGEN--\":6613:6616   */\n      0x80\n        /* \"--CODEGEN--\":6647:6695   */\n      tag_242\n        /* \"--CODEGEN--\":6691:6694   */\n      dup5\n        /* \"--CODEGEN--\":6682:6688   */\n      dup3\n        /* \"--CODEGEN--\":6671:6680   */\n      dup6\n        /* \"--CODEGEN--\":6667:6689   */\n      add\n        /* \"--CODEGEN--\":6647:6695   */\n      jump(tag_239)\n    tag_242:\n        /* \"--CODEGEN--\":6640:6644   */\n      0x80\n        /* \"--CODEGEN--\":6633:6638   */\n      dup4\n        /* \"--CODEGEN--\":6629:6645   */\n      add\n        /* \"--CODEGEN--\":6622:6696   */\n      mstore\n        /* \"--CODEGEN--\":6571:6707   */\n      pop\n        /* \"--CODEGEN--\":6766:6769   */\n      0xa0\n        /* \"--CODEGEN--\":6800:6848   */\n      tag_243\n        /* \"--CODEGEN--\":6844:6847   */\n      dup5\n        /* \"--CODEGEN--\":6835:6841   */\n      dup3\n        /* \"--CODEGEN--\":6824:6833   */\n      dup6\n        /* \"--CODEGEN--\":6820:6842   */\n      add\n        /* \"--CODEGEN--\":6800:6848   */\n      jump(tag_239)\n    tag_243:\n        /* \"--CODEGEN--\":6793:6797   */\n      0xa0\n        /* \"--CODEGEN--\":6786:6791   */\n      dup4\n        /* \"--CODEGEN--\":6782:6798   */\n      add\n        /* \"--CODEGEN--\":6775:6849   */\n      mstore\n        /* \"--CODEGEN--\":6717:6860   */\n      pop\n        /* \"--CODEGEN--\":5893:6870   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":6877:6993   */\n    tag_239:\n      0x00\n        /* \"--CODEGEN--\":6943:6988   */\n      tag_165\n        /* \"--CODEGEN--\":6980:6986   */\n      dup3\n        /* \"--CODEGEN--\":6967:6987   */\n      calldataload\n        /* \"--CODEGEN--\":6943:6988   */\n      jump(tag_375)\n        /* \"--CODEGEN--\":7000:7120   */\n    tag_211:\n      0x00\n        /* \"--CODEGEN--\":7077:7115   */\n      tag_165\n        /* \"--CODEGEN--\":7107:7113   */\n      dup3\n        /* \"--CODEGEN--\":7101:7114   */\n      mload\n        /* \"--CODEGEN--\":7077:7115   */\n      jump(tag_375)\n        /* \"--CODEGEN--\":7127:7245   */\n    tag_191:\n      0x00\n        /* \"--CODEGEN--\":7194:7240   */\n      tag_165\n        /* \"--CODEGEN--\":7232:7238   */\n      dup3\n        /* \"--CODEGEN--\":7219:7239   */\n      calldataload\n        /* \"--CODEGEN--\":7194:7240   */\n      jump(tag_311)\n        /* \"--CODEGEN--\":7252:7374   */\n    tag_253:\n      0x00\n        /* \"--CODEGEN--\":7330:7369   */\n      tag_165\n        /* \"--CODEGEN--\":7361:7367   */\n      dup3\n        /* \"--CODEGEN--\":7355:7368   */\n      mload\n        /* \"--CODEGEN--\":7330:7369   */\n      jump(tag_311)\n        /* \"--CODEGEN--\":7381:7622   */\n    tag_20:\n      0x00\n        /* \"--CODEGEN--\":7485:7487   */\n      0x20\n        /* \"--CODEGEN--\":7473:7482   */\n      dup3\n        /* \"--CODEGEN--\":7464:7471   */\n      dup5\n        /* \"--CODEGEN--\":7460:7483   */\n      sub\n        /* \"--CODEGEN--\":7456:7488   */\n      slt\n        /* \"--CODEGEN--\":7453:7455   */\n      iszero\n      tag_256\n      jumpi\n        /* \"--CODEGEN--\":7501:7502   */\n      0x00\n        /* \"--CODEGEN--\":7498:7499   */\n      dup1\n        /* \"--CODEGEN--\":7491:7503   */\n      revert\n        /* \"--CODEGEN--\":7453:7455   */\n    tag_256:\n        /* \"--CODEGEN--\":7536:7537   */\n      0x00\n        /* \"--CODEGEN--\":7553:7606   */\n      tag_257\n        /* \"--CODEGEN--\":7598:7605   */\n      dup5\n        /* \"--CODEGEN--\":7578:7587   */\n      dup5\n        /* \"--CODEGEN--\":7553:7606   */\n      jump(tag_164)\n    tag_257:\n        /* \"--CODEGEN--\":7543:7606   */\n      swap5\n        /* \"--CODEGEN--\":7447:7622   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":7629:8054   */\n    tag_30:\n      0x00\n        /* \"--CODEGEN--\":7782:7784   */\n      0x20\n        /* \"--CODEGEN--\":7770:7779   */\n      dup3\n        /* \"--CODEGEN--\":7761:7768   */\n      dup5\n        /* \"--CODEGEN--\":7757:7780   */\n      sub\n        /* \"--CODEGEN--\":7753:7785   */\n      slt\n        /* \"--CODEGEN--\":7750:7752   */\n      iszero\n      tag_259\n      jumpi\n        /* \"--CODEGEN--\":7798:7799   */\n      0x00\n        /* \"--CODEGEN--\":7795:7796   */\n      dup1\n        /* \"--CODEGEN--\":7788:7800   */\n      revert\n        /* \"--CODEGEN--\":7750:7752   */\n    tag_259:\n        /* \"--CODEGEN--\":7833:7864   */\n      dup2\n      calldataload\n        /* \"--CODEGEN--\":7884:7902   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":7873:7903   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":7870:7872   */\n      iszero\n      tag_260\n      jumpi\n        /* \"--CODEGEN--\":7916:7917   */\n      0x00\n        /* \"--CODEGEN--\":7913:7914   */\n      dup1\n        /* \"--CODEGEN--\":7906:7918   */\n      revert\n        /* \"--CODEGEN--\":7870:7872   */\n    tag_260:\n        /* \"--CODEGEN--\":7936:8038   */\n      tag_257\n        /* \"--CODEGEN--\":8030:8037   */\n      dup5\n        /* \"--CODEGEN--\":8021:8027   */\n      dup3\n        /* \"--CODEGEN--\":8010:8019   */\n      dup6\n        /* \"--CODEGEN--\":8006:8028   */\n      add\n        /* \"--CODEGEN--\":7936:8038   */\n      jump(tag_168)\n        /* \"--CODEGEN--\":8061:8349   */\n    tag_26:\n      0x00\n        /* \"--CODEGEN--\":8188:8191   */\n      0xa0\n        /* \"--CODEGEN--\":8176:8185   */\n      dup3\n        /* \"--CODEGEN--\":8167:8174   */\n      dup5\n        /* \"--CODEGEN--\":8163:8186   */\n      sub\n        /* \"--CODEGEN--\":8159:8192   */\n      slt\n        /* \"--CODEGEN--\":8156:8158   */\n      iszero\n      tag_263\n      jumpi\n        /* \"--CODEGEN--\":8205:8206   */\n      0x00\n        /* \"--CODEGEN--\":8202:8203   */\n      dup1\n        /* \"--CODEGEN--\":8195:8207   */\n      revert\n        /* \"--CODEGEN--\":8156:8158   */\n    tag_263:\n        /* \"--CODEGEN--\":8240:8241   */\n      0x00\n        /* \"--CODEGEN--\":8257:8333   */\n      tag_257\n        /* \"--CODEGEN--\":8325:8332   */\n      dup5\n        /* \"--CODEGEN--\":8305:8314   */\n      dup5\n        /* \"--CODEGEN--\":8257:8333   */\n      jump(tag_181)\n        /* \"--CODEGEN--\":8356:8742   */\n    tag_119:\n      0x00\n        /* \"--CODEGEN--\":8493:8495   */\n      0x20\n        /* \"--CODEGEN--\":8481:8490   */\n      dup3\n        /* \"--CODEGEN--\":8472:8479   */\n      dup5\n        /* \"--CODEGEN--\":8468:8491   */\n      sub\n        /* \"--CODEGEN--\":8464:8496   */\n      slt\n        /* \"--CODEGEN--\":8461:8463   */\n      iszero\n      tag_266\n      jumpi\n        /* \"--CODEGEN--\":8509:8510   */\n      0x00\n        /* \"--CODEGEN--\":8506:8507   */\n      dup1\n        /* \"--CODEGEN--\":8499:8511   */\n      revert\n        /* \"--CODEGEN--\":8461:8463   */\n    tag_266:\n        /* \"--CODEGEN--\":8544:8568   */\n      dup2\n      mload\n        /* \"--CODEGEN--\":8588:8606   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":8577:8607   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":8574:8576   */\n      iszero\n      tag_267\n      jumpi\n        /* \"--CODEGEN--\":8620:8621   */\n      0x00\n        /* \"--CODEGEN--\":8617:8618   */\n      dup1\n        /* \"--CODEGEN--\":8610:8622   */\n      revert\n        /* \"--CODEGEN--\":8574:8576   */\n    tag_267:\n        /* \"--CODEGEN--\":8640:8726   */\n      tag_257\n        /* \"--CODEGEN--\":8718:8725   */\n      dup5\n        /* \"--CODEGEN--\":8709:8715   */\n      dup3\n        /* \"--CODEGEN--\":8698:8707   */\n      dup6\n        /* \"--CODEGEN--\":8694:8716   */\n      add\n        /* \"--CODEGEN--\":8640:8726   */\n      jump(tag_221)\n        /* \"--CODEGEN--\":8749:9012   */\n    tag_88:\n      0x00\n        /* \"--CODEGEN--\":8864:8866   */\n      0x20\n        /* \"--CODEGEN--\":8852:8861   */\n      dup3\n        /* \"--CODEGEN--\":8843:8850   */\n      dup5\n        /* \"--CODEGEN--\":8839:8862   */\n      sub\n        /* \"--CODEGEN--\":8835:8867   */\n      slt\n        /* \"--CODEGEN--\":8832:8834   */\n      iszero\n      tag_270\n      jumpi\n        /* \"--CODEGEN--\":8880:8881   */\n      0x00\n        /* \"--CODEGEN--\":8877:8878   */\n      dup1\n        /* \"--CODEGEN--\":8870:8882   */\n      revert\n        /* \"--CODEGEN--\":8832:8834   */\n    tag_270:\n        /* \"--CODEGEN--\":8915:8916   */\n      0x00\n        /* \"--CODEGEN--\":8932:8996   */\n      tag_257\n        /* \"--CODEGEN--\":8988:8995   */\n      dup5\n        /* \"--CODEGEN--\":8968:8977   */\n      dup5\n        /* \"--CODEGEN--\":8932:8996   */\n      jump(tag_253)\n        /* \"--CODEGEN--\":9020:9293   */\n    tag_273:\n      0x00\n        /* \"--CODEGEN--\":9155:9253   */\n      tag_274\n        /* \"--CODEGEN--\":9249:9252   */\n      dup4\n        /* \"--CODEGEN--\":9241:9247   */\n      dup4\n        /* \"--CODEGEN--\":9155:9253   */\n      jump(tag_353)\n    tag_274:\n      pop\n      pop\n        /* \"--CODEGEN--\":9282:9286   */\n      0xc0\n        /* \"--CODEGEN--\":9273:9287   */\n      add\n      swap1\n        /* \"--CODEGEN--\":9148:9293   */\n      jump\n        /* \"--CODEGEN--\":9302:9475   */\n    tag_277:\n      0x00\n        /* \"--CODEGEN--\":9389:9435   */\n      tag_278\n        /* \"--CODEGEN--\":9431:9434   */\n      dup4\n        /* \"--CODEGEN--\":9423:9429   */\n      dup4\n        /* \"--CODEGEN--\":9389:9435   */\n      jump(tag_279)\n    tag_278:\n      pop\n      pop\n        /* \"--CODEGEN--\":9464:9468   */\n      0x20\n        /* \"--CODEGEN--\":9455:9469   */\n      add\n      swap1\n        /* \"--CODEGEN--\":9382:9475   */\n      jump\n        /* \"--CODEGEN--\":9483:9674   */\n    tag_281:\n        /* \"--CODEGEN--\":9600:9668   */\n      tag_282\n        /* \"--CODEGEN--\":9628:9667   */\n      tag_283\n        /* \"--CODEGEN--\":9661:9666   */\n      dup3\n        /* \"--CODEGEN--\":9628:9667   */\n      jump(tag_289)\n    tag_283:\n        /* \"--CODEGEN--\":9600:9668   */\n      jump(tag_285)\n    tag_282:\n        /* \"--CODEGEN--\":9595:9598   */\n      dup3\n        /* \"--CODEGEN--\":9588:9669   */\n      mstore\n        /* \"--CODEGEN--\":9582:9674   */\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":9681:9801   */\n    tag_287:\n        /* \"--CODEGEN--\":9764:9795   */\n      tag_282\n        /* \"--CODEGEN--\":9789:9794   */\n      dup2\n        /* \"--CODEGEN--\":9764:9795   */\n      jump(tag_289)\n        /* \"--CODEGEN--\":9895:10672   */\n    tag_291:\n      0x00\n        /* \"--CODEGEN--\":10074:10148   */\n      tag_292\n        /* \"--CODEGEN--\":10142:10147   */\n      dup3\n        /* \"--CODEGEN--\":10074:10148   */\n      jump(tag_293)\n    tag_292:\n        /* \"--CODEGEN--\":10161:10261   */\n      tag_294\n        /* \"--CODEGEN--\":10254:10260   */\n      dup2\n        /* \"--CODEGEN--\":10249:10252   */\n      dup6\n        /* \"--CODEGEN--\":10161:10261   */\n      jump(tag_295)\n    tag_294:\n        /* \"--CODEGEN--\":10154:10261   */\n      swap4\n      pop\n        /* \"--CODEGEN--\":10281:10357   */\n      tag_296\n        /* \"--CODEGEN--\":10351:10356   */\n      dup4\n        /* \"--CODEGEN--\":10281:10357   */\n      jump(tag_297)\n    tag_296:\n        /* \"--CODEGEN--\":10378:10379   */\n      0x00\n        /* \"--CODEGEN--\":10363:10650   */\n    tag_298:\n        /* \"--CODEGEN--\":10388:10394   */\n      dup3\n        /* \"--CODEGEN--\":10385:10386   */\n      dup2\n        /* \"--CODEGEN--\":10382:10395   */\n      lt\n        /* \"--CODEGEN--\":10363:10650   */\n      iszero\n      tag_300\n      jumpi\n        /* \"--CODEGEN--\":10435:10546   */\n      tag_301\n        /* \"--CODEGEN--\":10542:10545   */\n      dup7\n        /* \"--CODEGEN--\":10533:10539   */\n      dup4\n        /* \"--CODEGEN--\":10527:10540   */\n      mload\n        /* \"--CODEGEN--\":10435:10546   */\n      jump(tag_273)\n    tag_301:\n        /* \"--CODEGEN--\":10428:10546   */\n      swap6\n      pop\n        /* \"--CODEGEN--\":10563:10643   */\n      tag_302\n        /* \"--CODEGEN--\":10636:10642   */\n      dup3\n        /* \"--CODEGEN--\":10563:10643   */\n      jump(tag_297)\n    tag_302:\n        /* \"--CODEGEN--\":10553:10643   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":10410:10411   */\n      0x01\n        /* \"--CODEGEN--\":10403:10412   */\n      add\n        /* \"--CODEGEN--\":10363:10650   */\n      jump(tag_298)\n    tag_300:\n      pop\n        /* \"--CODEGEN--\":10663:10666   */\n      swap4\n      swap5\n        /* \"--CODEGEN--\":10053:10672   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":10713:11304   */\n    tag_305:\n        /* \"--CODEGEN--\":10846:10898   */\n      tag_306\n        /* \"--CODEGEN--\":10892:10897   */\n      dup2\n        /* \"--CODEGEN--\":10846:10898   */\n      jump(tag_307)\n    tag_306:\n        /* \"--CODEGEN--\":10911:10995   */\n      tag_308\n        /* \"--CODEGEN--\":10988:10994   */\n      dup2\n        /* \"--CODEGEN--\":10983:10986   */\n      dup5\n        /* \"--CODEGEN--\":10911:10995   */\n      jump(tag_309)\n    tag_308:\n        /* \"--CODEGEN--\":10904:10995   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":11015:11069   */\n      tag_310\n        /* \"--CODEGEN--\":11063:11068   */\n      dup3\n        /* \"--CODEGEN--\":11015:11069   */\n      jump(tag_311)\n    tag_310:\n        /* \"--CODEGEN--\":11090:11091   */\n      0x00\n        /* \"--CODEGEN--\":11075:11292   */\n    tag_312:\n        /* \"--CODEGEN--\":11100:11106   */\n      dup3\n        /* \"--CODEGEN--\":11097:11098   */\n      dup2\n        /* \"--CODEGEN--\":11094:11107   */\n      lt\n        /* \"--CODEGEN--\":11075:11292   */\n      iszero\n      tag_314\n      jumpi\n        /* \"--CODEGEN--\":11147:11210   */\n      tag_315\n        /* \"--CODEGEN--\":11206:11209   */\n      dup6\n        /* \"--CODEGEN--\":11197:11203   */\n      dup4\n        /* \"--CODEGEN--\":11191:11204   */\n      mload\n        /* \"--CODEGEN--\":11147:11210   */\n      jump(tag_277)\n    tag_315:\n        /* \"--CODEGEN--\":11140:11210   */\n      swap5\n      pop\n        /* \"--CODEGEN--\":11227:11285   */\n      tag_316\n        /* \"--CODEGEN--\":11278:11284   */\n      dup3\n        /* \"--CODEGEN--\":11227:11285   */\n      jump(tag_297)\n    tag_316:\n        /* \"--CODEGEN--\":11217:11285   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":11122:11123   */\n      0x01\n        /* \"--CODEGEN--\":11115:11124   */\n      add\n        /* \"--CODEGEN--\":11075:11292   */\n      jump(tag_312)\n    tag_314:\n        /* \"--CODEGEN--\":11079:11093   */\n      pop\n        /* \"--CODEGEN--\":10825:11304   */\n      pop\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":11345:11936   */\n    tag_319:\n        /* \"--CODEGEN--\":11478:11530   */\n      tag_320\n        /* \"--CODEGEN--\":11524:11529   */\n      dup2\n        /* \"--CODEGEN--\":11478:11530   */\n      jump(tag_321)\n    tag_320:\n        /* \"--CODEGEN--\":11543:11627   */\n      tag_322\n        /* \"--CODEGEN--\":11620:11626   */\n      dup2\n        /* \"--CODEGEN--\":11615:11618   */\n      dup5\n        /* \"--CODEGEN--\":11543:11627   */\n      jump(tag_309)\n    tag_322:\n        /* \"--CODEGEN--\":11536:11627   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":11647:11701   */\n      tag_324\n        /* \"--CODEGEN--\":11695:11700   */\n      dup3\n        /* \"--CODEGEN--\":11647:11701   */\n      jump(tag_311)\n    tag_324:\n        /* \"--CODEGEN--\":11722:11723   */\n      0x00\n        /* \"--CODEGEN--\":11707:11924   */\n    tag_326:\n        /* \"--CODEGEN--\":11732:11738   */\n      dup3\n        /* \"--CODEGEN--\":11729:11730   */\n      dup2\n        /* \"--CODEGEN--\":11726:11739   */\n      lt\n        /* \"--CODEGEN--\":11707:11924   */\n      iszero\n      tag_314\n      jumpi\n        /* \"--CODEGEN--\":11779:11842   */\n      tag_329\n        /* \"--CODEGEN--\":11838:11841   */\n      dup6\n        /* \"--CODEGEN--\":11829:11835   */\n      dup4\n        /* \"--CODEGEN--\":11823:11836   */\n      mload\n        /* \"--CODEGEN--\":11779:11842   */\n      jump(tag_277)\n    tag_329:\n        /* \"--CODEGEN--\":11772:11842   */\n      swap5\n      pop\n        /* \"--CODEGEN--\":11859:11917   */\n      tag_330\n        /* \"--CODEGEN--\":11910:11916   */\n      dup3\n        /* \"--CODEGEN--\":11859:11917   */\n      jump(tag_297)\n    tag_330:\n        /* \"--CODEGEN--\":11849:11917   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":11754:11755   */\n      0x01\n        /* \"--CODEGEN--\":11747:11756   */\n      add\n        /* \"--CODEGEN--\":11707:11924   */\n      jump(tag_326)\n        /* \"--CODEGEN--\":11944:12055   */\n    tag_333:\n        /* \"--CODEGEN--\":12021:12049   */\n      tag_282\n        /* \"--CODEGEN--\":12043:12048   */\n      dup2\n        /* \"--CODEGEN--\":12021:12049   */\n      jump(tag_335)\n        /* \"--CODEGEN--\":12062:12221   */\n    tag_337:\n        /* \"--CODEGEN--\":12163:12215   */\n      tag_282\n        /* \"--CODEGEN--\":12183:12214   */\n      tag_339\n        /* \"--CODEGEN--\":12208:12213   */\n      dup3\n        /* \"--CODEGEN--\":12183:12214   */\n      jump(tag_311)\n    tag_339:\n        /* \"--CODEGEN--\":12163:12215   */\n      jump(tag_311)\n        /* \"--CODEGEN--\":12229:12694   */\n    tag_343:\n      0x00\n        /* \"--CODEGEN--\":12389:12456   */\n      tag_344\n        /* \"--CODEGEN--\":12453:12455   */\n      0x2c\n        /* \"--CODEGEN--\":12448:12451   */\n      dup4\n        /* \"--CODEGEN--\":12389:12456   */\n      jump(tag_295)\n    tag_344:\n        /* \"--CODEGEN--\":12489:12555   */\n      0x426f746820706c6179657273206861766520746f2068617665207069636b6564\n        /* \"--CODEGEN--\":12469:12556   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":12590:12656   */\n      0x2074686569722063617264730000000000000000000000000000000000000000\n        /* \"--CODEGEN--\":12585:12587   */\n      0x20\n        /* \"--CODEGEN--\":12576:12588   */\n      dup3\n      add\n        /* \"--CODEGEN--\":12569:12657   */\n      mstore\n        /* \"--CODEGEN--\":12685:12687   */\n      0x40\n        /* \"--CODEGEN--\":12676:12688   */\n      add\n      swap3\n        /* \"--CODEGEN--\":12375:12694   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":12703:13168   */\n    tag_347:\n      0x00\n        /* \"--CODEGEN--\":12863:12930   */\n      tag_348\n        /* \"--CODEGEN--\":12927:12929   */\n      0x25\n        /* \"--CODEGEN--\":12922:12925   */\n      dup4\n        /* \"--CODEGEN--\":12863:12930   */\n      jump(tag_295)\n    tag_348:\n        /* \"--CODEGEN--\":12963:13029   */\n      0x506c617965722068617320616c7265616479207069636b656420746865697220\n        /* \"--CODEGEN--\":12943:13030   */\n      dup2\n      mstore\n      mul(0x6361726473, shl(0xd8, 0x01))\n        /* \"--CODEGEN--\":13059:13061   */\n      0x20\n        /* \"--CODEGEN--\":13050:13062   */\n      dup3\n      add\n        /* \"--CODEGEN--\":13043:13131   */\n      mstore\n        /* \"--CODEGEN--\":13159:13161   */\n      0x40\n        /* \"--CODEGEN--\":13150:13162   */\n      add\n      swap3\n        /* \"--CODEGEN--\":12849:13168   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":13177:13642   */\n    tag_350:\n      0x00\n        /* \"--CODEGEN--\":13337:13404   */\n      tag_351\n        /* \"--CODEGEN--\":13401:13403   */\n      0x28\n        /* \"--CODEGEN--\":13396:13399   */\n      dup4\n        /* \"--CODEGEN--\":13337:13404   */\n      jump(tag_295)\n    tag_351:\n        /* \"--CODEGEN--\":13437:13503   */\n      0x5472616e73616374696f6e2073656e646572206d75737420626520706c617965\n        /* \"--CODEGEN--\":13417:13504   */\n      dup2\n      mstore\n      mul(0x3910189037b91019, shl(0xc1, 0x01))\n        /* \"--CODEGEN--\":13533:13535   */\n      0x20\n        /* \"--CODEGEN--\":13524:13536   */\n      dup3\n      add\n        /* \"--CODEGEN--\":13517:13605   */\n      mstore\n        /* \"--CODEGEN--\":13633:13635   */\n      0x40\n        /* \"--CODEGEN--\":13624:13636   */\n      add\n      swap3\n        /* \"--CODEGEN--\":13323:13642   */\n      swap2\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":13731:14823   */\n    tag_353:\n        /* \"--CODEGEN--\":13947:13969   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":13880:13884   */\n      0xc0\n        /* \"--CODEGEN--\":13871:13885   */\n      dup4\n      add\n      swap1\n        /* \"--CODEGEN--\":13975:14036   */\n      tag_354\n        /* \"--CODEGEN--\":13875:13878   */\n      dup5\n        /* \"--CODEGEN--\":13947:13969   */\n      dup3\n        /* \"--CODEGEN--\":13975:14036   */\n      jump(tag_279)\n    tag_354:\n        /* \"--CODEGEN--\":13900:14042   */\n      pop\n        /* \"--CODEGEN--\":14116:14120   */\n      0x20\n        /* \"--CODEGEN--\":14109:14114   */\n      dup3\n        /* \"--CODEGEN--\":14105:14121   */\n      add\n        /* \"--CODEGEN--\":14099:14122   */\n      mload\n        /* \"--CODEGEN--\":14128:14188   */\n      tag_355\n        /* \"--CODEGEN--\":14182:14186   */\n      0x20\n        /* \"--CODEGEN--\":14177:14180   */\n      dup6\n        /* \"--CODEGEN--\":14173:14187   */\n      add\n        /* \"--CODEGEN--\":14160:14171   */\n      dup3\n        /* \"--CODEGEN--\":14128:14188   */\n      jump(tag_356)\n    tag_355:\n        /* \"--CODEGEN--\":14052:14194   */\n      pop\n        /* \"--CODEGEN--\":14269:14273   */\n      0x40\n        /* \"--CODEGEN--\":14262:14267   */\n      dup3\n        /* \"--CODEGEN--\":14258:14274   */\n      add\n        /* \"--CODEGEN--\":14252:14275   */\n      mload\n        /* \"--CODEGEN--\":14281:14341   */\n      tag_357\n        /* \"--CODEGEN--\":14335:14339   */\n      0x40\n        /* \"--CODEGEN--\":14330:14333   */\n      dup6\n        /* \"--CODEGEN--\":14326:14340   */\n      add\n        /* \"--CODEGEN--\":14313:14324   */\n      dup3\n        /* \"--CODEGEN--\":14281:14341   */\n      jump(tag_356)\n    tag_357:\n        /* \"--CODEGEN--\":14204:14347   */\n      pop\n        /* \"--CODEGEN--\":14419:14423   */\n      0x60\n        /* \"--CODEGEN--\":14412:14417   */\n      dup3\n        /* \"--CODEGEN--\":14408:14424   */\n      add\n        /* \"--CODEGEN--\":14402:14425   */\n      mload\n        /* \"--CODEGEN--\":14431:14491   */\n      tag_358\n        /* \"--CODEGEN--\":14485:14489   */\n      0x60\n        /* \"--CODEGEN--\":14480:14483   */\n      dup6\n        /* \"--CODEGEN--\":14476:14490   */\n      add\n        /* \"--CODEGEN--\":14463:14474   */\n      dup3\n        /* \"--CODEGEN--\":14431:14491   */\n      jump(tag_356)\n    tag_358:\n        /* \"--CODEGEN--\":14357:14497   */\n      pop\n        /* \"--CODEGEN--\":14571:14575   */\n      0x80\n        /* \"--CODEGEN--\":14564:14569   */\n      dup3\n        /* \"--CODEGEN--\":14560:14576   */\n      add\n        /* \"--CODEGEN--\":14554:14577   */\n      mload\n        /* \"--CODEGEN--\":14583:14643   */\n      tag_359\n        /* \"--CODEGEN--\":14637:14641   */\n      0x80\n        /* \"--CODEGEN--\":14632:14635   */\n      dup6\n        /* \"--CODEGEN--\":14628:14642   */\n      add\n        /* \"--CODEGEN--\":14615:14626   */\n      dup3\n        /* \"--CODEGEN--\":14583:14643   */\n      jump(tag_356)\n    tag_359:\n        /* \"--CODEGEN--\":14507:14649   */\n      pop\n        /* \"--CODEGEN--\":14730:14734   */\n      0xa0\n        /* \"--CODEGEN--\":14723:14728   */\n      dup3\n        /* \"--CODEGEN--\":14719:14735   */\n      add\n        /* \"--CODEGEN--\":14713:14736   */\n      mload\n        /* \"--CODEGEN--\":14742:14802   */\n      tag_360\n        /* \"--CODEGEN--\":14796:14800   */\n      0xa0\n        /* \"--CODEGEN--\":14791:14794   */\n      dup6\n        /* \"--CODEGEN--\":14787:14801   */\n      add\n        /* \"--CODEGEN--\":14774:14785   */\n      dup3\n        /* \"--CODEGEN--\":14742:14802   */\n      jump(tag_356)\n    tag_360:\n        /* \"--CODEGEN--\":14659:14808   */\n      pop\n        /* \"--CODEGEN--\":13853:14823   */\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":16077:16732   */\n    tag_369:\n        /* \"--CODEGEN--\":16306:16328   */\n      dup1\n      mload\n        /* \"--CODEGEN--\":16234:16238   */\n      0x40\n        /* \"--CODEGEN--\":16341:16378   */\n      dup1\n      dup5\n      mstore\n        /* \"--CODEGEN--\":16077:16732   */\n      0x00\n      swap2\n        /* \"--CODEGEN--\":16225:16239   */\n      swap1\n      dup5\n      add\n      swap1\n        /* \"--CODEGEN--\":16393:16539   */\n      tag_370\n        /* \"--CODEGEN--\":16225:16239   */\n      dup3\n        /* \"--CODEGEN--\":16306:16328   */\n      dup3\n        /* \"--CODEGEN--\":16393:16539   */\n      jump(tag_291)\n    tag_370:\n        /* \"--CODEGEN--\":16385:16539   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":16254:16551   */\n      pop\n        /* \"--CODEGEN--\":16630:16634   */\n      0x20\n        /* \"--CODEGEN--\":16623:16628   */\n      dup4\n        /* \"--CODEGEN--\":16619:16635   */\n      add\n        /* \"--CODEGEN--\":16613:16636   */\n      mload\n        /* \"--CODEGEN--\":16642:16700   */\n      tag_371\n        /* \"--CODEGEN--\":16694:16698   */\n      0x20\n        /* \"--CODEGEN--\":16689:16692   */\n      dup7\n        /* \"--CODEGEN--\":16685:16699   */\n      add\n        /* \"--CODEGEN--\":16672:16683   */\n      dup3\n        /* \"--CODEGEN--\":16642:16700   */\n      jump(tag_372)\n    tag_371:\n      pop\n        /* \"--CODEGEN--\":16723:16727   */\n      swap4\n        /* \"--CODEGEN--\":16207:16732   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":16739:16846   */\n    tag_356:\n        /* \"--CODEGEN--\":16810:16840   */\n      tag_282\n        /* \"--CODEGEN--\":16834:16839   */\n      dup2\n        /* \"--CODEGEN--\":16810:16840   */\n      jump(tag_375)\n        /* \"--CODEGEN--\":16977:17087   */\n    tag_279:\n        /* \"--CODEGEN--\":17050:17081   */\n      tag_282\n        /* \"--CODEGEN--\":17075:17080   */\n      dup2\n        /* \"--CODEGEN--\":17050:17081   */\n      jump(tag_311)\n        /* \"--CODEGEN--\":17221:17325   */\n    tag_372:\n        /* \"--CODEGEN--\":17290:17319   */\n      tag_282\n        /* \"--CODEGEN--\":17313:17318   */\n      dup2\n        /* \"--CODEGEN--\":17290:17319   */\n      jump(tag_387)\n        /* \"--CODEGEN--\":17453:17604   */\n    tag_392:\n        /* \"--CODEGEN--\":17550:17598   */\n      tag_282\n        /* \"--CODEGEN--\":17568:17597   */\n      tag_394\n        /* \"--CODEGEN--\":17591:17596   */\n      dup3\n        /* \"--CODEGEN--\":17568:17597   */\n      jump(tag_387)\n    tag_394:\n        /* \"--CODEGEN--\":17550:17598   */\n      jump(tag_395)\n        /* \"--CODEGEN--\":17611:18156   */\n    tag_134:\n      0x00\n        /* \"--CODEGEN--\":17798:17869   */\n      tag_397\n        /* \"--CODEGEN--\":17865:17868   */\n      dup3\n        /* \"--CODEGEN--\":17856:17862   */\n      dup7\n        /* \"--CODEGEN--\":17798:17869   */\n      jump(tag_392)\n    tag_397:\n        /* \"--CODEGEN--\":17891:17892   */\n      0x01\n        /* \"--CODEGEN--\":17886:17889   */\n      dup3\n        /* \"--CODEGEN--\":17882:17893   */\n      add\n        /* \"--CODEGEN--\":17875:17893   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":17904:17979   */\n      tag_398\n        /* \"--CODEGEN--\":17975:17978   */\n      dup3\n        /* \"--CODEGEN--\":17966:17972   */\n      dup6\n        /* \"--CODEGEN--\":17904:17979   */\n      jump(tag_337)\n    tag_398:\n        /* \"--CODEGEN--\":18001:18003   */\n      0x20\n        /* \"--CODEGEN--\":17996:17999   */\n      dup3\n        /* \"--CODEGEN--\":17992:18004   */\n      add\n        /* \"--CODEGEN--\":17985:18004   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":18015:18106   */\n      tag_399\n        /* \"--CODEGEN--\":18102:18105   */\n      dup3\n        /* \"--CODEGEN--\":18093:18099   */\n      dup5\n        /* \"--CODEGEN--\":18015:18106   */\n      jump(tag_281)\n    tag_399:\n      pop\n        /* \"--CODEGEN--\":18128:18130   */\n      0x14\n        /* \"--CODEGEN--\":18119:18131   */\n      add\n      swap4\n        /* \"--CODEGEN--\":17786:18156   */\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"--CODEGEN--\":18163:18376   */\n    tag_17:\n        /* \"--CODEGEN--\":18281:18283   */\n      0x20\n        /* \"--CODEGEN--\":18266:18284   */\n      dup2\n      add\n        /* \"--CODEGEN--\":18295:18366   */\n      tag_132\n        /* \"--CODEGEN--\":18270:18279   */\n      dup3\n        /* \"--CODEGEN--\":18339:18345   */\n      dup5\n        /* \"--CODEGEN--\":18295:18366   */\n      jump(tag_287)\n        /* \"--CODEGEN--\":18383:18893   */\n    tag_105:\n        /* \"--CODEGEN--\":18621:18624   */\n      0x0100\n        /* \"--CODEGEN--\":18606:18625   */\n      dup2\n      add\n        /* \"--CODEGEN--\":18636:18753   */\n      tag_403\n        /* \"--CODEGEN--\":18610:18619   */\n      dup3\n        /* \"--CODEGEN--\":18726:18732   */\n      dup6\n        /* \"--CODEGEN--\":18636:18753   */\n      jump(tag_319)\n    tag_403:\n        /* \"--CODEGEN--\":18764:18883   */\n      tag_165\n        /* \"--CODEGEN--\":18878:18881   */\n      0xa0\n        /* \"--CODEGEN--\":18867:18876   */\n      dup4\n        /* \"--CODEGEN--\":18863:18882   */\n      add\n        /* \"--CODEGEN--\":18854:18860   */\n      dup5\n        /* \"--CODEGEN--\":18764:18883   */\n      jump(tag_305)\n        /* \"--CODEGEN--\":18900:19101   */\n    tag_48:\n        /* \"--CODEGEN--\":19012:19014   */\n      0x20\n        /* \"--CODEGEN--\":18997:19015   */\n      dup2\n      add\n        /* \"--CODEGEN--\":19026:19091   */\n      tag_132\n        /* \"--CODEGEN--\":19001:19010   */\n      dup3\n        /* \"--CODEGEN--\":19064:19070   */\n      dup5\n        /* \"--CODEGEN--\":19026:19091   */\n      jump(tag_333)\n        /* \"--CODEGEN--\":19108:19515   */\n    tag_147:\n        /* \"--CODEGEN--\":19299:19301   */\n      0x20\n        /* \"--CODEGEN--\":19313:19360   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":19284:19302   */\n      dup2\n      add\n        /* \"--CODEGEN--\":19374:19505   */\n      tag_132\n        /* \"--CODEGEN--\":19284:19302   */\n      dup2\n        /* \"--CODEGEN--\":19374:19505   */\n      jump(tag_343)\n        /* \"--CODEGEN--\":19522:19929   */\n    tag_62:\n        /* \"--CODEGEN--\":19713:19715   */\n      0x20\n        /* \"--CODEGEN--\":19727:19774   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":19698:19716   */\n      dup2\n      add\n        /* \"--CODEGEN--\":19788:19919   */\n      tag_132\n        /* \"--CODEGEN--\":19698:19716   */\n      dup2\n        /* \"--CODEGEN--\":19788:19919   */\n      jump(tag_347)\n        /* \"--CODEGEN--\":19936:20343   */\n    tag_70:\n        /* \"--CODEGEN--\":20127:20129   */\n      0x20\n        /* \"--CODEGEN--\":20141:20188   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":20112:20130   */\n      dup2\n      add\n        /* \"--CODEGEN--\":20202:20333   */\n      tag_132\n        /* \"--CODEGEN--\":20112:20130   */\n      dup2\n        /* \"--CODEGEN--\":20202:20333   */\n      jump(tag_350)\n        /* \"--CODEGEN--\":20350:20676   */\n    tag_57:\n        /* \"--CODEGEN--\":20524:20527   */\n      0xc0\n        /* \"--CODEGEN--\":20509:20528   */\n      dup2\n      add\n        /* \"--CODEGEN--\":20539:20666   */\n      tag_132\n        /* \"--CODEGEN--\":20513:20522   */\n      dup3\n        /* \"--CODEGEN--\":20639:20645   */\n      dup5\n        /* \"--CODEGEN--\":20539:20666   */\n      jump(tag_353)\n        /* \"--CODEGEN--\":20683:21056   */\n    tag_41:\n        /* \"--CODEGEN--\":20857:20859   */\n      0x20\n        /* \"--CODEGEN--\":20871:20918   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":20842:20860   */\n      dup2\n      add\n        /* \"--CODEGEN--\":20932:21046   */\n      tag_165\n        /* \"--CODEGEN--\":20842:20860   */\n      dup2\n        /* \"--CODEGEN--\":21032:21038   */\n      dup5\n        /* \"--CODEGEN--\":20932:21046   */\n      jump(tag_369)\n        /* \"--CODEGEN--\":21063:21272   */\n    tag_33:\n        /* \"--CODEGEN--\":21179:21181   */\n      0x20\n        /* \"--CODEGEN--\":21164:21182   */\n      dup2\n      add\n        /* \"--CODEGEN--\":21193:21262   */\n      tag_132\n        /* \"--CODEGEN--\":21168:21177   */\n      dup3\n        /* \"--CODEGEN--\":21235:21241   */\n      dup5\n        /* \"--CODEGEN--\":21193:21262   */\n      jump(tag_356)\n        /* \"--CODEGEN--\":21279:21492   */\n    tag_115:\n        /* \"--CODEGEN--\":21397:21399   */\n      0x20\n        /* \"--CODEGEN--\":21382:21400   */\n      dup2\n      add\n        /* \"--CODEGEN--\":21411:21482   */\n      tag_132\n        /* \"--CODEGEN--\":21386:21395   */\n      dup3\n        /* \"--CODEGEN--\":21455:21461   */\n      dup5\n        /* \"--CODEGEN--\":21411:21482   */\n      jump(tag_279)\n        /* \"--CODEGEN--\":21499:21704   */\n    tag_23:\n        /* \"--CODEGEN--\":21613:21615   */\n      0x20\n        /* \"--CODEGEN--\":21598:21616   */\n      dup2\n      add\n        /* \"--CODEGEN--\":21627:21694   */\n      tag_132\n        /* \"--CODEGEN--\":21602:21611   */\n      dup3\n        /* \"--CODEGEN--\":21667:21673   */\n      dup5\n        /* \"--CODEGEN--\":21627:21694   */\n      jump(tag_372)\n        /* \"--CODEGEN--\":21711:21967   */\n    tag_173:\n        /* \"--CODEGEN--\":21773:21775   */\n      0x40\n        /* \"--CODEGEN--\":21767:21776   */\n      mload\n        /* \"--CODEGEN--\":21799:21816   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":21874:21892   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":21859:21893   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":21895:21917   */\n      dup3\n      dup3\n      lt\n        /* \"--CODEGEN--\":21856:21918   */\n      or\n        /* \"--CODEGEN--\":21853:21855   */\n      iszero\n      tag_424\n      jumpi\n        /* \"--CODEGEN--\":21931:21932   */\n      0x00\n        /* \"--CODEGEN--\":21928:21929   */\n      dup1\n        /* \"--CODEGEN--\":21921:21933   */\n      revert\n        /* \"--CODEGEN--\":21853:21855   */\n    tag_424:\n        /* \"--CODEGEN--\":21947:21949   */\n      0x40\n        /* \"--CODEGEN--\":21940:21962   */\n      mstore\n        /* \"--CODEGEN--\":21751:21967   */\n      swap2\n      swap1\n      pop\n      jump\n        /* \"--CODEGEN--\":21974:22256   */\n    tag_172:\n      0x00\n        /* \"--CODEGEN--\":22157:22175   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":22149:22155   */\n      dup3\n        /* \"--CODEGEN--\":22146:22176   */\n      gt\n        /* \"--CODEGEN--\":22143:22145   */\n      iszero\n      tag_426\n      jumpi\n        /* \"--CODEGEN--\":22189:22190   */\n      0x00\n        /* \"--CODEGEN--\":22186:22187   */\n      dup1\n        /* \"--CODEGEN--\":22179:22191   */\n      revert\n        /* \"--CODEGEN--\":22143:22145   */\n    tag_426:\n      pop\n        /* \"--CODEGEN--\":22218:22222   */\n      0x20\n        /* \"--CODEGEN--\":22206:22223   */\n      swap1\n      dup2\n      mul\n        /* \"--CODEGEN--\":22236:22251   */\n      add\n      swap1\n        /* \"--CODEGEN--\":22080:22256   */\n      jump\n        /* \"--CODEGEN--\":22263:22496   */\n    tag_185:\n      0x00\n        /* \"--CODEGEN--\":22420:22438   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":22412:22418   */\n      dup3\n        /* \"--CODEGEN--\":22409:22439   */\n      gt\n        /* \"--CODEGEN--\":22406:22408   */\n      iszero\n      tag_428\n      jumpi\n        /* \"--CODEGEN--\":22452:22453   */\n      0x00\n        /* \"--CODEGEN--\":22449:22450   */\n      dup1\n        /* \"--CODEGEN--\":22442:22454   */\n      revert\n        /* \"--CODEGEN--\":22406:22408   */\n    tag_428:\n      pop\n        /* \"--CODEGEN--\":22481:22485   */\n      0x20\n        /* \"--CODEGEN--\":22469:22486   */\n      mul\n      swap1\n        /* \"--CODEGEN--\":22343:22496   */\n      jump\n        /* \"--CODEGEN--\":22503:22758   */\n    tag_197:\n      0x00\n        /* \"--CODEGEN--\":22643:22661   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":22635:22641   */\n      dup3\n        /* \"--CODEGEN--\":22632:22662   */\n      gt\n        /* \"--CODEGEN--\":22629:22631   */\n      iszero\n      tag_430\n      jumpi\n        /* \"--CODEGEN--\":22675:22676   */\n      0x00\n        /* \"--CODEGEN--\":22672:22673   */\n      dup1\n        /* \"--CODEGEN--\":22665:22677   */\n      revert\n        /* \"--CODEGEN--\":22629:22631   */\n    tag_430:\n      pop\n        /* \"--CODEGEN--\":22748:22752   */\n      0x20\n        /* \"--CODEGEN--\":22719:22723   */\n      0x1f\n        /* \"--CODEGEN--\":22696:22713   */\n      swap2\n      swap1\n      swap2\n      add\n      not(0x1f)\n        /* \"--CODEGEN--\":22692:22725   */\n      and\n        /* \"--CODEGEN--\":22738:22753   */\n      add\n      swap1\n        /* \"--CODEGEN--\":22566:22758   */\n      jump\n        /* \"--CODEGEN--\":22767:22908   */\n    tag_297:\n        /* \"--CODEGEN--\":22896:22900   */\n      0x20\n        /* \"--CODEGEN--\":22884:22901   */\n      add\n      swap1\n        /* \"--CODEGEN--\":22865:22908   */\n      jump\n        /* \"--CODEGEN--\":22919:23027   */\n    tag_311:\n        /* \"--CODEGEN--\":23014:23020   */\n      swap1\n        /* \"--CODEGEN--\":22995:23027   */\n      jump\n        /* \"--CODEGEN--\":23155:23282   */\n    tag_293:\n        /* \"--CODEGEN--\":23265:23277   */\n      mload\n      swap1\n        /* \"--CODEGEN--\":23249:23282   */\n      jump\n        /* \"--CODEGEN--\":23289:23385   */\n    tag_307:\n      pop\n        /* \"--CODEGEN--\":23377:23380   */\n      0x03\n      swap1\n        /* \"--CODEGEN--\":23361:23385   */\n      jump\n        /* \"--CODEGEN--\":23392:23488   */\n    tag_321:\n      pop\n        /* \"--CODEGEN--\":23480:23483   */\n      0x05\n      swap1\n        /* \"--CODEGEN--\":23464:23488   */\n      jump\n        /* \"--CODEGEN--\":23905:24097   */\n    tag_295:\n        /* \"--CODEGEN--\":24037:24056   */\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":24086:24090   */\n      0x20\n        /* \"--CODEGEN--\":24077:24091   */\n      add\n      swap1\n        /* \"--CODEGEN--\":24030:24097   */\n      jump\n        /* \"--CODEGEN--\":24106:24246   */\n    tag_309:\n        /* \"--CODEGEN--\":24237:24240   */\n      swap2\n        /* \"--CODEGEN--\":24215:24246   */\n      swap1\n      pop\n      jump\n        /* \"--CODEGEN--\":24575:24680   */\n    tag_289:\n      0x00\n        /* \"--CODEGEN--\":24644:24675   */\n      tag_132\n        /* \"--CODEGEN--\":24669:24674   */\n      dup3\n        /* \"--CODEGEN--\":24644:24675   */\n      jump(tag_446)\n        /* \"--CODEGEN--\":24807:24899   */\n    tag_335:\n        /* \"--CODEGEN--\":24880:24893   */\n      iszero\n        /* \"--CODEGEN--\":24873:24894   */\n      iszero\n      swap1\n        /* \"--CODEGEN--\":24856:24899   */\n      jump\n        /* \"--CODEGEN--\":24992:25083   */\n    tag_375:\n        /* \"--CODEGEN--\":25071:25077   */\n      0xffff\n        /* \"--CODEGEN--\":25060:25078   */\n      and\n      swap1\n        /* \"--CODEGEN--\":25043:25083   */\n      jump\n        /* \"--CODEGEN--\":25090:25218   */\n    tag_446:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":25159:25213   */\n      and\n      swap1\n        /* \"--CODEGEN--\":25142:25218   */\n      jump\n        /* \"--CODEGEN--\":25311:25399   */\n    tag_387:\n        /* \"--CODEGEN--\":25389:25393   */\n      0xff\n        /* \"--CODEGEN--\":25378:25394   */\n      and\n      swap1\n        /* \"--CODEGEN--\":25361:25399   */\n      jump\n        /* \"--CODEGEN--\":25838:26106   */\n    tag_200:\n        /* \"--CODEGEN--\":25903:25904   */\n      0x00\n        /* \"--CODEGEN--\":25910:26011   */\n    tag_462:\n        /* \"--CODEGEN--\":25924:25930   */\n      dup4\n        /* \"--CODEGEN--\":25921:25922   */\n      dup2\n        /* \"--CODEGEN--\":25918:25931   */\n      lt\n        /* \"--CODEGEN--\":25910:26011   */\n      iszero\n      tag_464\n      jumpi\n        /* \"--CODEGEN--\":25991:26002   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":25985:26003   */\n      mload\n        /* \"--CODEGEN--\":25972:25983   */\n      dup4\n      dup3\n      add\n        /* \"--CODEGEN--\":25965:26004   */\n      mstore\n        /* \"--CODEGEN--\":25946:25948   */\n      0x20\n        /* \"--CODEGEN--\":25939:25949   */\n      add\n        /* \"--CODEGEN--\":25910:26011   */\n      jump(tag_462)\n    tag_464:\n        /* \"--CODEGEN--\":26026:26032   */\n      dup4\n        /* \"--CODEGEN--\":26023:26024   */\n      dup2\n        /* \"--CODEGEN--\":26020:26033   */\n      gt\n        /* \"--CODEGEN--\":26017:26019   */\n      iszero\n      tag_360\n      jumpi\n      pop\n      pop\n        /* \"--CODEGEN--\":26091:26092   */\n      0x00\n        /* \"--CODEGEN--\":26073:26089   */\n      swap2\n      add\n        /* \"--CODEGEN--\":26066:26093   */\n      mstore\n        /* \"--CODEGEN--\":25887:26106   */\n      jump\n        /* \"--CODEGEN--\":26114:26217   */\n    tag_285:\n      0x00\n        /* \"--CODEGEN--\":26186:26212   */\n      tag_132\n        /* \"--CODEGEN--\":26206:26211   */\n      dup3\n        /* \"--CODEGEN--\":26305:26394   */\n      0x00\n        /* \"--CODEGEN--\":26369:26389   */\n      tag_132\n        /* \"--CODEGEN--\":26383:26388   */\n      dup3\n        /* \"--CODEGEN--\":26369:26389   */\n      jump(tag_472)\n        /* \"--CODEGEN--\":26401:26489   */\n    tag_395:\n      0x00\n        /* \"--CODEGEN--\":26463:26484   */\n      tag_132\n        /* \"--CODEGEN--\":26478:26483   */\n      dup3\n        /* \"--CODEGEN--\":26563:26566   */\n      0xf8\n        /* \"--CODEGEN--\":26559:26574   */\n      shl\n      swap1\n        /* \"--CODEGEN--\":26540:26580   */\n      jump\n        /* \"--CODEGEN--\":26590:26671   */\n    tag_472:\n        /* \"--CODEGEN--\":26655:26657   */\n      0x60\n        /* \"--CODEGEN--\":26651:26665   */\n      shl\n      swap1\n        /* \"--CODEGEN--\":26632:26671   */\n      jump\n\n    auxdata: 0xa265627a7a723058202263f5abf8a7f7f048cd7f3eda8561126bac8bd5b7aeaa2d7433a4f8ce34bedd6c6578706572696d656e74616cf50037\n}\n", "bytecode": {"linkReferences": {}, "object": "", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x60 DUP1 PUSH3 0x1815 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x33 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x8B JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP4 DUP6 AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH3 0xFE JUMP JUMPDEST PUSH1 0x0 PUSH3 0x84 DUP3 MLOAD PUSH3 0xDF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0xA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xAF DUP7 DUP7 PUSH3 0x76 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0xC2 DUP7 DUP3 DUP8 ADD PUSH3 0x76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0xD5 DUP7 DUP3 DUP8 ADD PUSH3 0x76 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xEC DUP3 PUSH3 0xF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1707 DUP1 PUSH3 0x10E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC0D35449 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC0D35449 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0xD30895E4 EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xD7EB798C EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xE4B6C992 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xFE145FBD EQ PUSH2 0x16E JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x6880689 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x2AF1E2F8 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x48373963 EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x4ED61446 EQ PUSH2 0xF6 JUMPI DUP1 PUSH4 0x59A5F12D EQ PUSH2 0x116 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x18E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x14EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD4 PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x1A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1592 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x112A JUMP JUMPDEST PUSH2 0x1C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x109 PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0x10F5 JUMP JUMPDEST PUSH2 0x51D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1576 JUMP JUMPDEST PUSH2 0xAB PUSH2 0x5F7 JUMP JUMPDEST PUSH2 0x131 PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x606 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1565 JUMP JUMPDEST PUSH2 0xAB PUSH2 0x6E9 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH2 0xD4 PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x701 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x719 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1557 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x1FD JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x1537 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x243 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x23E JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x288 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x23E JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x1547 JUMP JUMPDEST PUSH2 0x2AB PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x2D9 PUSH1 0x5 PUSH1 0x1 PUSH2 0x7C6 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F5 DUP4 DUP6 DUP4 PUSH1 0x5 DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x811 JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x302 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x2 SWAP2 DUP3 MUL ADD SLOAD DUP5 MSTORE PUSH2 0x320 SWAP1 PUSH1 0xA SWAP1 PUSH2 0x7C6 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ DUP1 PUSH2 0x330 JUMPI POP PUSH1 0x4 DUP2 GT JUMPDEST ISZERO PUSH2 0x3DA JUMPI PUSH2 0x3C9 PUSH1 0x1 PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1B6CDE10 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3C1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x117D JUMP JUMPDEST SUB PUSH1 0x2 PUSH2 0x7C6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3D5 DUP5 DUP3 PUSH2 0x811 JUMP JUMPDEST PUSH2 0x3EA JUMP JUMPDEST PUSH2 0x3EA DUP5 DUP7 DUP4 PUSH1 0x5 DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 SLOAD DUP2 LT PUSH2 0x3F7 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD SLOAD DUP6 DUP3 ADD MSTORE DUP2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xE4 SHL PUSH4 0x1B6CDE1 MUL DUP2 MSTORE SWAP1 MLOAD PUSH2 0x496 SWAP4 PUSH1 0x1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH4 0x1B6CDE10 SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP10 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x48E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x117D JUMP JUMPDEST SUB PUSH1 0x3 PUSH2 0x7C6 JUMP JUMPDEST SWAP1 POP PUSH2 0x4A2 DUP6 DUP3 PUSH2 0x811 JUMP JUMPDEST DUP5 PUSH1 0x2 DUP2 SLOAD DUP2 LT PUSH2 0x4AF JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP2 DUP3 MUL ADD SLOAD SWAP1 DUP6 SWAP1 PUSH1 0x20 MUL ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x48CA02657A8ACB3A062F53BF24CA611BB25D8108F29F5E3C5E468080A44DCA5D SWAP1 PUSH2 0x4FA SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x14FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x515 JUMPI PUSH2 0x515 PUSH2 0x9A1 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x54F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x577 SWAP2 SWAP1 PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x591 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0xA0 ADD MLOAD SWAP1 POP DUP3 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x5E7 JUMPI DUP1 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x522 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x60E PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP2 SLOAD PUSH1 0x60 SWAP5 DUP2 MUL DUP3 ADD DUP6 ADD DUP5 MSTORE SWAP3 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP5 SWAP2 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 DUP6 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x64C JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x721 PUSH2 0xBE4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0x751 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH3 0x10000 DUP2 DIV DUP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 NUMBER SUB BLOCKHASH CALLER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7E2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x14B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP4 DUP2 DUP2 PUSH2 0x806 JUMPI INVALID JUMPDEST MOD SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x819 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 PUSH2 0x84C SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x866 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x87A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8A2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE SWAP5 DUP2 MSTORE DUP2 DUP4 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP5 AND SWAP6 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP1 DUP9 ADD MLOAD DUP6 AND SWAP2 DUP7 ADD SWAP2 DUP3 MSTORE SWAP9 DUP8 ADD MLOAD DUP5 AND SWAP9 DUP6 ADD SWAP9 DUP10 MSTORE PUSH1 0xE0 SWAP1 SWAP7 ADD MLOAD DUP4 AND PUSH1 0xA0 DUP6 ADD SWAP1 DUP2 MSTORE DUP10 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP13 SSTORE PUSH1 0x0 SWAP12 DUP13 MSTORE SWAP3 SWAP1 SWAP11 KECCAK256 SWAP5 MLOAD PUSH1 0x2 SWAP1 SWAP11 MUL SWAP1 SWAP5 ADD SWAP9 DUP10 SSTORE SWAP1 MLOAD SWAP8 ADD DUP1 SLOAD SWAP4 MLOAD SWAP5 MLOAD SWAP7 MLOAD SWAP3 MLOAD DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH10 0xFFFF0000000000000000 NOT SWAP4 DUP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH8 0xFFFF000000000000 NOT SWAP9 DUP5 AND PUSH5 0x100000000 MUL PUSH6 0xFFFF00000000 NOT SWAP8 DUP6 AND PUSH3 0x10000 MUL PUSH4 0xFFFF0000 NOT SWAP12 SWAP1 SWAP6 AND PUSH2 0xFFFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP10 SWAP1 SWAP10 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP5 SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0x9C6 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x1527 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH2 0xA86 SWAP4 DUP6 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xA7D JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x9FD JUMP JUMPDEST POP POP POP POP PUSH2 0x51D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP5 SWAP6 POP SWAP3 SWAP4 PUSH2 0xB41 SWAP4 SWAP2 SWAP3 DUP6 SWAP1 DUP5 ADD DUP3 ISZERO PUSH2 0xA7D JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x9FD JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND LT PUSH2 0xB80 JUMPI PUSH1 0x1 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xBAA JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC34 PUSH2 0xC64 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7F PUSH2 0xC99 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC8C PUSH2 0xC99 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 CALLDATALOAD PUSH2 0x1655 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCFE PUSH2 0xCF9 DUP3 PUSH2 0x15C7 JUMP JUMPDEST PUSH2 0x15A0 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0xC0 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xD23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD51 JUMPI DUP2 PUSH2 0xD39 DUP9 DUP3 PUSH2 0x1008 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xC0 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xD26 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0xD7A PUSH2 0xCF9 DUP3 PUSH2 0x15E8 JUMP JUMPDEST SWAP2 POP DUP2 DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD51 JUMPI DUP2 PUSH2 0xDA6 DUP9 DUP3 PUSH2 0x10B7 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xD93 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xDDB PUSH2 0xCF9 DUP3 PUSH2 0x1606 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xDF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE02 DUP4 DUP3 DUP5 PUSH2 0x167E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE28 PUSH1 0x80 PUSH2 0x15A0 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE4E DUP5 DUP3 DUP6 ADD PUSH2 0xDBC JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xE5F DUP5 DUP5 DUP4 ADD PUSH2 0xE94 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xE73 DUP5 DUP3 DUP6 ADD PUSH2 0xE94 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0xE88 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEB0 PUSH1 0xA0 PUSH2 0x15A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEBE DUP5 DUP5 PUSH2 0x10AB JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xECF DUP5 DUP5 DUP4 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xEE3 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xEF7 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xF0B DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF35 PUSH2 0x100 PUSH2 0x15A0 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF5B DUP5 DUP3 DUP6 ADD PUSH2 0xDBC JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF84 DUP5 DUP3 DUP6 ADD PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xF98 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xFAC DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xFC0 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xFD4 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xFE8 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x101A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1024 PUSH1 0xC0 PUSH2 0x15A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1032 DUP5 DUP5 PUSH2 0x10B7 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1043 DUP5 DUP5 DUP4 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1057 DUP5 DUP3 DUP6 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x106B DUP5 DUP3 DUP6 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x107F DUP5 DUP3 DUP6 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x1093 DUP5 DUP3 DUP6 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 CALLDATALOAD PUSH2 0x1665 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 MLOAD PUSH2 0x1665 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 CALLDATALOAD PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 MLOAD PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10ED DUP5 DUP5 PUSH2 0xCC7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x111E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10ED DUP5 DUP3 DUP6 ADD PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10ED DUP5 DUP5 PUSH2 0xD5B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x115A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10ED DUP5 DUP3 DUP6 ADD PUSH2 0xF17 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x118F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10ED DUP5 DUP5 PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A7 DUP4 DUP4 PUSH2 0x13E1 JUMP JUMPDEST POP POP PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11BB DUP4 DUP4 PUSH2 0x1495 JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x11D4 PUSH2 0x11CF DUP3 PUSH2 0x1655 JUMP JUMPDEST PUSH2 0x16AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1655 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11EE DUP3 PUSH2 0x1637 JUMP JUMPDEST PUSH2 0x11F8 DUP2 DUP6 PUSH2 0x1647 JUMP JUMPDEST SWAP4 POP PUSH2 0x1203 DUP4 PUSH2 0x162E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x122E JUMPI PUSH2 0x1219 DUP7 DUP4 MLOAD PUSH2 0x119B JUMP JUMPDEST SWAP6 POP PUSH2 0x1224 DUP3 PUSH2 0x162E JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1206 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1241 DUP2 PUSH2 0x163B JUMP JUMPDEST PUSH2 0x124B DUP2 DUP5 PUSH2 0x1650 JUMP JUMPDEST SWAP3 POP PUSH2 0x1256 DUP3 PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1281 JUMPI PUSH2 0x126C DUP6 DUP4 MLOAD PUSH2 0x11AF JUMP JUMPDEST SWAP5 POP PUSH2 0x1277 DUP3 PUSH2 0x162E JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1259 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1291 DUP2 PUSH2 0x1641 JUMP JUMPDEST PUSH2 0x129B DUP2 DUP5 PUSH2 0x1650 JUMP JUMPDEST SWAP3 POP PUSH2 0x12A6 DUP3 PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1281 JUMPI PUSH2 0x12BC DUP6 DUP4 MLOAD PUSH2 0x11AF JUMP JUMPDEST SWAP5 POP PUSH2 0x12C7 DUP3 PUSH2 0x162E JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x12A9 JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1660 JUMP JUMPDEST PUSH2 0x11D4 PUSH2 0x12E6 DUP3 PUSH2 0x1634 JUMP JUMPDEST PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F8 PUSH1 0x2C DUP4 PUSH2 0x1647 JUMP JUMPDEST PUSH32 0x426F746820706C6179657273206861766520746F2068617665207069636B6564 DUP2 MSTORE PUSH32 0x2074686569722063617264730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1357 PUSH1 0x25 DUP4 PUSH2 0x1647 JUMP JUMPDEST PUSH32 0x506C617965722068617320616C7265616479207069636B656420746865697220 DUP2 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL PUSH5 0x6361726473 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13A1 PUSH1 0x28 DUP4 PUSH2 0x1647 JUMP JUMPDEST PUSH32 0x5472616E73616374696F6E2073656E646572206D75737420626520706C617965 DUP2 MSTORE PUSH1 0x1 PUSH1 0xC1 SHL PUSH8 0x3910189037B91019 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x13F2 DUP5 DUP3 PUSH2 0x1495 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1405 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1418 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x142B PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x143E PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1451 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x146F DUP3 DUP3 PUSH2 0x11E3 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1484 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x149E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1665 JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1634 JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1678 JUMP JUMPDEST PUSH2 0x11D4 PUSH2 0x14B3 DUP3 PUSH2 0x1678 JUMP JUMPDEST PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14C4 DUP3 DUP7 PUSH2 0x14A7 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x14D4 DUP3 DUP6 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x14E4 DUP3 DUP5 PUSH2 0x11C3 JUMP JUMPDEST POP PUSH1 0x14 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x150C DUP3 DUP6 PUSH2 0x1288 JUMP JUMPDEST PUSH2 0xCD3 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1238 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x12D1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x80B DUP2 PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x80B DUP2 PUSH2 0x134A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x80B DUP2 PUSH2 0x1394 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x13E1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xCD3 DUP2 DUP5 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x148C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x149E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x15BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x15DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x15FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x161D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x3 SWAP1 JUMP JUMPDEST POP PUSH1 0x5 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x80B DUP3 PUSH2 0x166C JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1699 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1681 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1451 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x80B DUP3 PUSH1 0x0 PUSH2 0x80B DUP3 PUSH2 0x16C7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x80B DUP3 PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x22 PUSH4 0xF5ABF8A7 0xf7 CREATE 0x48 0xcd PUSH32 0x3EDA8561126BAC8BD5B7AEAA2D7433A4F8CE34BEDD6C6578706572696D656E74 PUSH2 0x6CF5 STOP CALLDATACOPY ", "sourceMap": "154:4798:8:-;;;675:186;8:9:-1;5:2;;;30:1;27;20:12;5:2;675:186:8;;;;;;;;;;;;;;;;;;;;;;762:7;:18;;-1:-1:-1;;;;;762:18:8;;;-1:-1:-1;;;;;;762:18:8;;;;;;;790:7;:18;;;;;;;;;;;;;;;762:7;819:35;;;;;;;;;;;154:4798;;5:122:-1;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:535;;;;283:2;271:9;262:7;258:23;254:32;251:2;;;299:1;296;289:12;251:2;334:1;351:64;407:7;387:9;351:64;;;341:74;;313:108;452:2;470:64;526:7;517:6;506:9;502:22;470:64;;;460:74;;431:109;571:2;589:64;645:7;636:6;625:9;621:22;589:64;;;579:74;;550:109;245:424;;;;;;676:105;;745:31;770:5;745:31;;;734:42;728:53;-1:-1;;728:53;788:128;-1:-1;;;;;857:54;;840:76;;154:4798:8;;;;;;"}, "deployedBytecode": {"linkReferences": {}, "object": "", "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC0D35449 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC0D35449 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0xD30895E4 EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xD7EB798C EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xE4B6C992 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xFE145FBD EQ PUSH2 0x16E JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x6880689 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x2AF1E2F8 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x48373963 EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x4ED61446 EQ PUSH2 0xF6 JUMPI DUP1 PUSH4 0x59A5F12D EQ PUSH2 0x116 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x18E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x14EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD4 PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x1A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1592 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x112A JUMP JUMPDEST PUSH2 0x1C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x109 PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0x10F5 JUMP JUMPDEST PUSH2 0x51D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1576 JUMP JUMPDEST PUSH2 0xAB PUSH2 0x5F7 JUMP JUMPDEST PUSH2 0x131 PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x606 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1565 JUMP JUMPDEST PUSH2 0xAB PUSH2 0x6E9 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH2 0xD4 PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x701 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x719 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1557 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x1FD JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x1537 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x243 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x23E JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x288 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x23E JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x1547 JUMP JUMPDEST PUSH2 0x2AB PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x2D9 PUSH1 0x5 PUSH1 0x1 PUSH2 0x7C6 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F5 DUP4 DUP6 DUP4 PUSH1 0x5 DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x811 JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x302 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x2 SWAP2 DUP3 MUL ADD SLOAD DUP5 MSTORE PUSH2 0x320 SWAP1 PUSH1 0xA SWAP1 PUSH2 0x7C6 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ DUP1 PUSH2 0x330 JUMPI POP PUSH1 0x4 DUP2 GT JUMPDEST ISZERO PUSH2 0x3DA JUMPI PUSH2 0x3C9 PUSH1 0x1 PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1B6CDE10 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3C1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x117D JUMP JUMPDEST SUB PUSH1 0x2 PUSH2 0x7C6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3D5 DUP5 DUP3 PUSH2 0x811 JUMP JUMPDEST PUSH2 0x3EA JUMP JUMPDEST PUSH2 0x3EA DUP5 DUP7 DUP4 PUSH1 0x5 DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 SLOAD DUP2 LT PUSH2 0x3F7 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD SLOAD DUP6 DUP3 ADD MSTORE DUP2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xE4 SHL PUSH4 0x1B6CDE1 MUL DUP2 MSTORE SWAP1 MLOAD PUSH2 0x496 SWAP4 PUSH1 0x1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH4 0x1B6CDE10 SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP10 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x48E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x117D JUMP JUMPDEST SUB PUSH1 0x3 PUSH2 0x7C6 JUMP JUMPDEST SWAP1 POP PUSH2 0x4A2 DUP6 DUP3 PUSH2 0x811 JUMP JUMPDEST DUP5 PUSH1 0x2 DUP2 SLOAD DUP2 LT PUSH2 0x4AF JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP2 DUP3 MUL ADD SLOAD SWAP1 DUP6 SWAP1 PUSH1 0x20 MUL ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x48CA02657A8ACB3A062F53BF24CA611BB25D8108F29F5E3C5E468080A44DCA5D SWAP1 PUSH2 0x4FA SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x14FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x515 JUMPI PUSH2 0x515 PUSH2 0x9A1 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x54F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x577 SWAP2 SWAP1 PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x591 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0xA0 ADD MLOAD SWAP1 POP DUP3 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x5E7 JUMPI DUP1 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x522 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x60E PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP2 SLOAD PUSH1 0x60 SWAP5 DUP2 MUL DUP3 ADD DUP6 ADD DUP5 MSTORE SWAP3 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP5 SWAP2 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 DUP6 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x64C JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x721 PUSH2 0xBE4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0x751 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH3 0x10000 DUP2 DIV DUP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 NUMBER SUB BLOCKHASH CALLER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7E2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x14B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP4 DUP2 DUP2 PUSH2 0x806 JUMPI INVALID JUMPDEST MOD SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x819 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE1 SHL PUSH4 0x48C46989 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9188D312 SWAP1 PUSH2 0x84C SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x866 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x87A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8A2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE SWAP5 DUP2 MSTORE DUP2 DUP4 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP5 AND SWAP6 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP1 DUP9 ADD MLOAD DUP6 AND SWAP2 DUP7 ADD SWAP2 DUP3 MSTORE SWAP9 DUP8 ADD MLOAD DUP5 AND SWAP9 DUP6 ADD SWAP9 DUP10 MSTORE PUSH1 0xE0 SWAP1 SWAP7 ADD MLOAD DUP4 AND PUSH1 0xA0 DUP6 ADD SWAP1 DUP2 MSTORE DUP10 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP13 SSTORE PUSH1 0x0 SWAP12 DUP13 MSTORE SWAP3 SWAP1 SWAP11 KECCAK256 SWAP5 MLOAD PUSH1 0x2 SWAP1 SWAP11 MUL SWAP1 SWAP5 ADD SWAP9 DUP10 SSTORE SWAP1 MLOAD SWAP8 ADD DUP1 SLOAD SWAP4 MLOAD SWAP5 MLOAD SWAP7 MLOAD SWAP3 MLOAD DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH10 0xFFFF0000000000000000 NOT SWAP4 DUP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH8 0xFFFF000000000000 NOT SWAP9 DUP5 AND PUSH5 0x100000000 MUL PUSH6 0xFFFF00000000 NOT SWAP8 DUP6 AND PUSH3 0x10000 MUL PUSH4 0xFFFF0000 NOT SWAP12 SWAP1 SWAP6 AND PUSH2 0xFFFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP10 SWAP1 SWAP10 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR SWAP5 SWAP1 SWAP5 AND SWAP5 SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND PUSH2 0x9C6 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH2 0x1527 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH2 0xA86 SWAP4 DUP6 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xA7D JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x9FD JUMP JUMPDEST POP POP POP POP PUSH2 0x51D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP5 SWAP6 POP SWAP3 SWAP4 PUSH2 0xB41 SWAP4 SWAP2 SWAP3 DUP6 SWAP1 DUP5 ADD DUP3 ISZERO PUSH2 0xA7D JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP6 DUP8 ADD MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH5 0x100000000 DUP2 DIV DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP2 DIV DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x9FD JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND LT PUSH2 0xB80 JUMPI PUSH1 0x1 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xBAA JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x260 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC34 PUSH2 0xC64 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7F PUSH2 0xC99 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC8C PUSH2 0xC99 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 CALLDATALOAD PUSH2 0x1655 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCFE PUSH2 0xCF9 DUP3 PUSH2 0x15C7 JUMP JUMPDEST PUSH2 0x15A0 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0xC0 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xD23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD51 JUMPI DUP2 PUSH2 0xD39 DUP9 DUP3 PUSH2 0x1008 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xC0 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xD26 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0xD7A PUSH2 0xCF9 DUP3 PUSH2 0x15E8 JUMP JUMPDEST SWAP2 POP DUP2 DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD51 JUMPI DUP2 PUSH2 0xDA6 DUP9 DUP3 PUSH2 0x10B7 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xD93 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xDDB PUSH2 0xCF9 DUP3 PUSH2 0x1606 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xDF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE02 DUP4 DUP3 DUP5 PUSH2 0x167E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE28 PUSH1 0x80 PUSH2 0x15A0 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE4E DUP5 DUP3 DUP6 ADD PUSH2 0xDBC JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xE5F DUP5 DUP5 DUP4 ADD PUSH2 0xE94 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xE73 DUP5 DUP3 DUP6 ADD PUSH2 0xE94 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0xE88 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEB0 PUSH1 0xA0 PUSH2 0x15A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEBE DUP5 DUP5 PUSH2 0x10AB JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xECF DUP5 DUP5 DUP4 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xEE3 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xEF7 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xF0B DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF35 PUSH2 0x100 PUSH2 0x15A0 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF5B DUP5 DUP3 DUP6 ADD PUSH2 0xDBC JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF84 DUP5 DUP3 DUP6 ADD PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xF98 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xFAC DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xFC0 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xFD4 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xFE8 DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x10AB JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x101A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1024 PUSH1 0xC0 PUSH2 0x15A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1032 DUP5 DUP5 PUSH2 0x10B7 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1043 DUP5 DUP5 DUP4 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1057 DUP5 DUP3 DUP6 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x106B DUP5 DUP3 DUP6 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x107F DUP5 DUP3 DUP6 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x1093 DUP5 DUP3 DUP6 ADD PUSH2 0x109F JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 CALLDATALOAD PUSH2 0x1665 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 MLOAD PUSH2 0x1665 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 CALLDATALOAD PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD3 DUP3 MLOAD PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10ED DUP5 DUP5 PUSH2 0xCC7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x111E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10ED DUP5 DUP3 DUP6 ADD PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10ED DUP5 DUP5 PUSH2 0xD5B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x115A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10ED DUP5 DUP3 DUP6 ADD PUSH2 0xF17 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x118F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10ED DUP5 DUP5 PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A7 DUP4 DUP4 PUSH2 0x13E1 JUMP JUMPDEST POP POP PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11BB DUP4 DUP4 PUSH2 0x1495 JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x11D4 PUSH2 0x11CF DUP3 PUSH2 0x1655 JUMP JUMPDEST PUSH2 0x16AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1655 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11EE DUP3 PUSH2 0x1637 JUMP JUMPDEST PUSH2 0x11F8 DUP2 DUP6 PUSH2 0x1647 JUMP JUMPDEST SWAP4 POP PUSH2 0x1203 DUP4 PUSH2 0x162E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x122E JUMPI PUSH2 0x1219 DUP7 DUP4 MLOAD PUSH2 0x119B JUMP JUMPDEST SWAP6 POP PUSH2 0x1224 DUP3 PUSH2 0x162E JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1206 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1241 DUP2 PUSH2 0x163B JUMP JUMPDEST PUSH2 0x124B DUP2 DUP5 PUSH2 0x1650 JUMP JUMPDEST SWAP3 POP PUSH2 0x1256 DUP3 PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1281 JUMPI PUSH2 0x126C DUP6 DUP4 MLOAD PUSH2 0x11AF JUMP JUMPDEST SWAP5 POP PUSH2 0x1277 DUP3 PUSH2 0x162E JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1259 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1291 DUP2 PUSH2 0x1641 JUMP JUMPDEST PUSH2 0x129B DUP2 DUP5 PUSH2 0x1650 JUMP JUMPDEST SWAP3 POP PUSH2 0x12A6 DUP3 PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1281 JUMPI PUSH2 0x12BC DUP6 DUP4 MLOAD PUSH2 0x11AF JUMP JUMPDEST SWAP5 POP PUSH2 0x12C7 DUP3 PUSH2 0x162E JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x12A9 JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1660 JUMP JUMPDEST PUSH2 0x11D4 PUSH2 0x12E6 DUP3 PUSH2 0x1634 JUMP JUMPDEST PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F8 PUSH1 0x2C DUP4 PUSH2 0x1647 JUMP JUMPDEST PUSH32 0x426F746820706C6179657273206861766520746F2068617665207069636B6564 DUP2 MSTORE PUSH32 0x2074686569722063617264730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1357 PUSH1 0x25 DUP4 PUSH2 0x1647 JUMP JUMPDEST PUSH32 0x506C617965722068617320616C7265616479207069636B656420746865697220 DUP2 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL PUSH5 0x6361726473 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13A1 PUSH1 0x28 DUP4 PUSH2 0x1647 JUMP JUMPDEST PUSH32 0x5472616E73616374696F6E2073656E646572206D75737420626520706C617965 DUP2 MSTORE PUSH1 0x1 PUSH1 0xC1 SHL PUSH8 0x3910189037B91019 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x13F2 DUP5 DUP3 PUSH2 0x1495 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1405 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1418 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x142B PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x143E PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1451 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x148C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x146F DUP3 DUP3 PUSH2 0x11E3 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1484 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x149E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1665 JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1634 JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1678 JUMP JUMPDEST PUSH2 0x11D4 PUSH2 0x14B3 DUP3 PUSH2 0x1678 JUMP JUMPDEST PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14C4 DUP3 DUP7 PUSH2 0x14A7 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x14D4 DUP3 DUP6 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x14E4 DUP3 DUP5 PUSH2 0x11C3 JUMP JUMPDEST POP PUSH1 0x14 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x150C DUP3 DUP6 PUSH2 0x1288 JUMP JUMPDEST PUSH2 0xCD3 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1238 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x12D1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x80B DUP2 PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x80B DUP2 PUSH2 0x134A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x80B DUP2 PUSH2 0x1394 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x13E1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xCD3 DUP2 DUP5 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x148C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x80B DUP3 DUP5 PUSH2 0x149E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x15BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x15DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x15FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x161D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x3 SWAP1 JUMP JUMPDEST POP PUSH1 0x5 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x80B DUP3 PUSH2 0x166C JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1699 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1681 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1451 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x80B DUP3 PUSH1 0x0 PUSH2 0x80B DUP3 PUSH2 0x16C7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x80B DUP3 PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x22 PUSH4 0xF5ABF8A7 0xf7 CREATE 0x48 0xcd PUSH32 0x3EDA8561126BAC8BD5B7AEAA2D7433A4F8CE34BEDD6C6578706572696D656E74 PUSH2 0x6CF5 STOP CALLDATACOPY ", "sourceMap": "154:4798:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;154:4798:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;642:26;;;:::i;:::-;;;;;;;;;;;;;;;;1887:136;;;;;;;;;:::i;:::-;;;;;;;;2029:1893;;;;;;;;;:::i;:::-;;4440:382;;;;;;;;;:::i;:::-;;;;;;;;529:22;;;:::i;4828:122::-;;;;;;;;;:::i;:::-;;;;;;;;501:22;;;:::i;613:23::-;;;:::i;:::-;;;;;;;;557:50;;;;;;;;;:::i;1666:215::-;;;;;;;;;:::i;:::-;;;;;;;;642:26;;;;;;-1:-1:-1;;;;;642:26:8;;:::o;1887:136::-;-1:-1:-1;;;;;1985:19:8;1961:5;1985:19;;;:11;:19;;;;;:31;;;;;;1887:136::o;2029:1893::-;2147:10;2100:32;2135:23;;;:11;:23;;;;;2188:18;;:23;2180:73;;;;-1:-1:-1;;;;;2180:73:8;;;;;;;;;;;;;;;;;2268:7;;-1:-1:-1;;;;;2268:7:8;2279:10;2268:21;2264:397;;;2321:7;;-1:-1:-1;;;;;2321:7:8;2351:1;2309:20;;;:11;:20;;;;;:39;:43;2305:100;;2372:11;:18;;-1:-1:-1;;2372:18:8;2386:4;2372:18;;;2305:100;2264:397;;;2433:7;;-1:-1:-1;;;;;2433:7:8;2444:10;2433:21;2429:232;;;2486:7;;-1:-1:-1;;;;;2486:7:8;2516:1;2474:20;;;:11;:20;;;;;:39;:43;2470:100;;2537:11;:18;;-1:-1:-1;;2537:18:8;2551:4;2537:18;;;2429:232;;;2600:50;;-1:-1:-1;;;;;2600:50:8;;;;;;;;2429:232;2671:32;;:::i;:::-;:50;;;;;;;;2712:1;2671:50;;;;2716:1;2671:50;;;;2719:1;2671:50;;;;;2761:16;2780:19;2794:1;2797;2780:13;:19::i;:::-;2761:38;;2809:54;2824:11;2837:12;2850:11;2837:25;;;;;;;;;;;2809:14;:54::i;:::-;2896:11;2908:1;2896:14;;;;;;;;;;;;;;;;;;;;:21;2873:44;;3073:20;;3087:2;;3073:13;:20::i;:::-;3054:39;;3202:11;3187;:26;:57;;;;3243:1;3229:11;:15;3187:57;3183:368;;;3274:47;3316:1;3288:13;;;;;;;;;-1:-1:-1;;;;;3288:13:8;-1:-1:-1;;;;;3288:23:8;;:25;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3288:25:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3288:25:8;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3288:25:8;;;;;;;;;:29;3319:1;3274:13;:47::i;:::-;3260:61;;3364:40;3379:11;3392;3364:14;:40::i;:::-;3183:368;;;3486:54;3501:11;3514:12;3527:11;3514:25;;;;;;3486:54;3584:11;3596:1;3584:14;;;;;;;;;;;;;;;;;;;;;;;:21;3561:20;;;:44;3649:13;;:25;;;-1:-1:-1;;;;;3649:25:8;;;;3635:47;;3579:1;;-1:-1:-1;;;;;3649:13:8;;:23;;:25;;;;;3584:14;3649:25;;;;;3584:14;3649:13;:25;;;5:2:-1;;;;30:1;27;20:12;5:2;3649:25:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3649:25:8;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3649:25:8;;;;;;;;;:29;3680:1;3635:13;:47::i;:::-;3616:66;;3692:40;3707:11;3720;3692:14;:40::i;:::-;3766:11;3778:1;3766:14;;;;;;;;;;;;;;;;;;;;;:21;;3743:17;;:20;;;:44;3803:47;;;;;;3818:12;;3832:17;;3803:47;;;;;;;;;;3865:11;;;;3861:55;;;3892:13;:11;:13::i;:::-;2029:1893;;;;;;:::o;4440:382::-;4511:6;;;4560:230;4577:11;:18;4575:1;:20;4560:230;;;4617:16;4636:13;;4658:14;;-1:-1:-1;;;;;4636:13:8;;;;:21;;4658:11;;4670:1;;4658:14;;;;;;;;;;;;:21;;;4636:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4636:44:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4636:44:8;;;;;;39:16:-1;36:1;17:17;2:54;101:4;4636:44:8;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;4636:44:8;;;;;;;;;:50;;;4617:69;;4717:8;4705:20;;:9;:20;;;4701:79;;;4756:9;4745:20;;4701:79;-1:-1:-1;4597:3:8;;4560:230;;;-1:-1:-1;4807:8:8;4440:382;-1:-1:-1;;4440:382:8:o;529:22::-;;;-1:-1:-1;;;;;529:22:8;;:::o;4828:122::-;4888:17;;:::i;:::-;-1:-1:-1;;;;;4924:19:8;;;;;;:11;:19;;;;;;;;4917:26;;;;;;;;;;;;;;;;;;;;;;4924:19;;4917:26;;;;4924:19;;4917:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4917:26:8;;;;;;;;-1:-1:-1;;;4917:26:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4917:26:8;;;-1:-1:-1;4917:26:8;;;;;;;;;;;;;;4828:122;-1:-1:-1;;4828:122:8:o;501:22::-;;;-1:-1:-1;;;;;501:22:8;;:::o;613:23::-;;;;;;:::o;557:50::-;;;;;;;;;;;;;;;;;:::o;1666:215::-;1733:17;;:::i;:::-;-1:-1:-1;;;;;1782:19:8;;1763:16;1782:19;;;:11;:19;;;;;:31;;;;1831:43;;1782:31;;;;;:19;:31;;1831:43;;;;;;;;;;;;;;;1824:50;;;;;;;;1831:43;;;;;;;1824:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1824:50:8;;;;;;;;-1:-1:-1;;;1824:50:8;;;;;;;;;;-1:-1:-1;;1666:215:8;;;:::o;867:372::-;950:4;967:9;1062:10;1119:1;1104:12;:16;1094:27;1143:10;1024:147;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1024:147:8;;;997:188;;;;;;979:216;;967:228;;1219:13;1212:4;:20;;;;;;1205:27;;;867:372;;;;;:::o;1245:415::-;1336:16;;:::i;:::-;1355:13;;:29;;-1:-1:-1;;;;;1355:29:8;;-1:-1:-1;;;;;1355:13:8;;;;:21;;:29;;1377:6;;1355:29;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1355:29:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1355:29:8;;;;;;39:16:-1;36:1;17:17;2:54;101:4;1355:29:8;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;1355:29:8;;;;;;;;;1413:239;;;;;;;;;;;;1474:15;;;;1413:239;;;;;;;;;;;1512:16;;;;;1413:239;;;;;;;;1548:13;;;;;1413:239;;;;;;;;1583:11;;;;1413:239;;;;;;;;1623:18;;;;;1413:239;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;-1:-1;1395:258:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1395:258:8;-1:-1:-1;;1395:258:8;;;-1:-1:-1;;;1395:258:8;-1:-1:-1;;1395:258:8;;;;;-1:-1:-1;;1395:258:8;;;;;-1:-1:-1;;1395:258:8;;;;-1:-1:-1;;1395:258:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1245:415:8:o;3998:436::-;4048:11;;;;4040:68;;;;-1:-1:-1;;;;;4040:68:8;;;;;;;;;4169:7;;-1:-1:-1;;;;;4169:7:8;4119:22;4157:20;;;:11;:20;;;;;;;;4144:46;;;;;;;;;;;;;;;;;;;4119:22;;4144:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4144:46:8;;;;;;;;-1:-1:-1;;;4144:46:8;;;;;;;;;;;;;;;;;;;;;;;;:12;:46::i;:::-;4250:7;;-1:-1:-1;;;;;4250:7:8;4200:22;4238:20;;;:11;:20;;;;;;;;4225:46;;;;;;;;;;;;;;;;;4119:71;;-1:-1:-1;4200:22:8;;4225:46;;;;4200:22;;4225:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4225:46:8;;;;;;;;-1:-1:-1;;;4225:46:8;;;;;;;;;;;;;;;;;;;;4200:71;;4305:15;4286:34;;:15;:34;;;4282:146;;4350:7;;4336:11;:21;;-1:-1:-1;;;;;4350:7:8;;;;4336:21;-1:-1:-1;;;;;;4336:21:8;;;;;;;;;4282:146;;;4410:7;;4396:11;:21;;-1:-1:-1;;;;;4410:7:8;;;;4396:21;-1:-1:-1;;;;;;4396:21:8;;;;;;;;;4282:146;3998:436;;:::o;154:4798::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;154:4798:8;;;-1:-1:-1;;154:4798:8:o;:::-;;;;;;;;;;;;;-1:-1:-1;154:4798:8;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;154:4798:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;154:4798:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;176:779;;317:3;310:4;302:6;298:17;294:27;284:2;;335:1;332;325:12;284:2;372:6;359:20;394:104;409:88;490:6;409:88;;;394:104;;;385:113;;515:5;540:6;533:5;526:21;570:4;562:6;558:17;548:27;;592:4;587:3;583:14;576:21;;645:6;692:3;684:4;676:6;672:17;667:3;663:27;660:36;657:2;;;709:1;706;699:12;657:2;734:1;719:230;744:6;741:1;738:13;719:230;;;802:3;824:61;881:3;869:10;824:61;;;812:74;;-1:-1;909:4;900:14;;;;937:4;928:14;;;;;766:1;759:9;719:230;;;723:14;277:678;;;;;;;;982:615;;1097:3;1090:4;1082:6;1078:17;1074:27;1064:2;;1115:1;1112;1105:12;1064:2;1139:3;1157:78;1172:62;1227:6;1172:62;;1157:78;1148:87;;1252:5;1311:6;1358:3;1350:4;1342:6;1338:17;1333:3;1329:27;1326:36;1323:2;;;1375:1;1372;1365:12;1323:2;1400:1;1385:206;1410:6;1407:1;1404:13;1385:206;;;1468:3;1490:37;1523:3;1511:10;1490:37;;;1478:50;;-1:-1;1551:4;1542:14;;;;1570;;;;;1432:1;1425:9;1385:206;;1606:436;;1715:3;1708:4;1700:6;1696:17;1692:27;1682:2;;1733:1;1730;1723:12;1682:2;1763:6;1757:13;1785:61;1800:45;1838:6;1800:45;;1785:61;1776:70;;1866:6;1859:5;1852:21;1902:4;1894:6;1890:17;1935:4;1928:5;1924:16;1970:3;1961:6;1956:3;1952:16;1949:25;1946:2;;;1987:1;1984;1977:12;1946:2;1997:39;2029:6;2024:3;2019;1997:39;;;1675:367;;;;;;;;2089:958;;2210:5;2198:9;2193:3;2189:19;2185:31;2182:2;;;2229:1;2226;2219:12;2182:2;2247:20;2262:4;2247:20;;;2317:24;;2238:29;;-1:-1;2361:18;2350:30;;2347:2;;;2393:1;2390;2383:12;2347:2;2427:66;2489:3;2480:6;2469:9;2465:22;2427:66;;;2403:91;;-1:-1;2559:2;2592:88;2676:3;2652:22;;;2592:88;;;2585:4;2578:5;2574:16;2567:114;2515:177;2744:3;2778:88;2862:3;2853:6;2842:9;2838:22;2778:88;;;2771:4;2764:5;2760:16;2753:114;2702:176;2932:3;2966:59;3021:3;3012:6;3001:9;2997:22;2966:59;;;2959:4;2952:5;2948:16;2941:85;2888:149;2176:871;;;;;3100:979;;3228:4;3216:9;3211:3;3207:19;3203:30;3200:2;;;3246:1;3243;3236:12;3200:2;3264:20;3279:4;3264:20;;;3255:29;-1:-1;3336:1;3367:59;3422:3;3402:9;3367:59;;;3343:84;;-1:-1;3491:2;3524:59;3579:3;3555:22;;;3524:59;;;3517:4;3510:5;3506:16;3499:85;3448:147;3645:2;3678:59;3733:3;3724:6;3713:9;3709:22;3678:59;;;3671:4;3664:5;3660:16;3653:85;3605:144;3801:2;3834:59;3889:3;3880:6;3869:9;3865:22;3834:59;;;3827:4;3820:5;3816:16;3809:85;3759:146;3964:3;3998:59;4053:3;4044:6;4033:9;4029:22;3998:59;;;3991:4;3984:5;3980:16;3973:85;3915:154;3194:885;;;;;4122:1643;;4244:5;4232:9;4227:3;4223:19;4219:31;4216:2;;;4263:1;4260;4253:12;4216:2;4281:21;4296:5;4281:21;;;4352:24;;4272:30;;-1:-1;4396:18;4385:30;;4382:2;;;4428:1;4425;4418:12;4382:2;4462:66;4524:3;4515:6;4504:9;4500:22;4462:66;;;4438:91;;-1:-1;4614:2;4599:18;;4593:25;4638:18;4627:30;;4624:2;;;4670:1;4667;4660:12;4624:2;4705:81;4782:3;4773:6;4762:9;4758:22;4705:81;;;4698:4;4691:5;4687:16;4680:107;4550:248;4854:2;4887:59;4942:3;4933:6;4922:9;4918:22;4887:59;;;4880:4;4873:5;4869:16;4862:85;4808:150;5015:2;5048:59;5103:3;5094:6;5083:9;5079:22;5048:59;;;5041:4;5034:5;5030:16;5023:85;4968:151;5173:3;5207:59;5262:3;5253:6;5242:9;5238:22;5207:59;;;5200:4;5193:5;5189:16;5182:85;5129:149;5329:3;5363:59;5418:3;5409:6;5398:9;5394:22;5363:59;;;5356:4;5349:5;5345:16;5338:85;5288:146;5486:3;5520:59;5575:3;5566:6;5555:9;5551:22;5520:59;;;5513:4;5506:5;5502:16;5495:85;5444:147;5650:3;5684:59;5739:3;5730:6;5719:9;5715:22;5684:59;;;5677:4;5670:5;5666:16;5659:85;5601:154;4210:1555;;;;;5814:1056;;5927:4;5915:9;5910:3;5906:19;5902:30;5899:2;;;5945:1;5942;5935:12;5899:2;5963:20;5978:4;5963:20;;;5954:29;-1:-1;6035:1;6066:49;6111:3;6091:9;6066:49;;;6042:74;;-1:-1;6179:2;6212:48;6256:3;6232:22;;;6212:48;;;6205:4;6198:5;6194:16;6187:74;6137:135;6325:2;6358:48;6402:3;6393:6;6382:9;6378:22;6358:48;;;6351:4;6344:5;6340:16;6333:74;6282:136;6468:2;6501:48;6545:3;6536:6;6525:9;6521:22;6501:48;;;6494:4;6487:5;6483:16;6476:74;6428:133;6613:3;6647:48;6691:3;6682:6;6671:9;6667:22;6647:48;;;6640:4;6633:5;6629:16;6622:74;6571:136;6766:3;6800:48;6844:3;6835:6;6824:9;6820:22;6800:48;;;6793:4;6786:5;6782:16;6775:74;6717:143;5893:977;;;;;6877:116;;6943:45;6980:6;6967:20;6943:45;;7000:120;;7077:38;7107:6;7101:13;7077:38;;7127:118;;7194:46;7232:6;7219:20;7194:46;;7252:122;;7330:39;7361:6;7355:13;7330:39;;7381:241;;7485:2;7473:9;7464:7;7460:23;7456:32;7453:2;;;7501:1;7498;7491:12;7453:2;7536:1;7553:53;7598:7;7578:9;7553:53;;;7543:63;7447:175;-1:-1;;;;7447:175;7629:425;;7782:2;7770:9;7761:7;7757:23;7753:32;7750:2;;;7798:1;7795;7788:12;7750:2;7833:31;;7884:18;7873:30;;7870:2;;;7916:1;7913;7906:12;7870:2;7936:102;8030:7;8021:6;8010:9;8006:22;7936:102;;8061:288;;8188:3;8176:9;8167:7;8163:23;8159:33;8156:2;;;8205:1;8202;8195:12;8156:2;8240:1;8257:76;8325:7;8305:9;8257:76;;8356:386;;8493:2;8481:9;8472:7;8468:23;8464:32;8461:2;;;8509:1;8506;8499:12;8461:2;8544:24;;8588:18;8577:30;;8574:2;;;8620:1;8617;8610:12;8574:2;8640:86;8718:7;8709:6;8698:9;8694:22;8640:86;;8749:263;;8864:2;8852:9;8843:7;8839:23;8835:32;8832:2;;;8880:1;8877;8870:12;8832:2;8915:1;8932:64;8988:7;8968:9;8932:64;;9020:273;;9155:98;9249:3;9241:6;9155:98;;;-1:-1;;9282:4;9273:14;;9148:145;9302:173;;9389:46;9431:3;9423:6;9389:46;;;-1:-1;;9464:4;9455:14;;9382:93;9483:191;9600:68;9628:39;9661:5;9628:39;;;9600:68;;;9595:3;9588:81;9582:92;;;9681:120;9764:31;9789:5;9764:31;;9895:777;;10074:74;10142:5;10074:74;;;10161:100;10254:6;10249:3;10161:100;;;10154:107;;10281:76;10351:5;10281:76;;;10378:1;10363:287;10388:6;10385:1;10382:13;10363:287;;;10435:111;10542:3;10533:6;10527:13;10435:111;;;10428:118;;10563:80;10636:6;10563:80;;;10553:90;-1:-1;10410:1;10403:9;10363:287;;;-1:-1;10663:3;;10053:619;-1:-1;;;;10053:619;10713:591;10846:52;10892:5;10846:52;;;10911:84;10988:6;10983:3;10911:84;;;10904:91;;11015:54;11063:5;11015:54;;;11090:1;11075:217;11100:6;11097:1;11094:13;11075:217;;;11147:63;11206:3;11197:6;11191:13;11147:63;;;11140:70;;11227:58;11278:6;11227:58;;;11217:68;-1:-1;11122:1;11115:9;11075:217;;;11079:14;10825:479;;;;;11345:591;11478:52;11524:5;11478:52;;;11543:84;11620:6;11615:3;11543:84;;;11536:91;;11647:54;11695:5;11647:54;;;11722:1;11707:217;11732:6;11729:1;11726:13;11707:217;;;11779:63;11838:3;11829:6;11823:13;11779:63;;;11772:70;;11859:58;11910:6;11859:58;;;11849:68;-1:-1;11754:1;11747:9;11707:217;;11944:111;12021:28;12043:5;12021:28;;12062:159;12163:52;12183:31;12208:5;12183:31;;;12163:52;;12229:465;;12389:67;12453:2;12448:3;12389:67;;;12489:66;12469:87;;12590:66;12585:2;12576:12;;12569:88;12685:2;12676:12;;12375:319;-1:-1;;12375:319;12703:465;;12863:67;12927:2;12922:3;12863:67;;;12963:66;12943:87;;-1:-1;;;;;13059:2;13050:12;;13043:88;13159:2;13150:12;;12849:319;-1:-1;;12849:319;13177:465;;13337:67;13401:2;13396:3;13337:67;;;13437:66;13417:87;;-1:-1;;;;;13533:2;13524:12;;13517:88;13633:2;13624:12;;13323:319;-1:-1;;13323:319;13731:1092;13947:22;;13880:4;13871:14;;;13975:61;13875:3;13947:22;13975:61;;;13900:142;14116:4;14109:5;14105:16;14099:23;14128:60;14182:4;14177:3;14173:14;14160:11;14128:60;;;14052:142;14269:4;14262:5;14258:16;14252:23;14281:60;14335:4;14330:3;14326:14;14313:11;14281:60;;;14204:143;14419:4;14412:5;14408:16;14402:23;14431:60;14485:4;14480:3;14476:14;14463:11;14431:60;;;14357:140;14571:4;14564:5;14560:16;14554:23;14583:60;14637:4;14632:3;14628:14;14615:11;14583:60;;;14507:142;14730:4;14723:5;14719:16;14713:23;14742:60;14796:4;14791:3;14787:14;14774:11;14742:60;;;14659:149;13853:970;;;;16077:655;16306:22;;16234:4;16341:37;;;16077:655;;16225:14;;;;16393:146;16225:14;16306:22;16393:146;;;16385:154;;16254:297;16630:4;16623:5;16619:16;16613:23;16642:58;16694:4;16689:3;16685:14;16672:11;16642:58;;;-1:-1;16723:4;16207:525;-1:-1;;;16207:525;16739:107;16810:30;16834:5;16810:30;;16977:110;17050:31;17075:5;17050:31;;17221:104;17290:29;17313:5;17290:29;;17453:151;17550:48;17568:29;17591:5;17568:29;;;17550:48;;17611:545;;17798:71;17865:3;17856:6;17798:71;;;17891:1;17886:3;17882:11;17875:18;;17904:75;17975:3;17966:6;17904:75;;;18001:2;17996:3;17992:12;17985:19;;18015:91;18102:3;18093:6;18015:91;;;-1:-1;18128:2;18119:12;;17786:370;-1:-1;;;17786:370;18163:213;18281:2;18266:18;;18295:71;18270:9;18339:6;18295:71;;18383:510;18621:3;18606:19;;18636:117;18610:9;18726:6;18636:117;;;18764:119;18878:3;18867:9;18863:19;18854:6;18764:119;;18900:201;19012:2;18997:18;;19026:65;19001:9;19064:6;19026:65;;19108:407;19299:2;19313:47;;;19284:18;;19374:131;19284:18;19374:131;;19522:407;19713:2;19727:47;;;19698:18;;19788:131;19698:18;19788:131;;19936:407;20127:2;20141:47;;;20112:18;;20202:131;20112:18;20202:131;;20350:326;20524:3;20509:19;;20539:127;20513:9;20639:6;20539:127;;20683:373;20857:2;20871:47;;;20842:18;;20932:114;20842:18;21032:6;20932:114;;21063:209;21179:2;21164:18;;21193:69;21168:9;21235:6;21193:69;;21279:213;21397:2;21382:18;;21411:71;21386:9;21455:6;21411:71;;21499:205;21613:2;21598:18;;21627:67;21602:9;21667:6;21627:67;;21711:256;21773:2;21767:9;21799:17;;;21874:18;21859:34;;21895:22;;;21856:62;21853:2;;;21931:1;21928;21921:12;21853:2;21947;21940:22;21751:216;;-1:-1;21751:216;21974:282;;22157:18;22149:6;22146:30;22143:2;;;22189:1;22186;22179:12;22143:2;-1:-1;22218:4;22206:17;;;22236:15;;22080:176;22263:233;;22420:18;22412:6;22409:30;22406:2;;;22452:1;22449;22442:12;22406:2;-1:-1;22481:4;22469:17;;22343:153;22503:255;;22643:18;22635:6;22632:30;22629:2;;;22675:1;22672;22665:12;22629:2;-1:-1;22748:4;22719;22696:17;;;;-1:-1;;22692:33;22738:15;;22566:192;22767:141;22896:4;22884:17;;22865:43;22919:108;23014:6;22995:32;23155:127;23265:12;;23249:33;23289:96;-1:-1;23377:3;;23361:24;23392:96;-1:-1;23480:3;;23464:24;23905:192;24037:19;;;24086:4;24077:14;;24030:67;24106:140;24237:3;24215:31;-1:-1;24215:31;24575:105;;24644:31;24669:5;24644:31;;24807:92;24880:13;24873:21;;24856:43;24992:91;25071:6;25060:18;;25043:40;25090:128;-1:-1;;;;;25159:54;;25142:76;25311:88;25389:4;25378:16;;25361:38;25838:268;25903:1;25910:101;25924:6;25921:1;25918:13;25910:101;;;25991:11;;;25985:18;25972:11;;;25965:39;25946:2;25939:10;25910:101;;;26026:6;26023:1;26020:13;26017:2;;;-1:-1;;26091:1;26073:16;;26066:27;25887:219;26114:103;;26186:26;26206:5;26305:89;26369:20;26383:5;26369:20;;26401:88;;26463:21;26478:5;26563:3;26559:15;;26540:40;26590:81;26655:2;26651:14;;26632:39"}}}}}, "errors": [{"component": "general", "formattedMessage": "contracts/CryptoBeastsTypes.sol:3:1: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.5.7;\"\ncontract CryptoBeastsTypes {\n^ (Relevant source part starts here and spans across multiple lines).\n", "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.5.7;\"", "severity": "warning", "sourceLocation": {"end": 620, "file": "contracts/CryptoBeastsTypes.sol", "start": 2}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/Cards.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.\npragma experimental ABIEncoderV2;\n^-------------------------------^\n", "message": "Experimental features are turned on. Do not use experimental features on live deployments.", "severity": "warning", "sourceLocation": {"end": 57, "file": "contracts/Cards.sol", "start": 24}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/PlayerCardsPick.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.\npragma experimental ABIEncoderV2;\n^-------------------------------^\n", "message": "Experimental features are turned on. Do not use experimental features on live deployments.", "severity": "warning", "sourceLocation": {"end": 57, "file": "contracts/PlayerCardsPick.sol", "start": 24}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/BattlePick.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.\npragma experimental ABIEncoderV2;\n^-------------------------------^\n", "message": "Experimental features are turned on. Do not use experimental features on live deployments.", "severity": "warning", "sourceLocation": {"end": 57, "file": "contracts/BattlePick.sol", "start": 24}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/PlayerCardsRandom.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.\npragma experimental ABIEncoderV2;\n^-------------------------------^\n", "message": "Experimental features are turned on. Do not use experimental features on live deployments.", "severity": "warning", "sourceLocation": {"end": 57, "file": "contracts/PlayerCardsRandom.sol", "start": 24}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/BattleRandom.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.\npragma experimental ABIEncoderV2;\n^-------------------------------^\n", "message": "Experimental features are turned on. Do not use experimental features on live deployments.", "severity": "warning", "sourceLocation": {"end": 57, "file": "contracts/BattleRandom.sol", "start": 24}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/Challenge.sol:8:5: Warning: This declaration shadows an existing declaration.\n    event Challenge(address challenger);\n    ^----------------------------------^\ncontracts/Challenge.sol:4:1: The shadowed declaration is here:\ncontract Challenge {\n^ (Relevant source part starts here and spans across multiple lines).\n", "message": "This declaration shadows an existing declaration.", "severity": "warning", "sourceLocation": {"end": 133, "file": "contracts/Challenge.sol", "start": 97}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/BattlePick.sol:50:9: Warning: Unused local variable.\n        uint16 remainingAttackAmount;\n        ^--------------------------^\n", "message": "Unused local variable.", "severity": "warning", "sourceLocation": {"end": 1946, "file": "contracts/BattlePick.sol", "start": 1918}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/BattleRandom.sol:50:9: Warning: Unused local variable.\n        uint16 remainingAttackAmount;\n        ^--------------------------^\n", "message": "Unused local variable.", "severity": "warning", "sourceLocation": {"end": 1951, "file": "contracts/BattleRandom.sol", "start": 1923}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/Cards.sol:18:5: Warning: Function state mutability can be restricted to view\n    function cardCount() public returns (uint) {\n    ^ (Relevant source part starts here and spans across multiple lines).\n", "message": "Function state mutability can be restricted to view", "severity": "warning", "sourceLocation": {"end": 453, "file": "contracts/Cards.sol", "start": 374}, "type": "Warning"}, {"component": "general", "formattedMessage": "contracts/Cards.sol:22:5: Warning: Function state mutability can be restricted to view\n    function getCard(uint index) public returns (Card memory) {\n    ^ (Relevant source part starts here and spans across multiple lines).\n", "message": "Function state mutability can be restricted to view", "severity": "warning", "sourceLocation": {"end": 553, "file": "contracts/Cards.sol", "start": 459}, "type": "Warning"}], "sources": {"contracts/BattlePick.sol": {"ast": {"absolutePath": "contracts/BattlePick.sol", "exportedSymbols": {"BattlePick": [560]}, "id": 561, "nodeType": "SourceUnit", "nodes": [{"id": 1, "literals": ["solidity", "^", "0.5", ".2"], "nodeType": "PragmaDirective", "src": "0:23:0"}, {"id": 2, "literals": ["experimental", "ABIEncoderV2"], "nodeType": "PragmaDirective", "src": "24:33:0"}, {"absolutePath": "contracts/PlayerCardsPick.sol", "file": "./PlayerCardsPick.sol", "id": 4, "nodeType": "ImportDirective", "scope": 561, "sourceUnit": 1752, "src": "59:54:0", "symbolAliases": [{"foreign": 3, "local": null}], "unitAlias": ""}, {"absolutePath": "contracts/Cards.sol", "file": "./Cards.sol", "id": 6, "nodeType": "ImportDirective", "scope": 561, "sourceUnit": 1180, "src": "114:34:0", "symbolAliases": [{"foreign": 5, "local": null}], "unitAlias": ""}, {"absolutePath": "contracts/MathUtils.sol", "file": "./MathUtils.sol", "id": 8, "nodeType": "ImportDirective", "scope": 561, "sourceUnit": 1331, "src": "149:42:0", "symbolAliases": [{"foreign": 7, "local": null}], "unitAlias": ""}, {"baseContracts": [{"arguments": null, "baseName": {"contractScope": null, "id": 9, "name": "PlayerCardsPick", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1751, "src": "216:15:0", "typeDescriptions": {"typeIdentifier": "t_contract$_PlayerCardsPick_$1751", "typeString": "contract PlayerCardsPick"}}, "id": 10, "nodeType": "InheritanceSpecifier", "src": "216:15:0"}], "contractDependencies": [1298, 1751], "contractKind": "contract", "documentation": null, "fullyImplemented": true, "id": 560, "linearizedBaseContracts": [560, 1751, 1298], "name": "BattlePick", "nodeType": "ContractDefinition", "nodes": [{"canonicalName": "BattlePick.Move", "id": 14, "members": [{"id": 11, "name": "Attack", "nodeType": "EnumValue", "src": "259:6:0"}, {"id": 12, "name": "SpecialAttack", "nodeType": "EnumValue", "src": "275:13:0"}, {"id": 13, "name": "Ability", "nodeType": "EnumValue", "src": "298:7:0"}], "name": "Move", "nodeType": "EnumDefinition", "src": "239:72:0"}, {"constant": true, "id": 17, "name": "turnDefenceIncrease", "nodeType": "VariableDeclaration", "scope": 560, "src": "317:40:0", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 15, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "317:6:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": {"argumentTypes": null, "hexValue": "3330", "id": 16, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "355:2:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_30_by_1", "typeString": "int_const 30"}, "value": "30"}, "visibility": "internal"}, {"constant": false, "id": 19, "name": "winningPlayer", "nodeType": "VariableDeclaration", "scope": 560, "src": "364:28:0", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 18, "name": "address", "nodeType": "ElementaryTypeName", "src": "364:7:0", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "public"}, {"anonymous": false, "documentation": null, "id": 29, "name": "Turn", "nodeType": "EventDefinition", "parameters": {"id": 28, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 21, "indexed": false, "name": "move", "nodeType": "VariableDeclaration", "scope": 29, "src": "410:9:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}, "typeName": {"contractScope": null, "id": 20, "name": "Move", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 14, "src": "410:4:0", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 23, "indexed": false, "name": "attachCardId", "nodeType": "VariableDeclaration", "scope": 29, "src": "421:17:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 22, "name": "uint", "nodeType": "ElementaryTypeName", "src": "421:4:0", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 25, "indexed": false, "name": "playerDefenceCard", "nodeType": "VariableDeclaration", "scope": 29, "src": "440:28:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_memory_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}, "typeName": {"contractScope": null, "id": 24, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1409, "src": "440:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 27, "indexed": false, "name": "nextPlayer", "nodeType": "VariableDeclaration", "scope": 29, "src": "470:18:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 26, "name": "address", "nodeType": "ElementaryTypeName", "src": "470:7:0", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "409:80:0"}, "src": "399:91:0"}, {"anonymous": false, "documentation": null, "id": 33, "name": "EndGame", "nodeType": "EventDefinition", "parameters": {"id": 32, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 31, "indexed": false, "name": "winningPlayer", "nodeType": "VariableDeclaration", "scope": 33, "src": "509:21:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 30, "name": "address", "nodeType": "ElementaryTypeName", "src": "509:7:0", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "508:23:0"}, "src": "495:37:0"}, {"body": {"id": 47, "nodeType": "Block", "src": "681:2:0", "statements": []}, "documentation": null, "id": 48, "implemented": true, "kind": "constructor", "modifiers": [{"arguments": [{"argumentTypes": null, "id": 42, "name": "_player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 35, "src": "643:8:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"argumentTypes": null, "id": 43, "name": "_player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 37, "src": "653:8:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"argumentTypes": null, "id": 44, "name": "cardsAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 39, "src": "663:12:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "id": 45, "modifierName": {"argumentTypes": null, "id": 41, "name": "PlayerCardsPick", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1751, "src": "627:15:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_PlayerCardsPick_$1751_$", "typeString": "type(contract PlayerCardsPick)"}}, "nodeType": "ModifierInvocation", "src": "627:49:0"}], "name": "", "nodeType": "FunctionDefinition", "parameters": {"id": 40, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 35, "name": "_player1", "nodeType": "VariableDeclaration", "scope": 48, "src": "554:16:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 34, "name": "address", "nodeType": "ElementaryTypeName", "src": "554:7:0", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 37, "name": "_player2", "nodeType": "VariableDeclaration", "scope": 48, "src": "572:16:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 36, "name": "address", "nodeType": "ElementaryTypeName", "src": "572:7:0", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 39, "name": "cardsAddress", "nodeType": "VariableDeclaration", "scope": 48, "src": "590:20:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 38, "name": "address", "nodeType": "ElementaryTypeName", "src": "590:7:0", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "553:58:0"}, "returnParameters": {"id": 46, "nodeType": "ParameterList", "parameters": [], "src": "681:0:0"}, "scope": 560, "src": "542:141:0", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 408, "nodeType": "Block", "src": "721:3974:0", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 57, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 54, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1429, "src": "739:11:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 55, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "754:3:0", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 56, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "754:10:0", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "739:25:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"argumentTypes": null, "hexValue": "4e6f7420796f7572207475726e", "id": 58, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "766:15:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_746db83b91f9238ef7607175e5ee0bff737edd388bf5eb4499d812cc7c0099dd", "typeString": "literal_string \"Not your turn\""}, "value": "Not your turn"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_746db83b91f9238ef7607175e5ee0bff737edd388bf5eb4499d812cc7c0099dd", "typeString": "literal_string \"Not your turn\""}], "id": 53, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2239, "src": "731:7:0", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 59, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "731:51:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 60, "nodeType": "ExpressionStatement", "src": "731:51:0"}, {"assignments": [62], "declarations": [{"constant": false, "id": 62, "name": "playerAttackCard", "nodeType": "VariableDeclaration", "scope": 408, "src": "892:35:0", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}, "typeName": {"contractScope": null, "id": 61, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1409, "src": "892:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}}, "value": null, "visibility": "internal"}], "id": 72, "initialValue": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 63, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "930:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 65, "indexExpression": {"argumentTypes": null, "id": 64, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "942:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "930:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 66, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "930:32:0", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 71, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 67, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "963:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 69, "indexExpression": {"argumentTypes": null, "id": 68, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "975:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "963:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 70, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "963:32:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "930:66:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "892:104:0"}, {"assignments": [74], "declarations": [{"constant": false, "id": 74, "name": "playerDefenceCard", "nodeType": "VariableDeclaration", "scope": 408, "src": "1006:36:0", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}, "typeName": {"contractScope": null, "id": 73, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1409, "src": "1006:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}}, "value": null, "visibility": "internal"}], "id": 84, "initialValue": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 75, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1045:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 77, "indexExpression": {"argumentTypes": null, "id": 76, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "1057:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1045:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 78, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "1045:32:0", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 83, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 79, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1078:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 81, "indexExpression": {"argumentTypes": null, "id": 80, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "1090:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1078:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 82, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "1078:32:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1045:66:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "1006:105:0"}, {"assignments": [86], "declarations": [{"constant": false, "id": 86, "name": "defenceDeck", "nodeType": "VariableDeclaration", "scope": 408, "src": "1121:30:0", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck"}, "typeName": {"contractScope": null, "id": 85, "name": "PlayerDeck", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1415, "src": "1121:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck"}}, "value": null, "visibility": "internal"}], "id": 90, "initialValue": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 87, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1154:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 89, "indexExpression": {"argumentTypes": null, "id": 88, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "1166:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1154:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "1121:53:0"}, {"assignments": [92], "declarations": [{"constant": false, "id": 92, "name": "nextPlayer", "nodeType": "VariableDeclaration", "scope": 408, "src": "1184:18:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 91, "name": "address", "nodeType": "ElementaryTypeName", "src": "1184:7:0", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "id": 94, "initialValue": {"argumentTypes": null, "id": 93, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "1205:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "VariableDeclarationStatement", "src": "1184:28:0"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 97, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 95, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1429, "src": "1460:11:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "id": 96, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "1475:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "1460:22:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 135, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 133, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1429, "src": "1786:11:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"argumentTypes": null, "id": 134, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "1801:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "1786:22:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 141, "nodeType": "IfStatement", "src": "1782:104:0", "trueBody": {"id": 140, "nodeType": "Block", "src": "1810:76:0", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "706c6179657273207475726e20646f6573206e6f7420657175616c2065697468657220706c61796572", "id": 137, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "1831:43:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_72c020e57c010e7005d7fea681741608f89c0f6f9308df813d25d3a64d7be8ce", "typeString": "literal_string \"players turn does not equal either player\""}, "value": "players turn does not equal either player"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_72c020e57c010e7005d7fea681741608f89c0f6f9308df813d25d3a64d7be8ce", "typeString": "literal_string \"players turn does not equal either player\""}], "id": 136, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [2240, 2241], "referencedDeclaration": 2241, "src": "1824:6:0", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 138, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1824:51:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 139, "nodeType": "ExpressionStatement", "src": "1824:51:0"}]}}, "id": 142, "nodeType": "IfStatement", "src": "1456:430:0", "trueBody": {"id": 132, "nodeType": "Block", "src": "1484:292:0", "statements": [{"expression": {"argumentTypes": null, "id": 108, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 98, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "1498:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 99, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1517:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 101, "indexExpression": {"argumentTypes": null, "id": 100, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "1529:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1517:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 102, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "1517:32:0", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 107, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 103, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1550:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 105, "indexExpression": {"argumentTypes": null, "id": 104, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "1562:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1550:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 106, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "1550:32:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1517:66:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref"}}, "src": "1498:85:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 109, "nodeType": "ExpressionStatement", "src": "1498:85:0"}, {"expression": {"argumentTypes": null, "id": 120, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 110, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "1597:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 111, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1617:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 113, "indexExpression": {"argumentTypes": null, "id": 112, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "1629:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1617:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 114, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "1617:32:0", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 119, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 115, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1650:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 117, "indexExpression": {"argumentTypes": null, "id": 116, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "1662:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1650:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 118, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "1650:32:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1617:66:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref"}}, "src": "1597:86:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 121, "nodeType": "ExpressionStatement", "src": "1597:86:0"}, {"expression": {"argumentTypes": null, "id": 126, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 122, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 86, "src": "1697:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 123, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1711:11:0", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 125, "indexExpression": {"argumentTypes": null, "id": 124, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "1723:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1711:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "src": "1697:34:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 127, "nodeType": "ExpressionStatement", "src": "1697:34:0"}, {"expression": {"argumentTypes": null, "id": 130, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 128, "name": "nextPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 92, "src": "1745:10:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 129, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "1758:7:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "1745:20:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 131, "nodeType": "ExpressionStatement", "src": "1745:20:0"}]}}, {"assignments": [144], "declarations": [{"constant": false, "id": 144, "name": "remainingAttackAmount", "nodeType": "VariableDeclaration", "scope": 408, "src": "1918:28:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 143, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1918:6:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 145, "initialValue": null, "nodeType": "VariableDeclarationStatement", "src": "1918:28:0"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}, "id": 149, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 146, "name": "move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 50, "src": "1960:4:0", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 147, "name": "Move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 14, "src": "1968:4:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_Move_$14_$", "typeString": "type(enum BattlePick.Move)"}}, "id": 148, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Attack", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "1968:11:0", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}}, "src": "1960:19:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}, "id": 170, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 167, "name": "move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 50, "src": "2209:4:0", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 168, "name": "Move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 14, "src": "2217:4:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_Move_$14_$", "typeString": "type(enum BattlePick.Move)"}}, "id": 169, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "SpecialAttack", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2217:18:0", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}}, "src": "2209:26:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}, "id": 182, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 179, "name": "move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 50, "src": "2410:4:0", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 180, "name": "Move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 14, "src": "2418:4:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_Move_$14_$", "typeString": "type(enum BattlePick.Move)"}}, "id": 181, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Ability", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2418:12:0", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}}, "src": "2410:20:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 392, "nodeType": "Block", "src": "4517:47:0", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "496e76616c6964206d6f7665", "id": 389, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "4538:14:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_6225d26aca71b06b39c588d4047afe8f201b0f1209ca64affe1df92990c94699", "typeString": "literal_string \"Invalid move\""}, "value": "Invalid move"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_6225d26aca71b06b39c588d4047afe8f201b0f1209ca64affe1df92990c94699", "typeString": "literal_string \"Invalid move\""}], "id": 388, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [2240, 2241], "referencedDeclaration": 2241, "src": "4531:6:0", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 390, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4531:22:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 391, "nodeType": "ExpressionStatement", "src": "4531:22:0"}]}, "id": 393, "nodeType": "IfStatement", "src": "2406:2158:0", "trueBody": {"id": 387, "nodeType": "Block", "src": "2432:2071:0", "statements": [{"assignments": [184], "declarations": [{"constant": false, "id": 184, "name": "attackCard", "nodeType": "VariableDeclaration", "scope": 387, "src": "2447:22:0", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card"}, "typeName": {"contractScope": null, "id": 183, "name": "Card", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1297, "src": "2447:4:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_storage_ptr", "typeString": "struct CryptoBeastsTypes.Card"}}, "value": null, "visibility": "internal"}], "id": 190, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 187, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "2494:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 188, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cardId", "nodeType": "MemberAccess", "referencedDeclaration": 1398, "src": "2494:23:0", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"argumentTypes": null, "id": 185, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1417, "src": "2472:13:0", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 186, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getCard", "nodeType": "MemberAccess", "referencedDeclaration": 1178, "src": "2472:21:0", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_struct$_Card_$1297_memory_ptr_$", "typeString": "function (uint256) external returns (struct CryptoBeastsTypes.Card memory)"}}, "id": 189, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2472:46:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2447:71:0"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 199, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 195, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 192, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "2541:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 193, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1404, "src": "2541:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 194, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2565:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "2541:25:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 196, "name": "attackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 184, "src": "2570:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 197, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "ability", "nodeType": "MemberAccess", "referencedDeclaration": 1284, "src": "2570:18:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_memory", "typeString": "struct CryptoBeastsTypes.Ability memory"}}, "id": 198, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "manaCost", "nodeType": "MemberAccess", "referencedDeclaration": 1279, "src": "2570:27:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "2541:56:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"argumentTypes": null, "hexValue": "4e6f7420656e6f756768206d616e61", "id": 200, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "2599:17:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_ffc5086cc6f54896d2d9817084c109675c1a000ea6b9d956f91fe2e309a11637", "typeString": "literal_string \"Not enough mana\""}, "value": "Not enough mana"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_ffc5086cc6f54896d2d9817084c109675c1a000ea6b9d956f91fe2e309a11637", "typeString": "literal_string \"Not enough mana\""}], "id": 191, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2239, "src": "2533:7:0", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 201, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2533:84:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 202, "nodeType": "ExpressionStatement", "src": "2533:84:0"}, {"assignments": [204], "declarations": [{"constant": false, "id": 204, "name": "remainder", "nodeType": "VariableDeclaration", "scope": 387, "src": "2632:16:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 203, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "2632:6:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 206, "initialValue": {"argumentTypes": null, "hexValue": "30", "id": 205, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2651:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "2632:20:0"}, {"expression": {"argumentTypes": null, "id": 222, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 207, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "2667:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 209, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1404, "src": "2667:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 210, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 204, "src": "2690:9:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 211, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "2666:34:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 217, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 214, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "2723:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 215, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1404, "src": "2723:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 216, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2747:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "2723:25:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 218, "name": "attackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 184, "src": "2750:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 219, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "ability", "nodeType": "MemberAccess", "referencedDeclaration": 1284, "src": "2750:18:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_memory", "typeString": "struct CryptoBeastsTypes.Ability memory"}}, "id": 220, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "manaCost", "nodeType": "MemberAccess", "referencedDeclaration": 1279, "src": "2750:27:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 212, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "2703:9:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 213, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "2703:19:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 221, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2703:75:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "2666:112:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 223, "nodeType": "ExpressionStatement", "src": "2666:112:0"}, {"assignments": [227], "declarations": [{"constant": false, "id": 227, "name": "opponentAbility", "nodeType": "VariableDeclaration", "scope": 387, "src": "2793:43:0", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}, "typeName": {"contractScope": null, "id": 226, "name": "Cards.CardProperties", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1271, "src": "2793:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_storage_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}}, "value": null, "visibility": "internal"}], "id": 231, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 228, "name": "attackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 184, "src": "2839:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 229, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "ability", "nodeType": "MemberAccess", "referencedDeclaration": 1284, "src": "2839:18:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_memory", "typeString": "struct CryptoBeastsTypes.Ability memory"}}, "id": 230, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "opponent", "nodeType": "MemberAccess", "referencedDeclaration": 1275, "src": "2839:27:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2793:73:0"}, {"assignments": [235], "declarations": [{"constant": false, "id": 235, "name": "playerAbility", "nodeType": "VariableDeclaration", "scope": 387, "src": "2880:41:0", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}, "typeName": {"contractScope": null, "id": 234, "name": "Cards.CardProperties", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1271, "src": "2880:20:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_storage_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}}, "value": null, "visibility": "internal"}], "id": 239, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 236, "name": "attackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 184, "src": "2924:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 237, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "ability", "nodeType": "MemberAccess", "referencedDeclaration": 1284, "src": "2924:18:0", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_memory", "typeString": "struct CryptoBeastsTypes.Ability memory"}}, "id": 238, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "player", "nodeType": "MemberAccess", "referencedDeclaration": 1277, "src": "2924:25:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2880:69:0"}, {"expression": {"argumentTypes": null, "id": 252, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 240, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3010:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 242, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1400, "src": "3010:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 243, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 204, "src": "3036:9:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 244, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3009:37:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 247, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3069:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 248, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1400, "src": "3069:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 249, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 227, "src": "3095:15:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 250, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1262, "src": "3095:22:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 245, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3049:9:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 246, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3049:19:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 251, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3049:69:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3009:109:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 253, "nodeType": "ExpressionStatement", "src": "3009:109:0"}, {"expression": {"argumentTypes": null, "id": 266, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 254, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3133:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 256, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1402, "src": "3133:25:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 257, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 204, "src": "3160:9:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 258, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3132:38:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 261, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3193:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 262, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1402, "src": "3193:25:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 263, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 227, "src": "3220:15:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 264, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1264, "src": "3220:23:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 259, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3173:9:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 260, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3173:19:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 265, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3173:71:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3132:112:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 267, "nodeType": "ExpressionStatement", "src": "3132:112:0"}, {"expression": {"argumentTypes": null, "id": 280, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 268, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3259:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 270, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1404, "src": "3259:22:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 271, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 204, "src": "3283:9:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 272, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3258:35:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 275, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3316:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 276, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1404, "src": "3316:22:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 277, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 227, "src": "3340:15:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 278, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1266, "src": "3340:20:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 273, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3296:9:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 274, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3296:19:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 279, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3296:65:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3258:103:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 281, "nodeType": "ExpressionStatement", "src": "3258:103:0"}, {"expression": {"argumentTypes": null, "id": 294, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 282, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3376:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 284, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1406, "src": "3376:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 285, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 204, "src": "3402:9:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 286, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3375:37:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 289, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3435:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 290, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1406, "src": "3435:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 291, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 227, "src": "3461:15:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 292, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1268, "src": "3461:22:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 287, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3415:9:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 288, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3415:19:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 293, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3415:69:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3375:109:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 295, "nodeType": "ExpressionStatement", "src": "3375:109:0"}, {"expression": {"argumentTypes": null, "id": 308, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 296, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3499:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 298, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1408, "src": "3499:31:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 299, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 204, "src": "3532:9:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 300, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3498:44:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 303, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3565:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 304, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1408, "src": "3565:31:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 305, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 227, "src": "3598:15:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 306, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1270, "src": "3598:29:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 301, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3545:9:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 302, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3545:19:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 307, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3545:83:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3498:130:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 309, "nodeType": "ExpressionStatement", "src": "3498:130:0"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 313, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 310, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "3694:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 311, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1400, "src": "3694:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 312, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3722:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "3694:29:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 336, "nodeType": "IfStatement", "src": "3690:315:0", "trueBody": {"id": 335, "nodeType": "Block", "src": "3725:280:0", "statements": [{"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 321, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 314, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 86, "src": "3796:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 315, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "3796:23:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 320, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 316, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 86, "src": "3823:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 317, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "3823:23:0", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 318, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "3823:30:0", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 319, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3856:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "3823:34:0", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3796:61:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 333, "nodeType": "Block", "src": "3925:66:0", "statements": [{"expression": {"argumentTypes": null, "id": 331, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "3947:25:0", "subExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 328, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 86, "src": "3947:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 330, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "3947:23:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "id": 332, "nodeType": "ExpressionStatement", "src": "3947:25:0"}]}, "id": 334, "nodeType": "IfStatement", "src": "3791:200:0", "trueBody": {"id": 327, "nodeType": "Block", "src": "3859:60:0", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 323, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "3889:3:0", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 324, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "3889:10:0", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "id": 322, "name": "endGame", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 559, "src": "3881:7:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 325, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3881:19:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 326, "nodeType": "ExpressionStatement", "src": "3881:19:0"}]}}]}}, {"expression": {"argumentTypes": null, "id": 345, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 337, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4058:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 339, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1400, "src": "4058:23:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 344, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 340, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4084:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 341, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1400, "src": "4084:23:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 342, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 235, "src": "4110:13:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 343, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1262, "src": "4110:20:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4084:46:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4058:72:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 346, "nodeType": "ExpressionStatement", "src": "4058:72:0"}, {"expression": {"argumentTypes": null, "id": 355, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 347, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4144:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 349, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1402, "src": "4144:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 354, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 350, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4171:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 351, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1402, "src": "4171:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 352, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 235, "src": "4198:13:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 353, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1264, "src": "4198:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4171:48:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4144:75:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 356, "nodeType": "ExpressionStatement", "src": "4144:75:0"}, {"expression": {"argumentTypes": null, "id": 365, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 357, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4233:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 359, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1404, "src": "4233:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 364, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 360, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4257:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 361, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1404, "src": "4257:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 362, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 235, "src": "4281:13:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 363, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1266, "src": "4281:18:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4257:42:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4233:66:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 366, "nodeType": "ExpressionStatement", "src": "4233:66:0"}, {"expression": {"argumentTypes": null, "id": 375, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 367, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4313:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 369, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1406, "src": "4313:23:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 374, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 370, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4339:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 371, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1406, "src": "4339:23:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 372, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 235, "src": "4365:13:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 373, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1268, "src": "4365:20:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4339:46:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4313:72:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 376, "nodeType": "ExpressionStatement", "src": "4313:72:0"}, {"expression": {"argumentTypes": null, "id": 385, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 377, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4399:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 379, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1408, "src": "4399:30:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 384, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 380, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4432:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 381, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1408, "src": "4432:30:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 382, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 235, "src": "4465:13:0", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 383, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1270, "src": "4465:27:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4432:60:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4399:93:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 386, "nodeType": "ExpressionStatement", "src": "4399:93:0"}]}}, "id": 394, "nodeType": "IfStatement", "src": "2205:2359:0", "trueBody": {"id": 178, "nodeType": "Block", "src": "2237:163:0", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 172, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "2325:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 173, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1408, "src": "2325:30:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 174, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "2357:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, {"argumentTypes": null, "id": 175, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 86, "src": "2376:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}, {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}], "id": 171, "name": "attack", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 539, "src": "2318:6:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_struct$_PlayerCard_$1409_storage_ptr_$_t_struct$_PlayerDeck_$1415_storage_ptr_$returns$__$", "typeString": "function (uint16,struct PlayerCardsPick.PlayerCard storage pointer,struct PlayerCardsPick.PlayerDeck storage pointer)"}}, "id": 176, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2318:70:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 177, "nodeType": "ExpressionStatement", "src": "2318:70:0"}]}}, "id": 395, "nodeType": "IfStatement", "src": "1956:2608:0", "trueBody": {"id": 166, "nodeType": "Block", "src": "1981:218:0", "statements": [{"expression": {"argumentTypes": null, "id": 157, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 150, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "1995:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 152, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1404, "src": "1995:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 156, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 153, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "2019:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 154, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1404, "src": "2019:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 155, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2043:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "2019:25:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "1995:49:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 158, "nodeType": "ExpressionStatement", "src": "1995:49:0"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 160, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "2132:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 161, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1406, "src": "2132:23:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 162, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "2157:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, {"argumentTypes": null, "id": 163, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 86, "src": "2176:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}, {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}], "id": 159, "name": "attack", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 539, "src": "2125:6:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_struct$_PlayerCard_$1409_storage_ptr_$_t_struct$_PlayerDeck_$1415_storage_ptr_$returns$__$", "typeString": "function (uint16,struct PlayerCardsPick.PlayerCard storage pointer,struct PlayerCardsPick.PlayerDeck storage pointer)"}}, "id": 164, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2125:63:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 165, "nodeType": "ExpressionStatement", "src": "2125:63:0"}]}}, {"expression": {"argumentTypes": null, "id": 398, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 396, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1429, "src": "4582:11:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 397, "name": "nextPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 92, "src": "4596:10:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "4582:24:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 399, "nodeType": "ExpressionStatement", "src": "4582:24:0"}, {"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 401, "name": "move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 50, "src": "4627:4:0", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 402, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 62, "src": "4633:16:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 403, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cardId", "nodeType": "MemberAccess", "referencedDeclaration": 1398, "src": "4633:23:0", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "id": 404, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "4658:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, {"argumentTypes": null, "id": 405, "name": "nextPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 92, "src": "4677:10:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}, {"typeIdentifier": "t_address", "typeString": "address"}], "id": 400, "name": "Turn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 29, "src": "4622:4:0", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_enum$_Move_$14_$_t_uint256_$_t_struct$_PlayerCard_$1409_memory_ptr_$_t_address_$returns$__$", "typeString": "function (enum BattlePick.Move,uint256,struct PlayerCardsPick.PlayerCard memory,address)"}}, "id": 406, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4622:66:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 407, "nodeType": "EmitStatement", "src": "4617:71:0"}]}, "documentation": null, "id": 409, "implemented": true, "kind": "function", "modifiers": [], "name": "turn", "nodeType": "FunctionDefinition", "parameters": {"id": 51, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 50, "name": "move", "nodeType": "VariableDeclaration", "scope": 409, "src": "703:9:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}, "typeName": {"contractScope": null, "id": 49, "name": "Move", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 14, "src": "703:4:0", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$14", "typeString": "enum BattlePick.Move"}}, "value": null, "visibility": "internal"}], "src": "702:11:0"}, "returnParameters": {"id": 52, "nodeType": "ParameterList", "parameters": [], "src": "721:0:0"}, "scope": 560, "src": "689:4006:0", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 538, "nodeType": "Block", "src": "4877:1301:0", "statements": [{"assignments": [419], "declarations": [{"constant": false, "id": 419, "name": "remainingAttackAmount", "nodeType": "VariableDeclaration", "scope": 538, "src": "4887:28:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 418, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4887:6:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 420, "initialValue": null, "nodeType": "VariableDeclarationStatement", "src": "4887:28:0"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 424, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 421, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "4930:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 422, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1402, "src": "4930:25:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 423, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4958:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "4930:29:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 536, "nodeType": "Block", "src": "5683:489:0", "statements": [{"expression": {"argumentTypes": null, "id": 501, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 490, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "5699:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 492, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1400, "src": "5699:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 493, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "5725:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 494, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "5698:49:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 497, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "5770:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 498, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1400, "src": "5770:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 499, "name": "attackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 411, "src": "5796:12:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 495, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "5750:9:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 496, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "5750:19:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 500, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5750:59:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "5698:111:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 502, "nodeType": "ExpressionStatement", "src": "5698:111:0"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 505, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 503, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "5828:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 504, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5852:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5828:25:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 535, "nodeType": "IfStatement", "src": "5824:338:0", "trueBody": {"id": 534, "nodeType": "Block", "src": "5855:307:0", "statements": [{"expression": {"argumentTypes": null, "id": 509, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "5873:25:0", "subExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 506, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "5873:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 508, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "5873:23:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "id": 510, "nodeType": "ExpressionStatement", "src": "5873:25:0"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 516, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 511, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "5920:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 512, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "5920:23:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 513, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "5946:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 514, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "5946:23:0", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 515, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "5946:30:0", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5920:56:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 523, "nodeType": "IfStatement", "src": "5916:122:0", "trueBody": {"id": 522, "nodeType": "Block", "src": "5978:60:0", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 518, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "6008:3:0", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 519, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "6008:10:0", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "id": 517, "name": "endGame", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 559, "src": "6000:7:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 520, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6000:19:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 521, "nodeType": "ExpressionStatement", "src": "6000:19:0"}]}}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 525, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "6062:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 526, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "6085:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 527, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "6085:23:0", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 530, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 528, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "6109:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 529, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "6109:23:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6085:48:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref"}}, {"argumentTypes": null, "id": 531, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "6135:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref"}, {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}], "id": 524, "name": "attack", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 539, "src": "6055:6:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_struct$_PlayerCard_$1409_storage_ptr_$_t_struct$_PlayerDeck_$1415_storage_ptr_$returns$__$", "typeString": "function (uint16,struct PlayerCardsPick.PlayerCard storage pointer,struct PlayerCardsPick.PlayerDeck storage pointer)"}}, "id": 532, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6055:92:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 533, "nodeType": "ExpressionStatement", "src": "6055:92:0"}]}}]}, "id": 537, "nodeType": "IfStatement", "src": "4926:1246:0", "trueBody": {"id": 489, "nodeType": "Block", "src": "4961:716:0", "statements": [{"expression": {"argumentTypes": null, "id": 436, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 425, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "4976:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 427, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1402, "src": "4976:25:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 428, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "5003:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 429, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "4975:50:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 432, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "5048:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 433, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1402, "src": "5048:25:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 434, "name": "attackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 411, "src": "5075:12:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 430, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "5028:9:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 431, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "5028:19:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 435, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5028:60:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "4975:113:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 437, "nodeType": "ExpressionStatement", "src": "4975:113:0"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 440, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 438, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "5107:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 439, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5131:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5107:25:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 488, "nodeType": "IfStatement", "src": "5103:564:0", "trueBody": {"id": 487, "nodeType": "Block", "src": "5134:533:0", "statements": [{"expression": {"argumentTypes": null, "id": 452, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 441, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "5153:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 443, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1400, "src": "5153:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 444, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "5179:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 445, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "5152:49:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 448, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "5224:17:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage pointer"}}, "id": 449, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1400, "src": "5224:24:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 450, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "5250:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 446, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "5204:9:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 447, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "5204:19:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 451, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5204:68:0", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "5152:120:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 453, "nodeType": "ExpressionStatement", "src": "5152:120:0"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 456, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 454, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "5295:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 455, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5319:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5295:25:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 486, "nodeType": "IfStatement", "src": "5291:362:0", "trueBody": {"id": 485, "nodeType": "Block", "src": "5322:331:0", "statements": [{"expression": {"argumentTypes": null, "id": 460, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "5344:25:0", "subExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 457, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "5344:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 459, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "5344:23:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "id": 461, "nodeType": "ExpressionStatement", "src": "5344:25:0"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 467, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 462, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "5395:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 463, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "5395:23:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 464, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "5421:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 465, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "5421:23:0", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 466, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "5421:30:0", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5395:56:0", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 474, "nodeType": "IfStatement", "src": "5391:130:0", "trueBody": {"id": 473, "nodeType": "Block", "src": "5453:68:0", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 469, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "5487:3:0", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 470, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "5487:10:0", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "id": 468, "name": "endGame", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 559, "src": "5479:7:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 471, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5479:19:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 472, "nodeType": "ExpressionStatement", "src": "5479:19:0"}]}}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 476, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "5549:21:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 477, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "5572:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 478, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "5572:23:0", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 481, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 479, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "5596:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}, "id": 480, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "5596:23:0", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "5572:48:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref"}}, {"argumentTypes": null, "id": 482, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "5622:11:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref"}, {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck storage pointer"}], "id": 475, "name": "attack", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 539, "src": "5542:6:0", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_struct$_PlayerCard_$1409_storage_ptr_$_t_struct$_PlayerDeck_$1415_storage_ptr_$returns$__$", "typeString": "function (uint16,struct PlayerCardsPick.PlayerCard storage pointer,struct PlayerCardsPick.PlayerDeck storage pointer)"}}, "id": 483, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5542:92:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 484, "nodeType": "ExpressionStatement", "src": "5542:92:0"}]}}]}}]}}]}, "documentation": null, "id": 539, "implemented": true, "kind": "function", "modifiers": [], "name": "attack", "nodeType": "FunctionDefinition", "parameters": {"id": 416, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 411, "name": "attackAmount", "nodeType": "VariableDeclaration", "scope": 539, "src": "4777:19:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 410, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4777:6:0", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 413, "name": "playerDefenceCard", "nodeType": "VariableDeclaration", "scope": 539, "src": "4798:36:0", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}, "typeName": {"contractScope": null, "id": 412, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1409, "src": "4798:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 415, "name": "defenceDeck", "nodeType": "VariableDeclaration", "scope": 539, "src": "4836:30:0", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck"}, "typeName": {"contractScope": null, "id": 414, "name": "PlayerDeck", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1415, "src": "4836:10:0", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck"}}, "value": null, "visibility": "internal"}], "src": "4776:91:0"}, "returnParameters": {"id": 417, "nodeType": "ParameterList", "parameters": [], "src": "4877:0:0"}, "scope": 560, "src": "4761:1417:0", "stateMutability": "nonpayable", "superFunction": null, "visibility": "internal"}, {"body": {"id": 558, "nodeType": "Block", "src": "6232:119:0", "statements": [{"expression": {"argumentTypes": null, "id": 546, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 544, "name": "winningPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19, "src": "6242:13:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 545, "name": "_winningPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 541, "src": "6258:14:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "6242:30:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 547, "nodeType": "ExpressionStatement", "src": "6242:30:0"}, {"expression": {"argumentTypes": null, "id": 552, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 548, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1429, "src": "6282:11:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "30", "id": 550, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6304:1:0", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 549, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "6296:7:0", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": "address"}, "id": 551, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6296:10:0", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "6282:24:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 553, "nodeType": "ExpressionStatement", "src": "6282:24:0"}, {"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 555, "name": "winningPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19, "src": "6330:13:0", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 554, "name": "EndGame", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 33, "src": "6322:7:0", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 556, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6322:22:0", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 557, "nodeType": "EmitStatement", "src": "6317:27:0"}]}, "documentation": null, "id": 559, "implemented": true, "kind": "function", "modifiers": [], "name": "endGame", "nodeType": "FunctionDefinition", "parameters": {"id": 542, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 541, "name": "_winningPlayer", "nodeType": "VariableDeclaration", "scope": 559, "src": "6201:22:0", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 540, "name": "address", "nodeType": "ElementaryTypeName", "src": "6201:7:0", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "6200:24:0"}, "returnParameters": {"id": 543, "nodeType": "ParameterList", "parameters": [], "src": "6232:0:0"}, "scope": 560, "src": "6184:167:0", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}], "scope": 561, "src": "193:6160:0"}], "src": "0:6353:0"}, "id": 0}, "contracts/BattleRandom.sol": {"ast": {"absolutePath": "contracts/BattleRandom.sol", "exportedSymbols": {"BattleRandom": [1121]}, "id": 1122, "nodeType": "SourceUnit", "nodes": [{"id": 562, "literals": ["solidity", "^", "0.5", ".2"], "nodeType": "PragmaDirective", "src": "0:23:1"}, {"id": 563, "literals": ["experimental", "ABIEncoderV2"], "nodeType": "PragmaDirective", "src": "24:33:1"}, {"absolutePath": "contracts/PlayerCardsRandom.sol", "file": "./PlayerCardsRandom.sol", "id": 565, "nodeType": "ImportDirective", "scope": 1122, "sourceUnit": 2221, "src": "59:58:1", "symbolAliases": [{"foreign": 564, "local": null}], "unitAlias": ""}, {"absolutePath": "contracts/Cards.sol", "file": "./Cards.sol", "id": 567, "nodeType": "ImportDirective", "scope": 1122, "sourceUnit": 1180, "src": "118:34:1", "symbolAliases": [{"foreign": 566, "local": null}], "unitAlias": ""}, {"absolutePath": "contracts/MathUtils.sol", "file": "./MathUtils.sol", "id": 569, "nodeType": "ImportDirective", "scope": 1122, "sourceUnit": 1331, "src": "153:42:1", "symbolAliases": [{"foreign": 568, "local": null}], "unitAlias": ""}, {"baseContracts": [{"arguments": null, "baseName": {"contractScope": null, "id": 570, "name": "PlayerCardsRandom", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 2220, "src": "222:17:1", "typeDescriptions": {"typeIdentifier": "t_contract$_PlayerCardsRandom_$2220", "typeString": "contract PlayerCardsRandom"}}, "id": 571, "nodeType": "InheritanceSpecifier", "src": "222:17:1"}], "contractDependencies": [1298, 2220], "contractKind": "contract", "documentation": null, "fullyImplemented": true, "id": 1121, "linearizedBaseContracts": [1121, 2220, 1298], "name": "BattleRandom", "nodeType": "ContractDefinition", "nodes": [{"canonicalName": "BattleRandom.Move", "id": 575, "members": [{"id": 572, "name": "Attack", "nodeType": "EnumValue", "src": "267:6:1"}, {"id": 573, "name": "SpecialAttack", "nodeType": "EnumValue", "src": "283:13:1"}, {"id": 574, "name": "Ability", "nodeType": "EnumValue", "src": "306:7:1"}], "name": "Move", "nodeType": "EnumDefinition", "src": "247:72:1"}, {"constant": true, "id": 578, "name": "turnDefenceIncrease", "nodeType": "VariableDeclaration", "scope": 1121, "src": "325:40:1", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 576, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "325:6:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": {"argumentTypes": null, "hexValue": "3330", "id": 577, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "363:2:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_30_by_1", "typeString": "int_const 30"}, "value": "30"}, "visibility": "internal"}, {"constant": false, "id": 580, "name": "winningPlayer", "nodeType": "VariableDeclaration", "scope": 1121, "src": "372:28:1", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 579, "name": "address", "nodeType": "ElementaryTypeName", "src": "372:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "public"}, {"anonymous": false, "documentation": null, "id": 590, "name": "Turn", "nodeType": "EventDefinition", "parameters": {"id": 589, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 582, "indexed": false, "name": "move", "nodeType": "VariableDeclaration", "scope": 590, "src": "418:9:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}, "typeName": {"contractScope": null, "id": 581, "name": "Move", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 575, "src": "418:4:1", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 584, "indexed": false, "name": "attachCardId", "nodeType": "VariableDeclaration", "scope": 590, "src": "429:17:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 583, "name": "uint", "nodeType": "ElementaryTypeName", "src": "429:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 586, "indexed": false, "name": "playerDefenceCard", "nodeType": "VariableDeclaration", "scope": 590, "src": "448:28:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_memory_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}, "typeName": {"contractScope": null, "id": 585, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1773, "src": "448:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 588, "indexed": false, "name": "nextPlayer", "nodeType": "VariableDeclaration", "scope": 590, "src": "478:18:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 587, "name": "address", "nodeType": "ElementaryTypeName", "src": "478:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "417:80:1"}, "src": "407:91:1"}, {"anonymous": false, "documentation": null, "id": 594, "name": "EndGame", "nodeType": "EventDefinition", "parameters": {"id": 593, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 592, "indexed": false, "name": "winningPlayer", "nodeType": "VariableDeclaration", "scope": 594, "src": "517:21:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 591, "name": "address", "nodeType": "ElementaryTypeName", "src": "517:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "516:23:1"}, "src": "503:37:1"}, {"body": {"id": 608, "nodeType": "Block", "src": "687:2:1", "statements": []}, "documentation": null, "id": 609, "implemented": true, "kind": "constructor", "modifiers": [{"arguments": [{"argumentTypes": null, "id": 603, "name": "_player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 596, "src": "649:8:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"argumentTypes": null, "id": 604, "name": "_player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 598, "src": "659:8:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"argumentTypes": null, "id": 605, "name": "cardsAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 600, "src": "669:12:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "id": 606, "modifierName": {"argumentTypes": null, "id": 602, "name": "PlayerCardsRandom", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2220, "src": "631:17:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_PlayerCardsRandom_$2220_$", "typeString": "type(contract PlayerCardsRandom)"}}, "nodeType": "ModifierInvocation", "src": "631:51:1"}], "name": "", "nodeType": "FunctionDefinition", "parameters": {"id": 601, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 596, "name": "_player1", "nodeType": "VariableDeclaration", "scope": 609, "src": "558:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 595, "name": "address", "nodeType": "ElementaryTypeName", "src": "558:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 598, "name": "_player2", "nodeType": "VariableDeclaration", "scope": 609, "src": "576:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 597, "name": "address", "nodeType": "ElementaryTypeName", "src": "576:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 600, "name": "cardsAddress", "nodeType": "VariableDeclaration", "scope": 609, "src": "594:20:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 599, "name": "address", "nodeType": "ElementaryTypeName", "src": "594:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "557:58:1"}, "returnParameters": {"id": 607, "nodeType": "ParameterList", "parameters": [], "src": "687:0:1"}, "scope": 1121, "src": "546:143:1", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 969, "nodeType": "Block", "src": "727:3965:1", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 618, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 615, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1793, "src": "745:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 616, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "760:3:1", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 617, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "760:10:1", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "745:25:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"argumentTypes": null, "hexValue": "4e6f7420796f7572207475726e", "id": 619, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "772:15:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_746db83b91f9238ef7607175e5ee0bff737edd388bf5eb4499d812cc7c0099dd", "typeString": "literal_string \"Not your turn\""}, "value": "Not your turn"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_746db83b91f9238ef7607175e5ee0bff737edd388bf5eb4499d812cc7c0099dd", "typeString": "literal_string \"Not your turn\""}], "id": 614, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2239, "src": "737:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 620, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "737:51:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 621, "nodeType": "ExpressionStatement", "src": "737:51:1"}, {"assignments": [623], "declarations": [{"constant": false, "id": 623, "name": "playerAttackCard", "nodeType": "VariableDeclaration", "scope": 969, "src": "898:35:1", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}, "typeName": {"contractScope": null, "id": 622, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1773, "src": "898:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}}, "value": null, "visibility": "internal"}], "id": 633, "initialValue": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 624, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "936:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 626, "indexExpression": {"argumentTypes": null, "id": 625, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "948:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "936:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 627, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "936:32:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 632, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 628, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "969:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 630, "indexExpression": {"argumentTypes": null, "id": 629, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "981:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "969:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 631, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "969:32:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "936:66:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "898:104:1"}, {"assignments": [635], "declarations": [{"constant": false, "id": 635, "name": "playerDefenceCard", "nodeType": "VariableDeclaration", "scope": 969, "src": "1012:36:1", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}, "typeName": {"contractScope": null, "id": 634, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1773, "src": "1012:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}}, "value": null, "visibility": "internal"}], "id": 645, "initialValue": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 636, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1051:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 638, "indexExpression": {"argumentTypes": null, "id": 637, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "1063:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1051:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 639, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "1051:32:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 644, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 640, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1084:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 642, "indexExpression": {"argumentTypes": null, "id": 641, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "1096:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1084:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 643, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "1084:32:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1051:66:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "1012:105:1"}, {"assignments": [647], "declarations": [{"constant": false, "id": 647, "name": "defenceDeck", "nodeType": "VariableDeclaration", "scope": 969, "src": "1127:30:1", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck"}, "typeName": {"contractScope": null, "id": 646, "name": "PlayerDeck", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1779, "src": "1127:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck"}}, "value": null, "visibility": "internal"}], "id": 651, "initialValue": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 648, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1160:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 650, "indexExpression": {"argumentTypes": null, "id": 649, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "1172:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1160:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "1127:53:1"}, {"assignments": [653], "declarations": [{"constant": false, "id": 653, "name": "nextPlayer", "nodeType": "VariableDeclaration", "scope": 969, "src": "1190:18:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 652, "name": "address", "nodeType": "ElementaryTypeName", "src": "1190:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "id": 655, "initialValue": {"argumentTypes": null, "id": 654, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "1211:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "VariableDeclarationStatement", "src": "1190:28:1"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 658, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 656, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1793, "src": "1465:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "id": 657, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "1480:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "1465:22:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 696, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 694, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1793, "src": "1791:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"argumentTypes": null, "id": 695, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "1806:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "1791:22:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 702, "nodeType": "IfStatement", "src": "1787:104:1", "trueBody": {"id": 701, "nodeType": "Block", "src": "1815:76:1", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "706c6179657273207475726e20646f6573206e6f7420657175616c2065697468657220706c61796572", "id": 698, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "1836:43:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_72c020e57c010e7005d7fea681741608f89c0f6f9308df813d25d3a64d7be8ce", "typeString": "literal_string \"players turn does not equal either player\""}, "value": "players turn does not equal either player"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_72c020e57c010e7005d7fea681741608f89c0f6f9308df813d25d3a64d7be8ce", "typeString": "literal_string \"players turn does not equal either player\""}], "id": 697, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [2240, 2241], "referencedDeclaration": 2241, "src": "1829:6:1", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 699, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1829:51:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 700, "nodeType": "ExpressionStatement", "src": "1829:51:1"}]}}, "id": 703, "nodeType": "IfStatement", "src": "1461:430:1", "trueBody": {"id": 693, "nodeType": "Block", "src": "1489:292:1", "statements": [{"expression": {"argumentTypes": null, "id": 669, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 659, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "1503:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 660, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1522:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 662, "indexExpression": {"argumentTypes": null, "id": 661, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "1534:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1522:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 663, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "1522:32:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 668, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 664, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1555:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 666, "indexExpression": {"argumentTypes": null, "id": 665, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "1567:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1555:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 667, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "1555:32:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1522:66:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, "src": "1503:85:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 670, "nodeType": "ExpressionStatement", "src": "1503:85:1"}, {"expression": {"argumentTypes": null, "id": 681, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 671, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "1602:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 672, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1622:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 674, "indexExpression": {"argumentTypes": null, "id": 673, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "1634:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1622:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 675, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "1622:32:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 680, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 676, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1655:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 678, "indexExpression": {"argumentTypes": null, "id": 677, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "1667:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1655:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 679, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "1655:32:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1622:66:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, "src": "1602:86:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 682, "nodeType": "ExpressionStatement", "src": "1602:86:1"}, {"expression": {"argumentTypes": null, "id": 687, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 683, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 647, "src": "1702:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 684, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1716:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 686, "indexExpression": {"argumentTypes": null, "id": 685, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "1728:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1716:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "src": "1702:34:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 688, "nodeType": "ExpressionStatement", "src": "1702:34:1"}, {"expression": {"argumentTypes": null, "id": 691, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 689, "name": "nextPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 653, "src": "1750:10:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 690, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "1763:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "1750:20:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 692, "nodeType": "ExpressionStatement", "src": "1750:20:1"}]}}, {"assignments": [705], "declarations": [{"constant": false, "id": 705, "name": "remainingAttackAmount", "nodeType": "VariableDeclaration", "scope": 969, "src": "1923:28:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 704, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1923:6:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 706, "initialValue": null, "nodeType": "VariableDeclarationStatement", "src": "1923:28:1"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}, "id": 710, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 707, "name": "move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 611, "src": "1965:4:1", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 708, "name": "Move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 575, "src": "1973:4:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_Move_$575_$", "typeString": "type(enum BattleRandom.Move)"}}, "id": 709, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Attack", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "1973:11:1", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}}, "src": "1965:19:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}, "id": 731, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 728, "name": "move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 611, "src": "2214:4:1", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 729, "name": "Move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 575, "src": "2222:4:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_Move_$575_$", "typeString": "type(enum BattleRandom.Move)"}}, "id": 730, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "SpecialAttack", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2222:18:1", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}}, "src": "2214:26:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}, "id": 743, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 740, "name": "move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 611, "src": "2415:4:1", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 741, "name": "Move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 575, "src": "2423:4:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_Move_$575_$", "typeString": "type(enum BattleRandom.Move)"}}, "id": 742, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Ability", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2423:12:1", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}}, "src": "2415:20:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 953, "nodeType": "Block", "src": "4522:47:1", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "496e76616c6964206d6f7665", "id": 950, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "4543:14:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_6225d26aca71b06b39c588d4047afe8f201b0f1209ca64affe1df92990c94699", "typeString": "literal_string \"Invalid move\""}, "value": "Invalid move"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_6225d26aca71b06b39c588d4047afe8f201b0f1209ca64affe1df92990c94699", "typeString": "literal_string \"Invalid move\""}], "id": 949, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [2240, 2241], "referencedDeclaration": 2241, "src": "4536:6:1", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 951, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4536:22:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 952, "nodeType": "ExpressionStatement", "src": "4536:22:1"}]}, "id": 954, "nodeType": "IfStatement", "src": "2411:2158:1", "trueBody": {"id": 948, "nodeType": "Block", "src": "2437:2071:1", "statements": [{"assignments": [745], "declarations": [{"constant": false, "id": 745, "name": "attackCard", "nodeType": "VariableDeclaration", "scope": 948, "src": "2452:22:1", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card"}, "typeName": {"contractScope": null, "id": 744, "name": "Card", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1297, "src": "2452:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_storage_ptr", "typeString": "struct CryptoBeastsTypes.Card"}}, "value": null, "visibility": "internal"}], "id": 751, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 748, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "2499:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 749, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cardId", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "2499:23:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"argumentTypes": null, "id": 746, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1781, "src": "2477:13:1", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 747, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getCard", "nodeType": "MemberAccess", "referencedDeclaration": 1178, "src": "2477:21:1", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_struct$_Card_$1297_memory_ptr_$", "typeString": "function (uint256) external returns (struct CryptoBeastsTypes.Card memory)"}}, "id": 750, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2477:46:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2452:71:1"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 760, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 756, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 753, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "2546:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 754, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1768, "src": "2546:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 755, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2570:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "2546:25:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 757, "name": "attackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 745, "src": "2575:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 758, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "ability", "nodeType": "MemberAccess", "referencedDeclaration": 1284, "src": "2575:18:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_memory", "typeString": "struct CryptoBeastsTypes.Ability memory"}}, "id": 759, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "manaCost", "nodeType": "MemberAccess", "referencedDeclaration": 1279, "src": "2575:27:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "2546:56:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"argumentTypes": null, "hexValue": "4e6f7420656e6f756768206d616e61", "id": 761, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "2604:17:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_ffc5086cc6f54896d2d9817084c109675c1a000ea6b9d956f91fe2e309a11637", "typeString": "literal_string \"Not enough mana\""}, "value": "Not enough mana"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_ffc5086cc6f54896d2d9817084c109675c1a000ea6b9d956f91fe2e309a11637", "typeString": "literal_string \"Not enough mana\""}], "id": 752, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2239, "src": "2538:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 762, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2538:84:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 763, "nodeType": "ExpressionStatement", "src": "2538:84:1"}, {"assignments": [765], "declarations": [{"constant": false, "id": 765, "name": "remainder", "nodeType": "VariableDeclaration", "scope": 948, "src": "2637:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 764, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "2637:6:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 767, "initialValue": {"argumentTypes": null, "hexValue": "30", "id": 766, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2656:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "2637:20:1"}, {"expression": {"argumentTypes": null, "id": 783, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 768, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "2672:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 770, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1768, "src": "2672:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 771, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 765, "src": "2695:9:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 772, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "2671:34:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 778, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 775, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "2728:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 776, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1768, "src": "2728:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 777, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2752:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "2728:25:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 779, "name": "attackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 745, "src": "2755:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 780, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "ability", "nodeType": "MemberAccess", "referencedDeclaration": 1284, "src": "2755:18:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_memory", "typeString": "struct CryptoBeastsTypes.Ability memory"}}, "id": 781, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "manaCost", "nodeType": "MemberAccess", "referencedDeclaration": 1279, "src": "2755:27:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 773, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "2708:9:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 774, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "2708:19:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 782, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2708:75:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "2671:112:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 784, "nodeType": "ExpressionStatement", "src": "2671:112:1"}, {"assignments": [788], "declarations": [{"constant": false, "id": 788, "name": "opponentAbility", "nodeType": "VariableDeclaration", "scope": 948, "src": "2798:43:1", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}, "typeName": {"contractScope": null, "id": 787, "name": "Cards.CardProperties", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1271, "src": "2798:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_storage_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}}, "value": null, "visibility": "internal"}], "id": 792, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 789, "name": "attackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 745, "src": "2844:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 790, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "ability", "nodeType": "MemberAccess", "referencedDeclaration": 1284, "src": "2844:18:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_memory", "typeString": "struct CryptoBeastsTypes.Ability memory"}}, "id": 791, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "opponent", "nodeType": "MemberAccess", "referencedDeclaration": 1275, "src": "2844:27:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2798:73:1"}, {"assignments": [796], "declarations": [{"constant": false, "id": 796, "name": "playerAbility", "nodeType": "VariableDeclaration", "scope": 948, "src": "2885:41:1", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}, "typeName": {"contractScope": null, "id": 795, "name": "Cards.CardProperties", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1271, "src": "2885:20:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_storage_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}}, "value": null, "visibility": "internal"}], "id": 800, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 797, "name": "attackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 745, "src": "2929:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 798, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "ability", "nodeType": "MemberAccess", "referencedDeclaration": 1284, "src": "2929:18:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_memory", "typeString": "struct CryptoBeastsTypes.Ability memory"}}, "id": 799, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "player", "nodeType": "MemberAccess", "referencedDeclaration": 1277, "src": "2929:25:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2885:69:1"}, {"expression": {"argumentTypes": null, "id": 813, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 801, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3015:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 803, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1764, "src": "3015:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 804, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 765, "src": "3041:9:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 805, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3014:37:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 808, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3074:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 809, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1764, "src": "3074:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 810, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 788, "src": "3100:15:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 811, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1262, "src": "3100:22:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 806, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3054:9:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 807, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3054:19:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 812, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3054:69:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3014:109:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 814, "nodeType": "ExpressionStatement", "src": "3014:109:1"}, {"expression": {"argumentTypes": null, "id": 827, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 815, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3138:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 817, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1766, "src": "3138:25:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 818, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 765, "src": "3165:9:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 819, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3137:38:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 822, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3198:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 823, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1766, "src": "3198:25:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 824, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 788, "src": "3225:15:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 825, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1264, "src": "3225:23:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 820, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3178:9:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 821, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3178:19:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 826, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3178:71:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3137:112:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 828, "nodeType": "ExpressionStatement", "src": "3137:112:1"}, {"expression": {"argumentTypes": null, "id": 841, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 829, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3264:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 831, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1768, "src": "3264:22:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 832, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 765, "src": "3288:9:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 833, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3263:35:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 836, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3321:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 837, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1768, "src": "3321:22:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 838, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 788, "src": "3345:15:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 839, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1266, "src": "3345:20:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 834, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3301:9:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 835, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3301:19:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 840, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3301:65:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3263:103:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 842, "nodeType": "ExpressionStatement", "src": "3263:103:1"}, {"expression": {"argumentTypes": null, "id": 855, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 843, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3381:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 845, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1770, "src": "3381:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 846, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 765, "src": "3407:9:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 847, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3380:37:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 850, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3440:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 851, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1770, "src": "3440:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 852, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 788, "src": "3466:15:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 853, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1268, "src": "3466:22:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 848, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3420:9:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 849, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3420:19:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 854, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3420:69:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3380:109:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 856, "nodeType": "ExpressionStatement", "src": "3380:109:1"}, {"expression": {"argumentTypes": null, "id": 869, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 857, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3504:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 859, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1772, "src": "3504:31:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 860, "name": "remainder", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 765, "src": "3537:9:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 861, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3503:44:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 864, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3570:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 865, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1772, "src": "3570:31:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 866, "name": "opponentAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 788, "src": "3603:15:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 867, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1270, "src": "3603:29:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 862, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "3550:9:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 863, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "3550:19:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 868, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3550:83:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "3503:130:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 870, "nodeType": "ExpressionStatement", "src": "3503:130:1"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 874, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 871, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "3699:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 872, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1764, "src": "3699:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 873, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3727:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "3699:29:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 897, "nodeType": "IfStatement", "src": "3695:315:1", "trueBody": {"id": 896, "nodeType": "Block", "src": "3730:280:1", "statements": [{"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 882, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 875, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 647, "src": "3801:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 876, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "3801:23:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 881, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 877, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 647, "src": "3828:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 878, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "3828:23:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 879, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "3828:30:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 880, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3861:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "3828:34:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3801:61:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 894, "nodeType": "Block", "src": "3930:66:1", "statements": [{"expression": {"argumentTypes": null, "id": 892, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "3952:25:1", "subExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 889, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 647, "src": "3952:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 891, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "3952:23:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "id": 893, "nodeType": "ExpressionStatement", "src": "3952:25:1"}]}, "id": 895, "nodeType": "IfStatement", "src": "3796:200:1", "trueBody": {"id": 888, "nodeType": "Block", "src": "3864:60:1", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 884, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "3894:3:1", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 885, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "3894:10:1", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "id": 883, "name": "endGame", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1120, "src": "3886:7:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 886, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3886:19:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 887, "nodeType": "ExpressionStatement", "src": "3886:19:1"}]}}]}}, {"expression": {"argumentTypes": null, "id": 906, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 898, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4063:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 900, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1764, "src": "4063:23:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 905, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 901, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4089:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 902, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1764, "src": "4089:23:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 903, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 796, "src": "4115:13:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 904, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1262, "src": "4115:20:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4089:46:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4063:72:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 907, "nodeType": "ExpressionStatement", "src": "4063:72:1"}, {"expression": {"argumentTypes": null, "id": 916, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 908, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4149:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 910, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1766, "src": "4149:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 915, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 911, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4176:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 912, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1766, "src": "4176:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 913, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 796, "src": "4203:13:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 914, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1264, "src": "4203:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4176:48:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4149:75:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 917, "nodeType": "ExpressionStatement", "src": "4149:75:1"}, {"expression": {"argumentTypes": null, "id": 926, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 918, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4238:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 920, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1768, "src": "4238:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 925, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 921, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4262:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 922, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1768, "src": "4262:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 923, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 796, "src": "4286:13:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 924, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1266, "src": "4286:18:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4262:42:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4238:66:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 927, "nodeType": "ExpressionStatement", "src": "4238:66:1"}, {"expression": {"argumentTypes": null, "id": 936, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 928, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4318:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 930, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1770, "src": "4318:23:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 935, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 931, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4344:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 932, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1770, "src": "4344:23:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 933, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 796, "src": "4370:13:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 934, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1268, "src": "4370:20:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4344:46:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4318:72:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 937, "nodeType": "ExpressionStatement", "src": "4318:72:1"}, {"expression": {"argumentTypes": null, "id": 946, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 938, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4404:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 940, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1772, "src": "4404:30:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 945, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 941, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4437:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 942, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1772, "src": "4437:30:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 943, "name": "playerAbility", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 796, "src": "4470:13:1", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_memory_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties memory"}}, "id": 944, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1270, "src": "4470:27:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4437:60:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4404:93:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 947, "nodeType": "ExpressionStatement", "src": "4404:93:1"}]}}, "id": 955, "nodeType": "IfStatement", "src": "2210:2359:1", "trueBody": {"id": 739, "nodeType": "Block", "src": "2242:163:1", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 733, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "2330:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 734, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1772, "src": "2330:30:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 735, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "2362:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, {"argumentTypes": null, "id": 736, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 647, "src": "2381:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}, {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}], "id": 732, "name": "attack", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1100, "src": "2323:6:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_struct$_PlayerCard_$1773_storage_ptr_$_t_struct$_PlayerDeck_$1779_storage_ptr_$returns$__$", "typeString": "function (uint16,struct PlayerCardsRandom.PlayerCard storage pointer,struct PlayerCardsRandom.PlayerDeck storage pointer)"}}, "id": 737, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2323:70:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 738, "nodeType": "ExpressionStatement", "src": "2323:70:1"}]}}, "id": 956, "nodeType": "IfStatement", "src": "1961:2608:1", "trueBody": {"id": 727, "nodeType": "Block", "src": "1986:218:1", "statements": [{"expression": {"argumentTypes": null, "id": 718, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 711, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "2000:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 713, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1768, "src": "2000:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 717, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 714, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "2024:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 715, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mana", "nodeType": "MemberAccess", "referencedDeclaration": 1768, "src": "2024:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 716, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2048:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "2024:25:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "2000:49:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 719, "nodeType": "ExpressionStatement", "src": "2000:49:1"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 721, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "2137:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 722, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1770, "src": "2137:23:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 723, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "2162:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, {"argumentTypes": null, "id": 724, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 647, "src": "2181:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}, {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}], "id": 720, "name": "attack", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1100, "src": "2130:6:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_struct$_PlayerCard_$1773_storage_ptr_$_t_struct$_PlayerDeck_$1779_storage_ptr_$returns$__$", "typeString": "function (uint16,struct PlayerCardsRandom.PlayerCard storage pointer,struct PlayerCardsRandom.PlayerDeck storage pointer)"}}, "id": 725, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2130:63:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 726, "nodeType": "ExpressionStatement", "src": "2130:63:1"}]}}, {"expression": {"argumentTypes": null, "id": 959, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 957, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1793, "src": "4579:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 958, "name": "nextPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 653, "src": "4593:10:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "4579:24:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 960, "nodeType": "ExpressionStatement", "src": "4579:24:1"}, {"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 962, "name": "move", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 611, "src": "4624:4:1", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 963, "name": "playerAttackCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 623, "src": "4630:16:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 964, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cardId", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "4630:23:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "id": 965, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 635, "src": "4655:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, {"argumentTypes": null, "id": 966, "name": "nextPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 653, "src": "4674:10:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}, {"typeIdentifier": "t_address", "typeString": "address"}], "id": 961, "name": "Turn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 590, "src": "4619:4:1", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_enum$_Move_$575_$_t_uint256_$_t_struct$_PlayerCard_$1773_memory_ptr_$_t_address_$returns$__$", "typeString": "function (enum BattleRandom.Move,uint256,struct PlayerCardsRandom.PlayerCard memory,address)"}}, "id": 967, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4619:66:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 968, "nodeType": "EmitStatement", "src": "4614:71:1"}]}, "documentation": null, "id": 970, "implemented": true, "kind": "function", "modifiers": [], "name": "turn", "nodeType": "FunctionDefinition", "parameters": {"id": 612, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 611, "name": "move", "nodeType": "VariableDeclaration", "scope": 970, "src": "709:9:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}, "typeName": {"contractScope": null, "id": 610, "name": "Move", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 575, "src": "709:4:1", "typeDescriptions": {"typeIdentifier": "t_enum$_Move_$575", "typeString": "enum BattleRandom.Move"}}, "value": null, "visibility": "internal"}], "src": "708:11:1"}, "returnParameters": {"id": 613, "nodeType": "ParameterList", "parameters": [], "src": "727:0:1"}, "scope": 1121, "src": "695:3997:1", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 1099, "nodeType": "Block", "src": "4874:1301:1", "statements": [{"assignments": [980], "declarations": [{"constant": false, "id": 980, "name": "remainingAttackAmount", "nodeType": "VariableDeclaration", "scope": 1099, "src": "4884:28:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 979, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4884:6:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 981, "initialValue": null, "nodeType": "VariableDeclarationStatement", "src": "4884:28:1"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 985, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 982, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 974, "src": "4927:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 983, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1766, "src": "4927:25:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 984, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4955:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "4927:29:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 1097, "nodeType": "Block", "src": "5680:489:1", "statements": [{"expression": {"argumentTypes": null, "id": 1062, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1051, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 974, "src": "5696:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 1053, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1764, "src": "5696:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 1054, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 980, "src": "5722:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 1055, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "5695:49:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1058, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 974, "src": "5767:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 1059, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1764, "src": "5767:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 1060, "name": "attackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 972, "src": "5793:12:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 1056, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "5747:9:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 1057, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "5747:19:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 1061, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5747:59:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "5695:111:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1063, "nodeType": "ExpressionStatement", "src": "5695:111:1"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 1066, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1064, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 980, "src": "5825:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 1065, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5849:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5825:25:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1096, "nodeType": "IfStatement", "src": "5821:338:1", "trueBody": {"id": 1095, "nodeType": "Block", "src": "5852:307:1", "statements": [{"expression": {"argumentTypes": null, "id": 1070, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "5870:25:1", "subExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1067, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "5870:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1069, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "5870:23:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "id": 1071, "nodeType": "ExpressionStatement", "src": "5870:25:1"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1077, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1072, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "5917:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1073, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "5917:23:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1074, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "5943:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1075, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "5943:23:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 1076, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "5943:30:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5917:56:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1084, "nodeType": "IfStatement", "src": "5913:122:1", "trueBody": {"id": 1083, "nodeType": "Block", "src": "5975:60:1", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1079, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "6005:3:1", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1080, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "6005:10:1", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "id": 1078, "name": "endGame", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1120, "src": "5997:7:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 1081, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5997:19:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1082, "nodeType": "ExpressionStatement", "src": "5997:19:1"}]}}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1086, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 980, "src": "6059:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1087, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "6082:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1088, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "6082:23:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 1091, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1089, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "6106:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1090, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "6106:23:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6082:48:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, {"argumentTypes": null, "id": 1092, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "6132:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}, {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}], "id": 1085, "name": "attack", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1100, "src": "6052:6:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_struct$_PlayerCard_$1773_storage_ptr_$_t_struct$_PlayerDeck_$1779_storage_ptr_$returns$__$", "typeString": "function (uint16,struct PlayerCardsRandom.PlayerCard storage pointer,struct PlayerCardsRandom.PlayerDeck storage pointer)"}}, "id": 1093, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6052:92:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1094, "nodeType": "ExpressionStatement", "src": "6052:92:1"}]}}]}, "id": 1098, "nodeType": "IfStatement", "src": "4923:1246:1", "trueBody": {"id": 1050, "nodeType": "Block", "src": "4958:716:1", "statements": [{"expression": {"argumentTypes": null, "id": 997, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 986, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 974, "src": "4973:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 988, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1766, "src": "4973:25:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 989, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 980, "src": "5000:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 990, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "4972:50:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 993, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 974, "src": "5045:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 994, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "defence", "nodeType": "MemberAccess", "referencedDeclaration": 1766, "src": "5045:25:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 995, "name": "attackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 972, "src": "5072:12:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 991, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "5025:9:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 992, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "5025:19:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 996, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5025:60:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "4972:113:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 998, "nodeType": "ExpressionStatement", "src": "4972:113:1"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 1001, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 999, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 980, "src": "5104:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 1000, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5128:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5104:25:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1049, "nodeType": "IfStatement", "src": "5100:564:1", "trueBody": {"id": 1048, "nodeType": "Block", "src": "5131:533:1", "statements": [{"expression": {"argumentTypes": null, "id": 1013, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "components": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1002, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 974, "src": "5150:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 1004, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1764, "src": "5150:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 1005, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 980, "src": "5176:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 1006, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "5149:49:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1009, "name": "playerDefenceCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 974, "src": "5221:17:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage pointer"}}, "id": 1010, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "health", "nodeType": "MemberAccess", "referencedDeclaration": 1764, "src": "5221:24:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "id": 1011, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 980, "src": "5247:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"argumentTypes": null, "id": 1007, "name": "MathUtils", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1330, "src": "5201:9:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_MathUtils_$1330_$", "typeString": "type(library MathUtils)"}}, "id": 1008, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subToZero", "nodeType": "MemberAccess", "referencedDeclaration": 1329, "src": "5201:19:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint16_$_t_uint16_$returns$_t_uint16_$_t_uint16_$", "typeString": "function (uint16,uint16) pure returns (uint16,uint16)"}}, "id": 1012, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5201:68:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint16_$", "typeString": "tuple(uint16,uint16)"}}, "src": "5149:120:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1014, "nodeType": "ExpressionStatement", "src": "5149:120:1"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 1017, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1015, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 980, "src": "5292:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 1016, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5316:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5292:25:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1047, "nodeType": "IfStatement", "src": "5288:362:1", "trueBody": {"id": 1046, "nodeType": "Block", "src": "5319:331:1", "statements": [{"expression": {"argumentTypes": null, "id": 1021, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "5341:25:1", "subExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1018, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "5341:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1020, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "5341:23:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "id": 1022, "nodeType": "ExpressionStatement", "src": "5341:25:1"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1028, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1023, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "5392:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1024, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "5392:23:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1025, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "5418:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1026, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "5418:23:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 1027, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "5418:30:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5392:56:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1035, "nodeType": "IfStatement", "src": "5388:130:1", "trueBody": {"id": 1034, "nodeType": "Block", "src": "5450:68:1", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1030, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "5484:3:1", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1031, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "5484:10:1", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "id": 1029, "name": "endGame", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1120, "src": "5476:7:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 1032, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5476:19:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1033, "nodeType": "ExpressionStatement", "src": "5476:19:1"}]}}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1037, "name": "remainingAttackAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 980, "src": "5546:21:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1038, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "5569:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1039, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "5569:23:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 1042, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1040, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "5593:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}, "id": 1041, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "5593:23:1", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "5569:48:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, {"argumentTypes": null, "id": 1043, "name": "defenceDeck", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 976, "src": "5619:11:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}, {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck storage pointer"}], "id": 1036, "name": "attack", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1100, "src": "5539:6:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_struct$_PlayerCard_$1773_storage_ptr_$_t_struct$_PlayerDeck_$1779_storage_ptr_$returns$__$", "typeString": "function (uint16,struct PlayerCardsRandom.PlayerCard storage pointer,struct PlayerCardsRandom.PlayerDeck storage pointer)"}}, "id": 1044, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5539:92:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1045, "nodeType": "ExpressionStatement", "src": "5539:92:1"}]}}]}}]}}]}, "documentation": null, "id": 1100, "implemented": true, "kind": "function", "modifiers": [], "name": "attack", "nodeType": "FunctionDefinition", "parameters": {"id": 977, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 972, "name": "attackAmount", "nodeType": "VariableDeclaration", "scope": 1100, "src": "4774:19:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 971, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4774:6:1", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 974, "name": "playerDefenceCard", "nodeType": "VariableDeclaration", "scope": 1100, "src": "4795:36:1", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}, "typeName": {"contractScope": null, "id": 973, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1773, "src": "4795:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 976, "name": "defenceDeck", "nodeType": "VariableDeclaration", "scope": 1100, "src": "4833:30:1", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck"}, "typeName": {"contractScope": null, "id": 975, "name": "PlayerDeck", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1779, "src": "4833:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck"}}, "value": null, "visibility": "internal"}], "src": "4773:91:1"}, "returnParameters": {"id": 978, "nodeType": "ParameterList", "parameters": [], "src": "4874:0:1"}, "scope": 1121, "src": "4758:1417:1", "stateMutability": "nonpayable", "superFunction": null, "visibility": "internal"}, {"body": {"id": 1119, "nodeType": "Block", "src": "6229:119:1", "statements": [{"expression": {"argumentTypes": null, "id": 1107, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1105, "name": "winningPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 580, "src": "6239:13:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 1106, "name": "_winningPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1102, "src": "6255:14:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "6239:30:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1108, "nodeType": "ExpressionStatement", "src": "6239:30:1"}, {"expression": {"argumentTypes": null, "id": 1113, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1109, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1793, "src": "6279:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "30", "id": 1111, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6301:1:1", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 1110, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "6293:7:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": "address"}, "id": 1112, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6293:10:1", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "6279:24:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1114, "nodeType": "ExpressionStatement", "src": "6279:24:1"}, {"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1116, "name": "winningPlayer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 580, "src": "6327:13:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 1115, "name": "EndGame", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 594, "src": "6319:7:1", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 1117, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6319:22:1", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1118, "nodeType": "EmitStatement", "src": "6314:27:1"}]}, "documentation": null, "id": 1120, "implemented": true, "kind": "function", "modifiers": [], "name": "endGame", "nodeType": "FunctionDefinition", "parameters": {"id": 1103, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1102, "name": "_winningPlayer", "nodeType": "VariableDeclaration", "scope": 1120, "src": "6198:22:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1101, "name": "address", "nodeType": "ElementaryTypeName", "src": "6198:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "6197:24:1"}, "returnParameters": {"id": 1104, "nodeType": "ParameterList", "parameters": [], "src": "6229:0:1"}, "scope": 1121, "src": "6181:167:1", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}], "scope": 1122, "src": "197:6153:1"}], "src": "0:6351:1"}, "id": 1}, "contracts/Cards.sol": {"ast": {"absolutePath": "contracts/Cards.sol", "exportedSymbols": {"Cards": [1179]}, "id": 1180, "nodeType": "SourceUnit", "nodes": [{"id": 1123, "literals": ["solidity", "^", "0.5", ".2"], "nodeType": "PragmaDirective", "src": "0:23:2"}, {"id": 1124, "literals": ["experimental", "ABIEncoderV2"], "nodeType": "PragmaDirective", "src": "24:33:2"}, {"absolutePath": "contracts/CryptoBeastsTypes.sol", "file": "./CryptoBeastsTypes.sol", "id": 1126, "nodeType": "ImportDirective", "scope": 1180, "sourceUnit": 1299, "src": "59:58:2", "symbolAliases": [{"foreign": 1125, "local": null}], "unitAlias": ""}, {"baseContracts": [{"arguments": null, "baseName": {"contractScope": null, "id": 1127, "name": "CryptoBeastsTypes", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1298, "src": "137:17:2", "typeDescriptions": {"typeIdentifier": "t_contract$_CryptoBeastsTypes_$1298", "typeString": "contract CryptoBeastsTypes"}}, "id": 1128, "nodeType": "InheritanceSpecifier", "src": "137:17:2"}], "contractDependencies": [1298], "contractKind": "contract", "documentation": null, "fullyImplemented": true, "id": 1179, "linearizedBaseContracts": [1179, 1298], "name": "Cards", "nodeType": "ContractDefinition", "nodes": [{"anonymous": false, "documentation": null, "id": 1134, "name": "NewCard", "nodeType": "EventDefinition", "parameters": {"id": 1133, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1130, "indexed": false, "name": "cardId", "nodeType": "VariableDeclaration", "scope": 1134, "src": "176:11:2", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1129, "name": "uint", "nodeType": "ElementaryTypeName", "src": "176:4:2", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1132, "indexed": false, "name": "card", "nodeType": "VariableDeclaration", "scope": 1134, "src": "189:9:2", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card"}, "typeName": {"contractScope": null, "id": 1131, "name": "Card", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1297, "src": "189:4:2", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_storage_ptr", "typeString": "struct CryptoBeastsTypes.Card"}}, "value": null, "visibility": "internal"}], "src": "175:24:2"}, "src": "162:38:2"}, {"constant": false, "id": 1137, "name": "cards", "nodeType": "VariableDeclaration", "scope": 1179, "src": "206:19:2", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_Card_$1297_storage_$dyn_storage", "typeString": "struct CryptoBeastsTypes.Card[]"}, "typeName": {"baseType": {"contractScope": null, "id": 1135, "name": "Card", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1297, "src": "206:4:2", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_storage_ptr", "typeString": "struct CryptoBeastsTypes.Card"}}, "id": 1136, "length": null, "nodeType": "ArrayTypeName", "src": "206:6:2", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_Card_$1297_storage_$dyn_storage_ptr", "typeString": "struct CryptoBeastsTypes.Card[]"}}, "value": null, "visibility": "public"}, {"body": {"id": 1156, "nodeType": "Block", "src": "281:87:2", "statements": [{"assignments": [1143], "declarations": [{"constant": false, "id": 1143, "name": "cardId", "nodeType": "VariableDeclaration", "scope": 1156, "src": "291:11:2", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1142, "name": "uint", "nodeType": "ElementaryTypeName", "src": "291:4:2", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "id": 1150, "initialValue": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1149, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1146, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1139, "src": "316:4:2", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}], "expression": {"argumentTypes": null, "id": 1144, "name": "cards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1137, "src": "305:5:2", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_Card_$1297_storage_$dyn_storage", "typeString": "struct CryptoBeastsTypes.Card storage ref[] storage ref"}}, "id": 1145, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "push", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "305:10:2", "typeDescriptions": {"typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_Card_$1297_storage_$returns$_t_uint256_$", "typeString": "function (struct CryptoBeastsTypes.Card storage ref) returns (uint256)"}}, "id": 1147, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "305:16:2", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 1148, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "324:1:2", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "305:20:2", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "291:34:2"}, {"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1152, "name": "cardId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1143, "src": "348:6:2", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "id": 1153, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1139, "src": "356:4:2", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}], "id": 1151, "name": "NewCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1134, "src": "340:7:2", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_struct$_Card_$1297_memory_ptr_$returns$__$", "typeString": "function (uint256,struct CryptoBeastsTypes.Card memory)"}}, "id": 1154, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "340:21:2", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1155, "nodeType": "EmitStatement", "src": "335:26:2"}]}, "documentation": null, "id": 1157, "implemented": true, "kind": "function", "modifiers": [], "name": "createCard", "nodeType": "FunctionDefinition", "parameters": {"id": 1140, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1139, "name": "card", "nodeType": "VariableDeclaration", "scope": 1157, "src": "252:16:2", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card"}, "typeName": {"contractScope": null, "id": 1138, "name": "Card", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1297, "src": "252:4:2", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_storage_ptr", "typeString": "struct CryptoBeastsTypes.Card"}}, "value": null, "visibility": "internal"}], "src": "251:18:2"}, "returnParameters": {"id": 1141, "nodeType": "ParameterList", "parameters": [], "src": "281:0:2"}, "scope": 1179, "src": "232:136:2", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 1165, "nodeType": "Block", "src": "417:36:2", "statements": [{"expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1162, "name": "cards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1137, "src": "434:5:2", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_Card_$1297_storage_$dyn_storage", "typeString": "struct CryptoBeastsTypes.Card storage ref[] storage ref"}}, "id": 1163, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "434:12:2", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 1161, "id": 1164, "nodeType": "Return", "src": "427:19:2"}]}, "documentation": null, "id": 1166, "implemented": true, "kind": "function", "modifiers": [], "name": "cardCount", "nodeType": "FunctionDefinition", "parameters": {"id": 1158, "nodeType": "ParameterList", "parameters": [], "src": "392:2:2"}, "returnParameters": {"id": 1161, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1160, "name": "", "nodeType": "VariableDeclaration", "scope": 1166, "src": "411:4:2", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1159, "name": "uint", "nodeType": "ElementaryTypeName", "src": "411:4:2", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "src": "410:6:2"}, "scope": 1179, "src": "374:79:2", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 1177, "nodeType": "Block", "src": "517:36:2", "statements": [{"expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1173, "name": "cards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1137, "src": "534:5:2", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_Card_$1297_storage_$dyn_storage", "typeString": "struct CryptoBeastsTypes.Card storage ref[] storage ref"}}, "id": 1175, "indexExpression": {"argumentTypes": null, "id": 1174, "name": "index", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1168, "src": "540:5:2", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "534:12:2", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_storage", "typeString": "struct CryptoBeastsTypes.Card storage ref"}}, "functionReturnParameters": 1172, "id": 1176, "nodeType": "Return", "src": "527:19:2"}]}, "documentation": null, "id": 1178, "implemented": true, "kind": "function", "modifiers": [], "name": "getCard", "nodeType": "FunctionDefinition", "parameters": {"id": 1169, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1168, "name": "index", "nodeType": "VariableDeclaration", "scope": 1178, "src": "476:10:2", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1167, "name": "uint", "nodeType": "ElementaryTypeName", "src": "476:4:2", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "src": "475:12:2"}, "returnParameters": {"id": 1172, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1171, "name": "", "nodeType": "VariableDeclaration", "scope": 1178, "src": "504:11:2", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card"}, "typeName": {"contractScope": null, "id": 1170, "name": "Card", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1297, "src": "504:4:2", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_storage_ptr", "typeString": "struct CryptoBeastsTypes.Card"}}, "value": null, "visibility": "internal"}], "src": "503:13:2"}, "scope": 1179, "src": "459:94:2", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}], "scope": 1180, "src": "119:436:2"}], "src": "0:556:2"}, "id": 2}, "contracts/Challenge.sol": {"ast": {"absolutePath": "contracts/Challenge.sol", "exportedSymbols": {"Challenge": [1259]}, "id": 1260, "nodeType": "SourceUnit", "nodes": [{"id": 1181, "literals": ["solidity", "^", "0.5", ".0"], "nodeType": "PragmaDirective", "src": "1:23:3"}, {"baseContracts": [], "contractDependencies": [], "contractKind": "contract", "documentation": null, "fullyImplemented": true, "id": 1259, "linearizedBaseContracts": [1259], "name": "Challenge", "nodeType": "ContractDefinition", "nodes": [{"constant": false, "id": 1186, "name": "challenger", "nodeType": "VariableDeclaration", "scope": 1259, "src": "52:38:3", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1182, "name": "address", "nodeType": "ElementaryTypeName", "src": "52:7:3", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "30", "id": 1184, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "88:1:3", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 1183, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "80:7:3", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": "address"}, "id": 1185, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "80:10:3", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "visibility": "public"}, {"anonymous": false, "documentation": null, "id": 1190, "name": "Challenge", "nodeType": "EventDefinition", "parameters": {"id": 1189, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1188, "indexed": false, "name": "challenger", "nodeType": "VariableDeclaration", "scope": 1190, "src": "113:18:3", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1187, "name": "address", "nodeType": "ElementaryTypeName", "src": "113:7:3", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "112:20:3"}, "src": "97:36:3"}, {"anonymous": false, "documentation": null, "id": 1194, "name": "Cancel", "nodeType": "EventDefinition", "parameters": {"id": 1193, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1192, "indexed": false, "name": "challenger", "nodeType": "VariableDeclaration", "scope": 1194, "src": "151:18:3", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1191, "name": "address", "nodeType": "ElementaryTypeName", "src": "151:7:3", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "150:20:3"}, "src": "138:33:3"}, {"anonymous": false, "documentation": null, "id": 1200, "name": "Accept", "nodeType": "EventDefinition", "parameters": {"id": 1199, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1196, "indexed": false, "name": "challenger", "nodeType": "VariableDeclaration", "scope": 1200, "src": "189:18:3", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1195, "name": "address", "nodeType": "ElementaryTypeName", "src": "189:7:3", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1198, "indexed": false, "name": "acceptor", "nodeType": "VariableDeclaration", "scope": 1200, "src": "209:16:3", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1197, "name": "address", "nodeType": "ElementaryTypeName", "src": "209:7:3", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "188:38:3"}, "src": "176:51:3"}, {"body": {"id": 1241, "nodeType": "Block", "src": "261:355:3", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 1207, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1204, "name": "challenger", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1186, "src": "322:10:3", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1205, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "336:3:3", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1206, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "336:10:3", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "322:24:3", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"argumentTypes": null, "hexValue": "416c7265616479206368616c6c656e67696e67", "id": 1208, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "348:21:3", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_dc4eeaa876d30275a83368e32739c181e3eb35252d435462068220a488687c02", "typeString": "literal_string \"Already challenging\""}, "value": "Already challenging"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_dc4eeaa876d30275a83368e32739c181e3eb35252d435462068220a488687c02", "typeString": "literal_string \"Already challenging\""}], "id": 1203, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2239, "src": "314:7:3", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1209, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "314:56:3", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1210, "nodeType": "ExpressionStatement", "src": "314:56:3"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 1215, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1211, "name": "challenger", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1186, "src": "385:10:3", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "30", "id": 1213, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "407:1:3", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 1212, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "399:7:3", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": "address"}, "id": 1214, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "399:10:3", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "385:24:3", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 1239, "nodeType": "Block", "src": "513:97:3", "statements": [{"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1228, "name": "challenger", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1186, "src": "539:10:3", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1229, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "551:3:3", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1230, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "551:10:3", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "id": 1227, "name": "Accept", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1200, "src": "532:6:3", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$", "typeString": "function (address,address)"}}, "id": 1231, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "532:30:3", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1232, "nodeType": "EmitStatement", "src": "527:35:3"}, {"expression": {"argumentTypes": null, "id": 1237, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1233, "name": "challenger", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1186, "src": "576:10:3", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "30", "id": 1235, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "597:1:3", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 1234, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "589:7:3", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": "address"}, "id": 1236, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "589:10:3", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "576:23:3", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1238, "nodeType": "ExpressionStatement", "src": "576:23:3"}]}, "id": 1240, "nodeType": "IfStatement", "src": "381:229:3", "trueBody": {"id": 1226, "nodeType": "Block", "src": "411:88:3", "statements": [{"expression": {"argumentTypes": null, "id": 1219, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1216, "name": "challenger", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1186, "src": "425:10:3", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1217, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "438:3:3", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1218, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "438:10:3", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "425:23:3", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1220, "nodeType": "ExpressionStatement", "src": "425:23:3"}, {"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1222, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "477:3:3", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1223, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "477:10:3", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "id": 1221, "name": "Challenge", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1190, "src": "467:9:3", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 1224, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "467:21:3", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1225, "nodeType": "EmitStatement", "src": "462:26:3"}]}}]}, "documentation": null, "id": 1242, "implemented": true, "kind": "function", "modifiers": [], "name": "challenge", "nodeType": "FunctionDefinition", "parameters": {"id": 1201, "nodeType": "ParameterList", "parameters": [], "src": "251:2:3"}, "returnParameters": {"id": 1202, "nodeType": "ParameterList", "parameters": [], "src": "261:0:3"}, "scope": 1259, "src": "233:383:3", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 1257, "nodeType": "Block", "src": "647:92:3", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 1249, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1246, "name": "challenger", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1186, "src": "665:10:3", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1247, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "679:3:3", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1248, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "679:10:3", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "665:24:3", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 1245, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2238, "src": "657:7:3", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 1250, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "657:33:3", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1251, "nodeType": "ExpressionStatement", "src": "657:33:3"}, {"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1253, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "721:3:3", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1254, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "721:10:3", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "id": 1252, "name": "Cancel", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1194, "src": "714:6:3", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$", "typeString": "function (address)"}}, "id": 1255, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "714:18:3", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1256, "nodeType": "EmitStatement", "src": "709:23:3"}]}, "documentation": null, "id": 1258, "implemented": true, "kind": "function", "modifiers": [], "name": "cancel", "nodeType": "FunctionDefinition", "parameters": {"id": 1243, "nodeType": "ParameterList", "parameters": [], "src": "637:2:3"}, "returnParameters": {"id": 1244, "nodeType": "ParameterList", "parameters": [], "src": "647:0:3"}, "scope": 1259, "src": "622:117:3", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}], "scope": 1260, "src": "26:715:3"}], "src": "1:740:3"}, "id": 3}, "contracts/CryptoBeastsTypes.sol": {"ast": {"absolutePath": "contracts/CryptoBeastsTypes.sol", "exportedSymbols": {"CryptoBeastsTypes": [1298]}, "id": 1299, "nodeType": "SourceUnit", "nodes": [{"baseContracts": [], "contractDependencies": [], "contractKind": "contract", "documentation": null, "fullyImplemented": true, "id": 1298, "linearizedBaseContracts": [1298], "name": "CryptoBeastsTypes", "nodeType": "ContractDefinition", "nodes": [{"canonicalName": "CryptoBeastsTypes.CardProperties", "id": 1271, "members": [{"constant": false, "id": 1262, "name": "health", "nodeType": "VariableDeclaration", "scope": 1271, "src": "72:13:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1261, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "72:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1264, "name": "defence", "nodeType": "VariableDeclaration", "scope": 1271, "src": "95:14:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1263, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "95:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1266, "name": "mana", "nodeType": "VariableDeclaration", "scope": 1271, "src": "119:11:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1265, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "119:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1268, "name": "attack", "nodeType": "VariableDeclaration", "scope": 1271, "src": "140:13:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1267, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "140:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1270, "name": "specialAttack", "nodeType": "VariableDeclaration", "scope": 1271, "src": "163:20:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1269, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "163:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "name": "CardProperties", "nodeType": "StructDefinition", "scope": 1298, "src": "40:150:4", "visibility": "public"}, {"canonicalName": "CryptoBeastsTypes.Ability", "id": 1280, "members": [{"constant": false, "id": 1273, "name": "name", "nodeType": "VariableDeclaration", "scope": 1280, "src": "221:11:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_string_storage_ptr", "typeString": "string"}, "typeName": {"id": 1272, "name": "string", "nodeType": "ElementaryTypeName", "src": "221:6:4", "typeDescriptions": {"typeIdentifier": "t_string_storage_ptr", "typeString": "string"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1275, "name": "opponent", "nodeType": "VariableDeclaration", "scope": 1280, "src": "242:23:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_storage_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}, "typeName": {"contractScope": null, "id": 1274, "name": "CardProperties", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1271, "src": "242:14:4", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_storage_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1277, "name": "player", "nodeType": "VariableDeclaration", "scope": 1280, "src": "275:21:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_storage_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}, "typeName": {"contractScope": null, "id": 1276, "name": "CardProperties", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1271, "src": "275:14:4", "typeDescriptions": {"typeIdentifier": "t_struct$_CardProperties_$1271_storage_ptr", "typeString": "struct CryptoBeastsTypes.CardProperties"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1279, "name": "manaCost", "nodeType": "VariableDeclaration", "scope": 1280, "src": "306:15:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1278, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "306:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "name": "Ability", "nodeType": "StructDefinition", "scope": 1298, "src": "196:132:4", "visibility": "public"}, {"canonicalName": "CryptoBeastsTypes.Card", "id": 1297, "members": [{"constant": false, "id": 1282, "name": "name", "nodeType": "VariableDeclaration", "scope": 1297, "src": "356:11:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_string_storage_ptr", "typeString": "string"}, "typeName": {"id": 1281, "name": "string", "nodeType": "ElementaryTypeName", "src": "356:6:4", "typeDescriptions": {"typeIdentifier": "t_string_storage_ptr", "typeString": "string"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1284, "name": "ability", "nodeType": "VariableDeclaration", "scope": 1297, "src": "377:15:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_storage_ptr", "typeString": "struct CryptoBeastsTypes.Ability"}, "typeName": {"contractScope": null, "id": 1283, "name": "Ability", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1280, "src": "377:7:4", "typeDescriptions": {"typeIdentifier": "t_struct$_Ability_$1280_storage_ptr", "typeString": "struct CryptoBeastsTypes.Ability"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1286, "name": "initHealth", "nodeType": "VariableDeclaration", "scope": 1297, "src": "403:17:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1285, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "403:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1288, "name": "initDefence", "nodeType": "VariableDeclaration", "scope": 1297, "src": "441:18:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1287, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "441:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1290, "name": "initMana", "nodeType": "VariableDeclaration", "scope": 1297, "src": "478:15:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1289, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "478:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1292, "name": "speed", "nodeType": "VariableDeclaration", "scope": 1297, "src": "515:12:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1291, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "515:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1294, "name": "attack", "nodeType": "VariableDeclaration", "scope": 1297, "src": "548:13:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1293, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "548:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1296, "name": "specialAttack", "nodeType": "VariableDeclaration", "scope": 1297, "src": "580:20:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1295, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "580:6:4", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "name": "Card", "nodeType": "StructDefinition", "scope": 1298, "src": "334:284:4", "visibility": "public"}], "scope": 1299, "src": "2:618:4"}], "src": "2:618:4"}, "id": 4}, "contracts/MathUtils.sol": {"ast": {"absolutePath": "contracts/MathUtils.sol", "exportedSymbols": {"MathUtils": [1330]}, "id": 1331, "nodeType": "SourceUnit", "nodes": [{"id": 1300, "literals": ["solidity", "^", "0.5", ".2"], "nodeType": "PragmaDirective", "src": "0:23:5"}, {"baseContracts": [], "contractDependencies": [], "contractKind": "library", "documentation": null, "fullyImplemented": true, "id": 1330, "linearizedBaseContracts": [1330], "name": "MathUtils", "nodeType": "ContractDefinition", "nodes": [{"body": {"id": 1328, "nodeType": "Block", "src": "242:95:5", "statements": [{"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 1313, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1311, "name": "b", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1304, "src": "255:1:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "id": 1312, "name": "a", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1302, "src": "259:1:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "255:5:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1321, "nodeType": "IfStatement", "src": "252:52:5", "trueBody": {"id": 1320, "nodeType": "Block", "src": "262:42:5", "statements": [{"expression": {"argumentTypes": null, "components": [{"argumentTypes": null, "hexValue": "30", "id": 1314, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "284:1:5", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 1317, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1315, "name": "b", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1304, "src": "287:1:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"argumentTypes": null, "id": 1316, "name": "a", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1302, "src": "291:1:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "287:5:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "id": 1318, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "283:10:5", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_uint16_$", "typeString": "tuple(int_const 0,uint16)"}}, "functionReturnParameters": 1310, "id": 1319, "nodeType": "Return", "src": "276:17:5"}]}}, {"expression": {"argumentTypes": null, "components": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 1324, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1322, "name": "a", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1302, "src": "321:1:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"argumentTypes": null, "id": 1323, "name": "b", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1304, "src": "325:1:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "321:5:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "hexValue": "30", "id": 1325, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "328:1:5", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "id": 1326, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "320:10:5", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_rational_0_by_1_$", "typeString": "tuple(uint16,int_const 0)"}}, "functionReturnParameters": 1310, "id": 1327, "nodeType": "Return", "src": "313:17:5"}]}, "documentation": "@dev Subtracts two unsigned integers, if subtrahend is greater than minuend, then return 0", "id": 1329, "implemented": true, "kind": "function", "modifiers": [], "name": "subToZero", "nodeType": "FunctionDefinition", "parameters": {"id": 1305, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1302, "name": "a", "nodeType": "VariableDeclaration", "scope": 1329, "src": "183:8:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1301, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "183:6:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1304, "name": "b", "nodeType": "VariableDeclaration", "scope": 1329, "src": "193:8:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1303, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "193:6:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "src": "182:20:5"}, "returnParameters": {"id": 1310, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1307, "name": "", "nodeType": "VariableDeclaration", "scope": 1329, "src": "226:6:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1306, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "226:6:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1309, "name": "", "nodeType": "VariableDeclaration", "scope": 1329, "src": "234:6:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1308, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "234:6:5", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "src": "225:16:5"}, "scope": 1330, "src": "164:173:5", "stateMutability": "pure", "superFunction": null, "visibility": "internal"}], "scope": 1331, "src": "25:314:5"}], "src": "0:339:5"}, "id": 5}, "contracts/Migrations.sol": {"ast": {"absolutePath": "contracts/Migrations.sol", "exportedSymbols": {"Migrations": [1387]}, "id": 1388, "nodeType": "SourceUnit", "nodes": [{"id": 1332, "literals": ["solidity", ">=", "0.4", ".21", "<", "0.6", ".0"], "nodeType": "PragmaDirective", "src": "0:32:6"}, {"baseContracts": [], "contractDependencies": [], "contractKind": "contract", "documentation": null, "fullyImplemented": true, "id": 1387, "linearizedBaseContracts": [1387], "name": "Migrations", "nodeType": "ContractDefinition", "nodes": [{"constant": false, "id": 1334, "name": "owner", "nodeType": "VariableDeclaration", "scope": 1387, "src": "58:20:6", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1333, "name": "address", "nodeType": "ElementaryTypeName", "src": "58:7:6", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "public"}, {"constant": false, "id": 1336, "name": "last_completed_migration", "nodeType": "VariableDeclaration", "scope": 1387, "src": "82:36:6", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1335, "name": "uint", "nodeType": "ElementaryTypeName", "src": "82:4:6", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "public"}, {"body": {"id": 1344, "nodeType": "Block", "src": "144:29:6", "statements": [{"expression": {"argumentTypes": null, "id": 1342, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1339, "name": "owner", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1334, "src": "150:5:6", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1340, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "158:3:6", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1341, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "158:10:6", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "150:18:6", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1343, "nodeType": "ExpressionStatement", "src": "150:18:6"}]}, "documentation": null, "id": 1345, "implemented": true, "kind": "constructor", "modifiers": [], "name": "", "nodeType": "FunctionDefinition", "parameters": {"id": 1337, "nodeType": "ParameterList", "parameters": [], "src": "134:2:6"}, "returnParameters": {"id": 1338, "nodeType": "ParameterList", "parameters": [], "src": "144:0:6"}, "scope": 1387, "src": "123:50:6", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 1353, "nodeType": "Block", "src": "199:37:6", "statements": [{"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 1350, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1347, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "209:3:6", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1348, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "209:10:6", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "id": 1349, "name": "owner", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1334, "src": "223:5:6", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "209:19:6", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1352, "nodeType": "IfStatement", "src": "205:26:6", "trueBody": {"id": 1351, "nodeType": "PlaceholderStatement", "src": "230:1:6"}}]}, "documentation": null, "id": 1354, "name": "restricted", "nodeType": "ModifierDefinition", "parameters": {"id": 1346, "nodeType": "ParameterList", "parameters": [], "src": "196:2:6"}, "src": "177:59:6", "visibility": "internal"}, {"body": {"id": 1365, "nodeType": "Block", "src": "296:47:6", "statements": [{"expression": {"argumentTypes": null, "id": 1363, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1361, "name": "last_completed_migration", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1336, "src": "302:24:6", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 1362, "name": "completed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1356, "src": "329:9:6", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "302:36:6", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1364, "nodeType": "ExpressionStatement", "src": "302:36:6"}]}, "documentation": null, "id": 1366, "implemented": true, "kind": "function", "modifiers": [{"arguments": null, "id": 1359, "modifierName": {"argumentTypes": null, "id": 1358, "name": "restricted", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1354, "src": "285:10:6", "typeDescriptions": {"typeIdentifier": "t_modifier$__$", "typeString": "modifier ()"}}, "nodeType": "ModifierInvocation", "src": "285:10:6"}], "name": "setCompleted", "nodeType": "FunctionDefinition", "parameters": {"id": 1357, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1356, "name": "completed", "nodeType": "VariableDeclaration", "scope": 1366, "src": "262:14:6", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1355, "name": "uint", "nodeType": "ElementaryTypeName", "src": "262:4:6", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "src": "261:16:6"}, "returnParameters": {"id": 1360, "nodeType": "ParameterList", "parameters": [], "src": "296:0:6"}, "scope": 1387, "src": "240:103:6", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 1385, "nodeType": "Block", "src": "403:109:6", "statements": [{"assignments": [1374], "declarations": [{"constant": false, "id": 1374, "name": "upgraded", "nodeType": "VariableDeclaration", "scope": 1385, "src": "409:19:6", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_Migrations_$1387", "typeString": "contract Migrations"}, "typeName": {"contractScope": null, "id": 1373, "name": "Migrations", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1387, "src": "409:10:6", "typeDescriptions": {"typeIdentifier": "t_contract$_Migrations_$1387", "typeString": "contract Migrations"}}, "value": null, "visibility": "internal"}], "id": 1378, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1376, "name": "new_address", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1368, "src": "442:11:6", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 1375, "name": "Migrations", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1387, "src": "431:10:6", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Migrations_$1387_$", "typeString": "type(contract Migrations)"}}, "id": 1377, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "431:23:6", "typeDescriptions": {"typeIdentifier": "t_contract$_Migrations_$1387", "typeString": "contract Migrations"}}, "nodeType": "VariableDeclarationStatement", "src": "409:45:6"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1382, "name": "last_completed_migration", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1336, "src": "482:24:6", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"argumentTypes": null, "id": 1379, "name": "upgraded", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1374, "src": "460:8:6", "typeDescriptions": {"typeIdentifier": "t_contract$_Migrations_$1387", "typeString": "contract Migrations"}}, "id": 1381, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setCompleted", "nodeType": "MemberAccess", "referencedDeclaration": 1366, "src": "460:21:6", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$", "typeString": "function (uint256) external"}}, "id": 1383, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "460:47:6", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1384, "nodeType": "ExpressionStatement", "src": "460:47:6"}]}, "documentation": null, "id": 1386, "implemented": true, "kind": "function", "modifiers": [{"arguments": null, "id": 1371, "modifierName": {"argumentTypes": null, "id": 1370, "name": "restricted", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1354, "src": "392:10:6", "typeDescriptions": {"typeIdentifier": "t_modifier$__$", "typeString": "modifier ()"}}, "nodeType": "ModifierInvocation", "src": "392:10:6"}], "name": "upgrade", "nodeType": "FunctionDefinition", "parameters": {"id": 1369, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1368, "name": "new_address", "nodeType": "VariableDeclaration", "scope": 1386, "src": "364:19:6", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1367, "name": "address", "nodeType": "ElementaryTypeName", "src": "364:7:6", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "363:21:6"}, "returnParameters": {"id": 1372, "nodeType": "ParameterList", "parameters": [], "src": "403:0:6"}, "scope": 1387, "src": "347:165:6", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}], "scope": 1388, "src": "34:480:6"}], "src": "0:515:6"}, "id": 6}, "contracts/PlayerCardsPick.sol": {"ast": {"absolutePath": "contracts/PlayerCardsPick.sol", "exportedSymbols": {"PlayerCardsPick": [1751]}, "id": 1752, "nodeType": "SourceUnit", "nodes": [{"id": 1389, "literals": ["solidity", "^", "0.5", ".2"], "nodeType": "PragmaDirective", "src": "0:23:7"}, {"id": 1390, "literals": ["experimental", "ABIEncoderV2"], "nodeType": "PragmaDirective", "src": "24:33:7"}, {"absolutePath": "contracts/CryptoBeastsTypes.sol", "file": "./CryptoBeastsTypes.sol", "id": 1392, "nodeType": "ImportDirective", "scope": 1752, "sourceUnit": 1299, "src": "59:58:7", "symbolAliases": [{"foreign": 1391, "local": null}], "unitAlias": ""}, {"absolutePath": "contracts/Cards.sol", "file": "./Cards.sol", "id": 1394, "nodeType": "ImportDirective", "scope": 1752, "sourceUnit": 1180, "src": "118:34:7", "symbolAliases": [{"foreign": 1393, "local": null}], "unitAlias": ""}, {"baseContracts": [{"arguments": null, "baseName": {"contractScope": null, "id": 1395, "name": "CryptoBeastsTypes", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1298, "src": "182:17:7", "typeDescriptions": {"typeIdentifier": "t_contract$_CryptoBeastsTypes_$1298", "typeString": "contract CryptoBeastsTypes"}}, "id": 1396, "nodeType": "InheritanceSpecifier", "src": "182:17:7"}], "contractDependencies": [1298], "contractKind": "contract", "documentation": null, "fullyImplemented": true, "id": 1751, "linearizedBaseContracts": [1751, 1298], "name": "PlayerCardsPick", "nodeType": "ContractDefinition", "nodes": [{"canonicalName": "PlayerCardsPick.PlayerCard", "id": 1409, "members": [{"constant": false, "id": 1398, "name": "cardId", "nodeType": "VariableDeclaration", "scope": 1409, "src": "235:11:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1397, "name": "uint", "nodeType": "ElementaryTypeName", "src": "235:4:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1400, "name": "health", "nodeType": "VariableDeclaration", "scope": 1409, "src": "257:13:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1399, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "257:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1402, "name": "defence", "nodeType": "VariableDeclaration", "scope": 1409, "src": "280:14:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1401, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "280:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1404, "name": "mana", "nodeType": "VariableDeclaration", "scope": 1409, "src": "304:11:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1403, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "304:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1406, "name": "attack", "nodeType": "VariableDeclaration", "scope": 1409, "src": "326:13:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1405, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "326:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1408, "name": "specialAttack", "nodeType": "VariableDeclaration", "scope": 1409, "src": "349:20:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1407, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "349:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "name": "PlayerCard", "nodeType": "StructDefinition", "scope": 1751, "src": "207:169:7", "visibility": "public"}, {"canonicalName": "PlayerCardsPick.PlayerDeck", "id": 1415, "members": [{"constant": false, "id": 1412, "name": "playerCards", "nodeType": "VariableDeclaration", "scope": 1415, "src": "410:24:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard[]"}, "typeName": {"baseType": {"contractScope": null, "id": 1410, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1409, "src": "410:10:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}}, "id": 1411, "length": null, "nodeType": "ArrayTypeName", "src": "410:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard[]"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1414, "name": "currentCard", "nodeType": "VariableDeclaration", "scope": 1415, "src": "444:17:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 1413, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "444:5:7", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "value": null, "visibility": "internal"}], "name": "PlayerDeck", "nodeType": "StructDefinition", "scope": 1751, "src": "382:86:7", "visibility": "public"}, {"constant": false, "id": 1417, "name": "cardsContract", "nodeType": "VariableDeclaration", "scope": 1751, "src": "474:19:7", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}, "typeName": {"contractScope": null, "id": 1416, "name": "Cards", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1179, "src": "474:5:7", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1419, "name": "player1", "nodeType": "VariableDeclaration", "scope": 1751, "src": "499:22:7", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1418, "name": "address", "nodeType": "ElementaryTypeName", "src": "499:7:7", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "public"}, {"constant": false, "id": 1421, "name": "player2", "nodeType": "VariableDeclaration", "scope": 1751, "src": "527:22:7", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1420, "name": "address", "nodeType": "ElementaryTypeName", "src": "527:7:7", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "public"}, {"constant": false, "id": 1425, "name": "playerDecks", "nodeType": "VariableDeclaration", "scope": 1751, "src": "555:50:7", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck)"}, "typeName": {"id": 1424, "keyType": {"id": 1422, "name": "address", "nodeType": "ElementaryTypeName", "src": "564:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Mapping", "src": "555:31:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck)"}, "valueType": {"contractScope": null, "id": 1423, "name": "PlayerDeck", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1415, "src": "575:10:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck"}}}, "value": null, "visibility": "public"}, {"constant": false, "id": 1427, "name": "cardsPicked", "nodeType": "VariableDeclaration", "scope": 1751, "src": "611:23:7", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 1426, "name": "bool", "nodeType": "ElementaryTypeName", "src": "611:4:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "value": null, "visibility": "public"}, {"constant": false, "id": 1429, "name": "playersTurn", "nodeType": "VariableDeclaration", "scope": 1751, "src": "640:26:7", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1428, "name": "address", "nodeType": "ElementaryTypeName", "src": "640:7:7", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "public"}, {"body": {"id": 1452, "nodeType": "Block", "src": "750:109:7", "statements": [{"expression": {"argumentTypes": null, "id": 1440, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1438, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "760:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 1439, "name": "_player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1431, "src": "770:8:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "760:18:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1441, "nodeType": "ExpressionStatement", "src": "760:18:7"}, {"expression": {"argumentTypes": null, "id": 1444, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1442, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "788:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 1443, "name": "_player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1433, "src": "798:8:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "788:18:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1445, "nodeType": "ExpressionStatement", "src": "788:18:7"}, {"expression": {"argumentTypes": null, "id": 1450, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1446, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1417, "src": "817:13:7", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1448, "name": "cardsAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1435, "src": "839:12:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 1447, "name": "Cards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1179, "src": "833:5:7", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Cards_$1179_$", "typeString": "type(contract Cards)"}}, "id": 1449, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "833:19:7", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "src": "817:35:7", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 1451, "nodeType": "ExpressionStatement", "src": "817:35:7"}]}, "documentation": null, "id": 1453, "implemented": true, "kind": "constructor", "modifiers": [], "name": "", "nodeType": "FunctionDefinition", "parameters": {"id": 1436, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1431, "name": "_player1", "nodeType": "VariableDeclaration", "scope": 1453, "src": "685:16:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1430, "name": "address", "nodeType": "ElementaryTypeName", "src": "685:7:7", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1433, "name": "_player2", "nodeType": "VariableDeclaration", "scope": 1453, "src": "703:16:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1432, "name": "address", "nodeType": "ElementaryTypeName", "src": "703:7:7", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1435, "name": "cardsAddress", "nodeType": "VariableDeclaration", "scope": 1453, "src": "721:20:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1434, "name": "address", "nodeType": "ElementaryTypeName", "src": "721:7:7", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "684:58:7"}, "returnParameters": {"id": 1437, "nodeType": "ParameterList", "parameters": [], "src": "750:0:7"}, "scope": 1751, "src": "673:186:7", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 1486, "nodeType": "Block", "src": "945:335:7", "statements": [{"assignments": [1462], "declarations": [{"constant": false, "id": 1462, "name": "card", "nodeType": "VariableDeclaration", "scope": 1486, "src": "956:16:7", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card"}, "typeName": {"contractScope": null, "id": 1461, "name": "Card", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1297, "src": "956:4:7", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_storage_ptr", "typeString": "struct CryptoBeastsTypes.Card"}}, "value": null, "visibility": "internal"}], "id": 1467, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1465, "name": "cardId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1458, "src": "997:6:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"argumentTypes": null, "id": 1463, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1417, "src": "975:13:7", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 1464, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getCard", "nodeType": "MemberAccess", "referencedDeclaration": 1178, "src": "975:21:7", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_struct$_Card_$1297_memory_ptr_$", "typeString": "function (uint256) external returns (struct CryptoBeastsTypes.Card memory)"}}, "id": 1466, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "975:29:7", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "nodeType": "VariableDeclarationStatement", "src": "956:48:7"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1472, "name": "cardId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1458, "src": "1066:6:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1473, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1462, "src": "1094:4:7", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1474, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "initHealth", "nodeType": "MemberAccess", "referencedDeclaration": 1286, "src": "1094:15:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1475, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1462, "src": "1132:4:7", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1476, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "initDefence", "nodeType": "MemberAccess", "referencedDeclaration": 1288, "src": "1132:16:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1477, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1462, "src": "1168:4:7", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1478, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "initMana", "nodeType": "MemberAccess", "referencedDeclaration": 1290, "src": "1168:13:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1479, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1462, "src": "1203:4:7", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1480, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1294, "src": "1203:11:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1481, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1462, "src": "1243:4:7", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1482, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1296, "src": "1243:18:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 1471, "name": "PlayerCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1409, "src": "1033:10:7", "typeDescriptions": {"typeIdentifier": "t_type$_t_struct$_PlayerCard_$1409_storage_ptr_$", "typeString": "type(struct PlayerCardsPick.PlayerCard storage pointer)"}}, "id": 1483, "isConstant": false, "isLValue": false, "isPure": false, "kind": "structConstructorCall", "lValueRequested": false, "names": ["cardId", "health", "defence", "mana", "attack", "specialAttack"], "nodeType": "FunctionCall", "src": "1033:239:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_memory", "typeString": "struct PlayerCardsPick.PlayerCard memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_PlayerCard_$1409_memory", "typeString": "struct PlayerCardsPick.PlayerCard memory"}], "expression": {"argumentTypes": null, "id": 1468, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1456, "src": "1015:11:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage pointer"}}, "id": 1470, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "push", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "1015:16:7", "typeDescriptions": {"typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_PlayerCard_$1409_storage_$returns$_t_uint256_$", "typeString": "function (struct PlayerCardsPick.PlayerCard storage ref) returns (uint256)"}}, "id": 1484, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1015:258:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1485, "nodeType": "ExpressionStatement", "src": "1015:258:7"}]}, "documentation": null, "id": 1487, "implemented": true, "kind": "function", "modifiers": [], "name": "_setPlayerCard", "nodeType": "FunctionDefinition", "parameters": {"id": 1459, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1456, "name": "playerCards", "nodeType": "VariableDeclaration", "scope": 1487, "src": "889:32:7", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard[]"}, "typeName": {"baseType": {"contractScope": null, "id": 1454, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1409, "src": "889:10:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}}, "id": 1455, "length": null, "nodeType": "ArrayTypeName", "src": "889:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard[]"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1458, "name": "cardId", "nodeType": "VariableDeclaration", "scope": 1487, "src": "923:11:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1457, "name": "uint", "nodeType": "ElementaryTypeName", "src": "923:4:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "src": "888:47:7"}, "returnParameters": {"id": 1460, "nodeType": "ParameterList", "parameters": [], "src": "945:0:7"}, "scope": 1751, "src": "865:415:7", "stateMutability": "nonpayable", "superFunction": null, "visibility": "internal"}, {"body": {"id": 1508, "nodeType": "Block", "src": "1372:129:7", "statements": [{"assignments": [1495], "declarations": [{"constant": false, "id": 1495, "name": "deckNumber", "nodeType": "VariableDeclaration", "scope": 1508, "src": "1383:16:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 1494, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "1383:5:7", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "value": null, "visibility": "internal"}], "id": 1500, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1496, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1402:11:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 1498, "indexExpression": {"argumentTypes": null, "id": 1497, "name": "player", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1489, "src": "1414:6:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1402:19:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 1499, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "1402:31:7", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "VariableDeclarationStatement", "src": "1383:50:7"}, {"expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1501, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1451:11:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 1503, "indexExpression": {"argumentTypes": null, "id": 1502, "name": "player", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1489, "src": "1463:6:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1451:19:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 1504, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "1451:31:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 1506, "indexExpression": {"argumentTypes": null, "id": 1505, "name": "deckNumber", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1495, "src": "1483:10:7", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1451:43:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref"}}, "functionReturnParameters": 1493, "id": 1507, "nodeType": "Return", "src": "1444:50:7"}]}, "documentation": null, "id": 1509, "implemented": true, "kind": "function", "modifiers": [], "name": "getPlayerCurrentCard", "nodeType": "FunctionDefinition", "parameters": {"id": 1490, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1489, "name": "player", "nodeType": "VariableDeclaration", "scope": 1509, "src": "1316:14:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1488, "name": "address", "nodeType": "ElementaryTypeName", "src": "1316:7:7", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "1315:16:7"}, "returnParameters": {"id": 1493, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1492, "name": "", "nodeType": "VariableDeclaration", "scope": 1509, "src": "1353:17:7", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_memory_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}, "typeName": {"contractScope": null, "id": 1491, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1409, "src": "1353:10:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}}, "value": null, "visibility": "internal"}], "src": "1352:19:7"}, "scope": 1751, "src": "1286:215:7", "stateMutability": "view", "superFunction": null, "visibility": "public"}, {"body": {"id": 1521, "nodeType": "Block", "src": "1588:55:7", "statements": [{"expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1516, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1605:11:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 1518, "indexExpression": {"argumentTypes": null, "id": 1517, "name": "player", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1511, "src": "1617:6:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1605:19:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 1519, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1414, "src": "1605:31:7", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "functionReturnParameters": 1515, "id": 1520, "nodeType": "Return", "src": "1598:38:7"}]}, "documentation": null, "id": 1522, "implemented": true, "kind": "function", "modifiers": [], "name": "getPlayersCurrentCardNumber", "nodeType": "FunctionDefinition", "parameters": {"id": 1512, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1511, "name": "player", "nodeType": "VariableDeclaration", "scope": 1522, "src": "1544:14:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1510, "name": "address", "nodeType": "ElementaryTypeName", "src": "1544:7:7", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "1543:16:7"}, "returnParameters": {"id": 1515, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1514, "name": "", "nodeType": "VariableDeclaration", "scope": 1522, "src": "1581:5:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 1513, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "1581:5:7", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "value": null, "visibility": "internal"}], "src": "1580:7:7"}, "scope": 1751, "src": "1507:136:7", "stateMutability": "view", "superFunction": null, "visibility": "public"}, {"body": {"id": 1533, "nodeType": "Block", "src": "1728:43:7", "statements": [{"expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1529, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1745:11:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 1531, "indexExpression": {"argumentTypes": null, "id": 1530, "name": "player", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1524, "src": "1757:6:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1745:19:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "functionReturnParameters": 1528, "id": 1532, "nodeType": "Return", "src": "1738:26:7"}]}, "documentation": null, "id": 1534, "implemented": true, "kind": "function", "modifiers": [], "name": "getPlayerDeck", "nodeType": "FunctionDefinition", "parameters": {"id": 1525, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1524, "name": "player", "nodeType": "VariableDeclaration", "scope": 1534, "src": "1672:14:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1523, "name": "address", "nodeType": "ElementaryTypeName", "src": "1672:7:7", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "1671:16:7"}, "returnParameters": {"id": 1528, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1527, "name": "", "nodeType": "VariableDeclaration", "scope": 1534, "src": "1709:17:7", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_memory_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck"}, "typeName": {"contractScope": null, "id": 1526, "name": "PlayerDeck", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1415, "src": "1709:10:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerDeck"}}, "value": null, "visibility": "internal"}], "src": "1708:19:7"}, "scope": 1751, "src": "1649:122:7", "stateMutability": "view", "superFunction": null, "visibility": "public"}, {"body": {"id": 1650, "nodeType": "Block", "src": "1837:1003:7", "statements": [{"assignments": [1544], "declarations": [{"constant": false, "id": 1544, "name": "playerCards", "nodeType": "VariableDeclaration", "scope": 1650, "src": "1848:32:7", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard[]"}, "typeName": {"baseType": {"contractScope": null, "id": 1542, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1409, "src": "1848:10:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}}, "id": 1543, "length": null, "nodeType": "ArrayTypeName", "src": "1848:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard[]"}}, "value": null, "visibility": "internal"}], "id": 1550, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1545, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "1883:11:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 1548, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1546, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "1895:3:7", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1547, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "1895:10:7", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1883:23:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 1549, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "1883:35:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "1848:70:7"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1555, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1552, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1544, "src": "1936:11:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage pointer"}}, "id": 1553, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "1936:18:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 1554, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "1958:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "1936:23:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"argumentTypes": null, "hexValue": "506c617965722068617320616c7265616479207069636b6564207468656972206361726473", "id": 1556, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "1961:39:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_7ba0bdf7d814c46684745a1c8fc7c5d8f934a607a02a1e47fb433bd627441e76", "typeString": "literal_string \"Player has already picked their cards\""}, "value": "Player has already picked their cards"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_7ba0bdf7d814c46684745a1c8fc7c5d8f934a607a02a1e47fb433bd627441e76", "typeString": "literal_string \"Player has already picked their cards\""}], "id": 1551, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2239, "src": "1928:7:7", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1557, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1928:73:7", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1558, "nodeType": "ExpressionStatement", "src": "1928:73:7"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 1562, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1559, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "2016:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1560, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "2027:3:7", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1561, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2027:10:7", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "2016:21:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 1580, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1577, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "2181:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1578, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "2192:3:7", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1579, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2192:10:7", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "2181:21:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 1599, "nodeType": "Block", "src": "2334:75:7", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "5472616e73616374696f6e2073656e646572206d75737420626520706c617965722031206f722032", "id": 1596, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "2355:42:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_ed583cee054b252738069c2580f54910da0df510b9bc4efa21980fb35f90c6c0", "typeString": "literal_string \"Transaction sender must be player 1 or 2\""}, "value": "Transaction sender must be player 1 or 2"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_ed583cee054b252738069c2580f54910da0df510b9bc4efa21980fb35f90c6c0", "typeString": "literal_string \"Transaction sender must be player 1 or 2\""}], "id": 1595, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [2240, 2241], "referencedDeclaration": 2241, "src": "2348:6:7", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 1597, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2348:50:7", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1598, "nodeType": "ExpressionStatement", "src": "2348:50:7"}]}, "id": 1600, "nodeType": "IfStatement", "src": "2177:232:7", "trueBody": {"id": 1594, "nodeType": "Block", "src": "2204:124:7", "statements": [{"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1587, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1581, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "2222:11:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 1583, "indexExpression": {"argumentTypes": null, "id": 1582, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "2234:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2222:20:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 1584, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "2222:32:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 1585, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2222:39:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 1586, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2264:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "2222:43:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1593, "nodeType": "IfStatement", "src": "2218:100:7", "trueBody": {"id": 1592, "nodeType": "Block", "src": "2267:51:7", "statements": [{"expression": {"argumentTypes": null, "id": 1590, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1588, "name": "cardsPicked", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1427, "src": "2285:11:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "hexValue": "74727565", "id": 1589, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "2299:4:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, "src": "2285:18:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 1591, "nodeType": "ExpressionStatement", "src": "2285:18:7"}]}}]}}, "id": 1601, "nodeType": "IfStatement", "src": "2012:397:7", "trueBody": {"id": 1576, "nodeType": "Block", "src": "2039:124:7", "statements": [{"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1569, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1563, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "2057:11:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 1565, "indexExpression": {"argumentTypes": null, "id": 1564, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "2069:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2057:20:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 1566, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "2057:32:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}, "id": 1567, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2057:39:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 1568, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2099:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "2057:43:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1575, "nodeType": "IfStatement", "src": "2053:100:7", "trueBody": {"id": 1574, "nodeType": "Block", "src": "2102:51:7", "statements": [{"expression": {"argumentTypes": null, "id": 1572, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1570, "name": "cardsPicked", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1427, "src": "2120:11:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "hexValue": "74727565", "id": 1571, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "2134:4:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, "src": "2120:18:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 1573, "nodeType": "ExpressionStatement", "src": "2120:18:7"}]}}]}}, {"assignments": [1606], "declarations": [{"constant": false, "id": 1606, "name": "pickedCardNumbers", "nodeType": "VariableDeclaration", "scope": 1650, "src": "2419:32:7", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3]"}, "typeName": {"baseType": {"id": 1604, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2419:4:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1605, "length": {"argumentTypes": null, "hexValue": "33", "id": 1603, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2424:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}, "nodeType": "ArrayTypeName", "src": "2419:7:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_storage_ptr", "typeString": "uint256[3]"}}, "value": null, "visibility": "internal"}], "id": 1617, "initialValue": {"argumentTypes": null, "components": [{"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1607, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1538, "src": "2468:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, "id": 1609, "indexExpression": {"argumentTypes": null, "hexValue": "30", "id": 1608, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2481:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2468:15:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1610, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1538, "src": "2497:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, "id": 1612, "indexExpression": {"argumentTypes": null, "hexValue": "31", "id": 1611, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2510:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2497:15:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1613, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1538, "src": "2526:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, "id": 1615, "indexExpression": {"argumentTypes": null, "hexValue": "32", "id": 1614, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2539:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2526:15:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1616, "isConstant": false, "isInlineArray": true, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "2454:88:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2419:123:7"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1619, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1544, "src": "2568:11:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage pointer"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1620, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1538, "src": "2581:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, "id": 1622, "indexExpression": {"argumentTypes": null, "hexValue": "30", "id": 1621, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2594:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2581:15:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage pointer"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 1618, "name": "_setPlayerCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1487, "src": "2553:14:7", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct PlayerCardsPick.PlayerCard storage ref[] storage pointer,uint256)"}}, "id": 1623, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2553:44:7", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1624, "nodeType": "ExpressionStatement", "src": "2553:44:7"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1626, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1544, "src": "2622:11:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage pointer"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1627, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1538, "src": "2635:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, "id": 1629, "indexExpression": {"argumentTypes": null, "hexValue": "31", "id": 1628, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2648:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2635:15:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage pointer"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 1625, "name": "_setPlayerCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1487, "src": "2607:14:7", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct PlayerCardsPick.PlayerCard storage ref[] storage pointer,uint256)"}}, "id": 1630, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2607:44:7", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1631, "nodeType": "ExpressionStatement", "src": "2607:44:7"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1633, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1544, "src": "2676:11:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage pointer"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1634, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1538, "src": "2689:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, "id": 1636, "indexExpression": {"argumentTypes": null, "hexValue": "32", "id": 1635, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2702:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2689:15:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage pointer"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 1632, "name": "_setPlayerCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1487, "src": "2661:14:7", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct PlayerCardsPick.PlayerCard storage ref[] storage pointer,uint256)"}}, "id": 1637, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2661:44:7", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1638, "nodeType": "ExpressionStatement", "src": "2661:44:7"}, {"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1640, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1538, "src": "2736:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, {"argumentTypes": null, "id": 1641, "name": "pickedCardNumbers", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1606, "src": "2750:17:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}, {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3] memory"}], "id": 1639, "name": "PickPayerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1661, "src": "2721:14:7", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_array$_t_uint256_$5_memory_ptr_$_t_array$_t_uint256_$3_memory_ptr_$returns$__$", "typeString": "function (uint256[5] memory,uint256[3] memory)"}}, "id": 1642, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2721:47:7", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1643, "nodeType": "EmitStatement", "src": "2716:52:7"}, {"condition": {"argumentTypes": null, "id": 1644, "name": "cardsPicked", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1427, "src": "2783:11:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1649, "nodeType": "IfStatement", "src": "2779:55:7", "trueBody": {"id": 1648, "nodeType": "Block", "src": "2796:38:7", "statements": [{"expression": {"argumentTypes": null, "arguments": [], "expression": {"argumentTypes": [], "id": 1645, "name": "startBattle", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1702, "src": "2810:11:7", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$", "typeString": "function ()"}}, "id": 1646, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2810:13:7", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1647, "nodeType": "ExpressionStatement", "src": "2810:13:7"}]}}]}, "documentation": null, "id": 1651, "implemented": true, "kind": "function", "modifiers": [], "name": "pickPayerCards", "nodeType": "FunctionDefinition", "parameters": {"id": 1539, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1538, "name": "desiredCards", "nodeType": "VariableDeclaration", "scope": 1651, "src": "1801:27:7", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5]"}, "typeName": {"baseType": {"id": 1535, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1801:4:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1537, "length": {"argumentTypes": null, "hexValue": "35", "id": 1536, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "1806:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_5_by_1", "typeString": "int_const 5"}, "value": "5"}, "nodeType": "ArrayTypeName", "src": "1801:7:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_storage_ptr", "typeString": "uint256[5]"}}, "value": null, "visibility": "internal"}], "src": "1800:29:7"}, "returnParameters": {"id": 1540, "nodeType": "ParameterList", "parameters": [], "src": "1837:0:7"}, "scope": 1751, "src": "1777:1063:7", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"anonymous": false, "documentation": null, "id": 1661, "name": "PickPayerCards", "nodeType": "EventDefinition", "parameters": {"id": 1660, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1655, "indexed": false, "name": "desiredCards", "nodeType": "VariableDeclaration", "scope": 1661, "src": "2867:20:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5]"}, "typeName": {"baseType": {"id": 1652, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2867:4:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1654, "length": {"argumentTypes": null, "hexValue": "35", "id": 1653, "isConstant": false, "isLValue": false, "isPure": false, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2872:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_5_by_1", "typeString": "int_const 5"}, "value": "5"}, "nodeType": "ArrayTypeName", "src": "2867:7:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_storage_ptr", "typeString": "uint256[5]"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1659, "indexed": false, "name": "pickedCards", "nodeType": "VariableDeclaration", "scope": 1661, "src": "2889:19:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3]"}, "typeName": {"baseType": {"id": 1656, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2889:4:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1658, "length": {"argumentTypes": null, "hexValue": "33", "id": 1657, "isConstant": false, "isLValue": false, "isPure": false, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2894:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}, "nodeType": "ArrayTypeName", "src": "2889:7:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_storage_ptr", "typeString": "uint256[3]"}}, "value": null, "visibility": "internal"}], "src": "2866:43:7"}, "src": "2846:64:7"}, {"body": {"id": 1701, "nodeType": "Block", "src": "2948:404:7", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1665, "name": "cardsPicked", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1427, "src": "2966:11:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"argumentTypes": null, "hexValue": "426f746820706c6179657273206861766520746f2068617665207069636b6564207468656972206361726473", "id": 1666, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "2979:46:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_1c4d5ad8ef920126ac861be19d2936577f7e870fe8935076c30541a5014aacca", "typeString": "literal_string \"Both players have to have picked their cards\""}, "value": "Both players have to have picked their cards"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_1c4d5ad8ef920126ac861be19d2936577f7e870fe8935076c30541a5014aacca", "typeString": "literal_string \"Both players have to have picked their cards\""}], "id": 1664, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2239, "src": "2958:7:7", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1667, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2958:68:7", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1668, "nodeType": "ExpressionStatement", "src": "2958:68:7"}, {"assignments": [1670], "declarations": [{"constant": false, "id": 1670, "name": "player1MaxSpeed", "nodeType": "VariableDeclaration", "scope": 1701, "src": "3037:22:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1669, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3037:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 1677, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1672, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "3075:11:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 1674, "indexExpression": {"argumentTypes": null, "id": 1673, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "3087:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3075:20:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 1675, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "3075:32:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}], "id": 1671, "name": "calcMaxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1750, "src": "3062:12:7", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1409_memory_$dyn_memory_ptr_$returns$_t_uint16_$", "typeString": "function (struct PlayerCardsPick.PlayerCard memory[] memory) returns (uint16)"}}, "id": 1676, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3062:46:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "VariableDeclarationStatement", "src": "3037:71:7"}, {"assignments": [1679], "declarations": [{"constant": false, "id": 1679, "name": "player2MaxSpeed", "nodeType": "VariableDeclaration", "scope": 1701, "src": "3118:22:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1678, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3118:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 1686, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1681, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1425, "src": "3156:11:7", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1415_storage_$", "typeString": "mapping(address => struct PlayerCardsPick.PlayerDeck storage ref)"}}, "id": 1683, "indexExpression": {"argumentTypes": null, "id": 1682, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "3168:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3156:20:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1415_storage", "typeString": "struct PlayerCardsPick.PlayerDeck storage ref"}}, "id": 1684, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1412, "src": "3156:32:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage", "typeString": "struct PlayerCardsPick.PlayerCard storage ref[] storage ref"}], "id": 1680, "name": "calcMaxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1750, "src": "3143:12:7", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1409_memory_$dyn_memory_ptr_$returns$_t_uint16_$", "typeString": "function (struct PlayerCardsPick.PlayerCard memory[] memory) returns (uint16)"}}, "id": 1685, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3143:46:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "VariableDeclarationStatement", "src": "3118:71:7"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 1689, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1687, "name": "player1MaxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1670, "src": "3204:15:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"argumentTypes": null, "id": 1688, "name": "player2MaxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1679, "src": "3223:15:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "3204:34:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 1699, "nodeType": "Block", "src": "3300:46:7", "statements": [{"expression": {"argumentTypes": null, "id": 1697, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1695, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1429, "src": "3314:11:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 1696, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1421, "src": "3328:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "3314:21:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1698, "nodeType": "ExpressionStatement", "src": "3314:21:7"}]}, "id": 1700, "nodeType": "IfStatement", "src": "3200:146:7", "trueBody": {"id": 1694, "nodeType": "Block", "src": "3240:46:7", "statements": [{"expression": {"argumentTypes": null, "id": 1692, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1690, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1429, "src": "3254:11:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 1691, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1419, "src": "3268:7:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "3254:21:7", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1693, "nodeType": "ExpressionStatement", "src": "3254:21:7"}]}}]}, "documentation": null, "id": 1702, "implemented": true, "kind": "function", "modifiers": [], "name": "startBattle", "nodeType": "FunctionDefinition", "parameters": {"id": 1662, "nodeType": "ParameterList", "parameters": [], "src": "2936:2:7"}, "returnParameters": {"id": 1663, "nodeType": "ParameterList", "parameters": [], "src": "2948:0:7"}, "scope": 1751, "src": "2916:436:7", "stateMutability": "nonpayable", "superFunction": null, "visibility": "internal"}, {"body": {"id": 1749, "nodeType": "Block", "src": "3437:303:7", "statements": [{"assignments": [1711], "declarations": [{"constant": false, "id": 1711, "name": "maxSpeed", "nodeType": "VariableDeclaration", "scope": 1749, "src": "3448:15:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1710, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3448:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 1713, "initialValue": {"argumentTypes": null, "hexValue": "30", "id": 1712, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3466:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "3448:19:7"}, {"body": {"id": 1745, "nodeType": "Block", "src": "3520:188:7", "statements": [{"assignments": [1726], "declarations": [{"constant": false, "id": 1726, "name": "cardSpeed", "nodeType": "VariableDeclaration", "scope": 1745, "src": "3535:16:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1725, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3535:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 1735, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1729, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1705, "src": "3576:11:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_memory_$dyn_memory_ptr", "typeString": "struct PlayerCardsPick.PlayerCard memory[] memory"}}, "id": 1731, "indexExpression": {"argumentTypes": null, "id": 1730, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1715, "src": "3588:1:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3576:14:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_memory", "typeString": "struct PlayerCardsPick.PlayerCard memory"}}, "id": 1732, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cardId", "nodeType": "MemberAccess", "referencedDeclaration": 1398, "src": "3576:21:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"argumentTypes": null, "id": 1727, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1417, "src": "3554:13:7", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 1728, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getCard", "nodeType": "MemberAccess", "referencedDeclaration": 1178, "src": "3554:21:7", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_struct$_Card_$1297_memory_ptr_$", "typeString": "function (uint256) external returns (struct CryptoBeastsTypes.Card memory)"}}, "id": 1733, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3554:44:7", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1734, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "speed", "nodeType": "MemberAccess", "referencedDeclaration": 1292, "src": "3554:50:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "VariableDeclarationStatement", "src": "3535:69:7"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 1738, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1736, "name": "cardSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1726, "src": "3623:9:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "id": 1737, "name": "maxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1711, "src": "3635:8:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "3623:20:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1744, "nodeType": "IfStatement", "src": "3619:79:7", "trueBody": {"id": 1743, "nodeType": "Block", "src": "3645:53:7", "statements": [{"expression": {"argumentTypes": null, "id": 1741, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1739, "name": "maxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1711, "src": "3663:8:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 1740, "name": "cardSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1726, "src": "3674:9:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "3663:20:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 1742, "nodeType": "ExpressionStatement", "src": "3663:20:7"}]}}]}, "condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1721, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1718, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1715, "src": "3493:1:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1719, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1705, "src": "3495:11:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_memory_$dyn_memory_ptr", "typeString": "struct PlayerCardsPick.PlayerCard memory[] memory"}}, "id": 1720, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "3495:18:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3493:20:7", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 1746, "initializationExpression": {"assignments": [1715], "declarations": [{"constant": false, "id": 1715, "name": "i", "nodeType": "VariableDeclaration", "scope": 1746, "src": "3483:6:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1714, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3483:4:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "id": 1717, "initialValue": {"argumentTypes": null, "hexValue": "30", "id": 1716, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3490:1:7", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "3483:8:7"}, "loopExpression": {"expression": {"argumentTypes": null, "id": 1723, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "3515:3:7", "subExpression": {"argumentTypes": null, "id": 1722, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1715, "src": "3515:1:7", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1724, "nodeType": "ExpressionStatement", "src": "3515:3:7"}, "nodeType": "ForStatement", "src": "3478:230:7"}, {"expression": {"argumentTypes": null, "id": 1747, "name": "maxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1711, "src": "3725:8:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "functionReturnParameters": 1709, "id": 1748, "nodeType": "Return", "src": "3718:15:7"}]}, "documentation": null, "id": 1750, "implemented": true, "kind": "function", "modifiers": [], "name": "calcMaxSpeed", "nodeType": "FunctionDefinition", "parameters": {"id": 1706, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1705, "name": "playerCards", "nodeType": "VariableDeclaration", "scope": 1750, "src": "3380:31:7", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_memory_$dyn_memory_ptr", "typeString": "struct PlayerCardsPick.PlayerCard[]"}, "typeName": {"baseType": {"contractScope": null, "id": 1703, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1409, "src": "3380:10:7", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1409_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard"}}, "id": 1704, "length": null, "nodeType": "ArrayTypeName", "src": "3380:12:7", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1409_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsPick.PlayerCard[]"}}, "value": null, "visibility": "internal"}], "src": "3379:33:7"}, "returnParameters": {"id": 1709, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1708, "name": "", "nodeType": "VariableDeclaration", "scope": 1750, "src": "3429:6:7", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1707, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3429:6:7", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "src": "3428:8:7"}, "scope": 1751, "src": "3358:382:7", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}], "scope": 1752, "src": "154:3588:7"}], "src": "0:3742:7"}, "id": 7}, "contracts/PlayerCardsRandom.sol": {"ast": {"absolutePath": "contracts/PlayerCardsRandom.sol", "exportedSymbols": {"PlayerCardsRandom": [2220]}, "id": 2221, "nodeType": "SourceUnit", "nodes": [{"id": 1753, "literals": ["solidity", "^", "0.5", ".2"], "nodeType": "PragmaDirective", "src": "0:23:8"}, {"id": 1754, "literals": ["experimental", "ABIEncoderV2"], "nodeType": "PragmaDirective", "src": "24:33:8"}, {"absolutePath": "contracts/CryptoBeastsTypes.sol", "file": "./CryptoBeastsTypes.sol", "id": 1756, "nodeType": "ImportDirective", "scope": 2221, "sourceUnit": 1299, "src": "59:58:8", "symbolAliases": [{"foreign": 1755, "local": null}], "unitAlias": ""}, {"absolutePath": "contracts/Cards.sol", "file": "./Cards.sol", "id": 1758, "nodeType": "ImportDirective", "scope": 2221, "sourceUnit": 1180, "src": "118:34:8", "symbolAliases": [{"foreign": 1757, "local": null}], "unitAlias": ""}, {"baseContracts": [{"arguments": null, "baseName": {"contractScope": null, "id": 1759, "name": "CryptoBeastsTypes", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1298, "src": "184:17:8", "typeDescriptions": {"typeIdentifier": "t_contract$_CryptoBeastsTypes_$1298", "typeString": "contract CryptoBeastsTypes"}}, "id": 1760, "nodeType": "InheritanceSpecifier", "src": "184:17:8"}], "contractDependencies": [1298], "contractKind": "contract", "documentation": null, "fullyImplemented": true, "id": 2220, "linearizedBaseContracts": [2220, 1298], "name": "PlayerCardsRandom", "nodeType": "ContractDefinition", "nodes": [{"canonicalName": "PlayerCardsRandom.PlayerCard", "id": 1773, "members": [{"constant": false, "id": 1762, "name": "cardId", "nodeType": "VariableDeclaration", "scope": 1773, "src": "237:11:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1761, "name": "uint", "nodeType": "ElementaryTypeName", "src": "237:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1764, "name": "health", "nodeType": "VariableDeclaration", "scope": 1773, "src": "259:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1763, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "259:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1766, "name": "defence", "nodeType": "VariableDeclaration", "scope": 1773, "src": "282:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1765, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "282:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1768, "name": "mana", "nodeType": "VariableDeclaration", "scope": 1773, "src": "306:11:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1767, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "306:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1770, "name": "attack", "nodeType": "VariableDeclaration", "scope": 1773, "src": "328:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1769, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "328:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1772, "name": "specialAttack", "nodeType": "VariableDeclaration", "scope": 1773, "src": "351:20:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 1771, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "351:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "name": "PlayerCard", "nodeType": "StructDefinition", "scope": 2220, "src": "209:169:8", "visibility": "public"}, {"canonicalName": "PlayerCardsRandom.PlayerDeck", "id": 1779, "members": [{"constant": false, "id": 1776, "name": "playerCards", "nodeType": "VariableDeclaration", "scope": 1779, "src": "412:24:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard[]"}, "typeName": {"baseType": {"contractScope": null, "id": 1774, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1773, "src": "412:10:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}}, "id": 1775, "length": null, "nodeType": "ArrayTypeName", "src": "412:12:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard[]"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1778, "name": "currentCard", "nodeType": "VariableDeclaration", "scope": 1779, "src": "446:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 1777, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "446:5:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "value": null, "visibility": "internal"}], "name": "PlayerDeck", "nodeType": "StructDefinition", "scope": 2220, "src": "384:86:8", "visibility": "public"}, {"constant": false, "id": 1781, "name": "cardsContract", "nodeType": "VariableDeclaration", "scope": 2220, "src": "476:19:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}, "typeName": {"contractScope": null, "id": 1780, "name": "Cards", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1179, "src": "476:5:8", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1783, "name": "player1", "nodeType": "VariableDeclaration", "scope": 2220, "src": "501:22:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1782, "name": "address", "nodeType": "ElementaryTypeName", "src": "501:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "public"}, {"constant": false, "id": 1785, "name": "player2", "nodeType": "VariableDeclaration", "scope": 2220, "src": "529:22:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1784, "name": "address", "nodeType": "ElementaryTypeName", "src": "529:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "public"}, {"constant": false, "id": 1789, "name": "playerDecks", "nodeType": "VariableDeclaration", "scope": 2220, "src": "557:50:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck)"}, "typeName": {"id": 1788, "keyType": {"id": 1786, "name": "address", "nodeType": "ElementaryTypeName", "src": "566:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Mapping", "src": "557:31:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck)"}, "valueType": {"contractScope": null, "id": 1787, "name": "PlayerDeck", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1779, "src": "577:10:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck"}}}, "value": null, "visibility": "public"}, {"constant": false, "id": 1791, "name": "cardsPicked", "nodeType": "VariableDeclaration", "scope": 2220, "src": "613:23:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 1790, "name": "bool", "nodeType": "ElementaryTypeName", "src": "613:4:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "value": null, "visibility": "public"}, {"constant": false, "id": 1793, "name": "playersTurn", "nodeType": "VariableDeclaration", "scope": 2220, "src": "642:26:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1792, "name": "address", "nodeType": "ElementaryTypeName", "src": "642:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "public"}, {"body": {"id": 1816, "nodeType": "Block", "src": "752:109:8", "statements": [{"expression": {"argumentTypes": null, "id": 1804, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1802, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "762:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 1803, "name": "_player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1795, "src": "772:8:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "762:18:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1805, "nodeType": "ExpressionStatement", "src": "762:18:8"}, {"expression": {"argumentTypes": null, "id": 1808, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1806, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "790:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 1807, "name": "_player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1797, "src": "800:8:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "790:18:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 1809, "nodeType": "ExpressionStatement", "src": "790:18:8"}, {"expression": {"argumentTypes": null, "id": 1814, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1810, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1781, "src": "819:13:8", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1812, "name": "cardsAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1799, "src": "841:12:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 1811, "name": "Cards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1179, "src": "835:5:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Cards_$1179_$", "typeString": "type(contract Cards)"}}, "id": 1813, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "835:19:8", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "src": "819:35:8", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 1815, "nodeType": "ExpressionStatement", "src": "819:35:8"}]}, "documentation": null, "id": 1817, "implemented": true, "kind": "constructor", "modifiers": [], "name": "", "nodeType": "FunctionDefinition", "parameters": {"id": 1800, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1795, "name": "_player1", "nodeType": "VariableDeclaration", "scope": 1817, "src": "687:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1794, "name": "address", "nodeType": "ElementaryTypeName", "src": "687:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1797, "name": "_player2", "nodeType": "VariableDeclaration", "scope": 1817, "src": "705:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1796, "name": "address", "nodeType": "ElementaryTypeName", "src": "705:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1799, "name": "cardsAddress", "nodeType": "VariableDeclaration", "scope": 1817, "src": "723:20:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1798, "name": "address", "nodeType": "ElementaryTypeName", "src": "723:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "686:58:8"}, "returnParameters": {"id": 1801, "nodeType": "ParameterList", "parameters": [], "src": "752:0:8"}, "scope": 2220, "src": "675:186:8", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 1849, "nodeType": "Block", "src": "956:283:8", "statements": [{"assignments": [1827], "declarations": [{"constant": false, "id": 1827, "name": "rand", "nodeType": "VariableDeclaration", "scope": 1849, "src": "967:9:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1826, "name": "uint", "nodeType": "ElementaryTypeName", "src": "967:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "id": 1844, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "arguments": [{"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1832, "name": "pickNumber", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1821, "src": "1062:10:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1837, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1834, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2225, "src": "1104:5:8", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 1835, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "number", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "1104:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 1836, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "1119:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "1104:16:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 1833, "name": "blockhash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2226, "src": "1094:9:8", "typeDescriptions": {"typeIdentifier": "t_function_blockhash_view$_t_uint256_$returns$_t_bytes32_$", "typeString": "function (uint256) view returns (bytes32)"}}, "id": 1838, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1094:27:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1839, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "1143:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1840, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "1143:10:8", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_address_payable", "typeString": "address payable"}], "expression": {"argumentTypes": null, "id": 1830, "name": "abi", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2222, "src": "1024:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_abi", "typeString": "abi"}}, "id": 1831, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "encodePacked", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "1024:16:8", "typeDescriptions": {"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$", "typeString": "function () pure returns (bytes memory)"}}, "id": 1841, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1024:147:8", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}], "id": 1829, "name": "keccak256", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2229, "src": "997:9:8", "typeDescriptions": {"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$", "typeString": "function (bytes memory) pure returns (bytes32)"}}, "id": 1842, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "997:188:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 1828, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "979:4:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": "uint"}, "id": 1843, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "979:216:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "967:228:8"}, {"expression": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1847, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1845, "name": "rand", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1827, "src": "1212:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "%", "rightExpression": {"argumentTypes": null, "id": 1846, "name": "numberOfPicks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1819, "src": "1219:13:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "1212:20:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 1825, "id": 1848, "nodeType": "Return", "src": "1205:27:8"}]}, "documentation": null, "id": 1850, "implemented": true, "kind": "function", "modifiers": [], "name": "_randomNumber", "nodeType": "FunctionDefinition", "parameters": {"id": 1822, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1819, "name": "numberOfPicks", "nodeType": "VariableDeclaration", "scope": 1850, "src": "890:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1818, "name": "uint", "nodeType": "ElementaryTypeName", "src": "890:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1821, "name": "pickNumber", "nodeType": "VariableDeclaration", "scope": 1850, "src": "910:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 1820, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "910:5:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "value": null, "visibility": "internal"}], "src": "889:38:8"}, "returnParameters": {"id": 1825, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1824, "name": "", "nodeType": "VariableDeclaration", "scope": 1850, "src": "950:4:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1823, "name": "uint", "nodeType": "ElementaryTypeName", "src": "950:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "src": "949:6:8"}, "scope": 2220, "src": "867:372:8", "stateMutability": "view", "superFunction": null, "visibility": "private"}, {"body": {"id": 1883, "nodeType": "Block", "src": "1325:335:8", "statements": [{"assignments": [1859], "declarations": [{"constant": false, "id": 1859, "name": "card", "nodeType": "VariableDeclaration", "scope": 1883, "src": "1336:16:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card"}, "typeName": {"contractScope": null, "id": 1858, "name": "Card", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1297, "src": "1336:4:8", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_storage_ptr", "typeString": "struct CryptoBeastsTypes.Card"}}, "value": null, "visibility": "internal"}], "id": 1864, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1862, "name": "cardId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1855, "src": "1377:6:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"argumentTypes": null, "id": 1860, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1781, "src": "1355:13:8", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 1861, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getCard", "nodeType": "MemberAccess", "referencedDeclaration": 1178, "src": "1355:21:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_struct$_Card_$1297_memory_ptr_$", "typeString": "function (uint256) external returns (struct CryptoBeastsTypes.Card memory)"}}, "id": 1863, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1355:29:8", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "nodeType": "VariableDeclarationStatement", "src": "1336:48:8"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 1869, "name": "cardId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1855, "src": "1446:6:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1870, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1859, "src": "1474:4:8", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1871, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "initHealth", "nodeType": "MemberAccess", "referencedDeclaration": 1286, "src": "1474:15:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1872, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1859, "src": "1512:4:8", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1873, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "initDefence", "nodeType": "MemberAccess", "referencedDeclaration": 1288, "src": "1512:16:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1874, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1859, "src": "1548:4:8", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1875, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "initMana", "nodeType": "MemberAccess", "referencedDeclaration": 1290, "src": "1548:13:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1876, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1859, "src": "1583:4:8", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1877, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "attack", "nodeType": "MemberAccess", "referencedDeclaration": 1294, "src": "1583:11:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1878, "name": "card", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1859, "src": "1623:4:8", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 1879, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "specialAttack", "nodeType": "MemberAccess", "referencedDeclaration": 1296, "src": "1623:18:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 1868, "name": "PlayerCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1773, "src": "1413:10:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_struct$_PlayerCard_$1773_storage_ptr_$", "typeString": "type(struct PlayerCardsRandom.PlayerCard storage pointer)"}}, "id": 1880, "isConstant": false, "isLValue": false, "isPure": false, "kind": "structConstructorCall", "lValueRequested": false, "names": ["cardId", "health", "defence", "mana", "attack", "specialAttack"], "nodeType": "FunctionCall", "src": "1413:239:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_memory", "typeString": "struct PlayerCardsRandom.PlayerCard memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_PlayerCard_$1773_memory", "typeString": "struct PlayerCardsRandom.PlayerCard memory"}], "expression": {"argumentTypes": null, "id": 1865, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1853, "src": "1395:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}}, "id": 1867, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "push", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "1395:16:8", "typeDescriptions": {"typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_PlayerCard_$1773_storage_$returns$_t_uint256_$", "typeString": "function (struct PlayerCardsRandom.PlayerCard storage ref) returns (uint256)"}}, "id": 1881, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1395:258:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1882, "nodeType": "ExpressionStatement", "src": "1395:258:8"}]}, "documentation": null, "id": 1884, "implemented": true, "kind": "function", "modifiers": [], "name": "_setPlayerCard", "nodeType": "FunctionDefinition", "parameters": {"id": 1856, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1853, "name": "playerCards", "nodeType": "VariableDeclaration", "scope": 1884, "src": "1269:32:8", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard[]"}, "typeName": {"baseType": {"contractScope": null, "id": 1851, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1773, "src": "1269:10:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}}, "id": 1852, "length": null, "nodeType": "ArrayTypeName", "src": "1269:12:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard[]"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 1855, "name": "cardId", "nodeType": "VariableDeclaration", "scope": 1884, "src": "1303:11:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1854, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1303:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "src": "1268:47:8"}, "returnParameters": {"id": 1857, "nodeType": "ParameterList", "parameters": [], "src": "1325:0:8"}, "scope": 2220, "src": "1245:415:8", "stateMutability": "nonpayable", "superFunction": null, "visibility": "internal"}, {"body": {"id": 1905, "nodeType": "Block", "src": "1752:129:8", "statements": [{"assignments": [1892], "declarations": [{"constant": false, "id": 1892, "name": "deckNumber", "nodeType": "VariableDeclaration", "scope": 1905, "src": "1763:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 1891, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "1763:5:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "value": null, "visibility": "internal"}], "id": 1897, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1893, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1782:11:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 1895, "indexExpression": {"argumentTypes": null, "id": 1894, "name": "player", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1886, "src": "1794:6:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1782:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 1896, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "1782:31:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "VariableDeclarationStatement", "src": "1763:50:8"}, {"expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1898, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1831:11:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 1900, "indexExpression": {"argumentTypes": null, "id": 1899, "name": "player", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1886, "src": "1843:6:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1831:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 1901, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "1831:31:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 1903, "indexExpression": {"argumentTypes": null, "id": 1902, "name": "deckNumber", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1892, "src": "1863:10:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1831:43:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, "functionReturnParameters": 1890, "id": 1904, "nodeType": "Return", "src": "1824:50:8"}]}, "documentation": null, "id": 1906, "implemented": true, "kind": "function", "modifiers": [], "name": "getPlayerCurrentCard", "nodeType": "FunctionDefinition", "parameters": {"id": 1887, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1886, "name": "player", "nodeType": "VariableDeclaration", "scope": 1906, "src": "1696:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1885, "name": "address", "nodeType": "ElementaryTypeName", "src": "1696:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "1695:16:8"}, "returnParameters": {"id": 1890, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1889, "name": "", "nodeType": "VariableDeclaration", "scope": 1906, "src": "1733:17:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_memory_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}, "typeName": {"contractScope": null, "id": 1888, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1773, "src": "1733:10:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}}, "value": null, "visibility": "internal"}], "src": "1732:19:8"}, "scope": 2220, "src": "1666:215:8", "stateMutability": "view", "superFunction": null, "visibility": "public"}, {"body": {"id": 1918, "nodeType": "Block", "src": "1968:55:8", "statements": [{"expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1913, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "1985:11:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 1915, "indexExpression": {"argumentTypes": null, "id": 1914, "name": "player", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1908, "src": "1997:6:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "1985:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 1916, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCard", "nodeType": "MemberAccess", "referencedDeclaration": 1778, "src": "1985:31:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "functionReturnParameters": 1912, "id": 1917, "nodeType": "Return", "src": "1978:38:8"}]}, "documentation": null, "id": 1919, "implemented": true, "kind": "function", "modifiers": [], "name": "getPlayersCurrentCardNumber", "nodeType": "FunctionDefinition", "parameters": {"id": 1909, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1908, "name": "player", "nodeType": "VariableDeclaration", "scope": 1919, "src": "1924:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1907, "name": "address", "nodeType": "ElementaryTypeName", "src": "1924:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "1923:16:8"}, "returnParameters": {"id": 1912, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1911, "name": "", "nodeType": "VariableDeclaration", "scope": 1919, "src": "1961:5:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 1910, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "1961:5:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "value": null, "visibility": "internal"}], "src": "1960:7:8"}, "scope": 2220, "src": "1887:136:8", "stateMutability": "view", "superFunction": null, "visibility": "public"}, {"body": {"id": 2107, "nodeType": "Block", "src": "2089:1833:8", "statements": [{"assignments": [1929], "declarations": [{"constant": false, "id": 1929, "name": "playerCards", "nodeType": "VariableDeclaration", "scope": 2107, "src": "2100:32:8", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard[]"}, "typeName": {"baseType": {"contractScope": null, "id": 1927, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1773, "src": "2100:10:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}}, "id": 1928, "length": null, "nodeType": "ArrayTypeName", "src": "2100:12:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard[]"}}, "value": null, "visibility": "internal"}], "id": 1935, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1930, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "2135:11:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 1933, "indexExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1931, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "2147:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1932, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2147:10:8", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2135:23:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 1934, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "2135:35:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "2100:70:8"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1940, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1937, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1929, "src": "2188:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}}, "id": 1938, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2188:18:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 1939, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2210:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "2188:23:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"argumentTypes": null, "hexValue": "506c617965722068617320616c7265616479207069636b6564207468656972206361726473", "id": 1941, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "2213:39:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_7ba0bdf7d814c46684745a1c8fc7c5d8f934a607a02a1e47fb433bd627441e76", "typeString": "literal_string \"Player has already picked their cards\""}, "value": "Player has already picked their cards"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_7ba0bdf7d814c46684745a1c8fc7c5d8f934a607a02a1e47fb433bd627441e76", "typeString": "literal_string \"Player has already picked their cards\""}], "id": 1936, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2239, "src": "2180:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1942, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2180:73:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1943, "nodeType": "ExpressionStatement", "src": "2180:73:8"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 1947, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1944, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "2268:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1945, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "2279:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1946, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2279:10:8", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "2268:21:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 1965, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 1962, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "2433:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 1963, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2235, "src": "2444:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1964, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2444:10:8", "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "2433:21:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 1984, "nodeType": "Block", "src": "2586:75:8", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "5472616e73616374696f6e2073656e646572206d75737420626520706c617965722031206f722032", "id": 1981, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "2607:42:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_ed583cee054b252738069c2580f54910da0df510b9bc4efa21980fb35f90c6c0", "typeString": "literal_string \"Transaction sender must be player 1 or 2\""}, "value": "Transaction sender must be player 1 or 2"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_ed583cee054b252738069c2580f54910da0df510b9bc4efa21980fb35f90c6c0", "typeString": "literal_string \"Transaction sender must be player 1 or 2\""}], "id": 1980, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [2240, 2241], "referencedDeclaration": 2241, "src": "2600:6:8", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 1982, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2600:50:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1983, "nodeType": "ExpressionStatement", "src": "2600:50:8"}]}, "id": 1985, "nodeType": "IfStatement", "src": "2429:232:8", "trueBody": {"id": 1979, "nodeType": "Block", "src": "2456:124:8", "statements": [{"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1972, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1966, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "2474:11:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 1968, "indexExpression": {"argumentTypes": null, "id": 1967, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "2486:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2474:20:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 1969, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "2474:32:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 1970, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2474:39:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 1971, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2516:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "2474:43:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1978, "nodeType": "IfStatement", "src": "2470:100:8", "trueBody": {"id": 1977, "nodeType": "Block", "src": "2519:51:8", "statements": [{"expression": {"argumentTypes": null, "id": 1975, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1973, "name": "cardsPicked", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1791, "src": "2537:11:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "hexValue": "74727565", "id": 1974, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "2551:4:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, "src": "2537:18:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 1976, "nodeType": "ExpressionStatement", "src": "2537:18:8"}]}}]}}, "id": 1986, "nodeType": "IfStatement", "src": "2264:397:8", "trueBody": {"id": 1961, "nodeType": "Block", "src": "2291:124:8", "statements": [{"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1954, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 1948, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "2309:11:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 1950, "indexExpression": {"argumentTypes": null, "id": 1949, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "2321:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2309:20:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 1951, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "2309:32:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}, "id": 1952, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "2309:39:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "30", "id": 1953, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2351:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "2309:43:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 1960, "nodeType": "IfStatement", "src": "2305:100:8", "trueBody": {"id": 1959, "nodeType": "Block", "src": "2354:51:8", "statements": [{"expression": {"argumentTypes": null, "id": 1957, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 1955, "name": "cardsPicked", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1791, "src": "2372:11:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "hexValue": "74727565", "id": 1956, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "2386:4:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, "src": "2372:18:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 1958, "nodeType": "ExpressionStatement", "src": "2372:18:8"}]}}]}}, {"assignments": [1991], "declarations": [{"constant": false, "id": 1991, "name": "pickedCardNumbers", "nodeType": "VariableDeclaration", "scope": 2107, "src": "2671:32:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3]"}, "typeName": {"baseType": {"id": 1989, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2671:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1990, "length": {"argumentTypes": null, "hexValue": "33", "id": 1988, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2676:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}, "nodeType": "ArrayTypeName", "src": "2671:7:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_storage_ptr", "typeString": "uint256[3]"}}, "value": null, "visibility": "internal"}], "id": 1998, "initialValue": {"argumentTypes": null, "components": [{"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "30", "id": 1993, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2712:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 1992, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2707:4:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": "uint"}, "id": 1994, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2707:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "hexValue": "30", "id": 1995, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2716:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"argumentTypes": null, "hexValue": "30", "id": 1996, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2719:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "id": 1997, "isConstant": false, "isInlineArray": true, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "TupleExpression", "src": "2706:15:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2671:50:8"}, {"assignments": [2000], "declarations": [{"constant": false, "id": 2000, "name": "randomPick1", "nodeType": "VariableDeclaration", "scope": 2107, "src": "2761:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1999, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2761:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "id": 2005, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "35", "id": 2002, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2794:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_5_by_1", "typeString": "int_const 5"}, "value": "5"}, {"argumentTypes": null, "hexValue": "31", "id": 2003, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2797:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_5_by_1", "typeString": "int_const 5"}, {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}], "id": 2001, "name": "_randomNumber", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1850, "src": "2780:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint8_$returns$_t_uint256_$", "typeString": "function (uint256,uint8) view returns (uint256)"}}, "id": 2004, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2780:19:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "2761:38:8"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 2007, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1929, "src": "2824:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2008, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1923, "src": "2837:12:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, "id": 2010, "indexExpression": {"argumentTypes": null, "id": 2009, "name": "randomPick1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2000, "src": "2850:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2837:25:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 2006, "name": "_setPlayerCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1884, "src": "2809:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer,uint256)"}}, "id": 2011, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2809:54:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 2012, "nodeType": "ExpressionStatement", "src": "2809:54:8"}, {"expression": {"argumentTypes": null, "id": 2020, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2013, "name": "pickedCardNumbers", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1991, "src": "2873:17:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3] memory"}}, "id": 2015, "indexExpression": {"argumentTypes": null, "hexValue": "30", "id": 2014, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2891:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "2873:20:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2016, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1929, "src": "2896:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}}, "id": 2018, "indexExpression": {"argumentTypes": null, "hexValue": "30", "id": 2017, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2908:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2896:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, "id": 2019, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cardId", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "2896:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "2873:44:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 2021, "nodeType": "ExpressionStatement", "src": "2873:44:8"}, {"assignments": [2023], "declarations": [{"constant": false, "id": 2023, "name": "randomPick2", "nodeType": "VariableDeclaration", "scope": 2107, "src": "3054:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 2022, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3054:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "id": 2028, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "hexValue": "3130", "id": 2025, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3087:2:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, {"argumentTypes": null, "hexValue": "32", "id": 2026, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3091:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}], "id": 2024, "name": "_randomNumber", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1850, "src": "3073:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint8_$returns$_t_uint256_$", "typeString": "function (uint256,uint8) view returns (uint256)"}}, "id": 2027, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3073:20:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "3054:39:8"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 2035, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 2031, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 2029, "name": "randomPick1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2000, "src": "3187:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"argumentTypes": null, "id": 2030, "name": "randomPick2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2023, "src": "3202:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3187:26:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 2034, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 2032, "name": "randomPick2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2023, "src": "3229:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "hexValue": "34", "id": 2033, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3243:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_4_by_1", "typeString": "int_const 4"}, "value": "4"}, "src": "3229:15:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "3187:57:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 2060, "nodeType": "Block", "src": "3429:122:8", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 2054, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1929, "src": "3501:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}}, {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2055, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1923, "src": "3514:12:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, "id": 2057, "indexExpression": {"argumentTypes": null, "id": 2056, "name": "randomPick2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2023, "src": "3527:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3514:25:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 2053, "name": "_setPlayerCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1884, "src": "3486:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer,uint256)"}}, "id": 2058, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3486:54:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 2059, "nodeType": "ExpressionStatement", "src": "3486:54:8"}]}, "id": 2061, "nodeType": "IfStatement", "src": "3183:368:8", "trueBody": {"id": 2052, "nodeType": "Block", "src": "3246:169:8", "statements": [{"expression": {"argumentTypes": null, "id": 2045, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 2036, "name": "randomPick2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2023, "src": "3260:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 2042, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "arguments": [], "expression": {"argumentTypes": [], "expression": {"argumentTypes": null, "id": 2038, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1781, "src": "3288:13:8", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 2039, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "cardCount", "nodeType": "MemberAccess", "referencedDeclaration": 1166, "src": "3288:23:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$__$returns$_t_uint256_$", "typeString": "function () external returns (uint256)"}}, "id": 2040, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3288:25:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 2041, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3316:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "3288:29:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "hexValue": "32", "id": 2043, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3319:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}], "id": 2037, "name": "_randomNumber", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1850, "src": "3274:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint8_$returns$_t_uint256_$", "typeString": "function (uint256,uint8) view returns (uint256)"}}, "id": 2044, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3274:47:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3260:61:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 2046, "nodeType": "ExpressionStatement", "src": "3260:61:8"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 2048, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1929, "src": "3379:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}}, {"argumentTypes": null, "id": 2049, "name": "randomPick2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2023, "src": "3392:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 2047, "name": "_setPlayerCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1884, "src": "3364:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer,uint256)"}}, "id": 2050, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3364:40:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 2051, "nodeType": "ExpressionStatement", "src": "3364:40:8"}]}}, {"expression": {"argumentTypes": null, "id": 2069, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2062, "name": "pickedCardNumbers", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1991, "src": "3561:17:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3] memory"}}, "id": 2064, "indexExpression": {"argumentTypes": null, "hexValue": "31", "id": 2063, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3579:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "3561:20:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2065, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1929, "src": "3584:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}}, "id": 2067, "indexExpression": {"argumentTypes": null, "hexValue": "31", "id": 2066, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3596:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3584:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, "id": 2068, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cardId", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "3584:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3561:44:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 2070, "nodeType": "ExpressionStatement", "src": "3561:44:8"}, {"assignments": [2072], "declarations": [{"constant": false, "id": 2072, "name": "randomPick3", "nodeType": "VariableDeclaration", "scope": 2107, "src": "3616:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 2071, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3616:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "id": 2081, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 2078, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "arguments": [], "expression": {"argumentTypes": [], "expression": {"argumentTypes": null, "id": 2074, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1781, "src": "3649:13:8", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 2075, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "cardCount", "nodeType": "MemberAccess", "referencedDeclaration": 1166, "src": "3649:23:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$__$returns$_t_uint256_$", "typeString": "function () external returns (uint256)"}}, "id": 2076, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3649:25:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"argumentTypes": null, "hexValue": "31", "id": 2077, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3677:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "3649:29:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"argumentTypes": null, "hexValue": "33", "id": 2079, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3680:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}], "id": 2073, "name": "_randomNumber", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1850, "src": "3635:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint8_$returns$_t_uint256_$", "typeString": "function (uint256,uint8) view returns (uint256)"}}, "id": 2080, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3635:47:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "3616:66:8"}, {"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 2083, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1929, "src": "3707:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}}, {"argumentTypes": null, "id": 2084, "name": "randomPick3", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2072, "src": "3720:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 2082, "name": "_setPlayerCard", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1884, "src": "3692:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer,uint256)"}}, "id": 2085, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3692:40:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 2086, "nodeType": "ExpressionStatement", "src": "3692:40:8"}, {"expression": {"argumentTypes": null, "id": 2094, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2087, "name": "pickedCardNumbers", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1991, "src": "3743:17:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3] memory"}}, "id": 2089, "indexExpression": {"argumentTypes": null, "hexValue": "32", "id": 2088, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3761:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "3743:20:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2090, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1929, "src": "3766:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage pointer"}}, "id": 2092, "indexExpression": {"argumentTypes": null, "hexValue": "32", "id": 2091, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3778:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3766:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref"}}, "id": 2093, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cardId", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "3766:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3743:44:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 2095, "nodeType": "ExpressionStatement", "src": "3743:44:8"}, {"eventCall": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 2097, "name": "desiredCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1923, "src": "3818:12:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}}, {"argumentTypes": null, "id": 2098, "name": "pickedCardNumbers", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1991, "src": "3832:17:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5] memory"}, {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3] memory"}], "id": 2096, "name": "PickPayerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2118, "src": "3803:14:8", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_array$_t_uint256_$5_memory_ptr_$_t_array$_t_uint256_$3_memory_ptr_$returns$__$", "typeString": "function (uint256[5] memory,uint256[3] memory)"}}, "id": 2099, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3803:47:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 2100, "nodeType": "EmitStatement", "src": "3798:52:8"}, {"condition": {"argumentTypes": null, "id": 2101, "name": "cardsPicked", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1791, "src": "3865:11:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 2106, "nodeType": "IfStatement", "src": "3861:55:8", "trueBody": {"id": 2105, "nodeType": "Block", "src": "3878:38:8", "statements": [{"expression": {"argumentTypes": null, "arguments": [], "expression": {"argumentTypes": [], "id": 2102, "name": "startBattle", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2159, "src": "3892:11:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$", "typeString": "function ()"}}, "id": 2103, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3892:13:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 2104, "nodeType": "ExpressionStatement", "src": "3892:13:8"}]}}]}, "documentation": null, "id": 2108, "implemented": true, "kind": "function", "modifiers": [], "name": "pickPayerCards", "nodeType": "FunctionDefinition", "parameters": {"id": 1924, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1923, "name": "desiredCards", "nodeType": "VariableDeclaration", "scope": 2108, "src": "2053:27:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5]"}, "typeName": {"baseType": {"id": 1920, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2053:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1922, "length": {"argumentTypes": null, "hexValue": "35", "id": 1921, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2058:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_5_by_1", "typeString": "int_const 5"}, "value": "5"}, "nodeType": "ArrayTypeName", "src": "2053:7:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_storage_ptr", "typeString": "uint256[5]"}}, "value": null, "visibility": "internal"}], "src": "2052:29:8"}, "returnParameters": {"id": 1925, "nodeType": "ParameterList", "parameters": [], "src": "2089:0:8"}, "scope": 2220, "src": "2029:1893:8", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"anonymous": false, "documentation": null, "id": 2118, "name": "PickPayerCards", "nodeType": "EventDefinition", "parameters": {"id": 2117, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 2112, "indexed": false, "name": "desiredCards", "nodeType": "VariableDeclaration", "scope": 2118, "src": "3949:20:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_memory_ptr", "typeString": "uint256[5]"}, "typeName": {"baseType": {"id": 2109, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3949:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 2111, "length": {"argumentTypes": null, "hexValue": "35", "id": 2110, "isConstant": false, "isLValue": false, "isPure": false, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3954:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_5_by_1", "typeString": "int_const 5"}, "value": "5"}, "nodeType": "ArrayTypeName", "src": "3949:7:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$5_storage_ptr", "typeString": "uint256[5]"}}, "value": null, "visibility": "internal"}, {"constant": false, "id": 2116, "indexed": false, "name": "pickedCards", "nodeType": "VariableDeclaration", "scope": 2118, "src": "3971:19:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr", "typeString": "uint256[3]"}, "typeName": {"baseType": {"id": 2113, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3971:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 2115, "length": {"argumentTypes": null, "hexValue": "33", "id": 2114, "isConstant": false, "isLValue": false, "isPure": false, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3976:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}, "nodeType": "ArrayTypeName", "src": "3971:7:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$3_storage_ptr", "typeString": "uint256[3]"}}, "value": null, "visibility": "internal"}], "src": "3948:43:8"}, "src": "3928:64:8"}, {"body": {"id": 2158, "nodeType": "Block", "src": "4030:404:8", "statements": [{"expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "id": 2122, "name": "cardsPicked", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1791, "src": "4048:11:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"argumentTypes": null, "hexValue": "426f746820706c6179657273206861766520746f2068617665207069636b6564207468656972206361726473", "id": 2123, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "4061:46:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_stringliteral_1c4d5ad8ef920126ac861be19d2936577f7e870fe8935076c30541a5014aacca", "typeString": "literal_string \"Both players have to have picked their cards\""}, "value": "Both players have to have picked their cards"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_1c4d5ad8ef920126ac861be19d2936577f7e870fe8935076c30541a5014aacca", "typeString": "literal_string \"Both players have to have picked their cards\""}], "id": 2121, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [2238, 2239], "referencedDeclaration": 2239, "src": "4040:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 2124, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4040:68:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 2125, "nodeType": "ExpressionStatement", "src": "4040:68:8"}, {"assignments": [2127], "declarations": [{"constant": false, "id": 2127, "name": "player1MaxSpeed", "nodeType": "VariableDeclaration", "scope": 2158, "src": "4119:22:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 2126, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4119:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 2134, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2129, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "4157:11:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 2131, "indexExpression": {"argumentTypes": null, "id": 2130, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "4169:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4157:20:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 2132, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "4157:32:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}], "id": 2128, "name": "calcMaxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2207, "src": "4144:12:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1773_memory_$dyn_memory_ptr_$returns$_t_uint16_$", "typeString": "function (struct PlayerCardsRandom.PlayerCard memory[] memory) returns (uint16)"}}, "id": 2133, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4144:46:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "VariableDeclarationStatement", "src": "4119:71:8"}, {"assignments": [2136], "declarations": [{"constant": false, "id": 2136, "name": "player2MaxSpeed", "nodeType": "VariableDeclaration", "scope": 2158, "src": "4200:22:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 2135, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4200:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 2143, "initialValue": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2138, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "4238:11:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 2140, "indexExpression": {"argumentTypes": null, "id": 2139, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "4250:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4238:20:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "id": 2141, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "playerCards", "nodeType": "MemberAccess", "referencedDeclaration": 1776, "src": "4238:32:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage", "typeString": "struct PlayerCardsRandom.PlayerCard storage ref[] storage ref"}], "id": 2137, "name": "calcMaxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2207, "src": "4225:12:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_PlayerCard_$1773_memory_$dyn_memory_ptr_$returns$_t_uint16_$", "typeString": "function (struct PlayerCardsRandom.PlayerCard memory[] memory) returns (uint16)"}}, "id": 2142, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4225:46:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "VariableDeclarationStatement", "src": "4200:71:8"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 2146, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 2144, "name": "player1MaxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2127, "src": "4286:15:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"argumentTypes": null, "id": 2145, "name": "player2MaxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2136, "src": "4305:15:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4286:34:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 2156, "nodeType": "Block", "src": "4382:46:8", "statements": [{"expression": {"argumentTypes": null, "id": 2154, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 2152, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1793, "src": "4396:11:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 2153, "name": "player2", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1785, "src": "4410:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "4396:21:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 2155, "nodeType": "ExpressionStatement", "src": "4396:21:8"}]}, "id": 2157, "nodeType": "IfStatement", "src": "4282:146:8", "trueBody": {"id": 2151, "nodeType": "Block", "src": "4322:46:8", "statements": [{"expression": {"argumentTypes": null, "id": 2149, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 2147, "name": "playersTurn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1793, "src": "4336:11:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 2148, "name": "player1", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1783, "src": "4350:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "4336:21:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 2150, "nodeType": "ExpressionStatement", "src": "4336:21:8"}]}}]}, "documentation": null, "id": 2159, "implemented": true, "kind": "function", "modifiers": [], "name": "startBattle", "nodeType": "FunctionDefinition", "parameters": {"id": 2119, "nodeType": "ParameterList", "parameters": [], "src": "4018:2:8"}, "returnParameters": {"id": 2120, "nodeType": "ParameterList", "parameters": [], "src": "4030:0:8"}, "scope": 2220, "src": "3998:436:8", "stateMutability": "nonpayable", "superFunction": null, "visibility": "internal"}, {"body": {"id": 2206, "nodeType": "Block", "src": "4519:303:8", "statements": [{"assignments": [2168], "declarations": [{"constant": false, "id": 2168, "name": "maxSpeed", "nodeType": "VariableDeclaration", "scope": 2206, "src": "4530:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 2167, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4530:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 2170, "initialValue": {"argumentTypes": null, "hexValue": "30", "id": 2169, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4548:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "4530:19:8"}, {"body": {"id": 2202, "nodeType": "Block", "src": "4602:188:8", "statements": [{"assignments": [2183], "declarations": [{"constant": false, "id": 2183, "name": "cardSpeed", "nodeType": "VariableDeclaration", "scope": 2202, "src": "4617:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 2182, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4617:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "id": 2192, "initialValue": {"argumentTypes": null, "expression": {"argumentTypes": null, "arguments": [{"argumentTypes": null, "expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2186, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2162, "src": "4658:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_memory_$dyn_memory_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard memory[] memory"}}, "id": 2188, "indexExpression": {"argumentTypes": null, "id": 2187, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2172, "src": "4670:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4658:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_memory", "typeString": "struct PlayerCardsRandom.PlayerCard memory"}}, "id": 2189, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cardId", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "4658:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"argumentTypes": null, "id": 2184, "name": "cardsContract", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1781, "src": "4636:13:8", "typeDescriptions": {"typeIdentifier": "t_contract$_Cards_$1179", "typeString": "contract Cards"}}, "id": 2185, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getCard", "nodeType": "MemberAccess", "referencedDeclaration": 1178, "src": "4636:21:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_struct$_Card_$1297_memory_ptr_$", "typeString": "function (uint256) external returns (struct CryptoBeastsTypes.Card memory)"}}, "id": 2190, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4636:44:8", "typeDescriptions": {"typeIdentifier": "t_struct$_Card_$1297_memory_ptr", "typeString": "struct CryptoBeastsTypes.Card memory"}}, "id": 2191, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "speed", "nodeType": "MemberAccess", "referencedDeclaration": 1292, "src": "4636:50:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "VariableDeclarationStatement", "src": "4617:69:8"}, {"condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "id": 2195, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 2193, "name": "cardSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2183, "src": "4705:9:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"argumentTypes": null, "id": 2194, "name": "maxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2168, "src": "4717:8:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4705:20:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": null, "id": 2201, "nodeType": "IfStatement", "src": "4701:79:8", "trueBody": {"id": 2200, "nodeType": "Block", "src": "4727:53:8", "statements": [{"expression": {"argumentTypes": null, "id": 2198, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"argumentTypes": null, "id": 2196, "name": "maxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2168, "src": "4745:8:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"argumentTypes": null, "id": 2197, "name": "cardSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2183, "src": "4756:9:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "4745:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "id": 2199, "nodeType": "ExpressionStatement", "src": "4745:20:8"}]}}]}, "condition": {"argumentTypes": null, "commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 2178, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"argumentTypes": null, "id": 2175, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2172, "src": "4575:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"argumentTypes": null, "expression": {"argumentTypes": null, "id": 2176, "name": "playerCards", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2162, "src": "4577:11:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_memory_$dyn_memory_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard memory[] memory"}}, "id": 2177, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "referencedDeclaration": null, "src": "4577:18:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4575:20:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 2203, "initializationExpression": {"assignments": [2172], "declarations": [{"constant": false, "id": 2172, "name": "i", "nodeType": "VariableDeclaration", "scope": 2203, "src": "4565:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 2171, "name": "uint", "nodeType": "ElementaryTypeName", "src": "4565:4:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": null, "visibility": "internal"}], "id": 2174, "initialValue": {"argumentTypes": null, "hexValue": "30", "id": 2173, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4572:1:8", "subdenomination": null, "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "4565:8:8"}, "loopExpression": {"expression": {"argumentTypes": null, "id": 2180, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "4597:3:8", "subExpression": {"argumentTypes": null, "id": 2179, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2172, "src": "4597:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 2181, "nodeType": "ExpressionStatement", "src": "4597:3:8"}, "nodeType": "ForStatement", "src": "4560:230:8"}, {"expression": {"argumentTypes": null, "id": 2204, "name": "maxSpeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2168, "src": "4807:8:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "functionReturnParameters": 2166, "id": 2205, "nodeType": "Return", "src": "4800:15:8"}]}, "documentation": null, "id": 2207, "implemented": true, "kind": "function", "modifiers": [], "name": "calcMaxSpeed", "nodeType": "FunctionDefinition", "parameters": {"id": 2163, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 2162, "name": "playerCards", "nodeType": "VariableDeclaration", "scope": 2207, "src": "4462:31:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_memory_$dyn_memory_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard[]"}, "typeName": {"baseType": {"contractScope": null, "id": 2160, "name": "PlayerCard", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1773, "src": "4462:10:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerCard_$1773_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard"}}, "id": 2161, "length": null, "nodeType": "ArrayTypeName", "src": "4462:12:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PlayerCard_$1773_storage_$dyn_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerCard[]"}}, "value": null, "visibility": "internal"}], "src": "4461:33:8"}, "returnParameters": {"id": 2166, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 2165, "name": "", "nodeType": "VariableDeclaration", "scope": 2207, "src": "4511:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 2164, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4511:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "value": null, "visibility": "internal"}], "src": "4510:8:8"}, "scope": 2220, "src": "4440:382:8", "stateMutability": "nonpayable", "superFunction": null, "visibility": "public"}, {"body": {"id": 2218, "nodeType": "Block", "src": "4907:43:8", "statements": [{"expression": {"argumentTypes": null, "baseExpression": {"argumentTypes": null, "id": 2214, "name": "playerDecks", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1789, "src": "4924:11:8", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_struct$_PlayerDeck_$1779_storage_$", "typeString": "mapping(address => struct PlayerCardsRandom.PlayerDeck storage ref)"}}, "id": 2216, "indexExpression": {"argumentTypes": null, "id": 2215, "name": "player", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2209, "src": "4936:6:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4924:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage", "typeString": "struct PlayerCardsRandom.PlayerDeck storage ref"}}, "functionReturnParameters": 2213, "id": 2217, "nodeType": "Return", "src": "4917:26:8"}]}, "documentation": null, "id": 2219, "implemented": true, "kind": "function", "modifiers": [], "name": "getPlayerDeck", "nodeType": "FunctionDefinition", "parameters": {"id": 2210, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 2209, "name": "player", "nodeType": "VariableDeclaration", "scope": 2219, "src": "4851:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 2208, "name": "address", "nodeType": "ElementaryTypeName", "src": "4851:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "4850:16:8"}, "returnParameters": {"id": 2213, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 2212, "name": "", "nodeType": "VariableDeclaration", "scope": 2219, "src": "4888:17:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_memory_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck"}, "typeName": {"contractScope": null, "id": 2211, "name": "PlayerDeck", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 1779, "src": "4888:10:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PlayerDeck_$1779_storage_ptr", "typeString": "struct PlayerCardsRandom.PlayerDeck"}}, "value": null, "visibility": "internal"}], "src": "4887:19:8"}, "scope": 2220, "src": "4828:122:8", "stateMutability": "view", "superFunction": null, "visibility": "public"}], "scope": 2221, "src": "154:4798:8"}], "src": "0:4952:8"}, "id": 8}}}